// Compiled shader for PC, Mac & Linux Standalone, uncompressed size: 3452.2KB

// Skipping shader variants that would not be included into build of current scene.

Shader "Standard" {
Properties {
 _Color ("Color", Color) = (1.000000,1.000000,1.000000,1.000000)
 _MainTex ("Albedo", 2D) = "white" { }
 _Cutoff ("Alpha Cutoff", Range(0.000000,1.000000)) = 0.500000
 _Glossiness ("Smoothness", Range(0.000000,1.000000)) = 0.500000
 _GlossMapScale ("Smoothness Scale", Range(0.000000,1.000000)) = 1.000000
[Enum(Metallic Alpha,0,Albedo Alpha,1)]  _SmoothnessTextureChannel ("Smoothness texture channel", Float) = 0.000000
[Gamma]  _Metallic ("Metallic", Range(0.000000,1.000000)) = 0.000000
 _MetallicGlossMap ("Metallic", 2D) = "white" { }
[ToggleOff]  _SpecularHighlights ("Specular Highlights", Float) = 1.000000
[ToggleOff]  _GlossyReflections ("Glossy Reflections", Float) = 1.000000
 _BumpScale ("Scale", Float) = 1.000000
 _BumpMap ("Normal Map", 2D) = "bump" { }
 _Parallax ("Height Scale", Range(0.005000,0.080000)) = 0.020000
 _ParallaxMap ("Height Map", 2D) = "black" { }
 _OcclusionStrength ("Strength", Range(0.000000,1.000000)) = 1.000000
 _OcclusionMap ("Occlusion", 2D) = "white" { }
 _EmissionColor ("Color", Color) = (0.000000,0.000000,0.000000,1.000000)
 _EmissionMap ("Emission", 2D) = "white" { }
 _DetailMask ("Detail Mask", 2D) = "white" { }
 _DetailAlbedoMap ("Detail Albedo x2", 2D) = "grey" { }
 _DetailNormalMapScale ("Scale", Float) = 1.000000
 _DetailNormalMap ("Normal Map", 2D) = "bump" { }
[Enum(UV0,0,UV1,1)]  _UVSec ("UV Set for secondary textures", Float) = 0.000000
[HideInInspector]  _Mode ("__mode", Float) = 0.000000
[HideInInspector]  _SrcBlend ("__src", Float) = 1.000000
[HideInInspector]  _DstBlend ("__dst", Float) = 0.000000
[HideInInspector]  _ZWrite ("__zw", Float) = 1.000000
}
SubShader { 
 LOD 300
 Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }


 // Stats for Vertex shader:
 //       metal : 37 avg math (25..64), 1 avg branch (1..2)
 //      opengl : 177 avg math (147..200), 7 avg texture (5..9), 11 avg branch (6..15)
 // Stats for Fragment shader:
 //       metal : 177 avg math (147..200), 7 avg texture (5..9), 11 avg branch (6..15)
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite [_ZWrite]
  Blend [_SrcBlend] [_DstBlend]
  GpuProgramID 61372
Program "vp" {
SubProgram "opengl " {
// Stats: 195 math, 7 textures, 15 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_12;
  n_12 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_16;
  vec4 ambientOrLightmapUV_17;
  ambientOrLightmapUV_17 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_18;
  ambient_18 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_18 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_16.xyzz * tmpvar_16.yzzx);
  x1_19.x = dot (unity_SHBr, tmpvar_20);
  x1_19.y = dot (unity_SHBg, tmpvar_20);
  x1_19.z = dot (unity_SHBb, tmpvar_20);
  ambient_18 = (ambient_18 + (x1_19 + (unity_SHC.xyz * 
    ((tmpvar_16.x * tmpvar_16.x) - (tmpvar_16.y * tmpvar_16.y))
  )));
  ambientOrLightmapUV_17.xyz = ambient_18;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = n_12;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_17;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  float tmpvar_10;
  tmpvar_10 = (1.0 - _Glossiness);
  vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_14;
  ambient_14 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_15;
  ambient_contrib_15 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_16;
    tmpvar_16.w = 1.0;
    tmpvar_16.xyz = tmpvar_6;
    vec3 x1_17;
    vec3 texCoord_18;
    vec3 tmpvar_19;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_20;
      tmpvar_20.w = 1.0;
      tmpvar_20.xyz = xlv_TEXCOORD8;
      tmpvar_19 = (unity_ProbeVolumeWorldToObject * tmpvar_20).xyz;
    } else {
      tmpvar_19 = xlv_TEXCOORD8;
    };
    vec3 tmpvar_21;
    tmpvar_21 = ((tmpvar_19 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_18.yz = tmpvar_21.yz;
    texCoord_18.x = (tmpvar_21.x * 0.25);
    float tmpvar_22;
    float tmpvar_23;
    tmpvar_23 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_22 = clamp (texCoord_18.x, tmpvar_23, (0.25 - tmpvar_23));
    texCoord_18.x = tmpvar_22;
    vec4 tmpvar_24;
    tmpvar_24 = texture3D (unity_ProbeVolumeSH, texCoord_18);
    texCoord_18.x = (tmpvar_22 + 0.25);
    vec4 tmpvar_25;
    tmpvar_25 = texture3D (unity_ProbeVolumeSH, texCoord_18);
    texCoord_18.x = (tmpvar_22 + 0.5);
    x1_17.x = dot (tmpvar_24, tmpvar_16);
    x1_17.y = dot (tmpvar_25, tmpvar_16);
    x1_17.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_18), tmpvar_16);
    ambient_contrib_15 = x1_17;
  } else {
    vec4 tmpvar_26;
    tmpvar_26.w = 1.0;
    tmpvar_26.xyz = tmpvar_6;
    vec3 x_27;
    x_27.x = dot (unity_SHAr, tmpvar_26);
    x_27.y = dot (unity_SHAg, tmpvar_26);
    x_27.z = dot (unity_SHAb, tmpvar_26);
    ambient_contrib_15 = x_27;
  };
  vec3 tmpvar_28;
  tmpvar_28 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_15));
  ambient_14 = tmpvar_28;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_14 = max (((1.055 * 
      pow (max (tmpvar_28, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_13 = (ambient_14 * tmpvar_8);
  tmpvar_12 = vec3(0.0, 0.0, 0.0);
  vec3 specular_29;
  vec3 worldRefl_30;
  worldRefl_30 = tmpvar_11;
  vec3 worldPos_31;
  worldPos_31 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_32;
    tmpvar_32 = normalize(tmpvar_11);
    vec3 tmpvar_33;
    tmpvar_33 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_32);
    vec3 tmpvar_34;
    tmpvar_34 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_32);
    bvec3 tmpvar_35;
    tmpvar_35 = greaterThan (tmpvar_32, vec3(0.0, 0.0, 0.0));
    float tmpvar_36;
    if (tmpvar_35.x) {
      tmpvar_36 = tmpvar_33.x;
    } else {
      tmpvar_36 = tmpvar_34.x;
    };
    float tmpvar_37;
    if (tmpvar_35.y) {
      tmpvar_37 = tmpvar_33.y;
    } else {
      tmpvar_37 = tmpvar_34.y;
    };
    float tmpvar_38;
    if (tmpvar_35.z) {
      tmpvar_38 = tmpvar_33.z;
    } else {
      tmpvar_38 = tmpvar_34.z;
    };
    worldPos_31 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_30 = (worldPos_31 + (tmpvar_32 * min (
      min (tmpvar_36, tmpvar_37)
    , tmpvar_38)));
  };
  vec4 tmpvar_39;
  tmpvar_39.xyz = worldRefl_30;
  tmpvar_39.w = ((tmpvar_10 * (1.7 - 
    (0.7 * tmpvar_10)
  )) * 6.0);
  vec4 tmpvar_40;
  tmpvar_40 = textureCubeLod (unity_SpecCube0, worldRefl_30, tmpvar_39.w);
  vec3 tmpvar_41;
  tmpvar_41 = ((unity_SpecCube0_HDR.x * pow (tmpvar_40.w, unity_SpecCube0_HDR.y)) * tmpvar_40.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_42;
    worldRefl_42 = tmpvar_11;
    vec3 worldPos_43;
    worldPos_43 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_44;
      tmpvar_44 = normalize(tmpvar_11);
      vec3 tmpvar_45;
      tmpvar_45 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_44);
      vec3 tmpvar_46;
      tmpvar_46 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_44);
      bvec3 tmpvar_47;
      tmpvar_47 = greaterThan (tmpvar_44, vec3(0.0, 0.0, 0.0));
      float tmpvar_48;
      if (tmpvar_47.x) {
        tmpvar_48 = tmpvar_45.x;
      } else {
        tmpvar_48 = tmpvar_46.x;
      };
      float tmpvar_49;
      if (tmpvar_47.y) {
        tmpvar_49 = tmpvar_45.y;
      } else {
        tmpvar_49 = tmpvar_46.y;
      };
      float tmpvar_50;
      if (tmpvar_47.z) {
        tmpvar_50 = tmpvar_45.z;
      } else {
        tmpvar_50 = tmpvar_46.z;
      };
      worldPos_43 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_42 = (worldPos_43 + (tmpvar_44 * min (
        min (tmpvar_48, tmpvar_49)
      , tmpvar_50)));
    };
    vec4 tmpvar_51;
    tmpvar_51.xyz = worldRefl_42;
    tmpvar_51.w = ((tmpvar_10 * (1.7 - 
      (0.7 * tmpvar_10)
    )) * 6.0);
    vec4 tmpvar_52;
    tmpvar_52 = textureCubeLod (unity_SpecCube1, worldRefl_42, tmpvar_51.w);
    specular_29 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_52.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_52.xyz), tmpvar_41, unity_SpecCube0_BoxMin.www);
  } else {
    specular_29 = tmpvar_41;
  };
  tmpvar_12 = (specular_29 * tmpvar_8);
  vec3 viewDir_53;
  viewDir_53 = -(tmpvar_7);
  float surfaceReduction_54;
  float specularTerm_55;
  float tmpvar_56;
  tmpvar_56 = (1.0 - _Glossiness);
  vec3 tmpvar_57;
  vec3 inVec_58;
  inVec_58 = (_WorldSpaceLightPos0.xyz + viewDir_53);
  tmpvar_57 = (inVec_58 * inversesqrt(max (0.001, 
    dot (inVec_58, inVec_58)
  )));
  float tmpvar_59;
  tmpvar_59 = max (0.0, dot (tmpvar_6, tmpvar_57));
  float tmpvar_60;
  tmpvar_60 = max (0.0, dot (tmpvar_6, viewDir_53));
  float tmpvar_61;
  tmpvar_61 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_57));
  float tmpvar_62;
  tmpvar_62 = (tmpvar_56 * tmpvar_56);
  float tmpvar_63;
  tmpvar_63 = (tmpvar_56 * tmpvar_56);
  float tmpvar_64;
  tmpvar_64 = (tmpvar_63 * tmpvar_63);
  float tmpvar_65;
  tmpvar_65 = (((tmpvar_59 * tmpvar_59) * (tmpvar_64 - 1.0)) + 1.0);
  float x_66;
  x_66 = (1.0 - tmpvar_9);
  float x_67;
  x_67 = (1.0 - tmpvar_60);
  float tmpvar_68;
  tmpvar_68 = (0.5 + ((2.0 * tmpvar_61) * (tmpvar_61 * tmpvar_56)));
  float tmpvar_69;
  tmpvar_69 = ((1.0 + (
    (tmpvar_68 - 1.0)
   * 
    ((x_66 * x_66) * ((x_66 * x_66) * x_66))
  )) * (1.0 + (
    (tmpvar_68 - 1.0)
   * 
    ((x_67 * x_67) * ((x_67 * x_67) * x_67))
  )));
  float tmpvar_70;
  tmpvar_70 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_60 * (1.0 - tmpvar_62))
     + tmpvar_62)) + (tmpvar_60 * (
      (tmpvar_9 * (1.0 - tmpvar_62))
     + tmpvar_62))) + 1e-05)
  ) * (tmpvar_64 / 
    (((3.141593 * tmpvar_65) * tmpvar_65) + 1e-07)
  )) * 0.7853982);
  specularTerm_55 = tmpvar_70;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_55 = sqrt(max (0.0001, tmpvar_70));
  };
  float tmpvar_71;
  tmpvar_71 = max (0.0, (specularTerm_55 * tmpvar_9));
  specularTerm_55 = tmpvar_71;
  float tmpvar_72;
  tmpvar_72 = (tmpvar_69 * tmpvar_9);
  float tmpvar_73;
  tmpvar_73 = (tmpvar_56 * tmpvar_56);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_54 = (1.0 - ((0.28 * tmpvar_73) * tmpvar_56));
  } else {
    surfaceReduction_54 = (1.0/(((tmpvar_73 * tmpvar_73) + 1.0)));
  };
  float tmpvar_74;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_74 = 1.0;
  } else {
    tmpvar_74 = 0.0;
  };
  specularTerm_55 = (tmpvar_71 * tmpvar_74);
  float x_75;
  x_75 = (1.0 - tmpvar_61);
  float x_76;
  x_76 = (1.0 - tmpvar_60);
  vec3 tmpvar_77;
  tmpvar_77 = (((tmpvar_3 * 
    (tmpvar_13 + (_LightColor0.xyz * tmpvar_72))
  ) + (
    (specularTerm_55 * _LightColor0.xyz)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_75 * x_75) * (
      (x_75 * x_75)
     * x_75))))
  )) + ((surfaceReduction_54 * tmpvar_12) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_76 * x_76) * ((x_76 * x_76) * x_76))
  ))));
  vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = tmpvar_77;
  c_1.w = tmpvar_78.w;
  c_1.xyz = tmpvar_77;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_79;
  xlat_varoutput_79.xyz = c_1.xyz;
  xlat_varoutput_79.w = 1.0;
  gl_FragData[0] = xlat_varoutput_79;
}


#endif
"
}
SubProgram "metal " {
// Stats: 31 math, 2 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 290
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
VectorHalf 240 [unity_ColorSpaceLuminance] 4
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float3 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_7 = tmpvar_8.xyz;
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_19);
  half3 normalWorld_20;
  normalWorld_20 = half3(tmpvar_19);
  half4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 ambient_22;
  ambient_22 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_23;
  tmpvar_23 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_23) {
    ambient_22 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_24;
  half4 tmpvar_25;
  tmpvar_25 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_24.x = dot (_mtl_u.unity_SHBr, tmpvar_25);
  x1_24.y = dot (_mtl_u.unity_SHBg, tmpvar_25);
  x1_24.z = dot (_mtl_u.unity_SHBb, tmpvar_25);
  ambient_22 = (ambient_22 + (x1_24 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  ambientOrLightmapUV_21.xyz = ambient_22;
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_7;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec4 u_xlat6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat15;
float u_xlat16;
float u_xlat17;
float u_xlat28;
float u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
float u_xlat39;
float u_xlat40;
float u_xlat41;
bool u_xlatb41;
float u_xlat42;
float u_xlat43;
mediump float u_xlat16_43;
float u_xlat44;
bool u_xlatb44;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
    u_xlat40 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat2.xyz = vec3(u_xlat40) * vs_TEXCOORD4.xyz;
    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat3.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;
    u_xlat42 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat4.x = (-_OcclusionStrength) + 1.0;
    u_xlat4.x = u_xlat10_4.y * _OcclusionStrength + u_xlat4.x;
    u_xlat17 = (-_Glossiness) + 1.0;
    u_xlat30.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat30.x = u_xlat30.x + u_xlat30.x;
    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat30.xxx) + u_xlat3.xyz;
    u_xlatb30 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb30){
        u_xlatb30 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb30)) ? u_xlat6.xyz : vs_TEXCOORD8.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat30.x = u_xlat6.y * 0.25;
        u_xlat43 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat44 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat30.x = max(u_xlat43, u_xlat30.x);
        u_xlat6.x = min(u_xlat44, u_xlat30.x);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat2.w = 1.0;
        u_xlat7.x = dot(u_xlat10_7, u_xlat2);
        u_xlat7.y = dot(u_xlat10_8, u_xlat2);
        u_xlat7.z = dot(u_xlat10_6, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat7.x = dot(unity_SHAr, u_xlat2);
        u_xlat7.y = dot(unity_SHAg, u_xlat2);
        u_xlat7.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb41 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat7.xyz = log2(u_xlat6.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat6.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat6.xyz;
    u_xlatb30 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb30){
        u_xlat30.x = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat30.x = inversesqrt(u_xlat30.x);
        u_xlat7.xyz = u_xlat30.xxx * u_xlat5.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat30.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat30.x = min(u_xlat8.z, u_xlat30.x);
        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * u_xlat30.xxx + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat30.x = (-u_xlat17) * 0.699999988 + 1.70000005;
    u_xlat30.x = u_xlat30.x * u_xlat17;
    u_xlat30.x = u_xlat30.x * 6.0;
    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat30.x);
    u_xlat16_43 = log2(u_xlat10_7.w);
    u_xlat43 = u_xlat16_43 * unity_SpecCube0_HDR.y;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb44){
        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb44){
            u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat44 = inversesqrt(u_xlat44);
            u_xlat9.xyz = vec3(u_xlat44) * u_xlat5.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
            u_xlat44 = min(u_xlat10.z, u_xlat44);
            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat30.x);
        u_xlat16_30 = log2(u_xlat10_5.w);
        u_xlat30.x = u_xlat16_30 * unity_SpecCube1_HDR.y;
        u_xlat30.x = exp2(u_xlat30.x);
        u_xlat30.x = u_xlat30.x * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * u_xlat30.xxx;
        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat5.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = u_xlat4.xxx * u_xlat8.xyz;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat40) + _WorldSpaceLightPos0.xyz;
    u_xlat40 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat40 = max(u_xlat40, 0.00100000005);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat7.xyz = vec3(u_xlat40) * u_xlat7.xyz;
    u_xlat40 = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat40 = max(u_xlat40, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat28 = u_xlat17 * u_xlat17;
    u_xlat3.x = (-u_xlat17) * u_xlat17 + 1.0;
    u_xlat16 = u_xlat2.x * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat42 * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat42 * u_xlat16 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat16 = u_xlat28 * u_xlat28;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat30.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
    u_xlat40 = u_xlat40 * u_xlat30.x + 1.0;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat40 = u_xlat40 * 3.14159274 + 1.00000001e-07;
    u_xlat40 = u_xlat16 / u_xlat40;
    u_xlat16 = (-u_xlat42) + 1.0;
    u_xlat29 = u_xlat16 * u_xlat16;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat16 = u_xlat16 * u_xlat29;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat29 = u_xlat2.x * u_xlat2.x;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat2.x = u_xlat2.x * u_xlat29;
    u_xlat29 = u_xlat2.y * u_xlat2.y;
    u_xlat29 = dot(vec2(u_xlat29), vec2(u_xlat17));
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat16 = u_xlat29 * u_xlat16 + 1.0;
    u_xlat29 = u_xlat29 * u_xlat2.x + 1.0;
    u_xlat16 = u_xlat29 * u_xlat16;
    u_xlat40 = u_xlat40 * u_xlat3.x;
    u_xlat40 = u_xlat40 * 0.785398185;
    u_xlat3.x = max(u_xlat40, 9.99999975e-05);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat40 = (u_xlatb41) ? u_xlat3.x : u_xlat40;
    u_xlat40 = u_xlat42 * u_xlat40;
    u_xlat40 = max(u_xlat40, 0.0);
    u_xlat3.x = u_xlat42 * u_xlat16;
    u_xlat28 = u_xlat28 * u_xlat17;
    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;
    u_xlat16 = float(1.0) / u_xlat30.y;
    u_xlat28 = (u_xlatb41) ? u_xlat28 : u_xlat16;
    u_xlat41 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb41 = u_xlat41!=0.0;
    u_xlat41 = u_xlatb41 ? 1.0 : float(0.0);
    u_xlat40 = u_xlat40 * u_xlat41;
    u_xlat39 = (-u_xlat39) + _Glossiness;
    u_xlat39 = u_xlat39 + 1.0;
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
    u_xlat3.xyz = u_xlat6.xyz * u_xlat4.xxx + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat40) * _LightColor0.xyz;
    u_xlat40 = (-u_xlat2.y) + 1.0;
    u_xlat15.x = u_xlat40 * u_xlat40;
    u_xlat15.x = u_xlat15.x * u_xlat15.x;
    u_xlat40 = u_xlat40 * u_xlat15.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat28);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat39);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat15.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 174 math, 6 textures, 12 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 ambientOrLightmapUV_26;
  ambientOrLightmapUV_26.xy = vec2(0.0, 0.0);
  ambientOrLightmapUV_26.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_26;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_11 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_12.w) * tmpvar_12.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_6, (tmpvar_13.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_13.w));
  tmpvar_11 = (tmpvar_11 * tmpvar_8);
  tmpvar_10 = vec3(0.0, 0.0, 0.0);
  float tmpvar_14;
  vec3 tmpvar_15;
  tmpvar_14 = (1.0 - _Glossiness);
  tmpvar_15 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 originalReflUVW_16;
  vec3 specular_17;
  originalReflUVW_16 = tmpvar_15;
  vec3 worldRefl_18;
  worldRefl_18 = tmpvar_15;
  vec3 worldPos_19;
  worldPos_19 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_20;
    tmpvar_20 = normalize(tmpvar_15);
    vec3 tmpvar_21;
    tmpvar_21 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_20);
    vec3 tmpvar_22;
    tmpvar_22 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_20);
    bvec3 tmpvar_23;
    tmpvar_23 = greaterThan (tmpvar_20, vec3(0.0, 0.0, 0.0));
    float tmpvar_24;
    if (tmpvar_23.x) {
      tmpvar_24 = tmpvar_21.x;
    } else {
      tmpvar_24 = tmpvar_22.x;
    };
    float tmpvar_25;
    if (tmpvar_23.y) {
      tmpvar_25 = tmpvar_21.y;
    } else {
      tmpvar_25 = tmpvar_22.y;
    };
    float tmpvar_26;
    if (tmpvar_23.z) {
      tmpvar_26 = tmpvar_21.z;
    } else {
      tmpvar_26 = tmpvar_22.z;
    };
    worldPos_19 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_18 = (worldPos_19 + (tmpvar_20 * min (
      min (tmpvar_24, tmpvar_25)
    , tmpvar_26)));
  };
  tmpvar_15 = worldRefl_18;
  vec4 tmpvar_27;
  tmpvar_27.xyz = worldRefl_18;
  tmpvar_27.w = ((tmpvar_14 * (1.7 - 
    (0.7 * tmpvar_14)
  )) * 6.0);
  vec4 tmpvar_28;
  tmpvar_28 = textureCubeLod (unity_SpecCube0, worldRefl_18, tmpvar_27.w);
  vec3 tmpvar_29;
  tmpvar_29 = ((unity_SpecCube0_HDR.x * pow (tmpvar_28.w, unity_SpecCube0_HDR.y)) * tmpvar_28.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_30;
    worldRefl_30 = originalReflUVW_16;
    vec3 worldPos_31;
    worldPos_31 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_32;
      tmpvar_32 = normalize(originalReflUVW_16);
      vec3 tmpvar_33;
      tmpvar_33 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_32);
      vec3 tmpvar_34;
      tmpvar_34 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_32);
      bvec3 tmpvar_35;
      tmpvar_35 = greaterThan (tmpvar_32, vec3(0.0, 0.0, 0.0));
      float tmpvar_36;
      if (tmpvar_35.x) {
        tmpvar_36 = tmpvar_33.x;
      } else {
        tmpvar_36 = tmpvar_34.x;
      };
      float tmpvar_37;
      if (tmpvar_35.y) {
        tmpvar_37 = tmpvar_33.y;
      } else {
        tmpvar_37 = tmpvar_34.y;
      };
      float tmpvar_38;
      if (tmpvar_35.z) {
        tmpvar_38 = tmpvar_33.z;
      } else {
        tmpvar_38 = tmpvar_34.z;
      };
      worldPos_31 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_30 = (worldPos_31 + (tmpvar_32 * min (
        min (tmpvar_36, tmpvar_37)
      , tmpvar_38)));
    };
    tmpvar_15 = worldRefl_30;
    vec4 tmpvar_39;
    tmpvar_39.xyz = worldRefl_30;
    tmpvar_39.w = ((tmpvar_14 * (1.7 - 
      (0.7 * tmpvar_14)
    )) * 6.0);
    vec4 tmpvar_40;
    tmpvar_40 = textureCubeLod (unity_SpecCube1, worldRefl_30, tmpvar_39.w);
    specular_17 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_40.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_40.xyz), tmpvar_29, unity_SpecCube0_BoxMin.www);
  } else {
    specular_17 = tmpvar_29;
  };
  tmpvar_10 = (specular_17 * tmpvar_8);
  vec3 viewDir_41;
  viewDir_41 = -(tmpvar_7);
  float surfaceReduction_42;
  float specularTerm_43;
  float tmpvar_44;
  tmpvar_44 = (1.0 - _Glossiness);
  vec3 tmpvar_45;
  vec3 inVec_46;
  inVec_46 = (_WorldSpaceLightPos0.xyz + viewDir_41);
  tmpvar_45 = (inVec_46 * inversesqrt(max (0.001, 
    dot (inVec_46, inVec_46)
  )));
  float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_6, tmpvar_45));
  float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, viewDir_41));
  float tmpvar_49;
  tmpvar_49 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_45));
  float tmpvar_50;
  tmpvar_50 = (tmpvar_44 * tmpvar_44);
  float tmpvar_51;
  tmpvar_51 = (tmpvar_44 * tmpvar_44);
  float tmpvar_52;
  tmpvar_52 = (tmpvar_51 * tmpvar_51);
  float tmpvar_53;
  tmpvar_53 = (((tmpvar_47 * tmpvar_47) * (tmpvar_52 - 1.0)) + 1.0);
  float x_54;
  x_54 = (1.0 - tmpvar_9);
  float x_55;
  x_55 = (1.0 - tmpvar_48);
  float tmpvar_56;
  tmpvar_56 = (0.5 + ((2.0 * tmpvar_49) * (tmpvar_49 * tmpvar_44)));
  float tmpvar_57;
  tmpvar_57 = ((1.0 + (
    (tmpvar_56 - 1.0)
   * 
    ((x_54 * x_54) * ((x_54 * x_54) * x_54))
  )) * (1.0 + (
    (tmpvar_56 - 1.0)
   * 
    ((x_55 * x_55) * ((x_55 * x_55) * x_55))
  )));
  float tmpvar_58;
  tmpvar_58 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_48 * (1.0 - tmpvar_50))
     + tmpvar_50)) + (tmpvar_48 * (
      (tmpvar_9 * (1.0 - tmpvar_50))
     + tmpvar_50))) + 1e-05)
  ) * (tmpvar_52 / 
    (((3.141593 * tmpvar_53) * tmpvar_53) + 1e-07)
  )) * 0.7853982);
  specularTerm_43 = tmpvar_58;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_43 = sqrt(max (0.0001, tmpvar_58));
  };
  float tmpvar_59;
  tmpvar_59 = max (0.0, (specularTerm_43 * tmpvar_9));
  specularTerm_43 = tmpvar_59;
  float tmpvar_60;
  tmpvar_60 = (tmpvar_57 * tmpvar_9);
  float tmpvar_61;
  tmpvar_61 = (tmpvar_44 * tmpvar_44);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_42 = (1.0 - ((0.28 * tmpvar_61) * tmpvar_44));
  } else {
    surfaceReduction_42 = (1.0/(((tmpvar_61 * tmpvar_61) + 1.0)));
  };
  float tmpvar_62;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_62 = 1.0;
  } else {
    tmpvar_62 = 0.0;
  };
  specularTerm_43 = (tmpvar_59 * tmpvar_62);
  float x_63;
  x_63 = (1.0 - tmpvar_49);
  float x_64;
  x_64 = (1.0 - tmpvar_48);
  vec3 tmpvar_65;
  tmpvar_65 = (((tmpvar_3 * 
    (tmpvar_11 + (_LightColor0.xyz * tmpvar_60))
  ) + (
    (specularTerm_43 * _LightColor0.xyz)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_63 * x_63) * (
      (x_63 * x_63)
     * x_63))))
  )) + ((surfaceReduction_42 * tmpvar_10) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_64 * x_64) * ((x_64 * x_64) * x_64))
  ))));
  vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = tmpvar_65;
  c_1.w = tmpvar_66.w;
  c_1.xyz = tmpvar_65;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "metal " {
// Stats: 25 math, 1 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 274
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Matrix 144 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [unity_WorldTransformParams]
Vector 224 [unity_DynamicLightmapST]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  float3 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  float4 tmpvar_11;
  float4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_11 = (_mtl_u.glstate_matrix_mvp * tmpvar_12);
  float4 texcoord_13;
  texcoord_13.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_14;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_15;
  float3 n_16;
  n_16 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_15 = half3(n_16);
  float3 norm_17;
  norm_17 = float3(tmpvar_1);
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].x;
  v_18.y = _mtl_u.unity_WorldToObject[1].x;
  v_18.z = _mtl_u.unity_WorldToObject[2].x;
  v_18.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].y;
  v_19.y = _mtl_u.unity_WorldToObject[1].y;
  v_19.z = _mtl_u.unity_WorldToObject[2].y;
  v_19.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].z;
  v_20.y = _mtl_u.unity_WorldToObject[1].z;
  v_20.z = _mtl_u.unity_WorldToObject[2].z;
  v_20.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  float3 dir_22;
  dir_22 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_23;
  tmpvar_23[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_23[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_23[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = float(tmpvar_4.w);
  half3 normal_25;
  normal_25 = half3(tmpvar_21);
  half3 tangent_26;
  tangent_26 = half3(tmpvar_24.xyz);
  half tangentSign_27;
  tangentSign_27 = half(tmpvar_24.w);
  half xlat_varsign_28;
  float tmpvar_29;
  tmpvar_29 = ((float)tangentSign_27 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_28 = half(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * xlat_varsign_28);
  half3x3 tmpvar_31;
  tmpvar_31[0].x = tangent_26.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = normal_25.x;
  tmpvar_31[1].x = tangent_26.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = normal_25.y;
  tmpvar_31[2].x = tangent_26.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = normal_25.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_31);
  float3 v_32;
  v_32.x = tangentToWorld_5[0].x;
  v_32.y = tangentToWorld_5[1].x;
  v_32.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].y;
  v_33.y = tangentToWorld_5[1].y;
  v_33.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].z;
  v_34.y = tangentToWorld_5[1].z;
  v_34.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_34);
  half4 ambientOrLightmapUV_35;
  ambientOrLightmapUV_35.xy = half2(float2(0.0, 0.0));
  ambientOrLightmapUV_35.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_11;
  _mtl_o.xlv_TEXCOORD0 = texcoord_13;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_15;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_35;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
float u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
vec3 u_xlat10;
bvec3 u_xlatb11;
vec3 u_xlat14;
float u_xlat15;
vec3 u_xlat16;
mediump float u_xlat16_16;
float u_xlat26;
float u_xlat27;
float u_xlat36;
float u_xlat37;
float u_xlat38;
float u_xlat39;
float u_xlat41;
mediump float u_xlat16_41;
bool u_xlatb41;
float u_xlat42;
mediump float u_xlat16_42;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat36 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
    u_xlat37 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat2.xyz = vec3(u_xlat37) * vs_TEXCOORD4.xyz;
    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat3.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;
    u_xlat2.w = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat39 = (-_OcclusionStrength) + 1.0;
    u_xlat39 = u_xlat10_4.y * _OcclusionStrength + u_xlat39;
    u_xlat4 = (-_Glossiness) + 1.0;
    u_xlat16.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xyz = u_xlat2.xyz * (-u_xlat16.xxx) + u_xlat3.xyz;
    u_xlat10_5 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat41 = u_xlat10_5.w * unity_DynamicLightmap_HDR.x;
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat41);
    u_xlat5.xyz = log2(u_xlat5.xyz);
    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat5.xyz = exp2(u_xlat5.xyz);
    u_xlat10_6 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat41 = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat41 = u_xlat41 + 0.5;
    u_xlat5.xyz = vec3(u_xlat41) * u_xlat5.xyz;
    u_xlat16_41 = max(u_xlat10_6.w, 9.99999975e-05);
    u_xlat5.xyz = u_xlat5.xyz / vec3(u_xlat16_41);
    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb41){
        u_xlat41 = dot(u_xlat16.xyz, u_xlat16.xyz);
        u_xlat41 = inversesqrt(u_xlat41);
        u_xlat6.xyz = u_xlat16.xyz * vec3(u_xlat41);
        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
        u_xlat7.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
        u_xlat7.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
        u_xlat7.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
        u_xlat41 = min(u_xlat7.y, u_xlat7.x);
        u_xlat41 = min(u_xlat7.z, u_xlat41);
        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat41) + u_xlat7.xyz;
    } else {
        u_xlat6.xyz = u_xlat16.xyz;
    //ENDIF
    }
    u_xlat41 = (-u_xlat4) * 0.699999988 + 1.70000005;
    u_xlat41 = u_xlat4 * u_xlat41;
    u_xlat41 = u_xlat41 * 6.0;
    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat41);
    u_xlat16_42 = log2(u_xlat10_6.w);
    u_xlat42 = u_xlat16_42 * unity_SpecCube0_HDR.y;
    u_xlat42 = exp2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat42);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat16.xyz, u_xlat16.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat8.xyz = u_xlat16.xyz * vec3(u_xlat43);
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
            u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat43 = min(u_xlat9.y, u_xlat9.x);
            u_xlat43 = min(u_xlat9.z, u_xlat43);
            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat16.xyz = u_xlat8.xyz * vec3(u_xlat43) + u_xlat9.xyz;
        //ENDIF
        }
        u_xlat10_8 = textureLod(unity_SpecCube1, u_xlat16.xyz, u_xlat41);
        u_xlat16_16 = log2(u_xlat10_8.w);
        u_xlat16.x = u_xlat16_16 * unity_SpecCube1_HDR.y;
        u_xlat16.x = exp2(u_xlat16.x);
        u_xlat16.x = u_xlat16.x * unity_SpecCube1_HDR.x;
        u_xlat16.xyz = u_xlat10_8.xyz * u_xlat16.xxx;
        u_xlat6.xyz = vec3(u_xlat42) * u_xlat10_6.xyz + (-u_xlat16.xyz);
        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16.xyz;
    //ENDIF
    }
    u_xlat16.xyz = vec3(u_xlat39) * u_xlat7.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat37) + _WorldSpaceLightPos0.xyz;
    u_xlat37 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat37 = max(u_xlat37, 0.00100000005);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz;
    u_xlat37 = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat37 = max(u_xlat37, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat26 = u_xlat4 * u_xlat4;
    u_xlat3.x = (-u_xlat4) * u_xlat4 + 1.0;
    u_xlat15 = u_xlat2.x * u_xlat3.x + u_xlat26;
    u_xlat3.x = u_xlat2.w * u_xlat3.x + u_xlat26;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat2.w * u_xlat15 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat15 = u_xlat26 * u_xlat26;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat6.xy = vec2(u_xlat26) * vec2(u_xlat26) + vec2(-1.0, 1.0);
    u_xlat37 = u_xlat37 * u_xlat6.x + 1.0;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat37 = u_xlat37 * 3.14159274 + 1.00000001e-07;
    u_xlat37 = u_xlat15 / u_xlat37;
    u_xlat15 = (-u_xlat2.w) + 1.0;
    u_xlat27 = u_xlat15 * u_xlat15;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat15 = u_xlat15 * u_xlat27;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat27 = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat2.x = u_xlat2.x * u_xlat27;
    u_xlat27 = u_xlat2.y * u_xlat2.y;
    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat4));
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat15 = u_xlat27 * u_xlat15 + 1.0;
    u_xlat27 = u_xlat27 * u_xlat2.x + 1.0;
    u_xlat15 = u_xlat27 * u_xlat15;
    u_xlat37 = u_xlat37 * u_xlat3.x;
    u_xlat37 = u_xlat37 * 0.785398185;
    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat27 = max(u_xlat37, 9.99999975e-05);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat37 = (u_xlatb3) ? u_xlat27 : u_xlat37;
    u_xlat37 = u_xlat2.w * u_xlat37;
    u_xlat37 = max(u_xlat37, 0.0);
    u_xlat38 = u_xlat2.w * u_xlat15;
    u_xlat26 = u_xlat26 * u_xlat4;
    u_xlat26 = (-u_xlat26) * 0.280000001 + 1.0;
    u_xlat15 = float(1.0) / u_xlat6.y;
    u_xlat26 = (u_xlatb3) ? u_xlat26 : u_xlat15;
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat37 = u_xlat37 * u_xlat3.x;
    u_xlat36 = (-u_xlat36) + _Glossiness;
    u_xlat36 = u_xlat36 + 1.0;
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat38) * _LightColor0.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat3.xyz;
    u_xlat5.xyz = vec3(u_xlat37) * _LightColor0.xyz;
    u_xlat37 = (-u_xlat2.y) + 1.0;
    u_xlat14.x = u_xlat37 * u_xlat37;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat37 = u_xlat37 * u_xlat14.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat0.xyz;
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat14.xyz = u_xlat16.xyz * vec3(u_xlat26);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat36);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat14.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 196 math, 8 textures, 15 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_12;
  n_12 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_16;
  vec4 o_17;
  vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_8 * 0.5);
  vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_8.zw;
  vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_21;
  ambient_21 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_21 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_22;
  vec4 tmpvar_23;
  tmpvar_23 = (tmpvar_16.xyzz * tmpvar_16.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambient_21 = (ambient_21 + (x1_22 + (unity_SHC.xyz * 
    ((tmpvar_16.x * tmpvar_16.x) - (tmpvar_16.y * tmpvar_16.y))
  )));
  ambientOrLightmapUV_20.xyz = ambient_21;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = n_12;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD6 = o_17;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  float tmpvar_10;
  tmpvar_10 = (1.0 - _Glossiness);
  vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 tmpvar_12;
  vec3 tmpvar_13;
  vec3 tmpvar_14;
  tmpvar_14 = vec3(0.0, 0.0, 0.0);
  tmpvar_13 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  vec3 ambient_15;
  ambient_15 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_16;
  ambient_contrib_16 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_17;
    tmpvar_17.w = 1.0;
    tmpvar_17.xyz = tmpvar_6;
    vec3 x1_18;
    vec3 texCoord_19;
    vec3 tmpvar_20;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_21;
      tmpvar_21.w = 1.0;
      tmpvar_21.xyz = xlv_TEXCOORD8;
      tmpvar_20 = (unity_ProbeVolumeWorldToObject * tmpvar_21).xyz;
    } else {
      tmpvar_20 = xlv_TEXCOORD8;
    };
    vec3 tmpvar_22;
    tmpvar_22 = ((tmpvar_20 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_19.yz = tmpvar_22.yz;
    texCoord_19.x = (tmpvar_22.x * 0.25);
    float tmpvar_23;
    float tmpvar_24;
    tmpvar_24 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_23 = clamp (texCoord_19.x, tmpvar_24, (0.25 - tmpvar_24));
    texCoord_19.x = tmpvar_23;
    vec4 tmpvar_25;
    tmpvar_25 = texture3D (unity_ProbeVolumeSH, texCoord_19);
    texCoord_19.x = (tmpvar_23 + 0.25);
    vec4 tmpvar_26;
    tmpvar_26 = texture3D (unity_ProbeVolumeSH, texCoord_19);
    texCoord_19.x = (tmpvar_23 + 0.5);
    x1_18.x = dot (tmpvar_25, tmpvar_17);
    x1_18.y = dot (tmpvar_26, tmpvar_17);
    x1_18.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_19), tmpvar_17);
    ambient_contrib_16 = x1_18;
  } else {
    vec4 tmpvar_27;
    tmpvar_27.w = 1.0;
    tmpvar_27.xyz = tmpvar_6;
    vec3 x_28;
    x_28.x = dot (unity_SHAr, tmpvar_27);
    x_28.y = dot (unity_SHAg, tmpvar_27);
    x_28.z = dot (unity_SHAb, tmpvar_27);
    ambient_contrib_16 = x_28;
  };
  vec3 tmpvar_29;
  tmpvar_29 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_16));
  ambient_15 = tmpvar_29;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_15 = max (((1.055 * 
      pow (max (tmpvar_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_14 = (ambient_15 * tmpvar_8);
  tmpvar_12 = vec3(0.0, 0.0, 0.0);
  vec3 specular_30;
  vec3 worldRefl_31;
  worldRefl_31 = tmpvar_11;
  vec3 worldPos_32;
  worldPos_32 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_33;
    tmpvar_33 = normalize(tmpvar_11);
    vec3 tmpvar_34;
    tmpvar_34 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_33);
    vec3 tmpvar_35;
    tmpvar_35 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_33);
    bvec3 tmpvar_36;
    tmpvar_36 = greaterThan (tmpvar_33, vec3(0.0, 0.0, 0.0));
    float tmpvar_37;
    if (tmpvar_36.x) {
      tmpvar_37 = tmpvar_34.x;
    } else {
      tmpvar_37 = tmpvar_35.x;
    };
    float tmpvar_38;
    if (tmpvar_36.y) {
      tmpvar_38 = tmpvar_34.y;
    } else {
      tmpvar_38 = tmpvar_35.y;
    };
    float tmpvar_39;
    if (tmpvar_36.z) {
      tmpvar_39 = tmpvar_34.z;
    } else {
      tmpvar_39 = tmpvar_35.z;
    };
    worldPos_32 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_31 = (worldPos_32 + (tmpvar_33 * min (
      min (tmpvar_37, tmpvar_38)
    , tmpvar_39)));
  };
  vec4 tmpvar_40;
  tmpvar_40.xyz = worldRefl_31;
  tmpvar_40.w = ((tmpvar_10 * (1.7 - 
    (0.7 * tmpvar_10)
  )) * 6.0);
  vec4 tmpvar_41;
  tmpvar_41 = textureCubeLod (unity_SpecCube0, worldRefl_31, tmpvar_40.w);
  vec3 tmpvar_42;
  tmpvar_42 = ((unity_SpecCube0_HDR.x * pow (tmpvar_41.w, unity_SpecCube0_HDR.y)) * tmpvar_41.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_43;
    worldRefl_43 = tmpvar_11;
    vec3 worldPos_44;
    worldPos_44 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_45;
      tmpvar_45 = normalize(tmpvar_11);
      vec3 tmpvar_46;
      tmpvar_46 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_45);
      vec3 tmpvar_47;
      tmpvar_47 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_45);
      bvec3 tmpvar_48;
      tmpvar_48 = greaterThan (tmpvar_45, vec3(0.0, 0.0, 0.0));
      float tmpvar_49;
      if (tmpvar_48.x) {
        tmpvar_49 = tmpvar_46.x;
      } else {
        tmpvar_49 = tmpvar_47.x;
      };
      float tmpvar_50;
      if (tmpvar_48.y) {
        tmpvar_50 = tmpvar_46.y;
      } else {
        tmpvar_50 = tmpvar_47.y;
      };
      float tmpvar_51;
      if (tmpvar_48.z) {
        tmpvar_51 = tmpvar_46.z;
      } else {
        tmpvar_51 = tmpvar_47.z;
      };
      worldPos_44 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_43 = (worldPos_44 + (tmpvar_45 * min (
        min (tmpvar_49, tmpvar_50)
      , tmpvar_51)));
    };
    vec4 tmpvar_52;
    tmpvar_52.xyz = worldRefl_43;
    tmpvar_52.w = ((tmpvar_10 * (1.7 - 
      (0.7 * tmpvar_10)
    )) * 6.0);
    vec4 tmpvar_53;
    tmpvar_53 = textureCubeLod (unity_SpecCube1, worldRefl_43, tmpvar_52.w);
    specular_30 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_53.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_53.xyz), tmpvar_42, unity_SpecCube0_BoxMin.www);
  } else {
    specular_30 = tmpvar_42;
  };
  tmpvar_12 = (specular_30 * tmpvar_8);
  vec3 viewDir_54;
  viewDir_54 = -(tmpvar_7);
  float surfaceReduction_55;
  float specularTerm_56;
  float tmpvar_57;
  tmpvar_57 = (1.0 - _Glossiness);
  vec3 tmpvar_58;
  vec3 inVec_59;
  inVec_59 = (_WorldSpaceLightPos0.xyz + viewDir_54);
  tmpvar_58 = (inVec_59 * inversesqrt(max (0.001, 
    dot (inVec_59, inVec_59)
  )));
  float tmpvar_60;
  tmpvar_60 = max (0.0, dot (tmpvar_6, tmpvar_58));
  float tmpvar_61;
  tmpvar_61 = max (0.0, dot (tmpvar_6, viewDir_54));
  float tmpvar_62;
  tmpvar_62 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_58));
  float tmpvar_63;
  tmpvar_63 = (tmpvar_57 * tmpvar_57);
  float tmpvar_64;
  tmpvar_64 = (tmpvar_57 * tmpvar_57);
  float tmpvar_65;
  tmpvar_65 = (tmpvar_64 * tmpvar_64);
  float tmpvar_66;
  tmpvar_66 = (((tmpvar_60 * tmpvar_60) * (tmpvar_65 - 1.0)) + 1.0);
  float x_67;
  x_67 = (1.0 - tmpvar_9);
  float x_68;
  x_68 = (1.0 - tmpvar_61);
  float tmpvar_69;
  tmpvar_69 = (0.5 + ((2.0 * tmpvar_62) * (tmpvar_62 * tmpvar_57)));
  float tmpvar_70;
  tmpvar_70 = ((1.0 + (
    (tmpvar_69 - 1.0)
   * 
    ((x_67 * x_67) * ((x_67 * x_67) * x_67))
  )) * (1.0 + (
    (tmpvar_69 - 1.0)
   * 
    ((x_68 * x_68) * ((x_68 * x_68) * x_68))
  )));
  float tmpvar_71;
  tmpvar_71 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_61 * (1.0 - tmpvar_63))
     + tmpvar_63)) + (tmpvar_61 * (
      (tmpvar_9 * (1.0 - tmpvar_63))
     + tmpvar_63))) + 1e-05)
  ) * (tmpvar_65 / 
    (((3.141593 * tmpvar_66) * tmpvar_66) + 1e-07)
  )) * 0.7853982);
  specularTerm_56 = tmpvar_71;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_56 = sqrt(max (0.0001, tmpvar_71));
  };
  float tmpvar_72;
  tmpvar_72 = max (0.0, (specularTerm_56 * tmpvar_9));
  specularTerm_56 = tmpvar_72;
  float tmpvar_73;
  tmpvar_73 = (tmpvar_70 * tmpvar_9);
  float tmpvar_74;
  tmpvar_74 = (tmpvar_57 * tmpvar_57);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_55 = (1.0 - ((0.28 * tmpvar_74) * tmpvar_57));
  } else {
    surfaceReduction_55 = (1.0/(((tmpvar_74 * tmpvar_74) + 1.0)));
  };
  float tmpvar_75;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_75 = 1.0;
  } else {
    tmpvar_75 = 0.0;
  };
  specularTerm_56 = (tmpvar_72 * tmpvar_75);
  float x_76;
  x_76 = (1.0 - tmpvar_62);
  float x_77;
  x_77 = (1.0 - tmpvar_61);
  vec3 tmpvar_78;
  tmpvar_78 = (((tmpvar_3 * 
    (tmpvar_14 + (tmpvar_13 * tmpvar_73))
  ) + (
    (specularTerm_56 * tmpvar_13)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_76 * x_76) * (
      (x_76 * x_76)
     * x_76))))
  )) + ((surfaceReduction_55 * tmpvar_12) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_77 * x_77) * ((x_77 * x_77) * x_77))
  ))));
  vec4 tmpvar_79;
  tmpvar_79.w = 1.0;
  tmpvar_79.xyz = tmpvar_78;
  c_1.w = tmpvar_79.w;
  c_1.xyz = tmpvar_78;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_80;
  xlat_varoutput_80.xyz = c_1.xyz;
  xlat_varoutput_80.w = 1.0;
  gl_FragData[0] = xlat_varoutput_80;
}


#endif
"
}
SubProgram "metal " {
// Stats: 34 math, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 306
Matrix 64 [glstate_matrix_mvp]
Matrix 128 [unity_ObjectToWorld]
Matrix 192 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
VectorHalf 32 [unity_SHBr] 4
VectorHalf 40 [unity_SHBg] 4
VectorHalf 48 [unity_SHBb] 4
VectorHalf 56 [unity_SHC] 4
VectorHalf 256 [unity_ColorSpaceLuminance] 4
Vector 272 [_MainTex_ST]
Vector 288 [_DetailAlbedoMap_ST]
ScalarHalf 304 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float3 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_7 = tmpvar_8.xyz;
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_19);
  float4 o_20;
  float4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  float2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _mtl_u._ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  half3 normalWorld_23;
  normalWorld_23 = half3(tmpvar_19);
  half4 ambientOrLightmapUV_24;
  ambientOrLightmapUV_24 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 ambient_25;
  ambient_25 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_26;
  tmpvar_26 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_26) {
    ambient_25 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_27;
  half4 tmpvar_28;
  tmpvar_28 = (normalWorld_23.xyzz * normalWorld_23.yzzx);
  x1_27.x = dot (_mtl_u.unity_SHBr, tmpvar_28);
  x1_27.y = dot (_mtl_u.unity_SHBg, tmpvar_28);
  x1_27.z = dot (_mtl_u.unity_SHBb, tmpvar_28);
  ambient_25 = (ambient_25 + (x1_27 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_23.x * normalWorld_23.x) - (normalWorld_23.y * normalWorld_23.y))
  )));
  ambientOrLightmapUV_24.xyz = ambient_25;
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_24;
  _mtl_o.xlv_TEXCOORD6 = o_20;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_7;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat10 = u_xlat1.y * u_xlat1.y;
    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat1.x = dot(unity_SHBr, u_xlat2);
    u_xlat1.y = dot(unity_SHBg, u_xlat2);
    u_xlat1.z = dot(unity_SHBb, u_xlat2);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
lowp vec4 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
vec4 u_xlat7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
lowp vec4 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
vec3 u_xlat12;
bvec3 u_xlatb13;
vec3 u_xlat16;
float u_xlat17;
float u_xlat18;
float u_xlat30;
float u_xlat31;
float u_xlat32;
float u_xlat42;
float u_xlat43;
float u_xlat44;
bool u_xlatb44;
float u_xlat45;
float u_xlat46;
mediump float u_xlat16_46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat43 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat2.xyz = vec3(u_xlat43) * vs_TEXCOORD4.xyz;
    u_xlat43 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat3.xyz = vec3(u_xlat43) * vs_TEXCOORD1.xyz;
    u_xlat45 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat45 = max(u_xlat45, 0.0);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat18 = (-_OcclusionStrength) + 1.0;
    u_xlat18 = u_xlat10_5.y * _OcclusionStrength + u_xlat18;
    u_xlat32 = (-_Glossiness) + 1.0;
    u_xlat46 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat46)) + u_xlat3.xyz;
    u_xlat6.xyz = u_xlat10_4.xxx * _LightColor0.xyz;
    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb4){
        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb4)) ? u_xlat7.xyz : vs_TEXCOORD8.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat7.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat4.x = u_xlat7.y * 0.25;
        u_xlat46 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat47 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat4.x = max(u_xlat46, u_xlat4.x);
        u_xlat7.x = min(u_xlat47, u_xlat4.x);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_9 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat2.w = 1.0;
        u_xlat8.x = dot(u_xlat10_8, u_xlat2);
        u_xlat8.y = dot(u_xlat10_9, u_xlat2);
        u_xlat8.z = dot(u_xlat10_7, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat8.x = dot(unity_SHAr, u_xlat2);
        u_xlat8.y = dot(unity_SHAg, u_xlat2);
        u_xlat8.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat7.xyz = u_xlat8.xyz + vs_TEXCOORD5.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb44 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat8.xyz = log2(u_xlat7.xyz);
    u_xlat8.xyz = u_xlat8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat8.xyz = exp2(u_xlat8.xyz);
    u_xlat8.xyz = u_xlat8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat7.xyz = (bool(u_xlatb44)) ? u_xlat8.xyz : u_xlat7.xyz;
    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb4){
        u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat4.x = inversesqrt(u_xlat4.x);
        u_xlat8.xyz = u_xlat4.xxx * u_xlat5.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
        u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
        u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
        u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
        u_xlat4.x = min(u_xlat9.y, u_xlat9.x);
        u_xlat4.x = min(u_xlat9.z, u_xlat4.x);
        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xxx + u_xlat9.xyz;
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat4.x = (-u_xlat32) * 0.699999988 + 1.70000005;
    u_xlat4.x = u_xlat4.x * u_xlat32;
    u_xlat4.x = u_xlat4.x * 6.0;
    u_xlat10_8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat4.x);
    u_xlat16_46 = log2(u_xlat10_8.w);
    u_xlat46 = u_xlat16_46 * unity_SpecCube0_HDR.y;
    u_xlat46 = exp2(u_xlat46);
    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat10_8.xyz * vec3(u_xlat46);
    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb47){
        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb47){
            u_xlat47 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat47 = inversesqrt(u_xlat47);
            u_xlat10.xyz = vec3(u_xlat47) * u_xlat5.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
            u_xlat11.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
            u_xlat11.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
            u_xlat11.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
            u_xlat47 = min(u_xlat11.z, u_xlat47);
            u_xlat11.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat4.x);
        u_xlat16_4 = log2(u_xlat10_5.w);
        u_xlat4.x = u_xlat16_4 * unity_SpecCube1_HDR.y;
        u_xlat4.x = exp2(u_xlat4.x);
        u_xlat4.x = u_xlat4.x * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * u_xlat4.xxx;
        u_xlat8.xyz = vec3(u_xlat46) * u_xlat10_8.xyz + (-u_xlat5.xyz);
        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = vec3(u_xlat18) * u_xlat9.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat43) + _WorldSpaceLightPos0.xyz;
    u_xlat43 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat43 = max(u_xlat43, 0.00100000005);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat8.xyz = vec3(u_xlat43) * u_xlat8.xyz;
    u_xlat43 = dot(u_xlat2.xyz, u_xlat8.xyz);
    u_xlat43 = max(u_xlat43, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat30 = u_xlat32 * u_xlat32;
    u_xlat3.x = (-u_xlat32) * u_xlat32 + 1.0;
    u_xlat17 = u_xlat2.x * u_xlat3.x + u_xlat30;
    u_xlat3.x = u_xlat45 * u_xlat3.x + u_xlat30;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat45 * u_xlat17 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat17 = u_xlat30 * u_xlat30;
    u_xlat43 = u_xlat43 * u_xlat43;
    u_xlat4.xw = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
    u_xlat43 = u_xlat43 * u_xlat4.x + 1.0;
    u_xlat43 = u_xlat43 * u_xlat43;
    u_xlat43 = u_xlat43 * 3.14159274 + 1.00000001e-07;
    u_xlat43 = u_xlat17 / u_xlat43;
    u_xlat17 = (-u_xlat45) + 1.0;
    u_xlat31 = u_xlat17 * u_xlat17;
    u_xlat31 = u_xlat31 * u_xlat31;
    u_xlat17 = u_xlat17 * u_xlat31;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat31 = u_xlat2.x * u_xlat2.x;
    u_xlat31 = u_xlat31 * u_xlat31;
    u_xlat2.x = u_xlat2.x * u_xlat31;
    u_xlat31 = u_xlat2.y * u_xlat2.y;
    u_xlat31 = dot(vec2(u_xlat31), vec2(u_xlat32));
    u_xlat31 = u_xlat31 + -0.5;
    u_xlat17 = u_xlat31 * u_xlat17 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat2.x + 1.0;
    u_xlat17 = u_xlat31 * u_xlat17;
    u_xlat43 = u_xlat43 * u_xlat3.x;
    u_xlat43 = u_xlat43 * 0.785398185;
    u_xlat3.x = max(u_xlat43, 9.99999975e-05);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat43 = (u_xlatb44) ? u_xlat3.x : u_xlat43;
    u_xlat43 = u_xlat45 * u_xlat43;
    u_xlat43 = max(u_xlat43, 0.0);
    u_xlat3.x = u_xlat45 * u_xlat17;
    u_xlat30 = u_xlat30 * u_xlat32;
    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
    u_xlat17 = float(1.0) / u_xlat4.w;
    u_xlat30 = (u_xlatb44) ? u_xlat30 : u_xlat17;
    u_xlat44 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb44 = u_xlat44!=0.0;
    u_xlat44 = u_xlatb44 ? 1.0 : float(0.0);
    u_xlat43 = u_xlat43 * u_xlat44;
    u_xlat42 = (-u_xlat42) + _Glossiness;
    u_xlat42 = u_xlat42 + 1.0;
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat43);
    u_xlat43 = (-u_xlat2.y) + 1.0;
    u_xlat16.x = u_xlat43 * u_xlat43;
    u_xlat16.x = u_xlat16.x * u_xlat16.x;
    u_xlat43 = u_xlat43 * u_xlat16.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat43) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat16.xyz = u_xlat5.xyz * vec3(u_xlat30);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat42);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat16.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 175 math, 7 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 o_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_8 * 0.5);
  vec2 tmpvar_28;
  tmpvar_28.x = tmpvar_27.x;
  tmpvar_28.y = (tmpvar_27.y * _ProjectionParams.x);
  o_26.xy = (tmpvar_28 + tmpvar_27.w);
  o_26.zw = tmpvar_8.zw;
  vec4 ambientOrLightmapUV_29;
  ambientOrLightmapUV_29.xy = vec2(0.0, 0.0);
  ambientOrLightmapUV_29.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_29;
  xlv_TEXCOORD6 = o_26;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_12 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_6, (tmpvar_14.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_14.w));
  tmpvar_12 = (tmpvar_12 * tmpvar_8);
  tmpvar_10 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  float tmpvar_15;
  vec3 tmpvar_16;
  tmpvar_15 = (1.0 - _Glossiness);
  tmpvar_16 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 originalReflUVW_17;
  vec3 specular_18;
  originalReflUVW_17 = tmpvar_16;
  vec3 worldRefl_19;
  worldRefl_19 = tmpvar_16;
  vec3 worldPos_20;
  worldPos_20 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_21;
    tmpvar_21 = normalize(tmpvar_16);
    vec3 tmpvar_22;
    tmpvar_22 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_21);
    vec3 tmpvar_23;
    tmpvar_23 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_21);
    bvec3 tmpvar_24;
    tmpvar_24 = greaterThan (tmpvar_21, vec3(0.0, 0.0, 0.0));
    float tmpvar_25;
    if (tmpvar_24.x) {
      tmpvar_25 = tmpvar_22.x;
    } else {
      tmpvar_25 = tmpvar_23.x;
    };
    float tmpvar_26;
    if (tmpvar_24.y) {
      tmpvar_26 = tmpvar_22.y;
    } else {
      tmpvar_26 = tmpvar_23.y;
    };
    float tmpvar_27;
    if (tmpvar_24.z) {
      tmpvar_27 = tmpvar_22.z;
    } else {
      tmpvar_27 = tmpvar_23.z;
    };
    worldPos_20 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_19 = (worldPos_20 + (tmpvar_21 * min (
      min (tmpvar_25, tmpvar_26)
    , tmpvar_27)));
  };
  tmpvar_16 = worldRefl_19;
  vec4 tmpvar_28;
  tmpvar_28.xyz = worldRefl_19;
  tmpvar_28.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  vec4 tmpvar_29;
  tmpvar_29 = textureCubeLod (unity_SpecCube0, worldRefl_19, tmpvar_28.w);
  vec3 tmpvar_30;
  tmpvar_30 = ((unity_SpecCube0_HDR.x * pow (tmpvar_29.w, unity_SpecCube0_HDR.y)) * tmpvar_29.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_31;
    worldRefl_31 = originalReflUVW_17;
    vec3 worldPos_32;
    worldPos_32 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_33;
      tmpvar_33 = normalize(originalReflUVW_17);
      vec3 tmpvar_34;
      tmpvar_34 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_33);
      vec3 tmpvar_35;
      tmpvar_35 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_33);
      bvec3 tmpvar_36;
      tmpvar_36 = greaterThan (tmpvar_33, vec3(0.0, 0.0, 0.0));
      float tmpvar_37;
      if (tmpvar_36.x) {
        tmpvar_37 = tmpvar_34.x;
      } else {
        tmpvar_37 = tmpvar_35.x;
      };
      float tmpvar_38;
      if (tmpvar_36.y) {
        tmpvar_38 = tmpvar_34.y;
      } else {
        tmpvar_38 = tmpvar_35.y;
      };
      float tmpvar_39;
      if (tmpvar_36.z) {
        tmpvar_39 = tmpvar_34.z;
      } else {
        tmpvar_39 = tmpvar_35.z;
      };
      worldPos_32 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_31 = (worldPos_32 + (tmpvar_33 * min (
        min (tmpvar_37, tmpvar_38)
      , tmpvar_39)));
    };
    tmpvar_16 = worldRefl_31;
    vec4 tmpvar_40;
    tmpvar_40.xyz = worldRefl_31;
    tmpvar_40.w = ((tmpvar_15 * (1.7 - 
      (0.7 * tmpvar_15)
    )) * 6.0);
    vec4 tmpvar_41;
    tmpvar_41 = textureCubeLod (unity_SpecCube1, worldRefl_31, tmpvar_40.w);
    specular_18 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_41.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_41.xyz), tmpvar_30, unity_SpecCube0_BoxMin.www);
  } else {
    specular_18 = tmpvar_30;
  };
  tmpvar_11 = (specular_18 * tmpvar_8);
  vec3 viewDir_42;
  viewDir_42 = -(tmpvar_7);
  float surfaceReduction_43;
  float specularTerm_44;
  float tmpvar_45;
  tmpvar_45 = (1.0 - _Glossiness);
  vec3 tmpvar_46;
  vec3 inVec_47;
  inVec_47 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_46 = (inVec_47 * inversesqrt(max (0.001, 
    dot (inVec_47, inVec_47)
  )));
  float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_46));
  float tmpvar_49;
  tmpvar_49 = max (0.0, dot (tmpvar_6, viewDir_42));
  float tmpvar_50;
  tmpvar_50 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_46));
  float tmpvar_51;
  tmpvar_51 = (tmpvar_45 * tmpvar_45);
  float tmpvar_52;
  tmpvar_52 = (tmpvar_45 * tmpvar_45);
  float tmpvar_53;
  tmpvar_53 = (tmpvar_52 * tmpvar_52);
  float tmpvar_54;
  tmpvar_54 = (((tmpvar_48 * tmpvar_48) * (tmpvar_53 - 1.0)) + 1.0);
  float x_55;
  x_55 = (1.0 - tmpvar_9);
  float x_56;
  x_56 = (1.0 - tmpvar_49);
  float tmpvar_57;
  tmpvar_57 = (0.5 + ((2.0 * tmpvar_50) * (tmpvar_50 * tmpvar_45)));
  float tmpvar_58;
  tmpvar_58 = ((1.0 + (
    (tmpvar_57 - 1.0)
   * 
    ((x_55 * x_55) * ((x_55 * x_55) * x_55))
  )) * (1.0 + (
    (tmpvar_57 - 1.0)
   * 
    ((x_56 * x_56) * ((x_56 * x_56) * x_56))
  )));
  float tmpvar_59;
  tmpvar_59 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_49 * (1.0 - tmpvar_51))
     + tmpvar_51)) + (tmpvar_49 * (
      (tmpvar_9 * (1.0 - tmpvar_51))
     + tmpvar_51))) + 1e-05)
  ) * (tmpvar_53 / 
    (((3.141593 * tmpvar_54) * tmpvar_54) + 1e-07)
  )) * 0.7853982);
  specularTerm_44 = tmpvar_59;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_44 = sqrt(max (0.0001, tmpvar_59));
  };
  float tmpvar_60;
  tmpvar_60 = max (0.0, (specularTerm_44 * tmpvar_9));
  specularTerm_44 = tmpvar_60;
  float tmpvar_61;
  tmpvar_61 = (tmpvar_58 * tmpvar_9);
  float tmpvar_62;
  tmpvar_62 = (tmpvar_45 * tmpvar_45);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_43 = (1.0 - ((0.28 * tmpvar_62) * tmpvar_45));
  } else {
    surfaceReduction_43 = (1.0/(((tmpvar_62 * tmpvar_62) + 1.0)));
  };
  float tmpvar_63;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_63 = 1.0;
  } else {
    tmpvar_63 = 0.0;
  };
  specularTerm_44 = (tmpvar_60 * tmpvar_63);
  float x_64;
  x_64 = (1.0 - tmpvar_50);
  float x_65;
  x_65 = (1.0 - tmpvar_49);
  vec3 tmpvar_66;
  tmpvar_66 = (((tmpvar_3 * 
    (tmpvar_12 + (tmpvar_10 * tmpvar_61))
  ) + (
    (specularTerm_44 * tmpvar_10)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_64 * x_64) * (
      (x_64 * x_64)
     * x_64))))
  )) + ((surfaceReduction_43 * tmpvar_11) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_65 * x_65) * ((x_65 * x_65) * x_65))
  ))));
  vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = tmpvar_66;
  c_1.w = tmpvar_67.w;
  c_1.xyz = tmpvar_66;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = 1.0;
  gl_FragData[0] = xlat_varoutput_68;
}


#endif
"
}
SubProgram "metal " {
// Stats: 28 math, 1 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 290
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [unity_WorldTransformParams]
Vector 240 [unity_DynamicLightmapST]
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  float3 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  float4 tmpvar_11;
  float4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_11 = (_mtl_u.glstate_matrix_mvp * tmpvar_12);
  float4 texcoord_13;
  texcoord_13.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_14;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_15;
  float3 n_16;
  n_16 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_15 = half3(n_16);
  float3 norm_17;
  norm_17 = float3(tmpvar_1);
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].x;
  v_18.y = _mtl_u.unity_WorldToObject[1].x;
  v_18.z = _mtl_u.unity_WorldToObject[2].x;
  v_18.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].y;
  v_19.y = _mtl_u.unity_WorldToObject[1].y;
  v_19.z = _mtl_u.unity_WorldToObject[2].y;
  v_19.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].z;
  v_20.y = _mtl_u.unity_WorldToObject[1].z;
  v_20.z = _mtl_u.unity_WorldToObject[2].z;
  v_20.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  float3 dir_22;
  dir_22 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_23;
  tmpvar_23[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_23[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_23[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = float(tmpvar_4.w);
  half3 normal_25;
  normal_25 = half3(tmpvar_21);
  half3 tangent_26;
  tangent_26 = half3(tmpvar_24.xyz);
  half tangentSign_27;
  tangentSign_27 = half(tmpvar_24.w);
  half xlat_varsign_28;
  float tmpvar_29;
  tmpvar_29 = ((float)tangentSign_27 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_28 = half(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * xlat_varsign_28);
  half3x3 tmpvar_31;
  tmpvar_31[0].x = tangent_26.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = normal_25.x;
  tmpvar_31[1].x = tangent_26.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = normal_25.y;
  tmpvar_31[2].x = tangent_26.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = normal_25.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_31);
  float3 v_32;
  v_32.x = tangentToWorld_5[0].x;
  v_32.y = tangentToWorld_5[1].x;
  v_32.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].y;
  v_33.y = tangentToWorld_5[1].y;
  v_33.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].z;
  v_34.y = tangentToWorld_5[1].z;
  v_34.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_34);
  float4 o_35;
  float4 tmpvar_36;
  tmpvar_36 = (tmpvar_11 * 0.5);
  float2 tmpvar_37;
  tmpvar_37.x = tmpvar_36.x;
  tmpvar_37.y = (tmpvar_36.y * _mtl_u._ProjectionParams.x);
  o_35.xy = (tmpvar_37 + tmpvar_36.w);
  o_35.zw = tmpvar_11.zw;
  half4 ambientOrLightmapUV_38;
  ambientOrLightmapUV_38.xy = half2(float2(0.0, 0.0));
  ambientOrLightmapUV_38.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_11;
  _mtl_o.xlv_TEXCOORD0 = texcoord_13;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_15;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_38;
  _mtl_o.xlv_TEXCOORD6 = o_35;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat2.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat2.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat2.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat3.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat3.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat3.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat3.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat3.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat15;
float u_xlat16;
float u_xlat17;
float u_xlat28;
float u_xlat29;
float u_xlat30;
float u_xlat39;
float u_xlat40;
float u_xlat41;
float u_xlat42;
float u_xlat44;
mediump float u_xlat16_44;
bool u_xlatb44;
float u_xlat45;
mediump float u_xlat16_45;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
    u_xlat40 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat2.xyz = vec3(u_xlat40) * vs_TEXCOORD4.xyz;
    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat3.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;
    u_xlat2.w = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat42 = (-_OcclusionStrength) + 1.0;
    u_xlat42 = u_xlat10_5.y * _OcclusionStrength + u_xlat42;
    u_xlat17 = (-_Glossiness) + 1.0;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat30)) + u_xlat3.xyz;
    u_xlat4.xzw = u_xlat10_4.xxx * _LightColor0.xyz;
    u_xlat10_6 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat44 = u_xlat10_6.w * unity_DynamicLightmap_HDR.x;
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat44);
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat10_7 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_7.xyz = u_xlat10_7.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat44 = dot(u_xlat2.xyz, u_xlat16_7.xyz);
    u_xlat44 = u_xlat44 + 0.5;
    u_xlat6.xyz = vec3(u_xlat44) * u_xlat6.xyz;
    u_xlat16_44 = max(u_xlat10_7.w, 9.99999975e-05);
    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_44);
    u_xlatb44 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb44){
        u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat44 = inversesqrt(u_xlat44);
        u_xlat7.xyz = vec3(u_xlat44) * u_xlat5.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat44 = min(u_xlat8.y, u_xlat8.x);
        u_xlat44 = min(u_xlat8.z, u_xlat44);
        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat44) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat44 = (-u_xlat17) * 0.699999988 + 1.70000005;
    u_xlat44 = u_xlat17 * u_xlat44;
    u_xlat44 = u_xlat44 * 6.0;
    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat44);
    u_xlat16_45 = log2(u_xlat10_7.w);
    u_xlat45 = u_xlat16_45 * unity_SpecCube0_HDR.y;
    u_xlat45 = exp2(u_xlat45);
    u_xlat45 = u_xlat45 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat45);
    u_xlatb46 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = inversesqrt(u_xlat46);
            u_xlat9.xyz = u_xlat5.xyz * vec3(u_xlat46);
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat44);
        u_xlat16_44 = log2(u_xlat10_5.w);
        u_xlat44 = u_xlat16_44 * unity_SpecCube1_HDR.y;
        u_xlat44 = exp2(u_xlat44);
        u_xlat44 = u_xlat44 * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat44);
        u_xlat7.xyz = vec3(u_xlat45) * u_xlat10_7.xyz + (-u_xlat5.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = vec3(u_xlat42) * u_xlat8.xyz;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat40) + _WorldSpaceLightPos0.xyz;
    u_xlat40 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat40 = max(u_xlat40, 0.00100000005);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat7.xyz = vec3(u_xlat40) * u_xlat7.xyz;
    u_xlat40 = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat40 = max(u_xlat40, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat28 = u_xlat17 * u_xlat17;
    u_xlat3.x = (-u_xlat17) * u_xlat17 + 1.0;
    u_xlat16 = u_xlat2.x * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat2.w * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat2.w * u_xlat16 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat16 = u_xlat28 * u_xlat28;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat7.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
    u_xlat40 = u_xlat40 * u_xlat7.x + 1.0;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat40 = u_xlat40 * 3.14159274 + 1.00000001e-07;
    u_xlat40 = u_xlat16 / u_xlat40;
    u_xlat16 = (-u_xlat2.w) + 1.0;
    u_xlat29 = u_xlat16 * u_xlat16;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat16 = u_xlat16 * u_xlat29;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat29 = u_xlat2.x * u_xlat2.x;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat2.x = u_xlat2.x * u_xlat29;
    u_xlat29 = u_xlat2.y * u_xlat2.y;
    u_xlat29 = dot(vec2(u_xlat29), vec2(u_xlat17));
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat16 = u_xlat29 * u_xlat16 + 1.0;
    u_xlat29 = u_xlat29 * u_xlat2.x + 1.0;
    u_xlat16 = u_xlat29 * u_xlat16;
    u_xlat40 = u_xlat40 * u_xlat3.x;
    u_xlat40 = u_xlat40 * 0.785398185;
    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat29 = max(u_xlat40, 9.99999975e-05);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat40 = (u_xlatb3) ? u_xlat29 : u_xlat40;
    u_xlat40 = u_xlat2.w * u_xlat40;
    u_xlat40 = max(u_xlat40, 0.0);
    u_xlat41 = u_xlat2.w * u_xlat16;
    u_xlat28 = u_xlat28 * u_xlat17;
    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;
    u_xlat16 = float(1.0) / u_xlat7.y;
    u_xlat28 = (u_xlatb3) ? u_xlat28 : u_xlat16;
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat40 = u_xlat40 * u_xlat3.x;
    u_xlat39 = (-u_xlat39) + _Glossiness;
    u_xlat39 = u_xlat39 + 1.0;
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat41) * u_xlat4.xzw;
    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat3.xyz;
    u_xlat4.xyz = u_xlat4.xzw * vec3(u_xlat40);
    u_xlat40 = (-u_xlat2.y) + 1.0;
    u_xlat15.x = u_xlat40 * u_xlat40;
    u_xlat15.x = u_xlat15.x * u_xlat15.x;
    u_xlat40 = u_xlat40 * u_xlat15.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat28);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat39);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat15.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 195 math, 7 textures, 15 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_12;
  n_12 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_16;
  vec4 ambientOrLightmapUV_17;
  ambientOrLightmapUV_17.w = 0.0;
  vec3 col_18;
  vec4 ndotl_19;
  vec4 lengthSq_20;
  vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_22;
  tmpvar_22 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_20 = (tmpvar_21 * tmpvar_21);
  lengthSq_20 = (lengthSq_20 + (tmpvar_22 * tmpvar_22));
  lengthSq_20 = (lengthSq_20 + (tmpvar_23 * tmpvar_23));
  ndotl_19 = (tmpvar_21 * tmpvar_16.x);
  ndotl_19 = (ndotl_19 + (tmpvar_22 * tmpvar_16.y));
  ndotl_19 = (ndotl_19 + (tmpvar_23 * tmpvar_16.z));
  vec4 tmpvar_24;
  tmpvar_24 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_19 * inversesqrt(lengthSq_20)));
  ndotl_19 = tmpvar_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * (1.0/((1.0 + 
    (lengthSq_20 * unity_4LightAtten0)
  ))));
  col_18 = (unity_LightColor[0].xyz * tmpvar_25.x);
  col_18 = (col_18 + (unity_LightColor[1].xyz * tmpvar_25.y));
  col_18 = (col_18 + (unity_LightColor[2].xyz * tmpvar_25.z));
  col_18 = (col_18 + (unity_LightColor[3].xyz * tmpvar_25.w));
  ambientOrLightmapUV_17.xyz = col_18;
  vec3 ambient_26;
  ambient_26 = ambientOrLightmapUV_17.xyz;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_26 = (col_18 * ((col_18 * 
      ((col_18 * 0.305306) + 0.6821711)
    ) + 0.01252288));
  };
  vec3 x1_27;
  vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_16.xyzz * tmpvar_16.yzzx);
  x1_27.x = dot (unity_SHBr, tmpvar_28);
  x1_27.y = dot (unity_SHBg, tmpvar_28);
  x1_27.z = dot (unity_SHBb, tmpvar_28);
  ambient_26 = (ambient_26 + (x1_27 + (unity_SHC.xyz * 
    ((tmpvar_16.x * tmpvar_16.x) - (tmpvar_16.y * tmpvar_16.y))
  )));
  ambientOrLightmapUV_17.xyz = ambient_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = n_12;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_17;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  float tmpvar_10;
  tmpvar_10 = (1.0 - _Glossiness);
  vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_14;
  ambient_14 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_15;
  ambient_contrib_15 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_16;
    tmpvar_16.w = 1.0;
    tmpvar_16.xyz = tmpvar_6;
    vec3 x1_17;
    vec3 texCoord_18;
    vec3 tmpvar_19;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_20;
      tmpvar_20.w = 1.0;
      tmpvar_20.xyz = xlv_TEXCOORD8;
      tmpvar_19 = (unity_ProbeVolumeWorldToObject * tmpvar_20).xyz;
    } else {
      tmpvar_19 = xlv_TEXCOORD8;
    };
    vec3 tmpvar_21;
    tmpvar_21 = ((tmpvar_19 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_18.yz = tmpvar_21.yz;
    texCoord_18.x = (tmpvar_21.x * 0.25);
    float tmpvar_22;
    float tmpvar_23;
    tmpvar_23 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_22 = clamp (texCoord_18.x, tmpvar_23, (0.25 - tmpvar_23));
    texCoord_18.x = tmpvar_22;
    vec4 tmpvar_24;
    tmpvar_24 = texture3D (unity_ProbeVolumeSH, texCoord_18);
    texCoord_18.x = (tmpvar_22 + 0.25);
    vec4 tmpvar_25;
    tmpvar_25 = texture3D (unity_ProbeVolumeSH, texCoord_18);
    texCoord_18.x = (tmpvar_22 + 0.5);
    x1_17.x = dot (tmpvar_24, tmpvar_16);
    x1_17.y = dot (tmpvar_25, tmpvar_16);
    x1_17.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_18), tmpvar_16);
    ambient_contrib_15 = x1_17;
  } else {
    vec4 tmpvar_26;
    tmpvar_26.w = 1.0;
    tmpvar_26.xyz = tmpvar_6;
    vec3 x_27;
    x_27.x = dot (unity_SHAr, tmpvar_26);
    x_27.y = dot (unity_SHAg, tmpvar_26);
    x_27.z = dot (unity_SHAb, tmpvar_26);
    ambient_contrib_15 = x_27;
  };
  vec3 tmpvar_28;
  tmpvar_28 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_15));
  ambient_14 = tmpvar_28;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_14 = max (((1.055 * 
      pow (max (tmpvar_28, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_13 = (ambient_14 * tmpvar_8);
  tmpvar_12 = vec3(0.0, 0.0, 0.0);
  vec3 specular_29;
  vec3 worldRefl_30;
  worldRefl_30 = tmpvar_11;
  vec3 worldPos_31;
  worldPos_31 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_32;
    tmpvar_32 = normalize(tmpvar_11);
    vec3 tmpvar_33;
    tmpvar_33 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_32);
    vec3 tmpvar_34;
    tmpvar_34 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_32);
    bvec3 tmpvar_35;
    tmpvar_35 = greaterThan (tmpvar_32, vec3(0.0, 0.0, 0.0));
    float tmpvar_36;
    if (tmpvar_35.x) {
      tmpvar_36 = tmpvar_33.x;
    } else {
      tmpvar_36 = tmpvar_34.x;
    };
    float tmpvar_37;
    if (tmpvar_35.y) {
      tmpvar_37 = tmpvar_33.y;
    } else {
      tmpvar_37 = tmpvar_34.y;
    };
    float tmpvar_38;
    if (tmpvar_35.z) {
      tmpvar_38 = tmpvar_33.z;
    } else {
      tmpvar_38 = tmpvar_34.z;
    };
    worldPos_31 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_30 = (worldPos_31 + (tmpvar_32 * min (
      min (tmpvar_36, tmpvar_37)
    , tmpvar_38)));
  };
  vec4 tmpvar_39;
  tmpvar_39.xyz = worldRefl_30;
  tmpvar_39.w = ((tmpvar_10 * (1.7 - 
    (0.7 * tmpvar_10)
  )) * 6.0);
  vec4 tmpvar_40;
  tmpvar_40 = textureCubeLod (unity_SpecCube0, worldRefl_30, tmpvar_39.w);
  vec3 tmpvar_41;
  tmpvar_41 = ((unity_SpecCube0_HDR.x * pow (tmpvar_40.w, unity_SpecCube0_HDR.y)) * tmpvar_40.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_42;
    worldRefl_42 = tmpvar_11;
    vec3 worldPos_43;
    worldPos_43 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_44;
      tmpvar_44 = normalize(tmpvar_11);
      vec3 tmpvar_45;
      tmpvar_45 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_44);
      vec3 tmpvar_46;
      tmpvar_46 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_44);
      bvec3 tmpvar_47;
      tmpvar_47 = greaterThan (tmpvar_44, vec3(0.0, 0.0, 0.0));
      float tmpvar_48;
      if (tmpvar_47.x) {
        tmpvar_48 = tmpvar_45.x;
      } else {
        tmpvar_48 = tmpvar_46.x;
      };
      float tmpvar_49;
      if (tmpvar_47.y) {
        tmpvar_49 = tmpvar_45.y;
      } else {
        tmpvar_49 = tmpvar_46.y;
      };
      float tmpvar_50;
      if (tmpvar_47.z) {
        tmpvar_50 = tmpvar_45.z;
      } else {
        tmpvar_50 = tmpvar_46.z;
      };
      worldPos_43 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_42 = (worldPos_43 + (tmpvar_44 * min (
        min (tmpvar_48, tmpvar_49)
      , tmpvar_50)));
    };
    vec4 tmpvar_51;
    tmpvar_51.xyz = worldRefl_42;
    tmpvar_51.w = ((tmpvar_10 * (1.7 - 
      (0.7 * tmpvar_10)
    )) * 6.0);
    vec4 tmpvar_52;
    tmpvar_52 = textureCubeLod (unity_SpecCube1, worldRefl_42, tmpvar_51.w);
    specular_29 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_52.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_52.xyz), tmpvar_41, unity_SpecCube0_BoxMin.www);
  } else {
    specular_29 = tmpvar_41;
  };
  tmpvar_12 = (specular_29 * tmpvar_8);
  vec3 viewDir_53;
  viewDir_53 = -(tmpvar_7);
  float surfaceReduction_54;
  float specularTerm_55;
  float tmpvar_56;
  tmpvar_56 = (1.0 - _Glossiness);
  vec3 tmpvar_57;
  vec3 inVec_58;
  inVec_58 = (_WorldSpaceLightPos0.xyz + viewDir_53);
  tmpvar_57 = (inVec_58 * inversesqrt(max (0.001, 
    dot (inVec_58, inVec_58)
  )));
  float tmpvar_59;
  tmpvar_59 = max (0.0, dot (tmpvar_6, tmpvar_57));
  float tmpvar_60;
  tmpvar_60 = max (0.0, dot (tmpvar_6, viewDir_53));
  float tmpvar_61;
  tmpvar_61 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_57));
  float tmpvar_62;
  tmpvar_62 = (tmpvar_56 * tmpvar_56);
  float tmpvar_63;
  tmpvar_63 = (tmpvar_56 * tmpvar_56);
  float tmpvar_64;
  tmpvar_64 = (tmpvar_63 * tmpvar_63);
  float tmpvar_65;
  tmpvar_65 = (((tmpvar_59 * tmpvar_59) * (tmpvar_64 - 1.0)) + 1.0);
  float x_66;
  x_66 = (1.0 - tmpvar_9);
  float x_67;
  x_67 = (1.0 - tmpvar_60);
  float tmpvar_68;
  tmpvar_68 = (0.5 + ((2.0 * tmpvar_61) * (tmpvar_61 * tmpvar_56)));
  float tmpvar_69;
  tmpvar_69 = ((1.0 + (
    (tmpvar_68 - 1.0)
   * 
    ((x_66 * x_66) * ((x_66 * x_66) * x_66))
  )) * (1.0 + (
    (tmpvar_68 - 1.0)
   * 
    ((x_67 * x_67) * ((x_67 * x_67) * x_67))
  )));
  float tmpvar_70;
  tmpvar_70 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_60 * (1.0 - tmpvar_62))
     + tmpvar_62)) + (tmpvar_60 * (
      (tmpvar_9 * (1.0 - tmpvar_62))
     + tmpvar_62))) + 1e-05)
  ) * (tmpvar_64 / 
    (((3.141593 * tmpvar_65) * tmpvar_65) + 1e-07)
  )) * 0.7853982);
  specularTerm_55 = tmpvar_70;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_55 = sqrt(max (0.0001, tmpvar_70));
  };
  float tmpvar_71;
  tmpvar_71 = max (0.0, (specularTerm_55 * tmpvar_9));
  specularTerm_55 = tmpvar_71;
  float tmpvar_72;
  tmpvar_72 = (tmpvar_69 * tmpvar_9);
  float tmpvar_73;
  tmpvar_73 = (tmpvar_56 * tmpvar_56);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_54 = (1.0 - ((0.28 * tmpvar_73) * tmpvar_56));
  } else {
    surfaceReduction_54 = (1.0/(((tmpvar_73 * tmpvar_73) + 1.0)));
  };
  float tmpvar_74;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_74 = 1.0;
  } else {
    tmpvar_74 = 0.0;
  };
  specularTerm_55 = (tmpvar_71 * tmpvar_74);
  float x_75;
  x_75 = (1.0 - tmpvar_61);
  float x_76;
  x_76 = (1.0 - tmpvar_60);
  vec3 tmpvar_77;
  tmpvar_77 = (((tmpvar_3 * 
    (tmpvar_13 + (_LightColor0.xyz * tmpvar_72))
  ) + (
    (specularTerm_55 * _LightColor0.xyz)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_75 * x_75) * (
      (x_75 * x_75)
     * x_75))))
  )) + ((surfaceReduction_54 * tmpvar_12) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_76 * x_76) * ((x_76 * x_76) * x_76))
  ))));
  vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = tmpvar_77;
  c_1.w = tmpvar_78.w;
  c_1.xyz = tmpvar_77;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_79;
  xlat_varoutput_79.xyz = c_1.xyz;
  xlat_varoutput_79.w = 1.0;
  gl_FragData[0] = xlat_varoutput_79;
}


#endif
"
}
SubProgram "metal " {
// Stats: 61 math, 2 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 418
Matrix 176 [glstate_matrix_mvp]
Matrix 240 [unity_ObjectToWorld]
Matrix 304 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [unity_4LightPosX0]
Vector 32 [unity_4LightPosY0]
Vector 48 [unity_4LightPosZ0]
VectorHalf 64 [unity_4LightAtten0] 4
VectorHalf 72 [unity_LightColor] 4 8
VectorHalf 136 [unity_SHBr] 4
VectorHalf 144 [unity_SHBg] 4
VectorHalf 152 [unity_SHBb] 4
VectorHalf 160 [unity_SHC] 4
VectorHalf 368 [unity_ColorSpaceLuminance] 4
Vector 384 [_MainTex_ST]
Vector 400 [_DetailAlbedoMap_ST]
ScalarHalf 416 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 unity_4LightPosX0;
  float4 unity_4LightPosY0;
  float4 unity_4LightPosZ0;
  half4 unity_4LightAtten0;
  half4 unity_LightColor[8];
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float3 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_7 = tmpvar_8.xyz;
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_19);
  half3 normalWorld_20;
  normalWorld_20 = half3(tmpvar_19);
  half4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = half(0.0);
  float3 lightColor0_22;
  lightColor0_22 = float3(_mtl_u.unity_LightColor[0].xyz);
  float3 lightColor1_23;
  lightColor1_23 = float3(_mtl_u.unity_LightColor[1].xyz);
  float3 lightColor2_24;
  lightColor2_24 = float3(_mtl_u.unity_LightColor[2].xyz);
  float3 lightColor3_25;
  lightColor3_25 = float3(_mtl_u.unity_LightColor[3].xyz);
  float4 lightAttenSq_26;
  lightAttenSq_26 = float4(_mtl_u.unity_4LightAtten0);
  float3 normal_27;
  normal_27 = float3(normalWorld_20);
  float3 col_28;
  float4 ndotl_29;
  float4 lengthSq_30;
  float4 tmpvar_31;
  tmpvar_31 = (_mtl_u.unity_4LightPosX0 - tmpvar_8.x);
  float4 tmpvar_32;
  tmpvar_32 = (_mtl_u.unity_4LightPosY0 - tmpvar_8.y);
  float4 tmpvar_33;
  tmpvar_33 = (_mtl_u.unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  float4 tmpvar_34;
  tmpvar_34 = max (float4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * rsqrt(lengthSq_30)));
  ndotl_29 = tmpvar_34;
  float4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (lengthSq_30 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_35.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_35.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_35.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_35.w));
  ambientOrLightmapUV_21.xyz = half3(col_28);
  half3 ambient_36;
  ambient_36 = ambientOrLightmapUV_21.xyz;
  bool tmpvar_37;
  tmpvar_37 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_37) {
    ambient_36 = (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 
      ((ambientOrLightmapUV_21.xyz * (half)0.305306) + (half)0.6821711)
    ) + (half)0.01252288));
  };
  half3 x1_38;
  half4 tmpvar_39;
  tmpvar_39 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_38.x = dot (_mtl_u.unity_SHBr, tmpvar_39);
  x1_38.y = dot (_mtl_u.unity_SHBg, tmpvar_39);
  x1_38.z = dot (_mtl_u.unity_SHBb, tmpvar_39);
  ambient_36 = (ambient_36 + (x1_38 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  ambientOrLightmapUV_21.xyz = ambient_36;
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_7;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat3 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
    u_xlat15 = u_xlat1.y * u_xlat1.y;
    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec4 u_xlat6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat15;
float u_xlat16;
float u_xlat17;
float u_xlat28;
float u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
float u_xlat39;
float u_xlat40;
float u_xlat41;
bool u_xlatb41;
float u_xlat42;
float u_xlat43;
mediump float u_xlat16_43;
float u_xlat44;
bool u_xlatb44;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
    u_xlat40 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat2.xyz = vec3(u_xlat40) * vs_TEXCOORD4.xyz;
    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat3.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;
    u_xlat42 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat4.x = (-_OcclusionStrength) + 1.0;
    u_xlat4.x = u_xlat10_4.y * _OcclusionStrength + u_xlat4.x;
    u_xlat17 = (-_Glossiness) + 1.0;
    u_xlat30.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat30.x = u_xlat30.x + u_xlat30.x;
    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat30.xxx) + u_xlat3.xyz;
    u_xlatb30 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb30){
        u_xlatb30 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb30)) ? u_xlat6.xyz : vs_TEXCOORD8.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat30.x = u_xlat6.y * 0.25;
        u_xlat43 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat44 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat30.x = max(u_xlat43, u_xlat30.x);
        u_xlat6.x = min(u_xlat44, u_xlat30.x);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat2.w = 1.0;
        u_xlat7.x = dot(u_xlat10_7, u_xlat2);
        u_xlat7.y = dot(u_xlat10_8, u_xlat2);
        u_xlat7.z = dot(u_xlat10_6, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat7.x = dot(unity_SHAr, u_xlat2);
        u_xlat7.y = dot(unity_SHAg, u_xlat2);
        u_xlat7.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb41 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat7.xyz = log2(u_xlat6.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat6.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat6.xyz;
    u_xlatb30 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb30){
        u_xlat30.x = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat30.x = inversesqrt(u_xlat30.x);
        u_xlat7.xyz = u_xlat30.xxx * u_xlat5.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat30.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat30.x = min(u_xlat8.z, u_xlat30.x);
        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * u_xlat30.xxx + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat30.x = (-u_xlat17) * 0.699999988 + 1.70000005;
    u_xlat30.x = u_xlat30.x * u_xlat17;
    u_xlat30.x = u_xlat30.x * 6.0;
    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat30.x);
    u_xlat16_43 = log2(u_xlat10_7.w);
    u_xlat43 = u_xlat16_43 * unity_SpecCube0_HDR.y;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb44){
        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb44){
            u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat44 = inversesqrt(u_xlat44);
            u_xlat9.xyz = vec3(u_xlat44) * u_xlat5.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
            u_xlat44 = min(u_xlat10.z, u_xlat44);
            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat30.x);
        u_xlat16_30 = log2(u_xlat10_5.w);
        u_xlat30.x = u_xlat16_30 * unity_SpecCube1_HDR.y;
        u_xlat30.x = exp2(u_xlat30.x);
        u_xlat30.x = u_xlat30.x * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * u_xlat30.xxx;
        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat5.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = u_xlat4.xxx * u_xlat8.xyz;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat40) + _WorldSpaceLightPos0.xyz;
    u_xlat40 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat40 = max(u_xlat40, 0.00100000005);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat7.xyz = vec3(u_xlat40) * u_xlat7.xyz;
    u_xlat40 = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat40 = max(u_xlat40, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat28 = u_xlat17 * u_xlat17;
    u_xlat3.x = (-u_xlat17) * u_xlat17 + 1.0;
    u_xlat16 = u_xlat2.x * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat42 * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat42 * u_xlat16 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat16 = u_xlat28 * u_xlat28;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat30.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
    u_xlat40 = u_xlat40 * u_xlat30.x + 1.0;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat40 = u_xlat40 * 3.14159274 + 1.00000001e-07;
    u_xlat40 = u_xlat16 / u_xlat40;
    u_xlat16 = (-u_xlat42) + 1.0;
    u_xlat29 = u_xlat16 * u_xlat16;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat16 = u_xlat16 * u_xlat29;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat29 = u_xlat2.x * u_xlat2.x;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat2.x = u_xlat2.x * u_xlat29;
    u_xlat29 = u_xlat2.y * u_xlat2.y;
    u_xlat29 = dot(vec2(u_xlat29), vec2(u_xlat17));
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat16 = u_xlat29 * u_xlat16 + 1.0;
    u_xlat29 = u_xlat29 * u_xlat2.x + 1.0;
    u_xlat16 = u_xlat29 * u_xlat16;
    u_xlat40 = u_xlat40 * u_xlat3.x;
    u_xlat40 = u_xlat40 * 0.785398185;
    u_xlat3.x = max(u_xlat40, 9.99999975e-05);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat40 = (u_xlatb41) ? u_xlat3.x : u_xlat40;
    u_xlat40 = u_xlat42 * u_xlat40;
    u_xlat40 = max(u_xlat40, 0.0);
    u_xlat3.x = u_xlat42 * u_xlat16;
    u_xlat28 = u_xlat28 * u_xlat17;
    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;
    u_xlat16 = float(1.0) / u_xlat30.y;
    u_xlat28 = (u_xlatb41) ? u_xlat28 : u_xlat16;
    u_xlat41 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb41 = u_xlat41!=0.0;
    u_xlat41 = u_xlatb41 ? 1.0 : float(0.0);
    u_xlat40 = u_xlat40 * u_xlat41;
    u_xlat39 = (-u_xlat39) + _Glossiness;
    u_xlat39 = u_xlat39 + 1.0;
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
    u_xlat3.xyz = u_xlat6.xyz * u_xlat4.xxx + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat40) * _LightColor0.xyz;
    u_xlat40 = (-u_xlat2.y) + 1.0;
    u_xlat15.x = u_xlat40 * u_xlat40;
    u_xlat15.x = u_xlat15.x * u_xlat15.x;
    u_xlat40 = u_xlat40 * u_xlat15.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat28);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat39);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat15.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 174 math, 6 textures, 12 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 ambientOrLightmapUV_26;
  ambientOrLightmapUV_26.xy = vec2(0.0, 0.0);
  ambientOrLightmapUV_26.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_26;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_11 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_12.w) * tmpvar_12.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_6, (tmpvar_13.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_13.w));
  tmpvar_11 = (tmpvar_11 * tmpvar_8);
  tmpvar_10 = vec3(0.0, 0.0, 0.0);
  float tmpvar_14;
  vec3 tmpvar_15;
  tmpvar_14 = (1.0 - _Glossiness);
  tmpvar_15 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 originalReflUVW_16;
  vec3 specular_17;
  originalReflUVW_16 = tmpvar_15;
  vec3 worldRefl_18;
  worldRefl_18 = tmpvar_15;
  vec3 worldPos_19;
  worldPos_19 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_20;
    tmpvar_20 = normalize(tmpvar_15);
    vec3 tmpvar_21;
    tmpvar_21 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_20);
    vec3 tmpvar_22;
    tmpvar_22 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_20);
    bvec3 tmpvar_23;
    tmpvar_23 = greaterThan (tmpvar_20, vec3(0.0, 0.0, 0.0));
    float tmpvar_24;
    if (tmpvar_23.x) {
      tmpvar_24 = tmpvar_21.x;
    } else {
      tmpvar_24 = tmpvar_22.x;
    };
    float tmpvar_25;
    if (tmpvar_23.y) {
      tmpvar_25 = tmpvar_21.y;
    } else {
      tmpvar_25 = tmpvar_22.y;
    };
    float tmpvar_26;
    if (tmpvar_23.z) {
      tmpvar_26 = tmpvar_21.z;
    } else {
      tmpvar_26 = tmpvar_22.z;
    };
    worldPos_19 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_18 = (worldPos_19 + (tmpvar_20 * min (
      min (tmpvar_24, tmpvar_25)
    , tmpvar_26)));
  };
  tmpvar_15 = worldRefl_18;
  vec4 tmpvar_27;
  tmpvar_27.xyz = worldRefl_18;
  tmpvar_27.w = ((tmpvar_14 * (1.7 - 
    (0.7 * tmpvar_14)
  )) * 6.0);
  vec4 tmpvar_28;
  tmpvar_28 = textureCubeLod (unity_SpecCube0, worldRefl_18, tmpvar_27.w);
  vec3 tmpvar_29;
  tmpvar_29 = ((unity_SpecCube0_HDR.x * pow (tmpvar_28.w, unity_SpecCube0_HDR.y)) * tmpvar_28.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_30;
    worldRefl_30 = originalReflUVW_16;
    vec3 worldPos_31;
    worldPos_31 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_32;
      tmpvar_32 = normalize(originalReflUVW_16);
      vec3 tmpvar_33;
      tmpvar_33 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_32);
      vec3 tmpvar_34;
      tmpvar_34 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_32);
      bvec3 tmpvar_35;
      tmpvar_35 = greaterThan (tmpvar_32, vec3(0.0, 0.0, 0.0));
      float tmpvar_36;
      if (tmpvar_35.x) {
        tmpvar_36 = tmpvar_33.x;
      } else {
        tmpvar_36 = tmpvar_34.x;
      };
      float tmpvar_37;
      if (tmpvar_35.y) {
        tmpvar_37 = tmpvar_33.y;
      } else {
        tmpvar_37 = tmpvar_34.y;
      };
      float tmpvar_38;
      if (tmpvar_35.z) {
        tmpvar_38 = tmpvar_33.z;
      } else {
        tmpvar_38 = tmpvar_34.z;
      };
      worldPos_31 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_30 = (worldPos_31 + (tmpvar_32 * min (
        min (tmpvar_36, tmpvar_37)
      , tmpvar_38)));
    };
    tmpvar_15 = worldRefl_30;
    vec4 tmpvar_39;
    tmpvar_39.xyz = worldRefl_30;
    tmpvar_39.w = ((tmpvar_14 * (1.7 - 
      (0.7 * tmpvar_14)
    )) * 6.0);
    vec4 tmpvar_40;
    tmpvar_40 = textureCubeLod (unity_SpecCube1, worldRefl_30, tmpvar_39.w);
    specular_17 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_40.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_40.xyz), tmpvar_29, unity_SpecCube0_BoxMin.www);
  } else {
    specular_17 = tmpvar_29;
  };
  tmpvar_10 = (specular_17 * tmpvar_8);
  vec3 viewDir_41;
  viewDir_41 = -(tmpvar_7);
  float surfaceReduction_42;
  float specularTerm_43;
  float tmpvar_44;
  tmpvar_44 = (1.0 - _Glossiness);
  vec3 tmpvar_45;
  vec3 inVec_46;
  inVec_46 = (_WorldSpaceLightPos0.xyz + viewDir_41);
  tmpvar_45 = (inVec_46 * inversesqrt(max (0.001, 
    dot (inVec_46, inVec_46)
  )));
  float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_6, tmpvar_45));
  float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, viewDir_41));
  float tmpvar_49;
  tmpvar_49 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_45));
  float tmpvar_50;
  tmpvar_50 = (tmpvar_44 * tmpvar_44);
  float tmpvar_51;
  tmpvar_51 = (tmpvar_44 * tmpvar_44);
  float tmpvar_52;
  tmpvar_52 = (tmpvar_51 * tmpvar_51);
  float tmpvar_53;
  tmpvar_53 = (((tmpvar_47 * tmpvar_47) * (tmpvar_52 - 1.0)) + 1.0);
  float x_54;
  x_54 = (1.0 - tmpvar_9);
  float x_55;
  x_55 = (1.0 - tmpvar_48);
  float tmpvar_56;
  tmpvar_56 = (0.5 + ((2.0 * tmpvar_49) * (tmpvar_49 * tmpvar_44)));
  float tmpvar_57;
  tmpvar_57 = ((1.0 + (
    (tmpvar_56 - 1.0)
   * 
    ((x_54 * x_54) * ((x_54 * x_54) * x_54))
  )) * (1.0 + (
    (tmpvar_56 - 1.0)
   * 
    ((x_55 * x_55) * ((x_55 * x_55) * x_55))
  )));
  float tmpvar_58;
  tmpvar_58 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_48 * (1.0 - tmpvar_50))
     + tmpvar_50)) + (tmpvar_48 * (
      (tmpvar_9 * (1.0 - tmpvar_50))
     + tmpvar_50))) + 1e-05)
  ) * (tmpvar_52 / 
    (((3.141593 * tmpvar_53) * tmpvar_53) + 1e-07)
  )) * 0.7853982);
  specularTerm_43 = tmpvar_58;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_43 = sqrt(max (0.0001, tmpvar_58));
  };
  float tmpvar_59;
  tmpvar_59 = max (0.0, (specularTerm_43 * tmpvar_9));
  specularTerm_43 = tmpvar_59;
  float tmpvar_60;
  tmpvar_60 = (tmpvar_57 * tmpvar_9);
  float tmpvar_61;
  tmpvar_61 = (tmpvar_44 * tmpvar_44);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_42 = (1.0 - ((0.28 * tmpvar_61) * tmpvar_44));
  } else {
    surfaceReduction_42 = (1.0/(((tmpvar_61 * tmpvar_61) + 1.0)));
  };
  float tmpvar_62;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_62 = 1.0;
  } else {
    tmpvar_62 = 0.0;
  };
  specularTerm_43 = (tmpvar_59 * tmpvar_62);
  float x_63;
  x_63 = (1.0 - tmpvar_49);
  float x_64;
  x_64 = (1.0 - tmpvar_48);
  vec3 tmpvar_65;
  tmpvar_65 = (((tmpvar_3 * 
    (tmpvar_11 + (_LightColor0.xyz * tmpvar_60))
  ) + (
    (specularTerm_43 * _LightColor0.xyz)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_63 * x_63) * (
      (x_63 * x_63)
     * x_63))))
  )) + ((surfaceReduction_42 * tmpvar_10) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_64 * x_64) * ((x_64 * x_64) * x_64))
  ))));
  vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = tmpvar_65;
  c_1.w = tmpvar_66.w;
  c_1.xyz = tmpvar_65;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "metal " {
// Stats: 25 math, 1 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 274
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Matrix 144 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [unity_WorldTransformParams]
Vector 224 [unity_DynamicLightmapST]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  float3 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  float4 tmpvar_11;
  float4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_11 = (_mtl_u.glstate_matrix_mvp * tmpvar_12);
  float4 texcoord_13;
  texcoord_13.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_14;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_15;
  float3 n_16;
  n_16 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_15 = half3(n_16);
  float3 norm_17;
  norm_17 = float3(tmpvar_1);
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].x;
  v_18.y = _mtl_u.unity_WorldToObject[1].x;
  v_18.z = _mtl_u.unity_WorldToObject[2].x;
  v_18.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].y;
  v_19.y = _mtl_u.unity_WorldToObject[1].y;
  v_19.z = _mtl_u.unity_WorldToObject[2].y;
  v_19.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].z;
  v_20.y = _mtl_u.unity_WorldToObject[1].z;
  v_20.z = _mtl_u.unity_WorldToObject[2].z;
  v_20.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  float3 dir_22;
  dir_22 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_23;
  tmpvar_23[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_23[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_23[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = float(tmpvar_4.w);
  half3 normal_25;
  normal_25 = half3(tmpvar_21);
  half3 tangent_26;
  tangent_26 = half3(tmpvar_24.xyz);
  half tangentSign_27;
  tangentSign_27 = half(tmpvar_24.w);
  half xlat_varsign_28;
  float tmpvar_29;
  tmpvar_29 = ((float)tangentSign_27 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_28 = half(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * xlat_varsign_28);
  half3x3 tmpvar_31;
  tmpvar_31[0].x = tangent_26.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = normal_25.x;
  tmpvar_31[1].x = tangent_26.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = normal_25.y;
  tmpvar_31[2].x = tangent_26.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = normal_25.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_31);
  float3 v_32;
  v_32.x = tangentToWorld_5[0].x;
  v_32.y = tangentToWorld_5[1].x;
  v_32.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].y;
  v_33.y = tangentToWorld_5[1].y;
  v_33.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].z;
  v_34.y = tangentToWorld_5[1].z;
  v_34.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_34);
  half4 ambientOrLightmapUV_35;
  ambientOrLightmapUV_35.xy = half2(float2(0.0, 0.0));
  ambientOrLightmapUV_35.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_11;
  _mtl_o.xlv_TEXCOORD0 = texcoord_13;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_15;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_35;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
float u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
vec3 u_xlat10;
bvec3 u_xlatb11;
vec3 u_xlat14;
float u_xlat15;
vec3 u_xlat16;
mediump float u_xlat16_16;
float u_xlat26;
float u_xlat27;
float u_xlat36;
float u_xlat37;
float u_xlat38;
float u_xlat39;
float u_xlat41;
mediump float u_xlat16_41;
bool u_xlatb41;
float u_xlat42;
mediump float u_xlat16_42;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat36 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
    u_xlat37 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat2.xyz = vec3(u_xlat37) * vs_TEXCOORD4.xyz;
    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat3.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;
    u_xlat2.w = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat39 = (-_OcclusionStrength) + 1.0;
    u_xlat39 = u_xlat10_4.y * _OcclusionStrength + u_xlat39;
    u_xlat4 = (-_Glossiness) + 1.0;
    u_xlat16.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xyz = u_xlat2.xyz * (-u_xlat16.xxx) + u_xlat3.xyz;
    u_xlat10_5 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat41 = u_xlat10_5.w * unity_DynamicLightmap_HDR.x;
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat41);
    u_xlat5.xyz = log2(u_xlat5.xyz);
    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat5.xyz = exp2(u_xlat5.xyz);
    u_xlat10_6 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat41 = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat41 = u_xlat41 + 0.5;
    u_xlat5.xyz = vec3(u_xlat41) * u_xlat5.xyz;
    u_xlat16_41 = max(u_xlat10_6.w, 9.99999975e-05);
    u_xlat5.xyz = u_xlat5.xyz / vec3(u_xlat16_41);
    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb41){
        u_xlat41 = dot(u_xlat16.xyz, u_xlat16.xyz);
        u_xlat41 = inversesqrt(u_xlat41);
        u_xlat6.xyz = u_xlat16.xyz * vec3(u_xlat41);
        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
        u_xlat7.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
        u_xlat7.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
        u_xlat7.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
        u_xlat41 = min(u_xlat7.y, u_xlat7.x);
        u_xlat41 = min(u_xlat7.z, u_xlat41);
        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat41) + u_xlat7.xyz;
    } else {
        u_xlat6.xyz = u_xlat16.xyz;
    //ENDIF
    }
    u_xlat41 = (-u_xlat4) * 0.699999988 + 1.70000005;
    u_xlat41 = u_xlat4 * u_xlat41;
    u_xlat41 = u_xlat41 * 6.0;
    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat41);
    u_xlat16_42 = log2(u_xlat10_6.w);
    u_xlat42 = u_xlat16_42 * unity_SpecCube0_HDR.y;
    u_xlat42 = exp2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat42);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat16.xyz, u_xlat16.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat8.xyz = u_xlat16.xyz * vec3(u_xlat43);
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
            u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat43 = min(u_xlat9.y, u_xlat9.x);
            u_xlat43 = min(u_xlat9.z, u_xlat43);
            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat16.xyz = u_xlat8.xyz * vec3(u_xlat43) + u_xlat9.xyz;
        //ENDIF
        }
        u_xlat10_8 = textureLod(unity_SpecCube1, u_xlat16.xyz, u_xlat41);
        u_xlat16_16 = log2(u_xlat10_8.w);
        u_xlat16.x = u_xlat16_16 * unity_SpecCube1_HDR.y;
        u_xlat16.x = exp2(u_xlat16.x);
        u_xlat16.x = u_xlat16.x * unity_SpecCube1_HDR.x;
        u_xlat16.xyz = u_xlat10_8.xyz * u_xlat16.xxx;
        u_xlat6.xyz = vec3(u_xlat42) * u_xlat10_6.xyz + (-u_xlat16.xyz);
        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16.xyz;
    //ENDIF
    }
    u_xlat16.xyz = vec3(u_xlat39) * u_xlat7.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat37) + _WorldSpaceLightPos0.xyz;
    u_xlat37 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat37 = max(u_xlat37, 0.00100000005);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz;
    u_xlat37 = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat37 = max(u_xlat37, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat26 = u_xlat4 * u_xlat4;
    u_xlat3.x = (-u_xlat4) * u_xlat4 + 1.0;
    u_xlat15 = u_xlat2.x * u_xlat3.x + u_xlat26;
    u_xlat3.x = u_xlat2.w * u_xlat3.x + u_xlat26;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat2.w * u_xlat15 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat15 = u_xlat26 * u_xlat26;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat6.xy = vec2(u_xlat26) * vec2(u_xlat26) + vec2(-1.0, 1.0);
    u_xlat37 = u_xlat37 * u_xlat6.x + 1.0;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat37 = u_xlat37 * 3.14159274 + 1.00000001e-07;
    u_xlat37 = u_xlat15 / u_xlat37;
    u_xlat15 = (-u_xlat2.w) + 1.0;
    u_xlat27 = u_xlat15 * u_xlat15;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat15 = u_xlat15 * u_xlat27;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat27 = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat2.x = u_xlat2.x * u_xlat27;
    u_xlat27 = u_xlat2.y * u_xlat2.y;
    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat4));
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat15 = u_xlat27 * u_xlat15 + 1.0;
    u_xlat27 = u_xlat27 * u_xlat2.x + 1.0;
    u_xlat15 = u_xlat27 * u_xlat15;
    u_xlat37 = u_xlat37 * u_xlat3.x;
    u_xlat37 = u_xlat37 * 0.785398185;
    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat27 = max(u_xlat37, 9.99999975e-05);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat37 = (u_xlatb3) ? u_xlat27 : u_xlat37;
    u_xlat37 = u_xlat2.w * u_xlat37;
    u_xlat37 = max(u_xlat37, 0.0);
    u_xlat38 = u_xlat2.w * u_xlat15;
    u_xlat26 = u_xlat26 * u_xlat4;
    u_xlat26 = (-u_xlat26) * 0.280000001 + 1.0;
    u_xlat15 = float(1.0) / u_xlat6.y;
    u_xlat26 = (u_xlatb3) ? u_xlat26 : u_xlat15;
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat37 = u_xlat37 * u_xlat3.x;
    u_xlat36 = (-u_xlat36) + _Glossiness;
    u_xlat36 = u_xlat36 + 1.0;
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat38) * _LightColor0.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat3.xyz;
    u_xlat5.xyz = vec3(u_xlat37) * _LightColor0.xyz;
    u_xlat37 = (-u_xlat2.y) + 1.0;
    u_xlat14.x = u_xlat37 * u_xlat37;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat37 = u_xlat37 * u_xlat14.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat0.xyz;
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat14.xyz = u_xlat16.xyz * vec3(u_xlat26);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat36);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat14.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 196 math, 8 textures, 15 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_12;
  n_12 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_16;
  vec4 o_17;
  vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_8 * 0.5);
  vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_8.zw;
  vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  vec3 col_21;
  vec4 ndotl_22;
  vec4 lengthSq_23;
  vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_23 = (tmpvar_24 * tmpvar_24);
  lengthSq_23 = (lengthSq_23 + (tmpvar_25 * tmpvar_25));
  lengthSq_23 = (lengthSq_23 + (tmpvar_26 * tmpvar_26));
  ndotl_22 = (tmpvar_24 * tmpvar_16.x);
  ndotl_22 = (ndotl_22 + (tmpvar_25 * tmpvar_16.y));
  ndotl_22 = (ndotl_22 + (tmpvar_26 * tmpvar_16.z));
  vec4 tmpvar_27;
  tmpvar_27 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_22 * inversesqrt(lengthSq_23)));
  ndotl_22 = tmpvar_27;
  vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_27 * (1.0/((1.0 + 
    (lengthSq_23 * unity_4LightAtten0)
  ))));
  col_21 = (unity_LightColor[0].xyz * tmpvar_28.x);
  col_21 = (col_21 + (unity_LightColor[1].xyz * tmpvar_28.y));
  col_21 = (col_21 + (unity_LightColor[2].xyz * tmpvar_28.z));
  col_21 = (col_21 + (unity_LightColor[3].xyz * tmpvar_28.w));
  ambientOrLightmapUV_20.xyz = col_21;
  vec3 ambient_29;
  ambient_29 = ambientOrLightmapUV_20.xyz;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_29 = (col_21 * ((col_21 * 
      ((col_21 * 0.305306) + 0.6821711)
    ) + 0.01252288));
  };
  vec3 x1_30;
  vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_16.xyzz * tmpvar_16.yzzx);
  x1_30.x = dot (unity_SHBr, tmpvar_31);
  x1_30.y = dot (unity_SHBg, tmpvar_31);
  x1_30.z = dot (unity_SHBb, tmpvar_31);
  ambient_29 = (ambient_29 + (x1_30 + (unity_SHC.xyz * 
    ((tmpvar_16.x * tmpvar_16.x) - (tmpvar_16.y * tmpvar_16.y))
  )));
  ambientOrLightmapUV_20.xyz = ambient_29;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = n_12;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD6 = o_17;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  float tmpvar_10;
  tmpvar_10 = (1.0 - _Glossiness);
  vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 tmpvar_12;
  vec3 tmpvar_13;
  vec3 tmpvar_14;
  tmpvar_14 = vec3(0.0, 0.0, 0.0);
  tmpvar_13 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  vec3 ambient_15;
  ambient_15 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_16;
  ambient_contrib_16 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_17;
    tmpvar_17.w = 1.0;
    tmpvar_17.xyz = tmpvar_6;
    vec3 x1_18;
    vec3 texCoord_19;
    vec3 tmpvar_20;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_21;
      tmpvar_21.w = 1.0;
      tmpvar_21.xyz = xlv_TEXCOORD8;
      tmpvar_20 = (unity_ProbeVolumeWorldToObject * tmpvar_21).xyz;
    } else {
      tmpvar_20 = xlv_TEXCOORD8;
    };
    vec3 tmpvar_22;
    tmpvar_22 = ((tmpvar_20 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_19.yz = tmpvar_22.yz;
    texCoord_19.x = (tmpvar_22.x * 0.25);
    float tmpvar_23;
    float tmpvar_24;
    tmpvar_24 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_23 = clamp (texCoord_19.x, tmpvar_24, (0.25 - tmpvar_24));
    texCoord_19.x = tmpvar_23;
    vec4 tmpvar_25;
    tmpvar_25 = texture3D (unity_ProbeVolumeSH, texCoord_19);
    texCoord_19.x = (tmpvar_23 + 0.25);
    vec4 tmpvar_26;
    tmpvar_26 = texture3D (unity_ProbeVolumeSH, texCoord_19);
    texCoord_19.x = (tmpvar_23 + 0.5);
    x1_18.x = dot (tmpvar_25, tmpvar_17);
    x1_18.y = dot (tmpvar_26, tmpvar_17);
    x1_18.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_19), tmpvar_17);
    ambient_contrib_16 = x1_18;
  } else {
    vec4 tmpvar_27;
    tmpvar_27.w = 1.0;
    tmpvar_27.xyz = tmpvar_6;
    vec3 x_28;
    x_28.x = dot (unity_SHAr, tmpvar_27);
    x_28.y = dot (unity_SHAg, tmpvar_27);
    x_28.z = dot (unity_SHAb, tmpvar_27);
    ambient_contrib_16 = x_28;
  };
  vec3 tmpvar_29;
  tmpvar_29 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_16));
  ambient_15 = tmpvar_29;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_15 = max (((1.055 * 
      pow (max (tmpvar_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_14 = (ambient_15 * tmpvar_8);
  tmpvar_12 = vec3(0.0, 0.0, 0.0);
  vec3 specular_30;
  vec3 worldRefl_31;
  worldRefl_31 = tmpvar_11;
  vec3 worldPos_32;
  worldPos_32 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_33;
    tmpvar_33 = normalize(tmpvar_11);
    vec3 tmpvar_34;
    tmpvar_34 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_33);
    vec3 tmpvar_35;
    tmpvar_35 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_33);
    bvec3 tmpvar_36;
    tmpvar_36 = greaterThan (tmpvar_33, vec3(0.0, 0.0, 0.0));
    float tmpvar_37;
    if (tmpvar_36.x) {
      tmpvar_37 = tmpvar_34.x;
    } else {
      tmpvar_37 = tmpvar_35.x;
    };
    float tmpvar_38;
    if (tmpvar_36.y) {
      tmpvar_38 = tmpvar_34.y;
    } else {
      tmpvar_38 = tmpvar_35.y;
    };
    float tmpvar_39;
    if (tmpvar_36.z) {
      tmpvar_39 = tmpvar_34.z;
    } else {
      tmpvar_39 = tmpvar_35.z;
    };
    worldPos_32 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_31 = (worldPos_32 + (tmpvar_33 * min (
      min (tmpvar_37, tmpvar_38)
    , tmpvar_39)));
  };
  vec4 tmpvar_40;
  tmpvar_40.xyz = worldRefl_31;
  tmpvar_40.w = ((tmpvar_10 * (1.7 - 
    (0.7 * tmpvar_10)
  )) * 6.0);
  vec4 tmpvar_41;
  tmpvar_41 = textureCubeLod (unity_SpecCube0, worldRefl_31, tmpvar_40.w);
  vec3 tmpvar_42;
  tmpvar_42 = ((unity_SpecCube0_HDR.x * pow (tmpvar_41.w, unity_SpecCube0_HDR.y)) * tmpvar_41.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_43;
    worldRefl_43 = tmpvar_11;
    vec3 worldPos_44;
    worldPos_44 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_45;
      tmpvar_45 = normalize(tmpvar_11);
      vec3 tmpvar_46;
      tmpvar_46 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_45);
      vec3 tmpvar_47;
      tmpvar_47 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_45);
      bvec3 tmpvar_48;
      tmpvar_48 = greaterThan (tmpvar_45, vec3(0.0, 0.0, 0.0));
      float tmpvar_49;
      if (tmpvar_48.x) {
        tmpvar_49 = tmpvar_46.x;
      } else {
        tmpvar_49 = tmpvar_47.x;
      };
      float tmpvar_50;
      if (tmpvar_48.y) {
        tmpvar_50 = tmpvar_46.y;
      } else {
        tmpvar_50 = tmpvar_47.y;
      };
      float tmpvar_51;
      if (tmpvar_48.z) {
        tmpvar_51 = tmpvar_46.z;
      } else {
        tmpvar_51 = tmpvar_47.z;
      };
      worldPos_44 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_43 = (worldPos_44 + (tmpvar_45 * min (
        min (tmpvar_49, tmpvar_50)
      , tmpvar_51)));
    };
    vec4 tmpvar_52;
    tmpvar_52.xyz = worldRefl_43;
    tmpvar_52.w = ((tmpvar_10 * (1.7 - 
      (0.7 * tmpvar_10)
    )) * 6.0);
    vec4 tmpvar_53;
    tmpvar_53 = textureCubeLod (unity_SpecCube1, worldRefl_43, tmpvar_52.w);
    specular_30 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_53.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_53.xyz), tmpvar_42, unity_SpecCube0_BoxMin.www);
  } else {
    specular_30 = tmpvar_42;
  };
  tmpvar_12 = (specular_30 * tmpvar_8);
  vec3 viewDir_54;
  viewDir_54 = -(tmpvar_7);
  float surfaceReduction_55;
  float specularTerm_56;
  float tmpvar_57;
  tmpvar_57 = (1.0 - _Glossiness);
  vec3 tmpvar_58;
  vec3 inVec_59;
  inVec_59 = (_WorldSpaceLightPos0.xyz + viewDir_54);
  tmpvar_58 = (inVec_59 * inversesqrt(max (0.001, 
    dot (inVec_59, inVec_59)
  )));
  float tmpvar_60;
  tmpvar_60 = max (0.0, dot (tmpvar_6, tmpvar_58));
  float tmpvar_61;
  tmpvar_61 = max (0.0, dot (tmpvar_6, viewDir_54));
  float tmpvar_62;
  tmpvar_62 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_58));
  float tmpvar_63;
  tmpvar_63 = (tmpvar_57 * tmpvar_57);
  float tmpvar_64;
  tmpvar_64 = (tmpvar_57 * tmpvar_57);
  float tmpvar_65;
  tmpvar_65 = (tmpvar_64 * tmpvar_64);
  float tmpvar_66;
  tmpvar_66 = (((tmpvar_60 * tmpvar_60) * (tmpvar_65 - 1.0)) + 1.0);
  float x_67;
  x_67 = (1.0 - tmpvar_9);
  float x_68;
  x_68 = (1.0 - tmpvar_61);
  float tmpvar_69;
  tmpvar_69 = (0.5 + ((2.0 * tmpvar_62) * (tmpvar_62 * tmpvar_57)));
  float tmpvar_70;
  tmpvar_70 = ((1.0 + (
    (tmpvar_69 - 1.0)
   * 
    ((x_67 * x_67) * ((x_67 * x_67) * x_67))
  )) * (1.0 + (
    (tmpvar_69 - 1.0)
   * 
    ((x_68 * x_68) * ((x_68 * x_68) * x_68))
  )));
  float tmpvar_71;
  tmpvar_71 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_61 * (1.0 - tmpvar_63))
     + tmpvar_63)) + (tmpvar_61 * (
      (tmpvar_9 * (1.0 - tmpvar_63))
     + tmpvar_63))) + 1e-05)
  ) * (tmpvar_65 / 
    (((3.141593 * tmpvar_66) * tmpvar_66) + 1e-07)
  )) * 0.7853982);
  specularTerm_56 = tmpvar_71;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_56 = sqrt(max (0.0001, tmpvar_71));
  };
  float tmpvar_72;
  tmpvar_72 = max (0.0, (specularTerm_56 * tmpvar_9));
  specularTerm_56 = tmpvar_72;
  float tmpvar_73;
  tmpvar_73 = (tmpvar_70 * tmpvar_9);
  float tmpvar_74;
  tmpvar_74 = (tmpvar_57 * tmpvar_57);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_55 = (1.0 - ((0.28 * tmpvar_74) * tmpvar_57));
  } else {
    surfaceReduction_55 = (1.0/(((tmpvar_74 * tmpvar_74) + 1.0)));
  };
  float tmpvar_75;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_75 = 1.0;
  } else {
    tmpvar_75 = 0.0;
  };
  specularTerm_56 = (tmpvar_72 * tmpvar_75);
  float x_76;
  x_76 = (1.0 - tmpvar_62);
  float x_77;
  x_77 = (1.0 - tmpvar_61);
  vec3 tmpvar_78;
  tmpvar_78 = (((tmpvar_3 * 
    (tmpvar_14 + (tmpvar_13 * tmpvar_73))
  ) + (
    (specularTerm_56 * tmpvar_13)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_76 * x_76) * (
      (x_76 * x_76)
     * x_76))))
  )) + ((surfaceReduction_55 * tmpvar_12) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_77 * x_77) * ((x_77 * x_77) * x_77))
  ))));
  vec4 tmpvar_79;
  tmpvar_79.w = 1.0;
  tmpvar_79.xyz = tmpvar_78;
  c_1.w = tmpvar_79.w;
  c_1.xyz = tmpvar_78;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_80;
  xlat_varoutput_80.xyz = c_1.xyz;
  xlat_varoutput_80.w = 1.0;
  gl_FragData[0] = xlat_varoutput_80;
}


#endif
"
}
SubProgram "metal " {
// Stats: 64 math, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 434
Matrix 192 [glstate_matrix_mvp]
Matrix 256 [unity_ObjectToWorld]
Matrix 320 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 32 [unity_4LightPosX0]
Vector 48 [unity_4LightPosY0]
Vector 64 [unity_4LightPosZ0]
VectorHalf 80 [unity_4LightAtten0] 4
VectorHalf 88 [unity_LightColor] 4 8
VectorHalf 152 [unity_SHBr] 4
VectorHalf 160 [unity_SHBg] 4
VectorHalf 168 [unity_SHBb] 4
VectorHalf 176 [unity_SHC] 4
VectorHalf 384 [unity_ColorSpaceLuminance] 4
Vector 400 [_MainTex_ST]
Vector 416 [_DetailAlbedoMap_ST]
ScalarHalf 432 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4 unity_4LightPosX0;
  float4 unity_4LightPosY0;
  float4 unity_4LightPosZ0;
  half4 unity_4LightAtten0;
  half4 unity_LightColor[8];
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float3 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_7 = tmpvar_8.xyz;
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_19);
  float4 o_20;
  float4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  float2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _mtl_u._ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  half3 normalWorld_23;
  normalWorld_23 = half3(tmpvar_19);
  half4 ambientOrLightmapUV_24;
  ambientOrLightmapUV_24.w = half(0.0);
  float3 lightColor0_25;
  lightColor0_25 = float3(_mtl_u.unity_LightColor[0].xyz);
  float3 lightColor1_26;
  lightColor1_26 = float3(_mtl_u.unity_LightColor[1].xyz);
  float3 lightColor2_27;
  lightColor2_27 = float3(_mtl_u.unity_LightColor[2].xyz);
  float3 lightColor3_28;
  lightColor3_28 = float3(_mtl_u.unity_LightColor[3].xyz);
  float4 lightAttenSq_29;
  lightAttenSq_29 = float4(_mtl_u.unity_4LightAtten0);
  float3 normal_30;
  normal_30 = float3(normalWorld_23);
  float3 col_31;
  float4 ndotl_32;
  float4 lengthSq_33;
  float4 tmpvar_34;
  tmpvar_34 = (_mtl_u.unity_4LightPosX0 - tmpvar_8.x);
  float4 tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_4LightPosY0 - tmpvar_8.y);
  float4 tmpvar_36;
  tmpvar_36 = (_mtl_u.unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_33 = (tmpvar_34 * tmpvar_34);
  lengthSq_33 = (lengthSq_33 + (tmpvar_35 * tmpvar_35));
  lengthSq_33 = (lengthSq_33 + (tmpvar_36 * tmpvar_36));
  ndotl_32 = (tmpvar_34 * normal_30.x);
  ndotl_32 = (ndotl_32 + (tmpvar_35 * normal_30.y));
  ndotl_32 = (ndotl_32 + (tmpvar_36 * normal_30.z));
  float4 tmpvar_37;
  tmpvar_37 = max (float4(0.0, 0.0, 0.0, 0.0), (ndotl_32 * rsqrt(lengthSq_33)));
  ndotl_32 = tmpvar_37;
  float4 tmpvar_38;
  tmpvar_38 = (tmpvar_37 * (1.0/((1.0 + 
    (lengthSq_33 * lightAttenSq_29)
  ))));
  col_31 = (lightColor0_25 * tmpvar_38.x);
  col_31 = (col_31 + (lightColor1_26 * tmpvar_38.y));
  col_31 = (col_31 + (lightColor2_27 * tmpvar_38.z));
  col_31 = (col_31 + (lightColor3_28 * tmpvar_38.w));
  ambientOrLightmapUV_24.xyz = half3(col_31);
  half3 ambient_39;
  ambient_39 = ambientOrLightmapUV_24.xyz;
  bool tmpvar_40;
  tmpvar_40 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_40) {
    ambient_39 = (ambientOrLightmapUV_24.xyz * ((ambientOrLightmapUV_24.xyz * 
      ((ambientOrLightmapUV_24.xyz * (half)0.305306) + (half)0.6821711)
    ) + (half)0.01252288));
  };
  half3 x1_41;
  half4 tmpvar_42;
  tmpvar_42 = (normalWorld_23.xyzz * normalWorld_23.yzzx);
  x1_41.x = dot (_mtl_u.unity_SHBr, tmpvar_42);
  x1_41.y = dot (_mtl_u.unity_SHBg, tmpvar_42);
  x1_41.z = dot (_mtl_u.unity_SHBb, tmpvar_42);
  ambient_39 = (ambient_39 + (x1_41 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_23.x * normalWorld_23.x) - (normalWorld_23.y * normalWorld_23.y))
  )));
  ambientOrLightmapUV_24.xyz = ambient_39;
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_24;
  _mtl_o.xlv_TEXCOORD6 = o_20;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_7;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat2.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat2.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat2.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat3.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat3.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat3.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat3.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat3.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat4 = inversesqrt(u_xlat3);
    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat4;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat3 * u_xlat1;
    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz;
    u_xlatb19 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat1.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat19 = u_xlat2.y * u_xlat2.y;
    u_xlat19 = u_xlat2.x * u_xlat2.x + (-u_xlat19);
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
lowp vec4 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
vec4 u_xlat7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
lowp vec4 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
vec3 u_xlat12;
bvec3 u_xlatb13;
vec3 u_xlat16;
float u_xlat17;
float u_xlat18;
float u_xlat30;
float u_xlat31;
float u_xlat32;
float u_xlat42;
float u_xlat43;
float u_xlat44;
bool u_xlatb44;
float u_xlat45;
float u_xlat46;
mediump float u_xlat16_46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat43 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat2.xyz = vec3(u_xlat43) * vs_TEXCOORD4.xyz;
    u_xlat43 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat3.xyz = vec3(u_xlat43) * vs_TEXCOORD1.xyz;
    u_xlat45 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat45 = max(u_xlat45, 0.0);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat18 = (-_OcclusionStrength) + 1.0;
    u_xlat18 = u_xlat10_5.y * _OcclusionStrength + u_xlat18;
    u_xlat32 = (-_Glossiness) + 1.0;
    u_xlat46 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat46)) + u_xlat3.xyz;
    u_xlat6.xyz = u_xlat10_4.xxx * _LightColor0.xyz;
    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb4){
        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb4)) ? u_xlat7.xyz : vs_TEXCOORD8.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat7.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat4.x = u_xlat7.y * 0.25;
        u_xlat46 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat47 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat4.x = max(u_xlat46, u_xlat4.x);
        u_xlat7.x = min(u_xlat47, u_xlat4.x);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_9 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat2.w = 1.0;
        u_xlat8.x = dot(u_xlat10_8, u_xlat2);
        u_xlat8.y = dot(u_xlat10_9, u_xlat2);
        u_xlat8.z = dot(u_xlat10_7, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat8.x = dot(unity_SHAr, u_xlat2);
        u_xlat8.y = dot(unity_SHAg, u_xlat2);
        u_xlat8.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat7.xyz = u_xlat8.xyz + vs_TEXCOORD5.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb44 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat8.xyz = log2(u_xlat7.xyz);
    u_xlat8.xyz = u_xlat8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat8.xyz = exp2(u_xlat8.xyz);
    u_xlat8.xyz = u_xlat8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat7.xyz = (bool(u_xlatb44)) ? u_xlat8.xyz : u_xlat7.xyz;
    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb4){
        u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat4.x = inversesqrt(u_xlat4.x);
        u_xlat8.xyz = u_xlat4.xxx * u_xlat5.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
        u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
        u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
        u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
        u_xlat4.x = min(u_xlat9.y, u_xlat9.x);
        u_xlat4.x = min(u_xlat9.z, u_xlat4.x);
        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xxx + u_xlat9.xyz;
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat4.x = (-u_xlat32) * 0.699999988 + 1.70000005;
    u_xlat4.x = u_xlat4.x * u_xlat32;
    u_xlat4.x = u_xlat4.x * 6.0;
    u_xlat10_8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat4.x);
    u_xlat16_46 = log2(u_xlat10_8.w);
    u_xlat46 = u_xlat16_46 * unity_SpecCube0_HDR.y;
    u_xlat46 = exp2(u_xlat46);
    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat10_8.xyz * vec3(u_xlat46);
    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb47){
        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb47){
            u_xlat47 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat47 = inversesqrt(u_xlat47);
            u_xlat10.xyz = vec3(u_xlat47) * u_xlat5.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
            u_xlat11.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
            u_xlat11.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
            u_xlat11.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
            u_xlat47 = min(u_xlat11.z, u_xlat47);
            u_xlat11.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat4.x);
        u_xlat16_4 = log2(u_xlat10_5.w);
        u_xlat4.x = u_xlat16_4 * unity_SpecCube1_HDR.y;
        u_xlat4.x = exp2(u_xlat4.x);
        u_xlat4.x = u_xlat4.x * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * u_xlat4.xxx;
        u_xlat8.xyz = vec3(u_xlat46) * u_xlat10_8.xyz + (-u_xlat5.xyz);
        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = vec3(u_xlat18) * u_xlat9.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat43) + _WorldSpaceLightPos0.xyz;
    u_xlat43 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat43 = max(u_xlat43, 0.00100000005);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat8.xyz = vec3(u_xlat43) * u_xlat8.xyz;
    u_xlat43 = dot(u_xlat2.xyz, u_xlat8.xyz);
    u_xlat43 = max(u_xlat43, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat30 = u_xlat32 * u_xlat32;
    u_xlat3.x = (-u_xlat32) * u_xlat32 + 1.0;
    u_xlat17 = u_xlat2.x * u_xlat3.x + u_xlat30;
    u_xlat3.x = u_xlat45 * u_xlat3.x + u_xlat30;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat45 * u_xlat17 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat17 = u_xlat30 * u_xlat30;
    u_xlat43 = u_xlat43 * u_xlat43;
    u_xlat4.xw = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
    u_xlat43 = u_xlat43 * u_xlat4.x + 1.0;
    u_xlat43 = u_xlat43 * u_xlat43;
    u_xlat43 = u_xlat43 * 3.14159274 + 1.00000001e-07;
    u_xlat43 = u_xlat17 / u_xlat43;
    u_xlat17 = (-u_xlat45) + 1.0;
    u_xlat31 = u_xlat17 * u_xlat17;
    u_xlat31 = u_xlat31 * u_xlat31;
    u_xlat17 = u_xlat17 * u_xlat31;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat31 = u_xlat2.x * u_xlat2.x;
    u_xlat31 = u_xlat31 * u_xlat31;
    u_xlat2.x = u_xlat2.x * u_xlat31;
    u_xlat31 = u_xlat2.y * u_xlat2.y;
    u_xlat31 = dot(vec2(u_xlat31), vec2(u_xlat32));
    u_xlat31 = u_xlat31 + -0.5;
    u_xlat17 = u_xlat31 * u_xlat17 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat2.x + 1.0;
    u_xlat17 = u_xlat31 * u_xlat17;
    u_xlat43 = u_xlat43 * u_xlat3.x;
    u_xlat43 = u_xlat43 * 0.785398185;
    u_xlat3.x = max(u_xlat43, 9.99999975e-05);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat43 = (u_xlatb44) ? u_xlat3.x : u_xlat43;
    u_xlat43 = u_xlat45 * u_xlat43;
    u_xlat43 = max(u_xlat43, 0.0);
    u_xlat3.x = u_xlat45 * u_xlat17;
    u_xlat30 = u_xlat30 * u_xlat32;
    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
    u_xlat17 = float(1.0) / u_xlat4.w;
    u_xlat30 = (u_xlatb44) ? u_xlat30 : u_xlat17;
    u_xlat44 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb44 = u_xlat44!=0.0;
    u_xlat44 = u_xlatb44 ? 1.0 : float(0.0);
    u_xlat43 = u_xlat43 * u_xlat44;
    u_xlat42 = (-u_xlat42) + _Glossiness;
    u_xlat42 = u_xlat42 + 1.0;
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat43);
    u_xlat43 = (-u_xlat2.y) + 1.0;
    u_xlat16.x = u_xlat43 * u_xlat43;
    u_xlat16.x = u_xlat16.x * u_xlat16.x;
    u_xlat43 = u_xlat43 * u_xlat16.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat43) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat16.xyz = u_xlat5.xyz * vec3(u_xlat30);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat42);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat16.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 175 math, 7 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 o_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_8 * 0.5);
  vec2 tmpvar_28;
  tmpvar_28.x = tmpvar_27.x;
  tmpvar_28.y = (tmpvar_27.y * _ProjectionParams.x);
  o_26.xy = (tmpvar_28 + tmpvar_27.w);
  o_26.zw = tmpvar_8.zw;
  vec4 ambientOrLightmapUV_29;
  ambientOrLightmapUV_29.xy = vec2(0.0, 0.0);
  ambientOrLightmapUV_29.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_29;
  xlv_TEXCOORD6 = o_26;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_12 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_6, (tmpvar_14.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_14.w));
  tmpvar_12 = (tmpvar_12 * tmpvar_8);
  tmpvar_10 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  float tmpvar_15;
  vec3 tmpvar_16;
  tmpvar_15 = (1.0 - _Glossiness);
  tmpvar_16 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 originalReflUVW_17;
  vec3 specular_18;
  originalReflUVW_17 = tmpvar_16;
  vec3 worldRefl_19;
  worldRefl_19 = tmpvar_16;
  vec3 worldPos_20;
  worldPos_20 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_21;
    tmpvar_21 = normalize(tmpvar_16);
    vec3 tmpvar_22;
    tmpvar_22 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_21);
    vec3 tmpvar_23;
    tmpvar_23 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_21);
    bvec3 tmpvar_24;
    tmpvar_24 = greaterThan (tmpvar_21, vec3(0.0, 0.0, 0.0));
    float tmpvar_25;
    if (tmpvar_24.x) {
      tmpvar_25 = tmpvar_22.x;
    } else {
      tmpvar_25 = tmpvar_23.x;
    };
    float tmpvar_26;
    if (tmpvar_24.y) {
      tmpvar_26 = tmpvar_22.y;
    } else {
      tmpvar_26 = tmpvar_23.y;
    };
    float tmpvar_27;
    if (tmpvar_24.z) {
      tmpvar_27 = tmpvar_22.z;
    } else {
      tmpvar_27 = tmpvar_23.z;
    };
    worldPos_20 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_19 = (worldPos_20 + (tmpvar_21 * min (
      min (tmpvar_25, tmpvar_26)
    , tmpvar_27)));
  };
  tmpvar_16 = worldRefl_19;
  vec4 tmpvar_28;
  tmpvar_28.xyz = worldRefl_19;
  tmpvar_28.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  vec4 tmpvar_29;
  tmpvar_29 = textureCubeLod (unity_SpecCube0, worldRefl_19, tmpvar_28.w);
  vec3 tmpvar_30;
  tmpvar_30 = ((unity_SpecCube0_HDR.x * pow (tmpvar_29.w, unity_SpecCube0_HDR.y)) * tmpvar_29.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_31;
    worldRefl_31 = originalReflUVW_17;
    vec3 worldPos_32;
    worldPos_32 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_33;
      tmpvar_33 = normalize(originalReflUVW_17);
      vec3 tmpvar_34;
      tmpvar_34 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_33);
      vec3 tmpvar_35;
      tmpvar_35 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_33);
      bvec3 tmpvar_36;
      tmpvar_36 = greaterThan (tmpvar_33, vec3(0.0, 0.0, 0.0));
      float tmpvar_37;
      if (tmpvar_36.x) {
        tmpvar_37 = tmpvar_34.x;
      } else {
        tmpvar_37 = tmpvar_35.x;
      };
      float tmpvar_38;
      if (tmpvar_36.y) {
        tmpvar_38 = tmpvar_34.y;
      } else {
        tmpvar_38 = tmpvar_35.y;
      };
      float tmpvar_39;
      if (tmpvar_36.z) {
        tmpvar_39 = tmpvar_34.z;
      } else {
        tmpvar_39 = tmpvar_35.z;
      };
      worldPos_32 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_31 = (worldPos_32 + (tmpvar_33 * min (
        min (tmpvar_37, tmpvar_38)
      , tmpvar_39)));
    };
    tmpvar_16 = worldRefl_31;
    vec4 tmpvar_40;
    tmpvar_40.xyz = worldRefl_31;
    tmpvar_40.w = ((tmpvar_15 * (1.7 - 
      (0.7 * tmpvar_15)
    )) * 6.0);
    vec4 tmpvar_41;
    tmpvar_41 = textureCubeLod (unity_SpecCube1, worldRefl_31, tmpvar_40.w);
    specular_18 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_41.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_41.xyz), tmpvar_30, unity_SpecCube0_BoxMin.www);
  } else {
    specular_18 = tmpvar_30;
  };
  tmpvar_11 = (specular_18 * tmpvar_8);
  vec3 viewDir_42;
  viewDir_42 = -(tmpvar_7);
  float surfaceReduction_43;
  float specularTerm_44;
  float tmpvar_45;
  tmpvar_45 = (1.0 - _Glossiness);
  vec3 tmpvar_46;
  vec3 inVec_47;
  inVec_47 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_46 = (inVec_47 * inversesqrt(max (0.001, 
    dot (inVec_47, inVec_47)
  )));
  float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_46));
  float tmpvar_49;
  tmpvar_49 = max (0.0, dot (tmpvar_6, viewDir_42));
  float tmpvar_50;
  tmpvar_50 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_46));
  float tmpvar_51;
  tmpvar_51 = (tmpvar_45 * tmpvar_45);
  float tmpvar_52;
  tmpvar_52 = (tmpvar_45 * tmpvar_45);
  float tmpvar_53;
  tmpvar_53 = (tmpvar_52 * tmpvar_52);
  float tmpvar_54;
  tmpvar_54 = (((tmpvar_48 * tmpvar_48) * (tmpvar_53 - 1.0)) + 1.0);
  float x_55;
  x_55 = (1.0 - tmpvar_9);
  float x_56;
  x_56 = (1.0 - tmpvar_49);
  float tmpvar_57;
  tmpvar_57 = (0.5 + ((2.0 * tmpvar_50) * (tmpvar_50 * tmpvar_45)));
  float tmpvar_58;
  tmpvar_58 = ((1.0 + (
    (tmpvar_57 - 1.0)
   * 
    ((x_55 * x_55) * ((x_55 * x_55) * x_55))
  )) * (1.0 + (
    (tmpvar_57 - 1.0)
   * 
    ((x_56 * x_56) * ((x_56 * x_56) * x_56))
  )));
  float tmpvar_59;
  tmpvar_59 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_49 * (1.0 - tmpvar_51))
     + tmpvar_51)) + (tmpvar_49 * (
      (tmpvar_9 * (1.0 - tmpvar_51))
     + tmpvar_51))) + 1e-05)
  ) * (tmpvar_53 / 
    (((3.141593 * tmpvar_54) * tmpvar_54) + 1e-07)
  )) * 0.7853982);
  specularTerm_44 = tmpvar_59;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_44 = sqrt(max (0.0001, tmpvar_59));
  };
  float tmpvar_60;
  tmpvar_60 = max (0.0, (specularTerm_44 * tmpvar_9));
  specularTerm_44 = tmpvar_60;
  float tmpvar_61;
  tmpvar_61 = (tmpvar_58 * tmpvar_9);
  float tmpvar_62;
  tmpvar_62 = (tmpvar_45 * tmpvar_45);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_43 = (1.0 - ((0.28 * tmpvar_62) * tmpvar_45));
  } else {
    surfaceReduction_43 = (1.0/(((tmpvar_62 * tmpvar_62) + 1.0)));
  };
  float tmpvar_63;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_63 = 1.0;
  } else {
    tmpvar_63 = 0.0;
  };
  specularTerm_44 = (tmpvar_60 * tmpvar_63);
  float x_64;
  x_64 = (1.0 - tmpvar_50);
  float x_65;
  x_65 = (1.0 - tmpvar_49);
  vec3 tmpvar_66;
  tmpvar_66 = (((tmpvar_3 * 
    (tmpvar_12 + (tmpvar_10 * tmpvar_61))
  ) + (
    (specularTerm_44 * tmpvar_10)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_64 * x_64) * (
      (x_64 * x_64)
     * x_64))))
  )) + ((surfaceReduction_43 * tmpvar_11) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_65 * x_65) * ((x_65 * x_65) * x_65))
  ))));
  vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = tmpvar_66;
  c_1.w = tmpvar_67.w;
  c_1.xyz = tmpvar_66;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = 1.0;
  gl_FragData[0] = xlat_varoutput_68;
}


#endif
"
}
SubProgram "metal " {
// Stats: 28 math, 1 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 290
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [unity_WorldTransformParams]
Vector 240 [unity_DynamicLightmapST]
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  float3 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  float4 tmpvar_11;
  float4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_11 = (_mtl_u.glstate_matrix_mvp * tmpvar_12);
  float4 texcoord_13;
  texcoord_13.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_14;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_15;
  float3 n_16;
  n_16 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_15 = half3(n_16);
  float3 norm_17;
  norm_17 = float3(tmpvar_1);
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].x;
  v_18.y = _mtl_u.unity_WorldToObject[1].x;
  v_18.z = _mtl_u.unity_WorldToObject[2].x;
  v_18.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].y;
  v_19.y = _mtl_u.unity_WorldToObject[1].y;
  v_19.z = _mtl_u.unity_WorldToObject[2].y;
  v_19.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].z;
  v_20.y = _mtl_u.unity_WorldToObject[1].z;
  v_20.z = _mtl_u.unity_WorldToObject[2].z;
  v_20.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  float3 dir_22;
  dir_22 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_23;
  tmpvar_23[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_23[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_23[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = float(tmpvar_4.w);
  half3 normal_25;
  normal_25 = half3(tmpvar_21);
  half3 tangent_26;
  tangent_26 = half3(tmpvar_24.xyz);
  half tangentSign_27;
  tangentSign_27 = half(tmpvar_24.w);
  half xlat_varsign_28;
  float tmpvar_29;
  tmpvar_29 = ((float)tangentSign_27 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_28 = half(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * xlat_varsign_28);
  half3x3 tmpvar_31;
  tmpvar_31[0].x = tangent_26.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = normal_25.x;
  tmpvar_31[1].x = tangent_26.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = normal_25.y;
  tmpvar_31[2].x = tangent_26.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = normal_25.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_31);
  float3 v_32;
  v_32.x = tangentToWorld_5[0].x;
  v_32.y = tangentToWorld_5[1].x;
  v_32.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].y;
  v_33.y = tangentToWorld_5[1].y;
  v_33.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].z;
  v_34.y = tangentToWorld_5[1].z;
  v_34.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_34);
  float4 o_35;
  float4 tmpvar_36;
  tmpvar_36 = (tmpvar_11 * 0.5);
  float2 tmpvar_37;
  tmpvar_37.x = tmpvar_36.x;
  tmpvar_37.y = (tmpvar_36.y * _mtl_u._ProjectionParams.x);
  o_35.xy = (tmpvar_37 + tmpvar_36.w);
  o_35.zw = tmpvar_11.zw;
  half4 ambientOrLightmapUV_38;
  ambientOrLightmapUV_38.xy = half2(float2(0.0, 0.0));
  ambientOrLightmapUV_38.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_11;
  _mtl_o.xlv_TEXCOORD0 = texcoord_13;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_15;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_38;
  _mtl_o.xlv_TEXCOORD6 = o_35;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat2.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat2.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat2.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat3.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat3.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat3.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat3.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat3.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat15;
float u_xlat16;
float u_xlat17;
float u_xlat28;
float u_xlat29;
float u_xlat30;
float u_xlat39;
float u_xlat40;
float u_xlat41;
float u_xlat42;
float u_xlat44;
mediump float u_xlat16_44;
bool u_xlatb44;
float u_xlat45;
mediump float u_xlat16_45;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
    u_xlat40 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat2.xyz = vec3(u_xlat40) * vs_TEXCOORD4.xyz;
    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat3.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;
    u_xlat2.w = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat42 = (-_OcclusionStrength) + 1.0;
    u_xlat42 = u_xlat10_5.y * _OcclusionStrength + u_xlat42;
    u_xlat17 = (-_Glossiness) + 1.0;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat30)) + u_xlat3.xyz;
    u_xlat4.xzw = u_xlat10_4.xxx * _LightColor0.xyz;
    u_xlat10_6 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat44 = u_xlat10_6.w * unity_DynamicLightmap_HDR.x;
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat44);
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat10_7 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_7.xyz = u_xlat10_7.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat44 = dot(u_xlat2.xyz, u_xlat16_7.xyz);
    u_xlat44 = u_xlat44 + 0.5;
    u_xlat6.xyz = vec3(u_xlat44) * u_xlat6.xyz;
    u_xlat16_44 = max(u_xlat10_7.w, 9.99999975e-05);
    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_44);
    u_xlatb44 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb44){
        u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat44 = inversesqrt(u_xlat44);
        u_xlat7.xyz = vec3(u_xlat44) * u_xlat5.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat44 = min(u_xlat8.y, u_xlat8.x);
        u_xlat44 = min(u_xlat8.z, u_xlat44);
        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat44) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat44 = (-u_xlat17) * 0.699999988 + 1.70000005;
    u_xlat44 = u_xlat17 * u_xlat44;
    u_xlat44 = u_xlat44 * 6.0;
    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat44);
    u_xlat16_45 = log2(u_xlat10_7.w);
    u_xlat45 = u_xlat16_45 * unity_SpecCube0_HDR.y;
    u_xlat45 = exp2(u_xlat45);
    u_xlat45 = u_xlat45 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat45);
    u_xlatb46 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = inversesqrt(u_xlat46);
            u_xlat9.xyz = u_xlat5.xyz * vec3(u_xlat46);
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat44);
        u_xlat16_44 = log2(u_xlat10_5.w);
        u_xlat44 = u_xlat16_44 * unity_SpecCube1_HDR.y;
        u_xlat44 = exp2(u_xlat44);
        u_xlat44 = u_xlat44 * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat44);
        u_xlat7.xyz = vec3(u_xlat45) * u_xlat10_7.xyz + (-u_xlat5.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = vec3(u_xlat42) * u_xlat8.xyz;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat40) + _WorldSpaceLightPos0.xyz;
    u_xlat40 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat40 = max(u_xlat40, 0.00100000005);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat7.xyz = vec3(u_xlat40) * u_xlat7.xyz;
    u_xlat40 = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat40 = max(u_xlat40, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat28 = u_xlat17 * u_xlat17;
    u_xlat3.x = (-u_xlat17) * u_xlat17 + 1.0;
    u_xlat16 = u_xlat2.x * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat2.w * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat2.w * u_xlat16 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat16 = u_xlat28 * u_xlat28;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat7.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
    u_xlat40 = u_xlat40 * u_xlat7.x + 1.0;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat40 = u_xlat40 * 3.14159274 + 1.00000001e-07;
    u_xlat40 = u_xlat16 / u_xlat40;
    u_xlat16 = (-u_xlat2.w) + 1.0;
    u_xlat29 = u_xlat16 * u_xlat16;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat16 = u_xlat16 * u_xlat29;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat29 = u_xlat2.x * u_xlat2.x;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat2.x = u_xlat2.x * u_xlat29;
    u_xlat29 = u_xlat2.y * u_xlat2.y;
    u_xlat29 = dot(vec2(u_xlat29), vec2(u_xlat17));
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat16 = u_xlat29 * u_xlat16 + 1.0;
    u_xlat29 = u_xlat29 * u_xlat2.x + 1.0;
    u_xlat16 = u_xlat29 * u_xlat16;
    u_xlat40 = u_xlat40 * u_xlat3.x;
    u_xlat40 = u_xlat40 * 0.785398185;
    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat29 = max(u_xlat40, 9.99999975e-05);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat40 = (u_xlatb3) ? u_xlat29 : u_xlat40;
    u_xlat40 = u_xlat2.w * u_xlat40;
    u_xlat40 = max(u_xlat40, 0.0);
    u_xlat41 = u_xlat2.w * u_xlat16;
    u_xlat28 = u_xlat28 * u_xlat17;
    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;
    u_xlat16 = float(1.0) / u_xlat7.y;
    u_xlat28 = (u_xlatb3) ? u_xlat28 : u_xlat16;
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat40 = u_xlat40 * u_xlat3.x;
    u_xlat39 = (-u_xlat39) + _Glossiness;
    u_xlat39 = u_xlat39 + 1.0;
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat41) * u_xlat4.xzw;
    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat3.xyz;
    u_xlat4.xyz = u_xlat4.xzw * vec3(u_xlat40);
    u_xlat40 = (-u_xlat2.y) + 1.0;
    u_xlat15.x = u_xlat40 * u_xlat40;
    u_xlat15.x = u_xlat15.x * u_xlat15.x;
    u_xlat40 = u_xlat40 * u_xlat15.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat28);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat39);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat15.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 197 math, 8 textures, 15 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_12;
  n_12 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_16;
  vec4 ambientOrLightmapUV_17;
  ambientOrLightmapUV_17 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_18;
  ambient_18 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_18 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_16.xyzz * tmpvar_16.yzzx);
  x1_19.x = dot (unity_SHBr, tmpvar_20);
  x1_19.y = dot (unity_SHBg, tmpvar_20);
  x1_19.z = dot (unity_SHBb, tmpvar_20);
  ambient_18 = (ambient_18 + (x1_19 + (unity_SHC.xyz * 
    ((tmpvar_16.x * tmpvar_16.x) - (tmpvar_16.y * tmpvar_16.y))
  )));
  ambientOrLightmapUV_17.xyz = ambient_18;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = n_12;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_17;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  float tmpvar_10;
  tmpvar_10 = (1.0 - _Glossiness);
  vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_14;
  ambient_14 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_15;
  ambient_contrib_15 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_16;
    tmpvar_16.w = 1.0;
    tmpvar_16.xyz = tmpvar_6;
    vec3 x1_17;
    vec3 texCoord_18;
    vec3 tmpvar_19;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_20;
      tmpvar_20.w = 1.0;
      tmpvar_20.xyz = xlv_TEXCOORD8;
      tmpvar_19 = (unity_ProbeVolumeWorldToObject * tmpvar_20).xyz;
    } else {
      tmpvar_19 = xlv_TEXCOORD8;
    };
    vec3 tmpvar_21;
    tmpvar_21 = ((tmpvar_19 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_18.yz = tmpvar_21.yz;
    texCoord_18.x = (tmpvar_21.x * 0.25);
    float tmpvar_22;
    float tmpvar_23;
    tmpvar_23 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_22 = clamp (texCoord_18.x, tmpvar_23, (0.25 - tmpvar_23));
    texCoord_18.x = tmpvar_22;
    vec4 tmpvar_24;
    tmpvar_24 = texture3D (unity_ProbeVolumeSH, texCoord_18);
    texCoord_18.x = (tmpvar_22 + 0.25);
    vec4 tmpvar_25;
    tmpvar_25 = texture3D (unity_ProbeVolumeSH, texCoord_18);
    texCoord_18.x = (tmpvar_22 + 0.5);
    x1_17.x = dot (tmpvar_24, tmpvar_16);
    x1_17.y = dot (tmpvar_25, tmpvar_16);
    x1_17.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_18), tmpvar_16);
    ambient_contrib_15 = x1_17;
  } else {
    vec4 tmpvar_26;
    tmpvar_26.w = 1.0;
    tmpvar_26.xyz = tmpvar_6;
    vec3 x_27;
    x_27.x = dot (unity_SHAr, tmpvar_26);
    x_27.y = dot (unity_SHAg, tmpvar_26);
    x_27.z = dot (unity_SHAb, tmpvar_26);
    ambient_contrib_15 = x_27;
  };
  vec3 tmpvar_28;
  tmpvar_28 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_15));
  ambient_14 = tmpvar_28;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_14 = max (((1.055 * 
      pow (max (tmpvar_28, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_13 = (ambient_14 * tmpvar_8);
  tmpvar_12 = vec3(0.0, 0.0, 0.0);
  vec3 specular_29;
  vec3 worldRefl_30;
  worldRefl_30 = tmpvar_11;
  vec3 worldPos_31;
  worldPos_31 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_32;
    tmpvar_32 = normalize(tmpvar_11);
    vec3 tmpvar_33;
    tmpvar_33 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_32);
    vec3 tmpvar_34;
    tmpvar_34 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_32);
    bvec3 tmpvar_35;
    tmpvar_35 = greaterThan (tmpvar_32, vec3(0.0, 0.0, 0.0));
    float tmpvar_36;
    if (tmpvar_35.x) {
      tmpvar_36 = tmpvar_33.x;
    } else {
      tmpvar_36 = tmpvar_34.x;
    };
    float tmpvar_37;
    if (tmpvar_35.y) {
      tmpvar_37 = tmpvar_33.y;
    } else {
      tmpvar_37 = tmpvar_34.y;
    };
    float tmpvar_38;
    if (tmpvar_35.z) {
      tmpvar_38 = tmpvar_33.z;
    } else {
      tmpvar_38 = tmpvar_34.z;
    };
    worldPos_31 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_30 = (worldPos_31 + (tmpvar_32 * min (
      min (tmpvar_36, tmpvar_37)
    , tmpvar_38)));
  };
  vec4 tmpvar_39;
  tmpvar_39.xyz = worldRefl_30;
  tmpvar_39.w = ((tmpvar_10 * (1.7 - 
    (0.7 * tmpvar_10)
  )) * 6.0);
  vec4 tmpvar_40;
  tmpvar_40 = textureCubeLod (unity_SpecCube0, worldRefl_30, tmpvar_39.w);
  vec3 tmpvar_41;
  tmpvar_41 = ((unity_SpecCube0_HDR.x * pow (tmpvar_40.w, unity_SpecCube0_HDR.y)) * tmpvar_40.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_42;
    worldRefl_42 = tmpvar_11;
    vec3 worldPos_43;
    worldPos_43 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_44;
      tmpvar_44 = normalize(tmpvar_11);
      vec3 tmpvar_45;
      tmpvar_45 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_44);
      vec3 tmpvar_46;
      tmpvar_46 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_44);
      bvec3 tmpvar_47;
      tmpvar_47 = greaterThan (tmpvar_44, vec3(0.0, 0.0, 0.0));
      float tmpvar_48;
      if (tmpvar_47.x) {
        tmpvar_48 = tmpvar_45.x;
      } else {
        tmpvar_48 = tmpvar_46.x;
      };
      float tmpvar_49;
      if (tmpvar_47.y) {
        tmpvar_49 = tmpvar_45.y;
      } else {
        tmpvar_49 = tmpvar_46.y;
      };
      float tmpvar_50;
      if (tmpvar_47.z) {
        tmpvar_50 = tmpvar_45.z;
      } else {
        tmpvar_50 = tmpvar_46.z;
      };
      worldPos_43 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_42 = (worldPos_43 + (tmpvar_44 * min (
        min (tmpvar_48, tmpvar_49)
      , tmpvar_50)));
    };
    vec4 tmpvar_51;
    tmpvar_51.xyz = worldRefl_42;
    tmpvar_51.w = ((tmpvar_10 * (1.7 - 
      (0.7 * tmpvar_10)
    )) * 6.0);
    vec4 tmpvar_52;
    tmpvar_52 = textureCubeLod (unity_SpecCube1, worldRefl_42, tmpvar_51.w);
    specular_29 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_52.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_52.xyz), tmpvar_41, unity_SpecCube0_BoxMin.www);
  } else {
    specular_29 = tmpvar_41;
  };
  tmpvar_12 = (specular_29 * tmpvar_8);
  vec3 viewDir_53;
  viewDir_53 = -(tmpvar_7);
  float surfaceReduction_54;
  float specularTerm_55;
  float tmpvar_56;
  tmpvar_56 = (1.0 - _Glossiness);
  vec3 tmpvar_57;
  vec3 inVec_58;
  inVec_58 = (_WorldSpaceLightPos0.xyz + viewDir_53);
  tmpvar_57 = (inVec_58 * inversesqrt(max (0.001, 
    dot (inVec_58, inVec_58)
  )));
  float tmpvar_59;
  tmpvar_59 = max (0.0, dot (tmpvar_6, tmpvar_57));
  float tmpvar_60;
  tmpvar_60 = max (0.0, dot (tmpvar_6, viewDir_53));
  float tmpvar_61;
  tmpvar_61 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_57));
  float tmpvar_62;
  tmpvar_62 = (tmpvar_56 * tmpvar_56);
  float tmpvar_63;
  tmpvar_63 = (tmpvar_56 * tmpvar_56);
  float tmpvar_64;
  tmpvar_64 = (tmpvar_63 * tmpvar_63);
  float tmpvar_65;
  tmpvar_65 = (((tmpvar_59 * tmpvar_59) * (tmpvar_64 - 1.0)) + 1.0);
  float x_66;
  x_66 = (1.0 - tmpvar_9);
  float x_67;
  x_67 = (1.0 - tmpvar_60);
  float tmpvar_68;
  tmpvar_68 = (0.5 + ((2.0 * tmpvar_61) * (tmpvar_61 * tmpvar_56)));
  float tmpvar_69;
  tmpvar_69 = ((1.0 + (
    (tmpvar_68 - 1.0)
   * 
    ((x_66 * x_66) * ((x_66 * x_66) * x_66))
  )) * (1.0 + (
    (tmpvar_68 - 1.0)
   * 
    ((x_67 * x_67) * ((x_67 * x_67) * x_67))
  )));
  float tmpvar_70;
  tmpvar_70 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_60 * (1.0 - tmpvar_62))
     + tmpvar_62)) + (tmpvar_60 * (
      (tmpvar_9 * (1.0 - tmpvar_62))
     + tmpvar_62))) + 1e-05)
  ) * (tmpvar_64 / 
    (((3.141593 * tmpvar_65) * tmpvar_65) + 1e-07)
  )) * 0.7853982);
  specularTerm_55 = tmpvar_70;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_55 = sqrt(max (0.0001, tmpvar_70));
  };
  float tmpvar_71;
  tmpvar_71 = max (0.0, (specularTerm_55 * tmpvar_9));
  specularTerm_55 = tmpvar_71;
  float tmpvar_72;
  tmpvar_72 = (tmpvar_69 * tmpvar_9);
  float tmpvar_73;
  tmpvar_73 = (tmpvar_56 * tmpvar_56);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_54 = (1.0 - ((0.28 * tmpvar_73) * tmpvar_56));
  } else {
    surfaceReduction_54 = (1.0/(((tmpvar_73 * tmpvar_73) + 1.0)));
  };
  float tmpvar_74;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_74 = 1.0;
  } else {
    tmpvar_74 = 0.0;
  };
  specularTerm_55 = (tmpvar_71 * tmpvar_74);
  float x_75;
  x_75 = (1.0 - tmpvar_61);
  float x_76;
  x_76 = (1.0 - tmpvar_60);
  vec3 tmpvar_77;
  tmpvar_77 = (((tmpvar_3 * 
    (tmpvar_13 + (_LightColor0.xyz * tmpvar_72))
  ) + (
    (specularTerm_55 * _LightColor0.xyz)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_75 * x_75) * (
      (x_75 * x_75)
     * x_75))))
  )) + ((surfaceReduction_54 * tmpvar_12) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_76 * x_76) * ((x_76 * x_76) * x_76))
  ))));
  vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = tmpvar_77;
  c_1.w = tmpvar_78.w;
  c_1.xyz = (tmpvar_77 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_79;
  xlat_varoutput_79.xyz = c_1.xyz;
  xlat_varoutput_79.w = 1.0;
  gl_FragData[0] = xlat_varoutput_79;
}


#endif
"
}
SubProgram "metal " {
// Stats: 31 math, 2 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 290
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
VectorHalf 240 [unity_ColorSpaceLuminance] 4
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float3 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_7 = tmpvar_8.xyz;
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_19);
  half3 normalWorld_20;
  normalWorld_20 = half3(tmpvar_19);
  half4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 ambient_22;
  ambient_22 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_23;
  tmpvar_23 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_23) {
    ambient_22 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_24;
  half4 tmpvar_25;
  tmpvar_25 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_24.x = dot (_mtl_u.unity_SHBr, tmpvar_25);
  x1_24.y = dot (_mtl_u.unity_SHBg, tmpvar_25);
  x1_24.z = dot (_mtl_u.unity_SHBb, tmpvar_25);
  ambient_22 = (ambient_22 + (x1_24 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  ambientOrLightmapUV_21.xyz = ambient_22;
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_7;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec4 u_xlat6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat15;
float u_xlat16;
float u_xlat17;
float u_xlat28;
float u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
float u_xlat39;
float u_xlat40;
float u_xlat41;
bool u_xlatb41;
float u_xlat42;
float u_xlat43;
mediump float u_xlat16_43;
float u_xlat44;
bool u_xlatb44;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
    u_xlat40 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat2.xyz = vec3(u_xlat40) * vs_TEXCOORD4.xyz;
    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat3.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;
    u_xlat42 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat4.x = (-_OcclusionStrength) + 1.0;
    u_xlat4.x = u_xlat10_4.y * _OcclusionStrength + u_xlat4.x;
    u_xlat17 = (-_Glossiness) + 1.0;
    u_xlat30.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat30.x = u_xlat30.x + u_xlat30.x;
    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat30.xxx) + u_xlat3.xyz;
    u_xlatb30 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb30){
        u_xlatb30 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb30)) ? u_xlat6.xyz : vs_TEXCOORD8.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat30.x = u_xlat6.y * 0.25;
        u_xlat43 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat44 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat30.x = max(u_xlat43, u_xlat30.x);
        u_xlat6.x = min(u_xlat44, u_xlat30.x);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat2.w = 1.0;
        u_xlat7.x = dot(u_xlat10_7, u_xlat2);
        u_xlat7.y = dot(u_xlat10_8, u_xlat2);
        u_xlat7.z = dot(u_xlat10_6, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat7.x = dot(unity_SHAr, u_xlat2);
        u_xlat7.y = dot(unity_SHAg, u_xlat2);
        u_xlat7.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb41 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat7.xyz = log2(u_xlat6.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat6.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat6.xyz;
    u_xlatb30 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb30){
        u_xlat30.x = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat30.x = inversesqrt(u_xlat30.x);
        u_xlat7.xyz = u_xlat30.xxx * u_xlat5.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat30.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat30.x = min(u_xlat8.z, u_xlat30.x);
        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * u_xlat30.xxx + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat30.x = (-u_xlat17) * 0.699999988 + 1.70000005;
    u_xlat30.x = u_xlat30.x * u_xlat17;
    u_xlat30.x = u_xlat30.x * 6.0;
    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat30.x);
    u_xlat16_43 = log2(u_xlat10_7.w);
    u_xlat43 = u_xlat16_43 * unity_SpecCube0_HDR.y;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb44){
        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb44){
            u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat44 = inversesqrt(u_xlat44);
            u_xlat9.xyz = vec3(u_xlat44) * u_xlat5.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
            u_xlat44 = min(u_xlat10.z, u_xlat44);
            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat30.x);
        u_xlat16_30 = log2(u_xlat10_5.w);
        u_xlat30.x = u_xlat16_30 * unity_SpecCube1_HDR.y;
        u_xlat30.x = exp2(u_xlat30.x);
        u_xlat30.x = u_xlat30.x * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * u_xlat30.xxx;
        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat5.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = u_xlat4.xxx * u_xlat8.xyz;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat40) + _WorldSpaceLightPos0.xyz;
    u_xlat40 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat40 = max(u_xlat40, 0.00100000005);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat7.xyz = vec3(u_xlat40) * u_xlat7.xyz;
    u_xlat40 = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat40 = max(u_xlat40, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat28 = u_xlat17 * u_xlat17;
    u_xlat3.x = (-u_xlat17) * u_xlat17 + 1.0;
    u_xlat16 = u_xlat2.x * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat42 * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat42 * u_xlat16 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat16 = u_xlat28 * u_xlat28;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat30.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
    u_xlat40 = u_xlat40 * u_xlat30.x + 1.0;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat40 = u_xlat40 * 3.14159274 + 1.00000001e-07;
    u_xlat40 = u_xlat16 / u_xlat40;
    u_xlat16 = (-u_xlat42) + 1.0;
    u_xlat29 = u_xlat16 * u_xlat16;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat16 = u_xlat16 * u_xlat29;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat29 = u_xlat2.x * u_xlat2.x;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat2.x = u_xlat2.x * u_xlat29;
    u_xlat29 = u_xlat2.y * u_xlat2.y;
    u_xlat29 = dot(vec2(u_xlat29), vec2(u_xlat17));
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat16 = u_xlat29 * u_xlat16 + 1.0;
    u_xlat29 = u_xlat29 * u_xlat2.x + 1.0;
    u_xlat16 = u_xlat29 * u_xlat16;
    u_xlat40 = u_xlat40 * u_xlat3.x;
    u_xlat40 = u_xlat40 * 0.785398185;
    u_xlat3.x = max(u_xlat40, 9.99999975e-05);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat40 = (u_xlatb41) ? u_xlat3.x : u_xlat40;
    u_xlat40 = u_xlat42 * u_xlat40;
    u_xlat40 = max(u_xlat40, 0.0);
    u_xlat3.x = u_xlat42 * u_xlat16;
    u_xlat28 = u_xlat28 * u_xlat17;
    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;
    u_xlat16 = float(1.0) / u_xlat30.y;
    u_xlat28 = (u_xlatb41) ? u_xlat28 : u_xlat16;
    u_xlat41 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb41 = u_xlat41!=0.0;
    u_xlat41 = u_xlatb41 ? 1.0 : float(0.0);
    u_xlat40 = u_xlat40 * u_xlat41;
    u_xlat39 = (-u_xlat39) + _Glossiness;
    u_xlat39 = u_xlat39 + 1.0;
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
    u_xlat3.xyz = u_xlat6.xyz * u_xlat4.xxx + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat40) * _LightColor0.xyz;
    u_xlat40 = (-u_xlat2.y) + 1.0;
    u_xlat15.x = u_xlat40 * u_xlat40;
    u_xlat15.x = u_xlat15.x * u_xlat15.x;
    u_xlat40 = u_xlat40 * u_xlat15.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat28);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat39);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat15.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 176 math, 7 textures, 12 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 ambientOrLightmapUV_26;
  ambientOrLightmapUV_26.xy = vec2(0.0, 0.0);
  ambientOrLightmapUV_26.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_26;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_11 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_12.w) * tmpvar_12.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_6, (tmpvar_13.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_13.w));
  tmpvar_11 = (tmpvar_11 * tmpvar_8);
  tmpvar_10 = vec3(0.0, 0.0, 0.0);
  float tmpvar_14;
  vec3 tmpvar_15;
  tmpvar_14 = (1.0 - _Glossiness);
  tmpvar_15 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 originalReflUVW_16;
  vec3 specular_17;
  originalReflUVW_16 = tmpvar_15;
  vec3 worldRefl_18;
  worldRefl_18 = tmpvar_15;
  vec3 worldPos_19;
  worldPos_19 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_20;
    tmpvar_20 = normalize(tmpvar_15);
    vec3 tmpvar_21;
    tmpvar_21 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_20);
    vec3 tmpvar_22;
    tmpvar_22 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_20);
    bvec3 tmpvar_23;
    tmpvar_23 = greaterThan (tmpvar_20, vec3(0.0, 0.0, 0.0));
    float tmpvar_24;
    if (tmpvar_23.x) {
      tmpvar_24 = tmpvar_21.x;
    } else {
      tmpvar_24 = tmpvar_22.x;
    };
    float tmpvar_25;
    if (tmpvar_23.y) {
      tmpvar_25 = tmpvar_21.y;
    } else {
      tmpvar_25 = tmpvar_22.y;
    };
    float tmpvar_26;
    if (tmpvar_23.z) {
      tmpvar_26 = tmpvar_21.z;
    } else {
      tmpvar_26 = tmpvar_22.z;
    };
    worldPos_19 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_18 = (worldPos_19 + (tmpvar_20 * min (
      min (tmpvar_24, tmpvar_25)
    , tmpvar_26)));
  };
  tmpvar_15 = worldRefl_18;
  vec4 tmpvar_27;
  tmpvar_27.xyz = worldRefl_18;
  tmpvar_27.w = ((tmpvar_14 * (1.7 - 
    (0.7 * tmpvar_14)
  )) * 6.0);
  vec4 tmpvar_28;
  tmpvar_28 = textureCubeLod (unity_SpecCube0, worldRefl_18, tmpvar_27.w);
  vec3 tmpvar_29;
  tmpvar_29 = ((unity_SpecCube0_HDR.x * pow (tmpvar_28.w, unity_SpecCube0_HDR.y)) * tmpvar_28.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_30;
    worldRefl_30 = originalReflUVW_16;
    vec3 worldPos_31;
    worldPos_31 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_32;
      tmpvar_32 = normalize(originalReflUVW_16);
      vec3 tmpvar_33;
      tmpvar_33 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_32);
      vec3 tmpvar_34;
      tmpvar_34 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_32);
      bvec3 tmpvar_35;
      tmpvar_35 = greaterThan (tmpvar_32, vec3(0.0, 0.0, 0.0));
      float tmpvar_36;
      if (tmpvar_35.x) {
        tmpvar_36 = tmpvar_33.x;
      } else {
        tmpvar_36 = tmpvar_34.x;
      };
      float tmpvar_37;
      if (tmpvar_35.y) {
        tmpvar_37 = tmpvar_33.y;
      } else {
        tmpvar_37 = tmpvar_34.y;
      };
      float tmpvar_38;
      if (tmpvar_35.z) {
        tmpvar_38 = tmpvar_33.z;
      } else {
        tmpvar_38 = tmpvar_34.z;
      };
      worldPos_31 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_30 = (worldPos_31 + (tmpvar_32 * min (
        min (tmpvar_36, tmpvar_37)
      , tmpvar_38)));
    };
    tmpvar_15 = worldRefl_30;
    vec4 tmpvar_39;
    tmpvar_39.xyz = worldRefl_30;
    tmpvar_39.w = ((tmpvar_14 * (1.7 - 
      (0.7 * tmpvar_14)
    )) * 6.0);
    vec4 tmpvar_40;
    tmpvar_40 = textureCubeLod (unity_SpecCube1, worldRefl_30, tmpvar_39.w);
    specular_17 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_40.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_40.xyz), tmpvar_29, unity_SpecCube0_BoxMin.www);
  } else {
    specular_17 = tmpvar_29;
  };
  tmpvar_10 = (specular_17 * tmpvar_8);
  vec3 viewDir_41;
  viewDir_41 = -(tmpvar_7);
  float surfaceReduction_42;
  float specularTerm_43;
  float tmpvar_44;
  tmpvar_44 = (1.0 - _Glossiness);
  vec3 tmpvar_45;
  vec3 inVec_46;
  inVec_46 = (_WorldSpaceLightPos0.xyz + viewDir_41);
  tmpvar_45 = (inVec_46 * inversesqrt(max (0.001, 
    dot (inVec_46, inVec_46)
  )));
  float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_6, tmpvar_45));
  float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, viewDir_41));
  float tmpvar_49;
  tmpvar_49 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_45));
  float tmpvar_50;
  tmpvar_50 = (tmpvar_44 * tmpvar_44);
  float tmpvar_51;
  tmpvar_51 = (tmpvar_44 * tmpvar_44);
  float tmpvar_52;
  tmpvar_52 = (tmpvar_51 * tmpvar_51);
  float tmpvar_53;
  tmpvar_53 = (((tmpvar_47 * tmpvar_47) * (tmpvar_52 - 1.0)) + 1.0);
  float x_54;
  x_54 = (1.0 - tmpvar_9);
  float x_55;
  x_55 = (1.0 - tmpvar_48);
  float tmpvar_56;
  tmpvar_56 = (0.5 + ((2.0 * tmpvar_49) * (tmpvar_49 * tmpvar_44)));
  float tmpvar_57;
  tmpvar_57 = ((1.0 + (
    (tmpvar_56 - 1.0)
   * 
    ((x_54 * x_54) * ((x_54 * x_54) * x_54))
  )) * (1.0 + (
    (tmpvar_56 - 1.0)
   * 
    ((x_55 * x_55) * ((x_55 * x_55) * x_55))
  )));
  float tmpvar_58;
  tmpvar_58 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_48 * (1.0 - tmpvar_50))
     + tmpvar_50)) + (tmpvar_48 * (
      (tmpvar_9 * (1.0 - tmpvar_50))
     + tmpvar_50))) + 1e-05)
  ) * (tmpvar_52 / 
    (((3.141593 * tmpvar_53) * tmpvar_53) + 1e-07)
  )) * 0.7853982);
  specularTerm_43 = tmpvar_58;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_43 = sqrt(max (0.0001, tmpvar_58));
  };
  float tmpvar_59;
  tmpvar_59 = max (0.0, (specularTerm_43 * tmpvar_9));
  specularTerm_43 = tmpvar_59;
  float tmpvar_60;
  tmpvar_60 = (tmpvar_57 * tmpvar_9);
  float tmpvar_61;
  tmpvar_61 = (tmpvar_44 * tmpvar_44);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_42 = (1.0 - ((0.28 * tmpvar_61) * tmpvar_44));
  } else {
    surfaceReduction_42 = (1.0/(((tmpvar_61 * tmpvar_61) + 1.0)));
  };
  float tmpvar_62;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_62 = 1.0;
  } else {
    tmpvar_62 = 0.0;
  };
  specularTerm_43 = (tmpvar_59 * tmpvar_62);
  float x_63;
  x_63 = (1.0 - tmpvar_49);
  float x_64;
  x_64 = (1.0 - tmpvar_48);
  vec3 tmpvar_65;
  tmpvar_65 = (((tmpvar_3 * 
    (tmpvar_11 + (_LightColor0.xyz * tmpvar_60))
  ) + (
    (specularTerm_43 * _LightColor0.xyz)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_63 * x_63) * (
      (x_63 * x_63)
     * x_63))))
  )) + ((surfaceReduction_42 * tmpvar_10) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_64 * x_64) * ((x_64 * x_64) * x_64))
  ))));
  vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = tmpvar_65;
  c_1.w = tmpvar_66.w;
  c_1.xyz = (tmpvar_65 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "metal " {
// Stats: 25 math, 1 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 274
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Matrix 144 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [unity_WorldTransformParams]
Vector 224 [unity_DynamicLightmapST]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  float3 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  float4 tmpvar_11;
  float4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_11 = (_mtl_u.glstate_matrix_mvp * tmpvar_12);
  float4 texcoord_13;
  texcoord_13.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_14;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_15;
  float3 n_16;
  n_16 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_15 = half3(n_16);
  float3 norm_17;
  norm_17 = float3(tmpvar_1);
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].x;
  v_18.y = _mtl_u.unity_WorldToObject[1].x;
  v_18.z = _mtl_u.unity_WorldToObject[2].x;
  v_18.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].y;
  v_19.y = _mtl_u.unity_WorldToObject[1].y;
  v_19.z = _mtl_u.unity_WorldToObject[2].y;
  v_19.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].z;
  v_20.y = _mtl_u.unity_WorldToObject[1].z;
  v_20.z = _mtl_u.unity_WorldToObject[2].z;
  v_20.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  float3 dir_22;
  dir_22 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_23;
  tmpvar_23[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_23[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_23[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = float(tmpvar_4.w);
  half3 normal_25;
  normal_25 = half3(tmpvar_21);
  half3 tangent_26;
  tangent_26 = half3(tmpvar_24.xyz);
  half tangentSign_27;
  tangentSign_27 = half(tmpvar_24.w);
  half xlat_varsign_28;
  float tmpvar_29;
  tmpvar_29 = ((float)tangentSign_27 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_28 = half(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * xlat_varsign_28);
  half3x3 tmpvar_31;
  tmpvar_31[0].x = tangent_26.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = normal_25.x;
  tmpvar_31[1].x = tangent_26.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = normal_25.y;
  tmpvar_31[2].x = tangent_26.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = normal_25.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_31);
  float3 v_32;
  v_32.x = tangentToWorld_5[0].x;
  v_32.y = tangentToWorld_5[1].x;
  v_32.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].y;
  v_33.y = tangentToWorld_5[1].y;
  v_33.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].z;
  v_34.y = tangentToWorld_5[1].z;
  v_34.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_34);
  half4 ambientOrLightmapUV_35;
  ambientOrLightmapUV_35.xy = half2(float2(0.0, 0.0));
  ambientOrLightmapUV_35.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_11;
  _mtl_o.xlv_TEXCOORD0 = texcoord_13;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_15;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_35;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
float u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
vec3 u_xlat10;
bvec3 u_xlatb11;
vec3 u_xlat14;
float u_xlat15;
vec3 u_xlat16;
mediump float u_xlat16_16;
float u_xlat26;
float u_xlat27;
float u_xlat36;
float u_xlat37;
float u_xlat38;
float u_xlat39;
float u_xlat41;
mediump float u_xlat16_41;
bool u_xlatb41;
float u_xlat42;
mediump float u_xlat16_42;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat36 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
    u_xlat37 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat2.xyz = vec3(u_xlat37) * vs_TEXCOORD4.xyz;
    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat3.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;
    u_xlat2.w = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat39 = (-_OcclusionStrength) + 1.0;
    u_xlat39 = u_xlat10_4.y * _OcclusionStrength + u_xlat39;
    u_xlat4 = (-_Glossiness) + 1.0;
    u_xlat16.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xyz = u_xlat2.xyz * (-u_xlat16.xxx) + u_xlat3.xyz;
    u_xlat10_5 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat41 = u_xlat10_5.w * unity_DynamicLightmap_HDR.x;
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat41);
    u_xlat5.xyz = log2(u_xlat5.xyz);
    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat5.xyz = exp2(u_xlat5.xyz);
    u_xlat10_6 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat41 = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat41 = u_xlat41 + 0.5;
    u_xlat5.xyz = vec3(u_xlat41) * u_xlat5.xyz;
    u_xlat16_41 = max(u_xlat10_6.w, 9.99999975e-05);
    u_xlat5.xyz = u_xlat5.xyz / vec3(u_xlat16_41);
    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb41){
        u_xlat41 = dot(u_xlat16.xyz, u_xlat16.xyz);
        u_xlat41 = inversesqrt(u_xlat41);
        u_xlat6.xyz = u_xlat16.xyz * vec3(u_xlat41);
        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
        u_xlat7.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
        u_xlat7.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
        u_xlat7.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
        u_xlat41 = min(u_xlat7.y, u_xlat7.x);
        u_xlat41 = min(u_xlat7.z, u_xlat41);
        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat41) + u_xlat7.xyz;
    } else {
        u_xlat6.xyz = u_xlat16.xyz;
    //ENDIF
    }
    u_xlat41 = (-u_xlat4) * 0.699999988 + 1.70000005;
    u_xlat41 = u_xlat4 * u_xlat41;
    u_xlat41 = u_xlat41 * 6.0;
    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat41);
    u_xlat16_42 = log2(u_xlat10_6.w);
    u_xlat42 = u_xlat16_42 * unity_SpecCube0_HDR.y;
    u_xlat42 = exp2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat42);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat16.xyz, u_xlat16.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat8.xyz = u_xlat16.xyz * vec3(u_xlat43);
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
            u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat43 = min(u_xlat9.y, u_xlat9.x);
            u_xlat43 = min(u_xlat9.z, u_xlat43);
            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat16.xyz = u_xlat8.xyz * vec3(u_xlat43) + u_xlat9.xyz;
        //ENDIF
        }
        u_xlat10_8 = textureLod(unity_SpecCube1, u_xlat16.xyz, u_xlat41);
        u_xlat16_16 = log2(u_xlat10_8.w);
        u_xlat16.x = u_xlat16_16 * unity_SpecCube1_HDR.y;
        u_xlat16.x = exp2(u_xlat16.x);
        u_xlat16.x = u_xlat16.x * unity_SpecCube1_HDR.x;
        u_xlat16.xyz = u_xlat10_8.xyz * u_xlat16.xxx;
        u_xlat6.xyz = vec3(u_xlat42) * u_xlat10_6.xyz + (-u_xlat16.xyz);
        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16.xyz;
    //ENDIF
    }
    u_xlat16.xyz = vec3(u_xlat39) * u_xlat7.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat37) + _WorldSpaceLightPos0.xyz;
    u_xlat37 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat37 = max(u_xlat37, 0.00100000005);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz;
    u_xlat37 = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat37 = max(u_xlat37, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat26 = u_xlat4 * u_xlat4;
    u_xlat3.x = (-u_xlat4) * u_xlat4 + 1.0;
    u_xlat15 = u_xlat2.x * u_xlat3.x + u_xlat26;
    u_xlat3.x = u_xlat2.w * u_xlat3.x + u_xlat26;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat2.w * u_xlat15 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat15 = u_xlat26 * u_xlat26;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat6.xy = vec2(u_xlat26) * vec2(u_xlat26) + vec2(-1.0, 1.0);
    u_xlat37 = u_xlat37 * u_xlat6.x + 1.0;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat37 = u_xlat37 * 3.14159274 + 1.00000001e-07;
    u_xlat37 = u_xlat15 / u_xlat37;
    u_xlat15 = (-u_xlat2.w) + 1.0;
    u_xlat27 = u_xlat15 * u_xlat15;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat15 = u_xlat15 * u_xlat27;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat27 = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat2.x = u_xlat2.x * u_xlat27;
    u_xlat27 = u_xlat2.y * u_xlat2.y;
    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat4));
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat15 = u_xlat27 * u_xlat15 + 1.0;
    u_xlat27 = u_xlat27 * u_xlat2.x + 1.0;
    u_xlat15 = u_xlat27 * u_xlat15;
    u_xlat37 = u_xlat37 * u_xlat3.x;
    u_xlat37 = u_xlat37 * 0.785398185;
    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat27 = max(u_xlat37, 9.99999975e-05);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat37 = (u_xlatb3) ? u_xlat27 : u_xlat37;
    u_xlat37 = u_xlat2.w * u_xlat37;
    u_xlat37 = max(u_xlat37, 0.0);
    u_xlat38 = u_xlat2.w * u_xlat15;
    u_xlat26 = u_xlat26 * u_xlat4;
    u_xlat26 = (-u_xlat26) * 0.280000001 + 1.0;
    u_xlat15 = float(1.0) / u_xlat6.y;
    u_xlat26 = (u_xlatb3) ? u_xlat26 : u_xlat15;
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat37 = u_xlat37 * u_xlat3.x;
    u_xlat36 = (-u_xlat36) + _Glossiness;
    u_xlat36 = u_xlat36 + 1.0;
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat38) * _LightColor0.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat3.xyz;
    u_xlat5.xyz = vec3(u_xlat37) * _LightColor0.xyz;
    u_xlat37 = (-u_xlat2.y) + 1.0;
    u_xlat14.x = u_xlat37 * u_xlat37;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat37 = u_xlat37 * u_xlat14.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat0.xyz;
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat14.xyz = u_xlat16.xyz * vec3(u_xlat26);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat36);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat14.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 198 math, 9 textures, 15 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_12;
  n_12 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_16;
  vec4 o_17;
  vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_8 * 0.5);
  vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_8.zw;
  vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_21;
  ambient_21 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_21 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_22;
  vec4 tmpvar_23;
  tmpvar_23 = (tmpvar_16.xyzz * tmpvar_16.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambient_21 = (ambient_21 + (x1_22 + (unity_SHC.xyz * 
    ((tmpvar_16.x * tmpvar_16.x) - (tmpvar_16.y * tmpvar_16.y))
  )));
  ambientOrLightmapUV_20.xyz = ambient_21;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = n_12;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD6 = o_17;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  float tmpvar_10;
  tmpvar_10 = (1.0 - _Glossiness);
  vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 tmpvar_12;
  vec3 tmpvar_13;
  vec3 tmpvar_14;
  tmpvar_14 = vec3(0.0, 0.0, 0.0);
  tmpvar_13 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  vec3 ambient_15;
  ambient_15 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_16;
  ambient_contrib_16 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_17;
    tmpvar_17.w = 1.0;
    tmpvar_17.xyz = tmpvar_6;
    vec3 x1_18;
    vec3 texCoord_19;
    vec3 tmpvar_20;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_21;
      tmpvar_21.w = 1.0;
      tmpvar_21.xyz = xlv_TEXCOORD8;
      tmpvar_20 = (unity_ProbeVolumeWorldToObject * tmpvar_21).xyz;
    } else {
      tmpvar_20 = xlv_TEXCOORD8;
    };
    vec3 tmpvar_22;
    tmpvar_22 = ((tmpvar_20 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_19.yz = tmpvar_22.yz;
    texCoord_19.x = (tmpvar_22.x * 0.25);
    float tmpvar_23;
    float tmpvar_24;
    tmpvar_24 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_23 = clamp (texCoord_19.x, tmpvar_24, (0.25 - tmpvar_24));
    texCoord_19.x = tmpvar_23;
    vec4 tmpvar_25;
    tmpvar_25 = texture3D (unity_ProbeVolumeSH, texCoord_19);
    texCoord_19.x = (tmpvar_23 + 0.25);
    vec4 tmpvar_26;
    tmpvar_26 = texture3D (unity_ProbeVolumeSH, texCoord_19);
    texCoord_19.x = (tmpvar_23 + 0.5);
    x1_18.x = dot (tmpvar_25, tmpvar_17);
    x1_18.y = dot (tmpvar_26, tmpvar_17);
    x1_18.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_19), tmpvar_17);
    ambient_contrib_16 = x1_18;
  } else {
    vec4 tmpvar_27;
    tmpvar_27.w = 1.0;
    tmpvar_27.xyz = tmpvar_6;
    vec3 x_28;
    x_28.x = dot (unity_SHAr, tmpvar_27);
    x_28.y = dot (unity_SHAg, tmpvar_27);
    x_28.z = dot (unity_SHAb, tmpvar_27);
    ambient_contrib_16 = x_28;
  };
  vec3 tmpvar_29;
  tmpvar_29 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_16));
  ambient_15 = tmpvar_29;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_15 = max (((1.055 * 
      pow (max (tmpvar_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_14 = (ambient_15 * tmpvar_8);
  tmpvar_12 = vec3(0.0, 0.0, 0.0);
  vec3 specular_30;
  vec3 worldRefl_31;
  worldRefl_31 = tmpvar_11;
  vec3 worldPos_32;
  worldPos_32 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_33;
    tmpvar_33 = normalize(tmpvar_11);
    vec3 tmpvar_34;
    tmpvar_34 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_33);
    vec3 tmpvar_35;
    tmpvar_35 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_33);
    bvec3 tmpvar_36;
    tmpvar_36 = greaterThan (tmpvar_33, vec3(0.0, 0.0, 0.0));
    float tmpvar_37;
    if (tmpvar_36.x) {
      tmpvar_37 = tmpvar_34.x;
    } else {
      tmpvar_37 = tmpvar_35.x;
    };
    float tmpvar_38;
    if (tmpvar_36.y) {
      tmpvar_38 = tmpvar_34.y;
    } else {
      tmpvar_38 = tmpvar_35.y;
    };
    float tmpvar_39;
    if (tmpvar_36.z) {
      tmpvar_39 = tmpvar_34.z;
    } else {
      tmpvar_39 = tmpvar_35.z;
    };
    worldPos_32 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_31 = (worldPos_32 + (tmpvar_33 * min (
      min (tmpvar_37, tmpvar_38)
    , tmpvar_39)));
  };
  vec4 tmpvar_40;
  tmpvar_40.xyz = worldRefl_31;
  tmpvar_40.w = ((tmpvar_10 * (1.7 - 
    (0.7 * tmpvar_10)
  )) * 6.0);
  vec4 tmpvar_41;
  tmpvar_41 = textureCubeLod (unity_SpecCube0, worldRefl_31, tmpvar_40.w);
  vec3 tmpvar_42;
  tmpvar_42 = ((unity_SpecCube0_HDR.x * pow (tmpvar_41.w, unity_SpecCube0_HDR.y)) * tmpvar_41.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_43;
    worldRefl_43 = tmpvar_11;
    vec3 worldPos_44;
    worldPos_44 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_45;
      tmpvar_45 = normalize(tmpvar_11);
      vec3 tmpvar_46;
      tmpvar_46 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_45);
      vec3 tmpvar_47;
      tmpvar_47 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_45);
      bvec3 tmpvar_48;
      tmpvar_48 = greaterThan (tmpvar_45, vec3(0.0, 0.0, 0.0));
      float tmpvar_49;
      if (tmpvar_48.x) {
        tmpvar_49 = tmpvar_46.x;
      } else {
        tmpvar_49 = tmpvar_47.x;
      };
      float tmpvar_50;
      if (tmpvar_48.y) {
        tmpvar_50 = tmpvar_46.y;
      } else {
        tmpvar_50 = tmpvar_47.y;
      };
      float tmpvar_51;
      if (tmpvar_48.z) {
        tmpvar_51 = tmpvar_46.z;
      } else {
        tmpvar_51 = tmpvar_47.z;
      };
      worldPos_44 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_43 = (worldPos_44 + (tmpvar_45 * min (
        min (tmpvar_49, tmpvar_50)
      , tmpvar_51)));
    };
    vec4 tmpvar_52;
    tmpvar_52.xyz = worldRefl_43;
    tmpvar_52.w = ((tmpvar_10 * (1.7 - 
      (0.7 * tmpvar_10)
    )) * 6.0);
    vec4 tmpvar_53;
    tmpvar_53 = textureCubeLod (unity_SpecCube1, worldRefl_43, tmpvar_52.w);
    specular_30 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_53.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_53.xyz), tmpvar_42, unity_SpecCube0_BoxMin.www);
  } else {
    specular_30 = tmpvar_42;
  };
  tmpvar_12 = (specular_30 * tmpvar_8);
  vec3 viewDir_54;
  viewDir_54 = -(tmpvar_7);
  float surfaceReduction_55;
  float specularTerm_56;
  float tmpvar_57;
  tmpvar_57 = (1.0 - _Glossiness);
  vec3 tmpvar_58;
  vec3 inVec_59;
  inVec_59 = (_WorldSpaceLightPos0.xyz + viewDir_54);
  tmpvar_58 = (inVec_59 * inversesqrt(max (0.001, 
    dot (inVec_59, inVec_59)
  )));
  float tmpvar_60;
  tmpvar_60 = max (0.0, dot (tmpvar_6, tmpvar_58));
  float tmpvar_61;
  tmpvar_61 = max (0.0, dot (tmpvar_6, viewDir_54));
  float tmpvar_62;
  tmpvar_62 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_58));
  float tmpvar_63;
  tmpvar_63 = (tmpvar_57 * tmpvar_57);
  float tmpvar_64;
  tmpvar_64 = (tmpvar_57 * tmpvar_57);
  float tmpvar_65;
  tmpvar_65 = (tmpvar_64 * tmpvar_64);
  float tmpvar_66;
  tmpvar_66 = (((tmpvar_60 * tmpvar_60) * (tmpvar_65 - 1.0)) + 1.0);
  float x_67;
  x_67 = (1.0 - tmpvar_9);
  float x_68;
  x_68 = (1.0 - tmpvar_61);
  float tmpvar_69;
  tmpvar_69 = (0.5 + ((2.0 * tmpvar_62) * (tmpvar_62 * tmpvar_57)));
  float tmpvar_70;
  tmpvar_70 = ((1.0 + (
    (tmpvar_69 - 1.0)
   * 
    ((x_67 * x_67) * ((x_67 * x_67) * x_67))
  )) * (1.0 + (
    (tmpvar_69 - 1.0)
   * 
    ((x_68 * x_68) * ((x_68 * x_68) * x_68))
  )));
  float tmpvar_71;
  tmpvar_71 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_61 * (1.0 - tmpvar_63))
     + tmpvar_63)) + (tmpvar_61 * (
      (tmpvar_9 * (1.0 - tmpvar_63))
     + tmpvar_63))) + 1e-05)
  ) * (tmpvar_65 / 
    (((3.141593 * tmpvar_66) * tmpvar_66) + 1e-07)
  )) * 0.7853982);
  specularTerm_56 = tmpvar_71;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_56 = sqrt(max (0.0001, tmpvar_71));
  };
  float tmpvar_72;
  tmpvar_72 = max (0.0, (specularTerm_56 * tmpvar_9));
  specularTerm_56 = tmpvar_72;
  float tmpvar_73;
  tmpvar_73 = (tmpvar_70 * tmpvar_9);
  float tmpvar_74;
  tmpvar_74 = (tmpvar_57 * tmpvar_57);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_55 = (1.0 - ((0.28 * tmpvar_74) * tmpvar_57));
  } else {
    surfaceReduction_55 = (1.0/(((tmpvar_74 * tmpvar_74) + 1.0)));
  };
  float tmpvar_75;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_75 = 1.0;
  } else {
    tmpvar_75 = 0.0;
  };
  specularTerm_56 = (tmpvar_72 * tmpvar_75);
  float x_76;
  x_76 = (1.0 - tmpvar_62);
  float x_77;
  x_77 = (1.0 - tmpvar_61);
  vec3 tmpvar_78;
  tmpvar_78 = (((tmpvar_3 * 
    (tmpvar_14 + (tmpvar_13 * tmpvar_73))
  ) + (
    (specularTerm_56 * tmpvar_13)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_76 * x_76) * (
      (x_76 * x_76)
     * x_76))))
  )) + ((surfaceReduction_55 * tmpvar_12) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_77 * x_77) * ((x_77 * x_77) * x_77))
  ))));
  vec4 tmpvar_79;
  tmpvar_79.w = 1.0;
  tmpvar_79.xyz = tmpvar_78;
  c_1.w = tmpvar_79.w;
  c_1.xyz = (tmpvar_78 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_80;
  xlat_varoutput_80.xyz = c_1.xyz;
  xlat_varoutput_80.w = 1.0;
  gl_FragData[0] = xlat_varoutput_80;
}


#endif
"
}
SubProgram "metal " {
// Stats: 34 math, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 306
Matrix 64 [glstate_matrix_mvp]
Matrix 128 [unity_ObjectToWorld]
Matrix 192 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
VectorHalf 32 [unity_SHBr] 4
VectorHalf 40 [unity_SHBg] 4
VectorHalf 48 [unity_SHBb] 4
VectorHalf 56 [unity_SHC] 4
VectorHalf 256 [unity_ColorSpaceLuminance] 4
Vector 272 [_MainTex_ST]
Vector 288 [_DetailAlbedoMap_ST]
ScalarHalf 304 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float3 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_7 = tmpvar_8.xyz;
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_19);
  float4 o_20;
  float4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  float2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _mtl_u._ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  half3 normalWorld_23;
  normalWorld_23 = half3(tmpvar_19);
  half4 ambientOrLightmapUV_24;
  ambientOrLightmapUV_24 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 ambient_25;
  ambient_25 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_26;
  tmpvar_26 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_26) {
    ambient_25 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_27;
  half4 tmpvar_28;
  tmpvar_28 = (normalWorld_23.xyzz * normalWorld_23.yzzx);
  x1_27.x = dot (_mtl_u.unity_SHBr, tmpvar_28);
  x1_27.y = dot (_mtl_u.unity_SHBg, tmpvar_28);
  x1_27.z = dot (_mtl_u.unity_SHBb, tmpvar_28);
  ambient_25 = (ambient_25 + (x1_27 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_23.x * normalWorld_23.x) - (normalWorld_23.y * normalWorld_23.y))
  )));
  ambientOrLightmapUV_24.xyz = ambient_25;
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_24;
  _mtl_o.xlv_TEXCOORD6 = o_20;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_7;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat10 = u_xlat1.y * u_xlat1.y;
    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat1.x = dot(unity_SHBr, u_xlat2);
    u_xlat1.y = dot(unity_SHBg, u_xlat2);
    u_xlat1.z = dot(unity_SHBb, u_xlat2);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
lowp vec4 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
vec4 u_xlat7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
lowp vec4 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
vec3 u_xlat12;
bvec3 u_xlatb13;
vec3 u_xlat16;
float u_xlat17;
float u_xlat18;
float u_xlat30;
float u_xlat31;
float u_xlat32;
float u_xlat42;
float u_xlat43;
float u_xlat44;
bool u_xlatb44;
float u_xlat45;
float u_xlat46;
mediump float u_xlat16_46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat43 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat2.xyz = vec3(u_xlat43) * vs_TEXCOORD4.xyz;
    u_xlat43 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat3.xyz = vec3(u_xlat43) * vs_TEXCOORD1.xyz;
    u_xlat45 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat45 = max(u_xlat45, 0.0);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat18 = (-_OcclusionStrength) + 1.0;
    u_xlat18 = u_xlat10_5.y * _OcclusionStrength + u_xlat18;
    u_xlat32 = (-_Glossiness) + 1.0;
    u_xlat46 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat46)) + u_xlat3.xyz;
    u_xlat6.xyz = u_xlat10_4.xxx * _LightColor0.xyz;
    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb4){
        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb4)) ? u_xlat7.xyz : vs_TEXCOORD8.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat7.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat4.x = u_xlat7.y * 0.25;
        u_xlat46 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat47 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat4.x = max(u_xlat46, u_xlat4.x);
        u_xlat7.x = min(u_xlat47, u_xlat4.x);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_9 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat2.w = 1.0;
        u_xlat8.x = dot(u_xlat10_8, u_xlat2);
        u_xlat8.y = dot(u_xlat10_9, u_xlat2);
        u_xlat8.z = dot(u_xlat10_7, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat8.x = dot(unity_SHAr, u_xlat2);
        u_xlat8.y = dot(unity_SHAg, u_xlat2);
        u_xlat8.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat7.xyz = u_xlat8.xyz + vs_TEXCOORD5.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb44 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat8.xyz = log2(u_xlat7.xyz);
    u_xlat8.xyz = u_xlat8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat8.xyz = exp2(u_xlat8.xyz);
    u_xlat8.xyz = u_xlat8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat7.xyz = (bool(u_xlatb44)) ? u_xlat8.xyz : u_xlat7.xyz;
    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb4){
        u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat4.x = inversesqrt(u_xlat4.x);
        u_xlat8.xyz = u_xlat4.xxx * u_xlat5.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
        u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
        u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
        u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
        u_xlat4.x = min(u_xlat9.y, u_xlat9.x);
        u_xlat4.x = min(u_xlat9.z, u_xlat4.x);
        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xxx + u_xlat9.xyz;
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat4.x = (-u_xlat32) * 0.699999988 + 1.70000005;
    u_xlat4.x = u_xlat4.x * u_xlat32;
    u_xlat4.x = u_xlat4.x * 6.0;
    u_xlat10_8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat4.x);
    u_xlat16_46 = log2(u_xlat10_8.w);
    u_xlat46 = u_xlat16_46 * unity_SpecCube0_HDR.y;
    u_xlat46 = exp2(u_xlat46);
    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat10_8.xyz * vec3(u_xlat46);
    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb47){
        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb47){
            u_xlat47 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat47 = inversesqrt(u_xlat47);
            u_xlat10.xyz = vec3(u_xlat47) * u_xlat5.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
            u_xlat11.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
            u_xlat11.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
            u_xlat11.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
            u_xlat47 = min(u_xlat11.z, u_xlat47);
            u_xlat11.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat4.x);
        u_xlat16_4 = log2(u_xlat10_5.w);
        u_xlat4.x = u_xlat16_4 * unity_SpecCube1_HDR.y;
        u_xlat4.x = exp2(u_xlat4.x);
        u_xlat4.x = u_xlat4.x * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * u_xlat4.xxx;
        u_xlat8.xyz = vec3(u_xlat46) * u_xlat10_8.xyz + (-u_xlat5.xyz);
        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = vec3(u_xlat18) * u_xlat9.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat43) + _WorldSpaceLightPos0.xyz;
    u_xlat43 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat43 = max(u_xlat43, 0.00100000005);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat8.xyz = vec3(u_xlat43) * u_xlat8.xyz;
    u_xlat43 = dot(u_xlat2.xyz, u_xlat8.xyz);
    u_xlat43 = max(u_xlat43, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat30 = u_xlat32 * u_xlat32;
    u_xlat3.x = (-u_xlat32) * u_xlat32 + 1.0;
    u_xlat17 = u_xlat2.x * u_xlat3.x + u_xlat30;
    u_xlat3.x = u_xlat45 * u_xlat3.x + u_xlat30;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat45 * u_xlat17 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat17 = u_xlat30 * u_xlat30;
    u_xlat43 = u_xlat43 * u_xlat43;
    u_xlat4.xw = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
    u_xlat43 = u_xlat43 * u_xlat4.x + 1.0;
    u_xlat43 = u_xlat43 * u_xlat43;
    u_xlat43 = u_xlat43 * 3.14159274 + 1.00000001e-07;
    u_xlat43 = u_xlat17 / u_xlat43;
    u_xlat17 = (-u_xlat45) + 1.0;
    u_xlat31 = u_xlat17 * u_xlat17;
    u_xlat31 = u_xlat31 * u_xlat31;
    u_xlat17 = u_xlat17 * u_xlat31;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat31 = u_xlat2.x * u_xlat2.x;
    u_xlat31 = u_xlat31 * u_xlat31;
    u_xlat2.x = u_xlat2.x * u_xlat31;
    u_xlat31 = u_xlat2.y * u_xlat2.y;
    u_xlat31 = dot(vec2(u_xlat31), vec2(u_xlat32));
    u_xlat31 = u_xlat31 + -0.5;
    u_xlat17 = u_xlat31 * u_xlat17 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat2.x + 1.0;
    u_xlat17 = u_xlat31 * u_xlat17;
    u_xlat43 = u_xlat43 * u_xlat3.x;
    u_xlat43 = u_xlat43 * 0.785398185;
    u_xlat3.x = max(u_xlat43, 9.99999975e-05);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat43 = (u_xlatb44) ? u_xlat3.x : u_xlat43;
    u_xlat43 = u_xlat45 * u_xlat43;
    u_xlat43 = max(u_xlat43, 0.0);
    u_xlat3.x = u_xlat45 * u_xlat17;
    u_xlat30 = u_xlat30 * u_xlat32;
    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
    u_xlat17 = float(1.0) / u_xlat4.w;
    u_xlat30 = (u_xlatb44) ? u_xlat30 : u_xlat17;
    u_xlat44 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb44 = u_xlat44!=0.0;
    u_xlat44 = u_xlatb44 ? 1.0 : float(0.0);
    u_xlat43 = u_xlat43 * u_xlat44;
    u_xlat42 = (-u_xlat42) + _Glossiness;
    u_xlat42 = u_xlat42 + 1.0;
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat43);
    u_xlat43 = (-u_xlat2.y) + 1.0;
    u_xlat16.x = u_xlat43 * u_xlat43;
    u_xlat16.x = u_xlat16.x * u_xlat16.x;
    u_xlat43 = u_xlat43 * u_xlat16.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat43) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat16.xyz = u_xlat5.xyz * vec3(u_xlat30);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat42);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 177 math, 8 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 o_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_8 * 0.5);
  vec2 tmpvar_28;
  tmpvar_28.x = tmpvar_27.x;
  tmpvar_28.y = (tmpvar_27.y * _ProjectionParams.x);
  o_26.xy = (tmpvar_28 + tmpvar_27.w);
  o_26.zw = tmpvar_8.zw;
  vec4 ambientOrLightmapUV_29;
  ambientOrLightmapUV_29.xy = vec2(0.0, 0.0);
  ambientOrLightmapUV_29.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_29;
  xlv_TEXCOORD6 = o_26;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_12 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_6, (tmpvar_14.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_14.w));
  tmpvar_12 = (tmpvar_12 * tmpvar_8);
  tmpvar_10 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  float tmpvar_15;
  vec3 tmpvar_16;
  tmpvar_15 = (1.0 - _Glossiness);
  tmpvar_16 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 originalReflUVW_17;
  vec3 specular_18;
  originalReflUVW_17 = tmpvar_16;
  vec3 worldRefl_19;
  worldRefl_19 = tmpvar_16;
  vec3 worldPos_20;
  worldPos_20 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_21;
    tmpvar_21 = normalize(tmpvar_16);
    vec3 tmpvar_22;
    tmpvar_22 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_21);
    vec3 tmpvar_23;
    tmpvar_23 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_21);
    bvec3 tmpvar_24;
    tmpvar_24 = greaterThan (tmpvar_21, vec3(0.0, 0.0, 0.0));
    float tmpvar_25;
    if (tmpvar_24.x) {
      tmpvar_25 = tmpvar_22.x;
    } else {
      tmpvar_25 = tmpvar_23.x;
    };
    float tmpvar_26;
    if (tmpvar_24.y) {
      tmpvar_26 = tmpvar_22.y;
    } else {
      tmpvar_26 = tmpvar_23.y;
    };
    float tmpvar_27;
    if (tmpvar_24.z) {
      tmpvar_27 = tmpvar_22.z;
    } else {
      tmpvar_27 = tmpvar_23.z;
    };
    worldPos_20 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_19 = (worldPos_20 + (tmpvar_21 * min (
      min (tmpvar_25, tmpvar_26)
    , tmpvar_27)));
  };
  tmpvar_16 = worldRefl_19;
  vec4 tmpvar_28;
  tmpvar_28.xyz = worldRefl_19;
  tmpvar_28.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  vec4 tmpvar_29;
  tmpvar_29 = textureCubeLod (unity_SpecCube0, worldRefl_19, tmpvar_28.w);
  vec3 tmpvar_30;
  tmpvar_30 = ((unity_SpecCube0_HDR.x * pow (tmpvar_29.w, unity_SpecCube0_HDR.y)) * tmpvar_29.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_31;
    worldRefl_31 = originalReflUVW_17;
    vec3 worldPos_32;
    worldPos_32 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_33;
      tmpvar_33 = normalize(originalReflUVW_17);
      vec3 tmpvar_34;
      tmpvar_34 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_33);
      vec3 tmpvar_35;
      tmpvar_35 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_33);
      bvec3 tmpvar_36;
      tmpvar_36 = greaterThan (tmpvar_33, vec3(0.0, 0.0, 0.0));
      float tmpvar_37;
      if (tmpvar_36.x) {
        tmpvar_37 = tmpvar_34.x;
      } else {
        tmpvar_37 = tmpvar_35.x;
      };
      float tmpvar_38;
      if (tmpvar_36.y) {
        tmpvar_38 = tmpvar_34.y;
      } else {
        tmpvar_38 = tmpvar_35.y;
      };
      float tmpvar_39;
      if (tmpvar_36.z) {
        tmpvar_39 = tmpvar_34.z;
      } else {
        tmpvar_39 = tmpvar_35.z;
      };
      worldPos_32 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_31 = (worldPos_32 + (tmpvar_33 * min (
        min (tmpvar_37, tmpvar_38)
      , tmpvar_39)));
    };
    tmpvar_16 = worldRefl_31;
    vec4 tmpvar_40;
    tmpvar_40.xyz = worldRefl_31;
    tmpvar_40.w = ((tmpvar_15 * (1.7 - 
      (0.7 * tmpvar_15)
    )) * 6.0);
    vec4 tmpvar_41;
    tmpvar_41 = textureCubeLod (unity_SpecCube1, worldRefl_31, tmpvar_40.w);
    specular_18 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_41.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_41.xyz), tmpvar_30, unity_SpecCube0_BoxMin.www);
  } else {
    specular_18 = tmpvar_30;
  };
  tmpvar_11 = (specular_18 * tmpvar_8);
  vec3 viewDir_42;
  viewDir_42 = -(tmpvar_7);
  float surfaceReduction_43;
  float specularTerm_44;
  float tmpvar_45;
  tmpvar_45 = (1.0 - _Glossiness);
  vec3 tmpvar_46;
  vec3 inVec_47;
  inVec_47 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_46 = (inVec_47 * inversesqrt(max (0.001, 
    dot (inVec_47, inVec_47)
  )));
  float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_46));
  float tmpvar_49;
  tmpvar_49 = max (0.0, dot (tmpvar_6, viewDir_42));
  float tmpvar_50;
  tmpvar_50 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_46));
  float tmpvar_51;
  tmpvar_51 = (tmpvar_45 * tmpvar_45);
  float tmpvar_52;
  tmpvar_52 = (tmpvar_45 * tmpvar_45);
  float tmpvar_53;
  tmpvar_53 = (tmpvar_52 * tmpvar_52);
  float tmpvar_54;
  tmpvar_54 = (((tmpvar_48 * tmpvar_48) * (tmpvar_53 - 1.0)) + 1.0);
  float x_55;
  x_55 = (1.0 - tmpvar_9);
  float x_56;
  x_56 = (1.0 - tmpvar_49);
  float tmpvar_57;
  tmpvar_57 = (0.5 + ((2.0 * tmpvar_50) * (tmpvar_50 * tmpvar_45)));
  float tmpvar_58;
  tmpvar_58 = ((1.0 + (
    (tmpvar_57 - 1.0)
   * 
    ((x_55 * x_55) * ((x_55 * x_55) * x_55))
  )) * (1.0 + (
    (tmpvar_57 - 1.0)
   * 
    ((x_56 * x_56) * ((x_56 * x_56) * x_56))
  )));
  float tmpvar_59;
  tmpvar_59 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_49 * (1.0 - tmpvar_51))
     + tmpvar_51)) + (tmpvar_49 * (
      (tmpvar_9 * (1.0 - tmpvar_51))
     + tmpvar_51))) + 1e-05)
  ) * (tmpvar_53 / 
    (((3.141593 * tmpvar_54) * tmpvar_54) + 1e-07)
  )) * 0.7853982);
  specularTerm_44 = tmpvar_59;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_44 = sqrt(max (0.0001, tmpvar_59));
  };
  float tmpvar_60;
  tmpvar_60 = max (0.0, (specularTerm_44 * tmpvar_9));
  specularTerm_44 = tmpvar_60;
  float tmpvar_61;
  tmpvar_61 = (tmpvar_58 * tmpvar_9);
  float tmpvar_62;
  tmpvar_62 = (tmpvar_45 * tmpvar_45);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_43 = (1.0 - ((0.28 * tmpvar_62) * tmpvar_45));
  } else {
    surfaceReduction_43 = (1.0/(((tmpvar_62 * tmpvar_62) + 1.0)));
  };
  float tmpvar_63;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_63 = 1.0;
  } else {
    tmpvar_63 = 0.0;
  };
  specularTerm_44 = (tmpvar_60 * tmpvar_63);
  float x_64;
  x_64 = (1.0 - tmpvar_50);
  float x_65;
  x_65 = (1.0 - tmpvar_49);
  vec3 tmpvar_66;
  tmpvar_66 = (((tmpvar_3 * 
    (tmpvar_12 + (tmpvar_10 * tmpvar_61))
  ) + (
    (specularTerm_44 * tmpvar_10)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_64 * x_64) * (
      (x_64 * x_64)
     * x_64))))
  )) + ((surfaceReduction_43 * tmpvar_11) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_65 * x_65) * ((x_65 * x_65) * x_65))
  ))));
  vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = tmpvar_66;
  c_1.w = tmpvar_67.w;
  c_1.xyz = (tmpvar_66 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = 1.0;
  gl_FragData[0] = xlat_varoutput_68;
}


#endif
"
}
SubProgram "metal " {
// Stats: 28 math, 1 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 290
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [unity_WorldTransformParams]
Vector 240 [unity_DynamicLightmapST]
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  float3 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  float4 tmpvar_11;
  float4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_11 = (_mtl_u.glstate_matrix_mvp * tmpvar_12);
  float4 texcoord_13;
  texcoord_13.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_14;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_15;
  float3 n_16;
  n_16 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_15 = half3(n_16);
  float3 norm_17;
  norm_17 = float3(tmpvar_1);
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].x;
  v_18.y = _mtl_u.unity_WorldToObject[1].x;
  v_18.z = _mtl_u.unity_WorldToObject[2].x;
  v_18.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].y;
  v_19.y = _mtl_u.unity_WorldToObject[1].y;
  v_19.z = _mtl_u.unity_WorldToObject[2].y;
  v_19.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].z;
  v_20.y = _mtl_u.unity_WorldToObject[1].z;
  v_20.z = _mtl_u.unity_WorldToObject[2].z;
  v_20.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  float3 dir_22;
  dir_22 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_23;
  tmpvar_23[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_23[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_23[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = float(tmpvar_4.w);
  half3 normal_25;
  normal_25 = half3(tmpvar_21);
  half3 tangent_26;
  tangent_26 = half3(tmpvar_24.xyz);
  half tangentSign_27;
  tangentSign_27 = half(tmpvar_24.w);
  half xlat_varsign_28;
  float tmpvar_29;
  tmpvar_29 = ((float)tangentSign_27 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_28 = half(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * xlat_varsign_28);
  half3x3 tmpvar_31;
  tmpvar_31[0].x = tangent_26.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = normal_25.x;
  tmpvar_31[1].x = tangent_26.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = normal_25.y;
  tmpvar_31[2].x = tangent_26.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = normal_25.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_31);
  float3 v_32;
  v_32.x = tangentToWorld_5[0].x;
  v_32.y = tangentToWorld_5[1].x;
  v_32.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].y;
  v_33.y = tangentToWorld_5[1].y;
  v_33.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].z;
  v_34.y = tangentToWorld_5[1].z;
  v_34.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_34);
  float4 o_35;
  float4 tmpvar_36;
  tmpvar_36 = (tmpvar_11 * 0.5);
  float2 tmpvar_37;
  tmpvar_37.x = tmpvar_36.x;
  tmpvar_37.y = (tmpvar_36.y * _mtl_u._ProjectionParams.x);
  o_35.xy = (tmpvar_37 + tmpvar_36.w);
  o_35.zw = tmpvar_11.zw;
  half4 ambientOrLightmapUV_38;
  ambientOrLightmapUV_38.xy = half2(float2(0.0, 0.0));
  ambientOrLightmapUV_38.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_11;
  _mtl_o.xlv_TEXCOORD0 = texcoord_13;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_15;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_38;
  _mtl_o.xlv_TEXCOORD6 = o_35;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat2.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat2.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat2.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat3.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat3.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat3.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat3.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat3.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat15;
float u_xlat16;
float u_xlat17;
float u_xlat28;
float u_xlat29;
float u_xlat30;
float u_xlat39;
float u_xlat40;
float u_xlat41;
float u_xlat42;
float u_xlat44;
mediump float u_xlat16_44;
bool u_xlatb44;
float u_xlat45;
mediump float u_xlat16_45;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
    u_xlat40 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat2.xyz = vec3(u_xlat40) * vs_TEXCOORD4.xyz;
    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat3.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;
    u_xlat2.w = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat42 = (-_OcclusionStrength) + 1.0;
    u_xlat42 = u_xlat10_5.y * _OcclusionStrength + u_xlat42;
    u_xlat17 = (-_Glossiness) + 1.0;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat30)) + u_xlat3.xyz;
    u_xlat4.xzw = u_xlat10_4.xxx * _LightColor0.xyz;
    u_xlat10_6 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat44 = u_xlat10_6.w * unity_DynamicLightmap_HDR.x;
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat44);
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat10_7 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_7.xyz = u_xlat10_7.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat44 = dot(u_xlat2.xyz, u_xlat16_7.xyz);
    u_xlat44 = u_xlat44 + 0.5;
    u_xlat6.xyz = vec3(u_xlat44) * u_xlat6.xyz;
    u_xlat16_44 = max(u_xlat10_7.w, 9.99999975e-05);
    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_44);
    u_xlatb44 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb44){
        u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat44 = inversesqrt(u_xlat44);
        u_xlat7.xyz = vec3(u_xlat44) * u_xlat5.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat44 = min(u_xlat8.y, u_xlat8.x);
        u_xlat44 = min(u_xlat8.z, u_xlat44);
        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat44) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat44 = (-u_xlat17) * 0.699999988 + 1.70000005;
    u_xlat44 = u_xlat17 * u_xlat44;
    u_xlat44 = u_xlat44 * 6.0;
    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat44);
    u_xlat16_45 = log2(u_xlat10_7.w);
    u_xlat45 = u_xlat16_45 * unity_SpecCube0_HDR.y;
    u_xlat45 = exp2(u_xlat45);
    u_xlat45 = u_xlat45 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat45);
    u_xlatb46 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = inversesqrt(u_xlat46);
            u_xlat9.xyz = u_xlat5.xyz * vec3(u_xlat46);
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat44);
        u_xlat16_44 = log2(u_xlat10_5.w);
        u_xlat44 = u_xlat16_44 * unity_SpecCube1_HDR.y;
        u_xlat44 = exp2(u_xlat44);
        u_xlat44 = u_xlat44 * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat44);
        u_xlat7.xyz = vec3(u_xlat45) * u_xlat10_7.xyz + (-u_xlat5.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = vec3(u_xlat42) * u_xlat8.xyz;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat40) + _WorldSpaceLightPos0.xyz;
    u_xlat40 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat40 = max(u_xlat40, 0.00100000005);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat7.xyz = vec3(u_xlat40) * u_xlat7.xyz;
    u_xlat40 = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat40 = max(u_xlat40, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat28 = u_xlat17 * u_xlat17;
    u_xlat3.x = (-u_xlat17) * u_xlat17 + 1.0;
    u_xlat16 = u_xlat2.x * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat2.w * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat2.w * u_xlat16 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat16 = u_xlat28 * u_xlat28;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat7.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
    u_xlat40 = u_xlat40 * u_xlat7.x + 1.0;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat40 = u_xlat40 * 3.14159274 + 1.00000001e-07;
    u_xlat40 = u_xlat16 / u_xlat40;
    u_xlat16 = (-u_xlat2.w) + 1.0;
    u_xlat29 = u_xlat16 * u_xlat16;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat16 = u_xlat16 * u_xlat29;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat29 = u_xlat2.x * u_xlat2.x;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat2.x = u_xlat2.x * u_xlat29;
    u_xlat29 = u_xlat2.y * u_xlat2.y;
    u_xlat29 = dot(vec2(u_xlat29), vec2(u_xlat17));
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat16 = u_xlat29 * u_xlat16 + 1.0;
    u_xlat29 = u_xlat29 * u_xlat2.x + 1.0;
    u_xlat16 = u_xlat29 * u_xlat16;
    u_xlat40 = u_xlat40 * u_xlat3.x;
    u_xlat40 = u_xlat40 * 0.785398185;
    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat29 = max(u_xlat40, 9.99999975e-05);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat40 = (u_xlatb3) ? u_xlat29 : u_xlat40;
    u_xlat40 = u_xlat2.w * u_xlat40;
    u_xlat40 = max(u_xlat40, 0.0);
    u_xlat41 = u_xlat2.w * u_xlat16;
    u_xlat28 = u_xlat28 * u_xlat17;
    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;
    u_xlat16 = float(1.0) / u_xlat7.y;
    u_xlat28 = (u_xlatb3) ? u_xlat28 : u_xlat16;
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat40 = u_xlat40 * u_xlat3.x;
    u_xlat39 = (-u_xlat39) + _Glossiness;
    u_xlat39 = u_xlat39 + 1.0;
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat41) * u_xlat4.xzw;
    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat3.xyz;
    u_xlat4.xyz = u_xlat4.xzw * vec3(u_xlat40);
    u_xlat40 = (-u_xlat2.y) + 1.0;
    u_xlat15.x = u_xlat40 * u_xlat40;
    u_xlat15.x = u_xlat15.x * u_xlat15.x;
    u_xlat40 = u_xlat40 * u_xlat15.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat28);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat39);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat15.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 197 math, 8 textures, 15 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_12;
  n_12 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_16;
  vec4 ambientOrLightmapUV_17;
  ambientOrLightmapUV_17.w = 0.0;
  vec3 col_18;
  vec4 ndotl_19;
  vec4 lengthSq_20;
  vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_22;
  tmpvar_22 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_20 = (tmpvar_21 * tmpvar_21);
  lengthSq_20 = (lengthSq_20 + (tmpvar_22 * tmpvar_22));
  lengthSq_20 = (lengthSq_20 + (tmpvar_23 * tmpvar_23));
  ndotl_19 = (tmpvar_21 * tmpvar_16.x);
  ndotl_19 = (ndotl_19 + (tmpvar_22 * tmpvar_16.y));
  ndotl_19 = (ndotl_19 + (tmpvar_23 * tmpvar_16.z));
  vec4 tmpvar_24;
  tmpvar_24 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_19 * inversesqrt(lengthSq_20)));
  ndotl_19 = tmpvar_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * (1.0/((1.0 + 
    (lengthSq_20 * unity_4LightAtten0)
  ))));
  col_18 = (unity_LightColor[0].xyz * tmpvar_25.x);
  col_18 = (col_18 + (unity_LightColor[1].xyz * tmpvar_25.y));
  col_18 = (col_18 + (unity_LightColor[2].xyz * tmpvar_25.z));
  col_18 = (col_18 + (unity_LightColor[3].xyz * tmpvar_25.w));
  ambientOrLightmapUV_17.xyz = col_18;
  vec3 ambient_26;
  ambient_26 = ambientOrLightmapUV_17.xyz;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_26 = (col_18 * ((col_18 * 
      ((col_18 * 0.305306) + 0.6821711)
    ) + 0.01252288));
  };
  vec3 x1_27;
  vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_16.xyzz * tmpvar_16.yzzx);
  x1_27.x = dot (unity_SHBr, tmpvar_28);
  x1_27.y = dot (unity_SHBg, tmpvar_28);
  x1_27.z = dot (unity_SHBb, tmpvar_28);
  ambient_26 = (ambient_26 + (x1_27 + (unity_SHC.xyz * 
    ((tmpvar_16.x * tmpvar_16.x) - (tmpvar_16.y * tmpvar_16.y))
  )));
  ambientOrLightmapUV_17.xyz = ambient_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = n_12;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_17;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  float tmpvar_10;
  tmpvar_10 = (1.0 - _Glossiness);
  vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_14;
  ambient_14 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_15;
  ambient_contrib_15 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_16;
    tmpvar_16.w = 1.0;
    tmpvar_16.xyz = tmpvar_6;
    vec3 x1_17;
    vec3 texCoord_18;
    vec3 tmpvar_19;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_20;
      tmpvar_20.w = 1.0;
      tmpvar_20.xyz = xlv_TEXCOORD8;
      tmpvar_19 = (unity_ProbeVolumeWorldToObject * tmpvar_20).xyz;
    } else {
      tmpvar_19 = xlv_TEXCOORD8;
    };
    vec3 tmpvar_21;
    tmpvar_21 = ((tmpvar_19 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_18.yz = tmpvar_21.yz;
    texCoord_18.x = (tmpvar_21.x * 0.25);
    float tmpvar_22;
    float tmpvar_23;
    tmpvar_23 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_22 = clamp (texCoord_18.x, tmpvar_23, (0.25 - tmpvar_23));
    texCoord_18.x = tmpvar_22;
    vec4 tmpvar_24;
    tmpvar_24 = texture3D (unity_ProbeVolumeSH, texCoord_18);
    texCoord_18.x = (tmpvar_22 + 0.25);
    vec4 tmpvar_25;
    tmpvar_25 = texture3D (unity_ProbeVolumeSH, texCoord_18);
    texCoord_18.x = (tmpvar_22 + 0.5);
    x1_17.x = dot (tmpvar_24, tmpvar_16);
    x1_17.y = dot (tmpvar_25, tmpvar_16);
    x1_17.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_18), tmpvar_16);
    ambient_contrib_15 = x1_17;
  } else {
    vec4 tmpvar_26;
    tmpvar_26.w = 1.0;
    tmpvar_26.xyz = tmpvar_6;
    vec3 x_27;
    x_27.x = dot (unity_SHAr, tmpvar_26);
    x_27.y = dot (unity_SHAg, tmpvar_26);
    x_27.z = dot (unity_SHAb, tmpvar_26);
    ambient_contrib_15 = x_27;
  };
  vec3 tmpvar_28;
  tmpvar_28 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_15));
  ambient_14 = tmpvar_28;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_14 = max (((1.055 * 
      pow (max (tmpvar_28, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_13 = (ambient_14 * tmpvar_8);
  tmpvar_12 = vec3(0.0, 0.0, 0.0);
  vec3 specular_29;
  vec3 worldRefl_30;
  worldRefl_30 = tmpvar_11;
  vec3 worldPos_31;
  worldPos_31 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_32;
    tmpvar_32 = normalize(tmpvar_11);
    vec3 tmpvar_33;
    tmpvar_33 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_32);
    vec3 tmpvar_34;
    tmpvar_34 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_32);
    bvec3 tmpvar_35;
    tmpvar_35 = greaterThan (tmpvar_32, vec3(0.0, 0.0, 0.0));
    float tmpvar_36;
    if (tmpvar_35.x) {
      tmpvar_36 = tmpvar_33.x;
    } else {
      tmpvar_36 = tmpvar_34.x;
    };
    float tmpvar_37;
    if (tmpvar_35.y) {
      tmpvar_37 = tmpvar_33.y;
    } else {
      tmpvar_37 = tmpvar_34.y;
    };
    float tmpvar_38;
    if (tmpvar_35.z) {
      tmpvar_38 = tmpvar_33.z;
    } else {
      tmpvar_38 = tmpvar_34.z;
    };
    worldPos_31 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_30 = (worldPos_31 + (tmpvar_32 * min (
      min (tmpvar_36, tmpvar_37)
    , tmpvar_38)));
  };
  vec4 tmpvar_39;
  tmpvar_39.xyz = worldRefl_30;
  tmpvar_39.w = ((tmpvar_10 * (1.7 - 
    (0.7 * tmpvar_10)
  )) * 6.0);
  vec4 tmpvar_40;
  tmpvar_40 = textureCubeLod (unity_SpecCube0, worldRefl_30, tmpvar_39.w);
  vec3 tmpvar_41;
  tmpvar_41 = ((unity_SpecCube0_HDR.x * pow (tmpvar_40.w, unity_SpecCube0_HDR.y)) * tmpvar_40.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_42;
    worldRefl_42 = tmpvar_11;
    vec3 worldPos_43;
    worldPos_43 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_44;
      tmpvar_44 = normalize(tmpvar_11);
      vec3 tmpvar_45;
      tmpvar_45 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_44);
      vec3 tmpvar_46;
      tmpvar_46 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_44);
      bvec3 tmpvar_47;
      tmpvar_47 = greaterThan (tmpvar_44, vec3(0.0, 0.0, 0.0));
      float tmpvar_48;
      if (tmpvar_47.x) {
        tmpvar_48 = tmpvar_45.x;
      } else {
        tmpvar_48 = tmpvar_46.x;
      };
      float tmpvar_49;
      if (tmpvar_47.y) {
        tmpvar_49 = tmpvar_45.y;
      } else {
        tmpvar_49 = tmpvar_46.y;
      };
      float tmpvar_50;
      if (tmpvar_47.z) {
        tmpvar_50 = tmpvar_45.z;
      } else {
        tmpvar_50 = tmpvar_46.z;
      };
      worldPos_43 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_42 = (worldPos_43 + (tmpvar_44 * min (
        min (tmpvar_48, tmpvar_49)
      , tmpvar_50)));
    };
    vec4 tmpvar_51;
    tmpvar_51.xyz = worldRefl_42;
    tmpvar_51.w = ((tmpvar_10 * (1.7 - 
      (0.7 * tmpvar_10)
    )) * 6.0);
    vec4 tmpvar_52;
    tmpvar_52 = textureCubeLod (unity_SpecCube1, worldRefl_42, tmpvar_51.w);
    specular_29 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_52.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_52.xyz), tmpvar_41, unity_SpecCube0_BoxMin.www);
  } else {
    specular_29 = tmpvar_41;
  };
  tmpvar_12 = (specular_29 * tmpvar_8);
  vec3 viewDir_53;
  viewDir_53 = -(tmpvar_7);
  float surfaceReduction_54;
  float specularTerm_55;
  float tmpvar_56;
  tmpvar_56 = (1.0 - _Glossiness);
  vec3 tmpvar_57;
  vec3 inVec_58;
  inVec_58 = (_WorldSpaceLightPos0.xyz + viewDir_53);
  tmpvar_57 = (inVec_58 * inversesqrt(max (0.001, 
    dot (inVec_58, inVec_58)
  )));
  float tmpvar_59;
  tmpvar_59 = max (0.0, dot (tmpvar_6, tmpvar_57));
  float tmpvar_60;
  tmpvar_60 = max (0.0, dot (tmpvar_6, viewDir_53));
  float tmpvar_61;
  tmpvar_61 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_57));
  float tmpvar_62;
  tmpvar_62 = (tmpvar_56 * tmpvar_56);
  float tmpvar_63;
  tmpvar_63 = (tmpvar_56 * tmpvar_56);
  float tmpvar_64;
  tmpvar_64 = (tmpvar_63 * tmpvar_63);
  float tmpvar_65;
  tmpvar_65 = (((tmpvar_59 * tmpvar_59) * (tmpvar_64 - 1.0)) + 1.0);
  float x_66;
  x_66 = (1.0 - tmpvar_9);
  float x_67;
  x_67 = (1.0 - tmpvar_60);
  float tmpvar_68;
  tmpvar_68 = (0.5 + ((2.0 * tmpvar_61) * (tmpvar_61 * tmpvar_56)));
  float tmpvar_69;
  tmpvar_69 = ((1.0 + (
    (tmpvar_68 - 1.0)
   * 
    ((x_66 * x_66) * ((x_66 * x_66) * x_66))
  )) * (1.0 + (
    (tmpvar_68 - 1.0)
   * 
    ((x_67 * x_67) * ((x_67 * x_67) * x_67))
  )));
  float tmpvar_70;
  tmpvar_70 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_60 * (1.0 - tmpvar_62))
     + tmpvar_62)) + (tmpvar_60 * (
      (tmpvar_9 * (1.0 - tmpvar_62))
     + tmpvar_62))) + 1e-05)
  ) * (tmpvar_64 / 
    (((3.141593 * tmpvar_65) * tmpvar_65) + 1e-07)
  )) * 0.7853982);
  specularTerm_55 = tmpvar_70;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_55 = sqrt(max (0.0001, tmpvar_70));
  };
  float tmpvar_71;
  tmpvar_71 = max (0.0, (specularTerm_55 * tmpvar_9));
  specularTerm_55 = tmpvar_71;
  float tmpvar_72;
  tmpvar_72 = (tmpvar_69 * tmpvar_9);
  float tmpvar_73;
  tmpvar_73 = (tmpvar_56 * tmpvar_56);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_54 = (1.0 - ((0.28 * tmpvar_73) * tmpvar_56));
  } else {
    surfaceReduction_54 = (1.0/(((tmpvar_73 * tmpvar_73) + 1.0)));
  };
  float tmpvar_74;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_74 = 1.0;
  } else {
    tmpvar_74 = 0.0;
  };
  specularTerm_55 = (tmpvar_71 * tmpvar_74);
  float x_75;
  x_75 = (1.0 - tmpvar_61);
  float x_76;
  x_76 = (1.0 - tmpvar_60);
  vec3 tmpvar_77;
  tmpvar_77 = (((tmpvar_3 * 
    (tmpvar_13 + (_LightColor0.xyz * tmpvar_72))
  ) + (
    (specularTerm_55 * _LightColor0.xyz)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_75 * x_75) * (
      (x_75 * x_75)
     * x_75))))
  )) + ((surfaceReduction_54 * tmpvar_12) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_76 * x_76) * ((x_76 * x_76) * x_76))
  ))));
  vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = tmpvar_77;
  c_1.w = tmpvar_78.w;
  c_1.xyz = (tmpvar_77 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_79;
  xlat_varoutput_79.xyz = c_1.xyz;
  xlat_varoutput_79.w = 1.0;
  gl_FragData[0] = xlat_varoutput_79;
}


#endif
"
}
SubProgram "metal " {
// Stats: 61 math, 2 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 418
Matrix 176 [glstate_matrix_mvp]
Matrix 240 [unity_ObjectToWorld]
Matrix 304 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [unity_4LightPosX0]
Vector 32 [unity_4LightPosY0]
Vector 48 [unity_4LightPosZ0]
VectorHalf 64 [unity_4LightAtten0] 4
VectorHalf 72 [unity_LightColor] 4 8
VectorHalf 136 [unity_SHBr] 4
VectorHalf 144 [unity_SHBg] 4
VectorHalf 152 [unity_SHBb] 4
VectorHalf 160 [unity_SHC] 4
VectorHalf 368 [unity_ColorSpaceLuminance] 4
Vector 384 [_MainTex_ST]
Vector 400 [_DetailAlbedoMap_ST]
ScalarHalf 416 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 unity_4LightPosX0;
  float4 unity_4LightPosY0;
  float4 unity_4LightPosZ0;
  half4 unity_4LightAtten0;
  half4 unity_LightColor[8];
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float3 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_7 = tmpvar_8.xyz;
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_19);
  half3 normalWorld_20;
  normalWorld_20 = half3(tmpvar_19);
  half4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = half(0.0);
  float3 lightColor0_22;
  lightColor0_22 = float3(_mtl_u.unity_LightColor[0].xyz);
  float3 lightColor1_23;
  lightColor1_23 = float3(_mtl_u.unity_LightColor[1].xyz);
  float3 lightColor2_24;
  lightColor2_24 = float3(_mtl_u.unity_LightColor[2].xyz);
  float3 lightColor3_25;
  lightColor3_25 = float3(_mtl_u.unity_LightColor[3].xyz);
  float4 lightAttenSq_26;
  lightAttenSq_26 = float4(_mtl_u.unity_4LightAtten0);
  float3 normal_27;
  normal_27 = float3(normalWorld_20);
  float3 col_28;
  float4 ndotl_29;
  float4 lengthSq_30;
  float4 tmpvar_31;
  tmpvar_31 = (_mtl_u.unity_4LightPosX0 - tmpvar_8.x);
  float4 tmpvar_32;
  tmpvar_32 = (_mtl_u.unity_4LightPosY0 - tmpvar_8.y);
  float4 tmpvar_33;
  tmpvar_33 = (_mtl_u.unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  float4 tmpvar_34;
  tmpvar_34 = max (float4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * rsqrt(lengthSq_30)));
  ndotl_29 = tmpvar_34;
  float4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (lengthSq_30 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_35.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_35.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_35.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_35.w));
  ambientOrLightmapUV_21.xyz = half3(col_28);
  half3 ambient_36;
  ambient_36 = ambientOrLightmapUV_21.xyz;
  bool tmpvar_37;
  tmpvar_37 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_37) {
    ambient_36 = (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 
      ((ambientOrLightmapUV_21.xyz * (half)0.305306) + (half)0.6821711)
    ) + (half)0.01252288));
  };
  half3 x1_38;
  half4 tmpvar_39;
  tmpvar_39 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_38.x = dot (_mtl_u.unity_SHBr, tmpvar_39);
  x1_38.y = dot (_mtl_u.unity_SHBg, tmpvar_39);
  x1_38.z = dot (_mtl_u.unity_SHBb, tmpvar_39);
  ambient_36 = (ambient_36 + (x1_38 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  ambientOrLightmapUV_21.xyz = ambient_36;
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_7;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat3 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
    u_xlat15 = u_xlat1.y * u_xlat1.y;
    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec4 u_xlat6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat15;
float u_xlat16;
float u_xlat17;
float u_xlat28;
float u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
float u_xlat39;
float u_xlat40;
float u_xlat41;
bool u_xlatb41;
float u_xlat42;
float u_xlat43;
mediump float u_xlat16_43;
float u_xlat44;
bool u_xlatb44;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
    u_xlat40 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat2.xyz = vec3(u_xlat40) * vs_TEXCOORD4.xyz;
    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat3.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;
    u_xlat42 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat4.x = (-_OcclusionStrength) + 1.0;
    u_xlat4.x = u_xlat10_4.y * _OcclusionStrength + u_xlat4.x;
    u_xlat17 = (-_Glossiness) + 1.0;
    u_xlat30.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat30.x = u_xlat30.x + u_xlat30.x;
    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat30.xxx) + u_xlat3.xyz;
    u_xlatb30 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb30){
        u_xlatb30 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb30)) ? u_xlat6.xyz : vs_TEXCOORD8.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat30.x = u_xlat6.y * 0.25;
        u_xlat43 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat44 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat30.x = max(u_xlat43, u_xlat30.x);
        u_xlat6.x = min(u_xlat44, u_xlat30.x);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat2.w = 1.0;
        u_xlat7.x = dot(u_xlat10_7, u_xlat2);
        u_xlat7.y = dot(u_xlat10_8, u_xlat2);
        u_xlat7.z = dot(u_xlat10_6, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat7.x = dot(unity_SHAr, u_xlat2);
        u_xlat7.y = dot(unity_SHAg, u_xlat2);
        u_xlat7.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb41 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat7.xyz = log2(u_xlat6.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat6.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat6.xyz;
    u_xlatb30 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb30){
        u_xlat30.x = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat30.x = inversesqrt(u_xlat30.x);
        u_xlat7.xyz = u_xlat30.xxx * u_xlat5.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat30.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat30.x = min(u_xlat8.z, u_xlat30.x);
        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * u_xlat30.xxx + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat30.x = (-u_xlat17) * 0.699999988 + 1.70000005;
    u_xlat30.x = u_xlat30.x * u_xlat17;
    u_xlat30.x = u_xlat30.x * 6.0;
    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat30.x);
    u_xlat16_43 = log2(u_xlat10_7.w);
    u_xlat43 = u_xlat16_43 * unity_SpecCube0_HDR.y;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb44){
        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb44){
            u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat44 = inversesqrt(u_xlat44);
            u_xlat9.xyz = vec3(u_xlat44) * u_xlat5.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
            u_xlat44 = min(u_xlat10.z, u_xlat44);
            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat30.x);
        u_xlat16_30 = log2(u_xlat10_5.w);
        u_xlat30.x = u_xlat16_30 * unity_SpecCube1_HDR.y;
        u_xlat30.x = exp2(u_xlat30.x);
        u_xlat30.x = u_xlat30.x * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * u_xlat30.xxx;
        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat5.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = u_xlat4.xxx * u_xlat8.xyz;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat40) + _WorldSpaceLightPos0.xyz;
    u_xlat40 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat40 = max(u_xlat40, 0.00100000005);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat7.xyz = vec3(u_xlat40) * u_xlat7.xyz;
    u_xlat40 = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat40 = max(u_xlat40, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat28 = u_xlat17 * u_xlat17;
    u_xlat3.x = (-u_xlat17) * u_xlat17 + 1.0;
    u_xlat16 = u_xlat2.x * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat42 * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat42 * u_xlat16 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat16 = u_xlat28 * u_xlat28;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat30.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
    u_xlat40 = u_xlat40 * u_xlat30.x + 1.0;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat40 = u_xlat40 * 3.14159274 + 1.00000001e-07;
    u_xlat40 = u_xlat16 / u_xlat40;
    u_xlat16 = (-u_xlat42) + 1.0;
    u_xlat29 = u_xlat16 * u_xlat16;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat16 = u_xlat16 * u_xlat29;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat29 = u_xlat2.x * u_xlat2.x;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat2.x = u_xlat2.x * u_xlat29;
    u_xlat29 = u_xlat2.y * u_xlat2.y;
    u_xlat29 = dot(vec2(u_xlat29), vec2(u_xlat17));
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat16 = u_xlat29 * u_xlat16 + 1.0;
    u_xlat29 = u_xlat29 * u_xlat2.x + 1.0;
    u_xlat16 = u_xlat29 * u_xlat16;
    u_xlat40 = u_xlat40 * u_xlat3.x;
    u_xlat40 = u_xlat40 * 0.785398185;
    u_xlat3.x = max(u_xlat40, 9.99999975e-05);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat40 = (u_xlatb41) ? u_xlat3.x : u_xlat40;
    u_xlat40 = u_xlat42 * u_xlat40;
    u_xlat40 = max(u_xlat40, 0.0);
    u_xlat3.x = u_xlat42 * u_xlat16;
    u_xlat28 = u_xlat28 * u_xlat17;
    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;
    u_xlat16 = float(1.0) / u_xlat30.y;
    u_xlat28 = (u_xlatb41) ? u_xlat28 : u_xlat16;
    u_xlat41 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb41 = u_xlat41!=0.0;
    u_xlat41 = u_xlatb41 ? 1.0 : float(0.0);
    u_xlat40 = u_xlat40 * u_xlat41;
    u_xlat39 = (-u_xlat39) + _Glossiness;
    u_xlat39 = u_xlat39 + 1.0;
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
    u_xlat3.xyz = u_xlat6.xyz * u_xlat4.xxx + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat40) * _LightColor0.xyz;
    u_xlat40 = (-u_xlat2.y) + 1.0;
    u_xlat15.x = u_xlat40 * u_xlat40;
    u_xlat15.x = u_xlat15.x * u_xlat15.x;
    u_xlat40 = u_xlat40 * u_xlat15.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat28);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat39);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat15.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 176 math, 7 textures, 12 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 ambientOrLightmapUV_26;
  ambientOrLightmapUV_26.xy = vec2(0.0, 0.0);
  ambientOrLightmapUV_26.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_26;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_11 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_12.w) * tmpvar_12.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_6, (tmpvar_13.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_13.w));
  tmpvar_11 = (tmpvar_11 * tmpvar_8);
  tmpvar_10 = vec3(0.0, 0.0, 0.0);
  float tmpvar_14;
  vec3 tmpvar_15;
  tmpvar_14 = (1.0 - _Glossiness);
  tmpvar_15 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 originalReflUVW_16;
  vec3 specular_17;
  originalReflUVW_16 = tmpvar_15;
  vec3 worldRefl_18;
  worldRefl_18 = tmpvar_15;
  vec3 worldPos_19;
  worldPos_19 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_20;
    tmpvar_20 = normalize(tmpvar_15);
    vec3 tmpvar_21;
    tmpvar_21 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_20);
    vec3 tmpvar_22;
    tmpvar_22 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_20);
    bvec3 tmpvar_23;
    tmpvar_23 = greaterThan (tmpvar_20, vec3(0.0, 0.0, 0.0));
    float tmpvar_24;
    if (tmpvar_23.x) {
      tmpvar_24 = tmpvar_21.x;
    } else {
      tmpvar_24 = tmpvar_22.x;
    };
    float tmpvar_25;
    if (tmpvar_23.y) {
      tmpvar_25 = tmpvar_21.y;
    } else {
      tmpvar_25 = tmpvar_22.y;
    };
    float tmpvar_26;
    if (tmpvar_23.z) {
      tmpvar_26 = tmpvar_21.z;
    } else {
      tmpvar_26 = tmpvar_22.z;
    };
    worldPos_19 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_18 = (worldPos_19 + (tmpvar_20 * min (
      min (tmpvar_24, tmpvar_25)
    , tmpvar_26)));
  };
  tmpvar_15 = worldRefl_18;
  vec4 tmpvar_27;
  tmpvar_27.xyz = worldRefl_18;
  tmpvar_27.w = ((tmpvar_14 * (1.7 - 
    (0.7 * tmpvar_14)
  )) * 6.0);
  vec4 tmpvar_28;
  tmpvar_28 = textureCubeLod (unity_SpecCube0, worldRefl_18, tmpvar_27.w);
  vec3 tmpvar_29;
  tmpvar_29 = ((unity_SpecCube0_HDR.x * pow (tmpvar_28.w, unity_SpecCube0_HDR.y)) * tmpvar_28.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_30;
    worldRefl_30 = originalReflUVW_16;
    vec3 worldPos_31;
    worldPos_31 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_32;
      tmpvar_32 = normalize(originalReflUVW_16);
      vec3 tmpvar_33;
      tmpvar_33 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_32);
      vec3 tmpvar_34;
      tmpvar_34 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_32);
      bvec3 tmpvar_35;
      tmpvar_35 = greaterThan (tmpvar_32, vec3(0.0, 0.0, 0.0));
      float tmpvar_36;
      if (tmpvar_35.x) {
        tmpvar_36 = tmpvar_33.x;
      } else {
        tmpvar_36 = tmpvar_34.x;
      };
      float tmpvar_37;
      if (tmpvar_35.y) {
        tmpvar_37 = tmpvar_33.y;
      } else {
        tmpvar_37 = tmpvar_34.y;
      };
      float tmpvar_38;
      if (tmpvar_35.z) {
        tmpvar_38 = tmpvar_33.z;
      } else {
        tmpvar_38 = tmpvar_34.z;
      };
      worldPos_31 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_30 = (worldPos_31 + (tmpvar_32 * min (
        min (tmpvar_36, tmpvar_37)
      , tmpvar_38)));
    };
    tmpvar_15 = worldRefl_30;
    vec4 tmpvar_39;
    tmpvar_39.xyz = worldRefl_30;
    tmpvar_39.w = ((tmpvar_14 * (1.7 - 
      (0.7 * tmpvar_14)
    )) * 6.0);
    vec4 tmpvar_40;
    tmpvar_40 = textureCubeLod (unity_SpecCube1, worldRefl_30, tmpvar_39.w);
    specular_17 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_40.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_40.xyz), tmpvar_29, unity_SpecCube0_BoxMin.www);
  } else {
    specular_17 = tmpvar_29;
  };
  tmpvar_10 = (specular_17 * tmpvar_8);
  vec3 viewDir_41;
  viewDir_41 = -(tmpvar_7);
  float surfaceReduction_42;
  float specularTerm_43;
  float tmpvar_44;
  tmpvar_44 = (1.0 - _Glossiness);
  vec3 tmpvar_45;
  vec3 inVec_46;
  inVec_46 = (_WorldSpaceLightPos0.xyz + viewDir_41);
  tmpvar_45 = (inVec_46 * inversesqrt(max (0.001, 
    dot (inVec_46, inVec_46)
  )));
  float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_6, tmpvar_45));
  float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, viewDir_41));
  float tmpvar_49;
  tmpvar_49 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_45));
  float tmpvar_50;
  tmpvar_50 = (tmpvar_44 * tmpvar_44);
  float tmpvar_51;
  tmpvar_51 = (tmpvar_44 * tmpvar_44);
  float tmpvar_52;
  tmpvar_52 = (tmpvar_51 * tmpvar_51);
  float tmpvar_53;
  tmpvar_53 = (((tmpvar_47 * tmpvar_47) * (tmpvar_52 - 1.0)) + 1.0);
  float x_54;
  x_54 = (1.0 - tmpvar_9);
  float x_55;
  x_55 = (1.0 - tmpvar_48);
  float tmpvar_56;
  tmpvar_56 = (0.5 + ((2.0 * tmpvar_49) * (tmpvar_49 * tmpvar_44)));
  float tmpvar_57;
  tmpvar_57 = ((1.0 + (
    (tmpvar_56 - 1.0)
   * 
    ((x_54 * x_54) * ((x_54 * x_54) * x_54))
  )) * (1.0 + (
    (tmpvar_56 - 1.0)
   * 
    ((x_55 * x_55) * ((x_55 * x_55) * x_55))
  )));
  float tmpvar_58;
  tmpvar_58 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_48 * (1.0 - tmpvar_50))
     + tmpvar_50)) + (tmpvar_48 * (
      (tmpvar_9 * (1.0 - tmpvar_50))
     + tmpvar_50))) + 1e-05)
  ) * (tmpvar_52 / 
    (((3.141593 * tmpvar_53) * tmpvar_53) + 1e-07)
  )) * 0.7853982);
  specularTerm_43 = tmpvar_58;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_43 = sqrt(max (0.0001, tmpvar_58));
  };
  float tmpvar_59;
  tmpvar_59 = max (0.0, (specularTerm_43 * tmpvar_9));
  specularTerm_43 = tmpvar_59;
  float tmpvar_60;
  tmpvar_60 = (tmpvar_57 * tmpvar_9);
  float tmpvar_61;
  tmpvar_61 = (tmpvar_44 * tmpvar_44);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_42 = (1.0 - ((0.28 * tmpvar_61) * tmpvar_44));
  } else {
    surfaceReduction_42 = (1.0/(((tmpvar_61 * tmpvar_61) + 1.0)));
  };
  float tmpvar_62;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_62 = 1.0;
  } else {
    tmpvar_62 = 0.0;
  };
  specularTerm_43 = (tmpvar_59 * tmpvar_62);
  float x_63;
  x_63 = (1.0 - tmpvar_49);
  float x_64;
  x_64 = (1.0 - tmpvar_48);
  vec3 tmpvar_65;
  tmpvar_65 = (((tmpvar_3 * 
    (tmpvar_11 + (_LightColor0.xyz * tmpvar_60))
  ) + (
    (specularTerm_43 * _LightColor0.xyz)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_63 * x_63) * (
      (x_63 * x_63)
     * x_63))))
  )) + ((surfaceReduction_42 * tmpvar_10) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_64 * x_64) * ((x_64 * x_64) * x_64))
  ))));
  vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = tmpvar_65;
  c_1.w = tmpvar_66.w;
  c_1.xyz = (tmpvar_65 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "metal " {
// Stats: 25 math, 1 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "VERTEXLIGHT_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 274
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Matrix 144 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [unity_WorldTransformParams]
Vector 224 [unity_DynamicLightmapST]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  float3 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  float4 tmpvar_11;
  float4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_11 = (_mtl_u.glstate_matrix_mvp * tmpvar_12);
  float4 texcoord_13;
  texcoord_13.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_14;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_15;
  float3 n_16;
  n_16 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_15 = half3(n_16);
  float3 norm_17;
  norm_17 = float3(tmpvar_1);
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].x;
  v_18.y = _mtl_u.unity_WorldToObject[1].x;
  v_18.z = _mtl_u.unity_WorldToObject[2].x;
  v_18.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].y;
  v_19.y = _mtl_u.unity_WorldToObject[1].y;
  v_19.z = _mtl_u.unity_WorldToObject[2].y;
  v_19.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].z;
  v_20.y = _mtl_u.unity_WorldToObject[1].z;
  v_20.z = _mtl_u.unity_WorldToObject[2].z;
  v_20.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  float3 dir_22;
  dir_22 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_23;
  tmpvar_23[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_23[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_23[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = float(tmpvar_4.w);
  half3 normal_25;
  normal_25 = half3(tmpvar_21);
  half3 tangent_26;
  tangent_26 = half3(tmpvar_24.xyz);
  half tangentSign_27;
  tangentSign_27 = half(tmpvar_24.w);
  half xlat_varsign_28;
  float tmpvar_29;
  tmpvar_29 = ((float)tangentSign_27 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_28 = half(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * xlat_varsign_28);
  half3x3 tmpvar_31;
  tmpvar_31[0].x = tangent_26.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = normal_25.x;
  tmpvar_31[1].x = tangent_26.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = normal_25.y;
  tmpvar_31[2].x = tangent_26.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = normal_25.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_31);
  float3 v_32;
  v_32.x = tangentToWorld_5[0].x;
  v_32.y = tangentToWorld_5[1].x;
  v_32.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].y;
  v_33.y = tangentToWorld_5[1].y;
  v_33.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].z;
  v_34.y = tangentToWorld_5[1].z;
  v_34.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_34);
  half4 ambientOrLightmapUV_35;
  ambientOrLightmapUV_35.xy = half2(float2(0.0, 0.0));
  ambientOrLightmapUV_35.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_11;
  _mtl_o.xlv_TEXCOORD0 = texcoord_13;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_15;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_35;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
float u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
vec3 u_xlat10;
bvec3 u_xlatb11;
vec3 u_xlat14;
float u_xlat15;
vec3 u_xlat16;
mediump float u_xlat16_16;
float u_xlat26;
float u_xlat27;
float u_xlat36;
float u_xlat37;
float u_xlat38;
float u_xlat39;
float u_xlat41;
mediump float u_xlat16_41;
bool u_xlatb41;
float u_xlat42;
mediump float u_xlat16_42;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat36 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
    u_xlat37 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat2.xyz = vec3(u_xlat37) * vs_TEXCOORD4.xyz;
    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat3.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;
    u_xlat2.w = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat39 = (-_OcclusionStrength) + 1.0;
    u_xlat39 = u_xlat10_4.y * _OcclusionStrength + u_xlat39;
    u_xlat4 = (-_Glossiness) + 1.0;
    u_xlat16.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xyz = u_xlat2.xyz * (-u_xlat16.xxx) + u_xlat3.xyz;
    u_xlat10_5 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat41 = u_xlat10_5.w * unity_DynamicLightmap_HDR.x;
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat41);
    u_xlat5.xyz = log2(u_xlat5.xyz);
    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat5.xyz = exp2(u_xlat5.xyz);
    u_xlat10_6 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat41 = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat41 = u_xlat41 + 0.5;
    u_xlat5.xyz = vec3(u_xlat41) * u_xlat5.xyz;
    u_xlat16_41 = max(u_xlat10_6.w, 9.99999975e-05);
    u_xlat5.xyz = u_xlat5.xyz / vec3(u_xlat16_41);
    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb41){
        u_xlat41 = dot(u_xlat16.xyz, u_xlat16.xyz);
        u_xlat41 = inversesqrt(u_xlat41);
        u_xlat6.xyz = u_xlat16.xyz * vec3(u_xlat41);
        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
        u_xlat7.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
        u_xlat7.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
        u_xlat7.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
        u_xlat41 = min(u_xlat7.y, u_xlat7.x);
        u_xlat41 = min(u_xlat7.z, u_xlat41);
        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat41) + u_xlat7.xyz;
    } else {
        u_xlat6.xyz = u_xlat16.xyz;
    //ENDIF
    }
    u_xlat41 = (-u_xlat4) * 0.699999988 + 1.70000005;
    u_xlat41 = u_xlat4 * u_xlat41;
    u_xlat41 = u_xlat41 * 6.0;
    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat41);
    u_xlat16_42 = log2(u_xlat10_6.w);
    u_xlat42 = u_xlat16_42 * unity_SpecCube0_HDR.y;
    u_xlat42 = exp2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat42);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat16.xyz, u_xlat16.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat8.xyz = u_xlat16.xyz * vec3(u_xlat43);
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
            u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat43 = min(u_xlat9.y, u_xlat9.x);
            u_xlat43 = min(u_xlat9.z, u_xlat43);
            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat16.xyz = u_xlat8.xyz * vec3(u_xlat43) + u_xlat9.xyz;
        //ENDIF
        }
        u_xlat10_8 = textureLod(unity_SpecCube1, u_xlat16.xyz, u_xlat41);
        u_xlat16_16 = log2(u_xlat10_8.w);
        u_xlat16.x = u_xlat16_16 * unity_SpecCube1_HDR.y;
        u_xlat16.x = exp2(u_xlat16.x);
        u_xlat16.x = u_xlat16.x * unity_SpecCube1_HDR.x;
        u_xlat16.xyz = u_xlat10_8.xyz * u_xlat16.xxx;
        u_xlat6.xyz = vec3(u_xlat42) * u_xlat10_6.xyz + (-u_xlat16.xyz);
        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16.xyz;
    //ENDIF
    }
    u_xlat16.xyz = vec3(u_xlat39) * u_xlat7.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat37) + _WorldSpaceLightPos0.xyz;
    u_xlat37 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat37 = max(u_xlat37, 0.00100000005);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz;
    u_xlat37 = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat37 = max(u_xlat37, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat26 = u_xlat4 * u_xlat4;
    u_xlat3.x = (-u_xlat4) * u_xlat4 + 1.0;
    u_xlat15 = u_xlat2.x * u_xlat3.x + u_xlat26;
    u_xlat3.x = u_xlat2.w * u_xlat3.x + u_xlat26;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat2.w * u_xlat15 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat15 = u_xlat26 * u_xlat26;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat6.xy = vec2(u_xlat26) * vec2(u_xlat26) + vec2(-1.0, 1.0);
    u_xlat37 = u_xlat37 * u_xlat6.x + 1.0;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat37 = u_xlat37 * 3.14159274 + 1.00000001e-07;
    u_xlat37 = u_xlat15 / u_xlat37;
    u_xlat15 = (-u_xlat2.w) + 1.0;
    u_xlat27 = u_xlat15 * u_xlat15;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat15 = u_xlat15 * u_xlat27;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat27 = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat2.x = u_xlat2.x * u_xlat27;
    u_xlat27 = u_xlat2.y * u_xlat2.y;
    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat4));
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat15 = u_xlat27 * u_xlat15 + 1.0;
    u_xlat27 = u_xlat27 * u_xlat2.x + 1.0;
    u_xlat15 = u_xlat27 * u_xlat15;
    u_xlat37 = u_xlat37 * u_xlat3.x;
    u_xlat37 = u_xlat37 * 0.785398185;
    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat27 = max(u_xlat37, 9.99999975e-05);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat37 = (u_xlatb3) ? u_xlat27 : u_xlat37;
    u_xlat37 = u_xlat2.w * u_xlat37;
    u_xlat37 = max(u_xlat37, 0.0);
    u_xlat38 = u_xlat2.w * u_xlat15;
    u_xlat26 = u_xlat26 * u_xlat4;
    u_xlat26 = (-u_xlat26) * 0.280000001 + 1.0;
    u_xlat15 = float(1.0) / u_xlat6.y;
    u_xlat26 = (u_xlatb3) ? u_xlat26 : u_xlat15;
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat37 = u_xlat37 * u_xlat3.x;
    u_xlat36 = (-u_xlat36) + _Glossiness;
    u_xlat36 = u_xlat36 + 1.0;
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat38) * _LightColor0.xyz;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat3.xyz;
    u_xlat5.xyz = vec3(u_xlat37) * _LightColor0.xyz;
    u_xlat37 = (-u_xlat2.y) + 1.0;
    u_xlat14.x = u_xlat37 * u_xlat37;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat37 = u_xlat37 * u_xlat14.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat0.xyz;
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat14.xyz = u_xlat16.xyz * vec3(u_xlat26);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat36);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat14.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 198 math, 9 textures, 15 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_12;
  n_12 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_16;
  vec4 o_17;
  vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_8 * 0.5);
  vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_8.zw;
  vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  vec3 col_21;
  vec4 ndotl_22;
  vec4 lengthSq_23;
  vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_23 = (tmpvar_24 * tmpvar_24);
  lengthSq_23 = (lengthSq_23 + (tmpvar_25 * tmpvar_25));
  lengthSq_23 = (lengthSq_23 + (tmpvar_26 * tmpvar_26));
  ndotl_22 = (tmpvar_24 * tmpvar_16.x);
  ndotl_22 = (ndotl_22 + (tmpvar_25 * tmpvar_16.y));
  ndotl_22 = (ndotl_22 + (tmpvar_26 * tmpvar_16.z));
  vec4 tmpvar_27;
  tmpvar_27 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_22 * inversesqrt(lengthSq_23)));
  ndotl_22 = tmpvar_27;
  vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_27 * (1.0/((1.0 + 
    (lengthSq_23 * unity_4LightAtten0)
  ))));
  col_21 = (unity_LightColor[0].xyz * tmpvar_28.x);
  col_21 = (col_21 + (unity_LightColor[1].xyz * tmpvar_28.y));
  col_21 = (col_21 + (unity_LightColor[2].xyz * tmpvar_28.z));
  col_21 = (col_21 + (unity_LightColor[3].xyz * tmpvar_28.w));
  ambientOrLightmapUV_20.xyz = col_21;
  vec3 ambient_29;
  ambient_29 = ambientOrLightmapUV_20.xyz;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_29 = (col_21 * ((col_21 * 
      ((col_21 * 0.305306) + 0.6821711)
    ) + 0.01252288));
  };
  vec3 x1_30;
  vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_16.xyzz * tmpvar_16.yzzx);
  x1_30.x = dot (unity_SHBr, tmpvar_31);
  x1_30.y = dot (unity_SHBg, tmpvar_31);
  x1_30.z = dot (unity_SHBb, tmpvar_31);
  ambient_29 = (ambient_29 + (x1_30 + (unity_SHC.xyz * 
    ((tmpvar_16.x * tmpvar_16.x) - (tmpvar_16.y * tmpvar_16.y))
  )));
  ambientOrLightmapUV_20.xyz = ambient_29;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = n_12;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD6 = o_17;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  float tmpvar_10;
  tmpvar_10 = (1.0 - _Glossiness);
  vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 tmpvar_12;
  vec3 tmpvar_13;
  vec3 tmpvar_14;
  tmpvar_14 = vec3(0.0, 0.0, 0.0);
  tmpvar_13 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  vec3 ambient_15;
  ambient_15 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_16;
  ambient_contrib_16 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_17;
    tmpvar_17.w = 1.0;
    tmpvar_17.xyz = tmpvar_6;
    vec3 x1_18;
    vec3 texCoord_19;
    vec3 tmpvar_20;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_21;
      tmpvar_21.w = 1.0;
      tmpvar_21.xyz = xlv_TEXCOORD8;
      tmpvar_20 = (unity_ProbeVolumeWorldToObject * tmpvar_21).xyz;
    } else {
      tmpvar_20 = xlv_TEXCOORD8;
    };
    vec3 tmpvar_22;
    tmpvar_22 = ((tmpvar_20 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_19.yz = tmpvar_22.yz;
    texCoord_19.x = (tmpvar_22.x * 0.25);
    float tmpvar_23;
    float tmpvar_24;
    tmpvar_24 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_23 = clamp (texCoord_19.x, tmpvar_24, (0.25 - tmpvar_24));
    texCoord_19.x = tmpvar_23;
    vec4 tmpvar_25;
    tmpvar_25 = texture3D (unity_ProbeVolumeSH, texCoord_19);
    texCoord_19.x = (tmpvar_23 + 0.25);
    vec4 tmpvar_26;
    tmpvar_26 = texture3D (unity_ProbeVolumeSH, texCoord_19);
    texCoord_19.x = (tmpvar_23 + 0.5);
    x1_18.x = dot (tmpvar_25, tmpvar_17);
    x1_18.y = dot (tmpvar_26, tmpvar_17);
    x1_18.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_19), tmpvar_17);
    ambient_contrib_16 = x1_18;
  } else {
    vec4 tmpvar_27;
    tmpvar_27.w = 1.0;
    tmpvar_27.xyz = tmpvar_6;
    vec3 x_28;
    x_28.x = dot (unity_SHAr, tmpvar_27);
    x_28.y = dot (unity_SHAg, tmpvar_27);
    x_28.z = dot (unity_SHAb, tmpvar_27);
    ambient_contrib_16 = x_28;
  };
  vec3 tmpvar_29;
  tmpvar_29 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_16));
  ambient_15 = tmpvar_29;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_15 = max (((1.055 * 
      pow (max (tmpvar_29, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_14 = (ambient_15 * tmpvar_8);
  tmpvar_12 = vec3(0.0, 0.0, 0.0);
  vec3 specular_30;
  vec3 worldRefl_31;
  worldRefl_31 = tmpvar_11;
  vec3 worldPos_32;
  worldPos_32 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_33;
    tmpvar_33 = normalize(tmpvar_11);
    vec3 tmpvar_34;
    tmpvar_34 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_33);
    vec3 tmpvar_35;
    tmpvar_35 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_33);
    bvec3 tmpvar_36;
    tmpvar_36 = greaterThan (tmpvar_33, vec3(0.0, 0.0, 0.0));
    float tmpvar_37;
    if (tmpvar_36.x) {
      tmpvar_37 = tmpvar_34.x;
    } else {
      tmpvar_37 = tmpvar_35.x;
    };
    float tmpvar_38;
    if (tmpvar_36.y) {
      tmpvar_38 = tmpvar_34.y;
    } else {
      tmpvar_38 = tmpvar_35.y;
    };
    float tmpvar_39;
    if (tmpvar_36.z) {
      tmpvar_39 = tmpvar_34.z;
    } else {
      tmpvar_39 = tmpvar_35.z;
    };
    worldPos_32 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_31 = (worldPos_32 + (tmpvar_33 * min (
      min (tmpvar_37, tmpvar_38)
    , tmpvar_39)));
  };
  vec4 tmpvar_40;
  tmpvar_40.xyz = worldRefl_31;
  tmpvar_40.w = ((tmpvar_10 * (1.7 - 
    (0.7 * tmpvar_10)
  )) * 6.0);
  vec4 tmpvar_41;
  tmpvar_41 = textureCubeLod (unity_SpecCube0, worldRefl_31, tmpvar_40.w);
  vec3 tmpvar_42;
  tmpvar_42 = ((unity_SpecCube0_HDR.x * pow (tmpvar_41.w, unity_SpecCube0_HDR.y)) * tmpvar_41.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_43;
    worldRefl_43 = tmpvar_11;
    vec3 worldPos_44;
    worldPos_44 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_45;
      tmpvar_45 = normalize(tmpvar_11);
      vec3 tmpvar_46;
      tmpvar_46 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_45);
      vec3 tmpvar_47;
      tmpvar_47 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_45);
      bvec3 tmpvar_48;
      tmpvar_48 = greaterThan (tmpvar_45, vec3(0.0, 0.0, 0.0));
      float tmpvar_49;
      if (tmpvar_48.x) {
        tmpvar_49 = tmpvar_46.x;
      } else {
        tmpvar_49 = tmpvar_47.x;
      };
      float tmpvar_50;
      if (tmpvar_48.y) {
        tmpvar_50 = tmpvar_46.y;
      } else {
        tmpvar_50 = tmpvar_47.y;
      };
      float tmpvar_51;
      if (tmpvar_48.z) {
        tmpvar_51 = tmpvar_46.z;
      } else {
        tmpvar_51 = tmpvar_47.z;
      };
      worldPos_44 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_43 = (worldPos_44 + (tmpvar_45 * min (
        min (tmpvar_49, tmpvar_50)
      , tmpvar_51)));
    };
    vec4 tmpvar_52;
    tmpvar_52.xyz = worldRefl_43;
    tmpvar_52.w = ((tmpvar_10 * (1.7 - 
      (0.7 * tmpvar_10)
    )) * 6.0);
    vec4 tmpvar_53;
    tmpvar_53 = textureCubeLod (unity_SpecCube1, worldRefl_43, tmpvar_52.w);
    specular_30 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_53.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_53.xyz), tmpvar_42, unity_SpecCube0_BoxMin.www);
  } else {
    specular_30 = tmpvar_42;
  };
  tmpvar_12 = (specular_30 * tmpvar_8);
  vec3 viewDir_54;
  viewDir_54 = -(tmpvar_7);
  float surfaceReduction_55;
  float specularTerm_56;
  float tmpvar_57;
  tmpvar_57 = (1.0 - _Glossiness);
  vec3 tmpvar_58;
  vec3 inVec_59;
  inVec_59 = (_WorldSpaceLightPos0.xyz + viewDir_54);
  tmpvar_58 = (inVec_59 * inversesqrt(max (0.001, 
    dot (inVec_59, inVec_59)
  )));
  float tmpvar_60;
  tmpvar_60 = max (0.0, dot (tmpvar_6, tmpvar_58));
  float tmpvar_61;
  tmpvar_61 = max (0.0, dot (tmpvar_6, viewDir_54));
  float tmpvar_62;
  tmpvar_62 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_58));
  float tmpvar_63;
  tmpvar_63 = (tmpvar_57 * tmpvar_57);
  float tmpvar_64;
  tmpvar_64 = (tmpvar_57 * tmpvar_57);
  float tmpvar_65;
  tmpvar_65 = (tmpvar_64 * tmpvar_64);
  float tmpvar_66;
  tmpvar_66 = (((tmpvar_60 * tmpvar_60) * (tmpvar_65 - 1.0)) + 1.0);
  float x_67;
  x_67 = (1.0 - tmpvar_9);
  float x_68;
  x_68 = (1.0 - tmpvar_61);
  float tmpvar_69;
  tmpvar_69 = (0.5 + ((2.0 * tmpvar_62) * (tmpvar_62 * tmpvar_57)));
  float tmpvar_70;
  tmpvar_70 = ((1.0 + (
    (tmpvar_69 - 1.0)
   * 
    ((x_67 * x_67) * ((x_67 * x_67) * x_67))
  )) * (1.0 + (
    (tmpvar_69 - 1.0)
   * 
    ((x_68 * x_68) * ((x_68 * x_68) * x_68))
  )));
  float tmpvar_71;
  tmpvar_71 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_61 * (1.0 - tmpvar_63))
     + tmpvar_63)) + (tmpvar_61 * (
      (tmpvar_9 * (1.0 - tmpvar_63))
     + tmpvar_63))) + 1e-05)
  ) * (tmpvar_65 / 
    (((3.141593 * tmpvar_66) * tmpvar_66) + 1e-07)
  )) * 0.7853982);
  specularTerm_56 = tmpvar_71;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_56 = sqrt(max (0.0001, tmpvar_71));
  };
  float tmpvar_72;
  tmpvar_72 = max (0.0, (specularTerm_56 * tmpvar_9));
  specularTerm_56 = tmpvar_72;
  float tmpvar_73;
  tmpvar_73 = (tmpvar_70 * tmpvar_9);
  float tmpvar_74;
  tmpvar_74 = (tmpvar_57 * tmpvar_57);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_55 = (1.0 - ((0.28 * tmpvar_74) * tmpvar_57));
  } else {
    surfaceReduction_55 = (1.0/(((tmpvar_74 * tmpvar_74) + 1.0)));
  };
  float tmpvar_75;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_75 = 1.0;
  } else {
    tmpvar_75 = 0.0;
  };
  specularTerm_56 = (tmpvar_72 * tmpvar_75);
  float x_76;
  x_76 = (1.0 - tmpvar_62);
  float x_77;
  x_77 = (1.0 - tmpvar_61);
  vec3 tmpvar_78;
  tmpvar_78 = (((tmpvar_3 * 
    (tmpvar_14 + (tmpvar_13 * tmpvar_73))
  ) + (
    (specularTerm_56 * tmpvar_13)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_76 * x_76) * (
      (x_76 * x_76)
     * x_76))))
  )) + ((surfaceReduction_55 * tmpvar_12) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_77 * x_77) * ((x_77 * x_77) * x_77))
  ))));
  vec4 tmpvar_79;
  tmpvar_79.w = 1.0;
  tmpvar_79.xyz = tmpvar_78;
  c_1.w = tmpvar_79.w;
  c_1.xyz = (tmpvar_78 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_80;
  xlat_varoutput_80.xyz = c_1.xyz;
  xlat_varoutput_80.w = 1.0;
  gl_FragData[0] = xlat_varoutput_80;
}


#endif
"
}
SubProgram "metal " {
// Stats: 64 math, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 434
Matrix 192 [glstate_matrix_mvp]
Matrix 256 [unity_ObjectToWorld]
Matrix 320 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 32 [unity_4LightPosX0]
Vector 48 [unity_4LightPosY0]
Vector 64 [unity_4LightPosZ0]
VectorHalf 80 [unity_4LightAtten0] 4
VectorHalf 88 [unity_LightColor] 4 8
VectorHalf 152 [unity_SHBr] 4
VectorHalf 160 [unity_SHBg] 4
VectorHalf 168 [unity_SHBb] 4
VectorHalf 176 [unity_SHC] 4
VectorHalf 384 [unity_ColorSpaceLuminance] 4
Vector 400 [_MainTex_ST]
Vector 416 [_DetailAlbedoMap_ST]
ScalarHalf 432 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4 unity_4LightPosX0;
  float4 unity_4LightPosY0;
  float4 unity_4LightPosZ0;
  half4 unity_4LightAtten0;
  half4 unity_LightColor[8];
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float3 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_7 = tmpvar_8.xyz;
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_19);
  float4 o_20;
  float4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  float2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _mtl_u._ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  half3 normalWorld_23;
  normalWorld_23 = half3(tmpvar_19);
  half4 ambientOrLightmapUV_24;
  ambientOrLightmapUV_24.w = half(0.0);
  float3 lightColor0_25;
  lightColor0_25 = float3(_mtl_u.unity_LightColor[0].xyz);
  float3 lightColor1_26;
  lightColor1_26 = float3(_mtl_u.unity_LightColor[1].xyz);
  float3 lightColor2_27;
  lightColor2_27 = float3(_mtl_u.unity_LightColor[2].xyz);
  float3 lightColor3_28;
  lightColor3_28 = float3(_mtl_u.unity_LightColor[3].xyz);
  float4 lightAttenSq_29;
  lightAttenSq_29 = float4(_mtl_u.unity_4LightAtten0);
  float3 normal_30;
  normal_30 = float3(normalWorld_23);
  float3 col_31;
  float4 ndotl_32;
  float4 lengthSq_33;
  float4 tmpvar_34;
  tmpvar_34 = (_mtl_u.unity_4LightPosX0 - tmpvar_8.x);
  float4 tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_4LightPosY0 - tmpvar_8.y);
  float4 tmpvar_36;
  tmpvar_36 = (_mtl_u.unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_33 = (tmpvar_34 * tmpvar_34);
  lengthSq_33 = (lengthSq_33 + (tmpvar_35 * tmpvar_35));
  lengthSq_33 = (lengthSq_33 + (tmpvar_36 * tmpvar_36));
  ndotl_32 = (tmpvar_34 * normal_30.x);
  ndotl_32 = (ndotl_32 + (tmpvar_35 * normal_30.y));
  ndotl_32 = (ndotl_32 + (tmpvar_36 * normal_30.z));
  float4 tmpvar_37;
  tmpvar_37 = max (float4(0.0, 0.0, 0.0, 0.0), (ndotl_32 * rsqrt(lengthSq_33)));
  ndotl_32 = tmpvar_37;
  float4 tmpvar_38;
  tmpvar_38 = (tmpvar_37 * (1.0/((1.0 + 
    (lengthSq_33 * lightAttenSq_29)
  ))));
  col_31 = (lightColor0_25 * tmpvar_38.x);
  col_31 = (col_31 + (lightColor1_26 * tmpvar_38.y));
  col_31 = (col_31 + (lightColor2_27 * tmpvar_38.z));
  col_31 = (col_31 + (lightColor3_28 * tmpvar_38.w));
  ambientOrLightmapUV_24.xyz = half3(col_31);
  half3 ambient_39;
  ambient_39 = ambientOrLightmapUV_24.xyz;
  bool tmpvar_40;
  tmpvar_40 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_40) {
    ambient_39 = (ambientOrLightmapUV_24.xyz * ((ambientOrLightmapUV_24.xyz * 
      ((ambientOrLightmapUV_24.xyz * (half)0.305306) + (half)0.6821711)
    ) + (half)0.01252288));
  };
  half3 x1_41;
  half4 tmpvar_42;
  tmpvar_42 = (normalWorld_23.xyzz * normalWorld_23.yzzx);
  x1_41.x = dot (_mtl_u.unity_SHBr, tmpvar_42);
  x1_41.y = dot (_mtl_u.unity_SHBg, tmpvar_42);
  x1_41.z = dot (_mtl_u.unity_SHBb, tmpvar_42);
  ambient_39 = (ambient_39 + (x1_41 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_23.x * normalWorld_23.x) - (normalWorld_23.y * normalWorld_23.y))
  )));
  ambientOrLightmapUV_24.xyz = ambient_39;
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_24;
  _mtl_o.xlv_TEXCOORD6 = o_20;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_7;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat2.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat2.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat2.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat3.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat3.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat3.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat3.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat3.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat4 = inversesqrt(u_xlat3);
    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat4;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat3 * u_xlat1;
    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz;
    u_xlatb19 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat1.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat19 = u_xlat2.y * u_xlat2.y;
    u_xlat19 = u_xlat2.x * u_xlat2.x + (-u_xlat19);
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
lowp vec4 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
vec4 u_xlat7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
lowp vec4 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
vec3 u_xlat12;
bvec3 u_xlatb13;
vec3 u_xlat16;
float u_xlat17;
float u_xlat18;
float u_xlat30;
float u_xlat31;
float u_xlat32;
float u_xlat42;
float u_xlat43;
float u_xlat44;
bool u_xlatb44;
float u_xlat45;
float u_xlat46;
mediump float u_xlat16_46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat43 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat2.xyz = vec3(u_xlat43) * vs_TEXCOORD4.xyz;
    u_xlat43 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat3.xyz = vec3(u_xlat43) * vs_TEXCOORD1.xyz;
    u_xlat45 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat45 = max(u_xlat45, 0.0);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat18 = (-_OcclusionStrength) + 1.0;
    u_xlat18 = u_xlat10_5.y * _OcclusionStrength + u_xlat18;
    u_xlat32 = (-_Glossiness) + 1.0;
    u_xlat46 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat46)) + u_xlat3.xyz;
    u_xlat6.xyz = u_xlat10_4.xxx * _LightColor0.xyz;
    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb4){
        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb4)) ? u_xlat7.xyz : vs_TEXCOORD8.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat7.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat4.x = u_xlat7.y * 0.25;
        u_xlat46 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat47 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat4.x = max(u_xlat46, u_xlat4.x);
        u_xlat7.x = min(u_xlat47, u_xlat4.x);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_9 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat2.w = 1.0;
        u_xlat8.x = dot(u_xlat10_8, u_xlat2);
        u_xlat8.y = dot(u_xlat10_9, u_xlat2);
        u_xlat8.z = dot(u_xlat10_7, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat8.x = dot(unity_SHAr, u_xlat2);
        u_xlat8.y = dot(unity_SHAg, u_xlat2);
        u_xlat8.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat7.xyz = u_xlat8.xyz + vs_TEXCOORD5.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb44 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat8.xyz = log2(u_xlat7.xyz);
    u_xlat8.xyz = u_xlat8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat8.xyz = exp2(u_xlat8.xyz);
    u_xlat8.xyz = u_xlat8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat7.xyz = (bool(u_xlatb44)) ? u_xlat8.xyz : u_xlat7.xyz;
    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb4){
        u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat4.x = inversesqrt(u_xlat4.x);
        u_xlat8.xyz = u_xlat4.xxx * u_xlat5.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
        u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
        u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
        u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
        u_xlat4.x = min(u_xlat9.y, u_xlat9.x);
        u_xlat4.x = min(u_xlat9.z, u_xlat4.x);
        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xxx + u_xlat9.xyz;
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat4.x = (-u_xlat32) * 0.699999988 + 1.70000005;
    u_xlat4.x = u_xlat4.x * u_xlat32;
    u_xlat4.x = u_xlat4.x * 6.0;
    u_xlat10_8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat4.x);
    u_xlat16_46 = log2(u_xlat10_8.w);
    u_xlat46 = u_xlat16_46 * unity_SpecCube0_HDR.y;
    u_xlat46 = exp2(u_xlat46);
    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat10_8.xyz * vec3(u_xlat46);
    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb47){
        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb47){
            u_xlat47 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat47 = inversesqrt(u_xlat47);
            u_xlat10.xyz = vec3(u_xlat47) * u_xlat5.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
            u_xlat11.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
            u_xlat11.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
            u_xlat11.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
            u_xlat47 = min(u_xlat11.z, u_xlat47);
            u_xlat11.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat4.x);
        u_xlat16_4 = log2(u_xlat10_5.w);
        u_xlat4.x = u_xlat16_4 * unity_SpecCube1_HDR.y;
        u_xlat4.x = exp2(u_xlat4.x);
        u_xlat4.x = u_xlat4.x * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * u_xlat4.xxx;
        u_xlat8.xyz = vec3(u_xlat46) * u_xlat10_8.xyz + (-u_xlat5.xyz);
        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = vec3(u_xlat18) * u_xlat9.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat43) + _WorldSpaceLightPos0.xyz;
    u_xlat43 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat43 = max(u_xlat43, 0.00100000005);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat8.xyz = vec3(u_xlat43) * u_xlat8.xyz;
    u_xlat43 = dot(u_xlat2.xyz, u_xlat8.xyz);
    u_xlat43 = max(u_xlat43, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat30 = u_xlat32 * u_xlat32;
    u_xlat3.x = (-u_xlat32) * u_xlat32 + 1.0;
    u_xlat17 = u_xlat2.x * u_xlat3.x + u_xlat30;
    u_xlat3.x = u_xlat45 * u_xlat3.x + u_xlat30;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat45 * u_xlat17 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat17 = u_xlat30 * u_xlat30;
    u_xlat43 = u_xlat43 * u_xlat43;
    u_xlat4.xw = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
    u_xlat43 = u_xlat43 * u_xlat4.x + 1.0;
    u_xlat43 = u_xlat43 * u_xlat43;
    u_xlat43 = u_xlat43 * 3.14159274 + 1.00000001e-07;
    u_xlat43 = u_xlat17 / u_xlat43;
    u_xlat17 = (-u_xlat45) + 1.0;
    u_xlat31 = u_xlat17 * u_xlat17;
    u_xlat31 = u_xlat31 * u_xlat31;
    u_xlat17 = u_xlat17 * u_xlat31;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat31 = u_xlat2.x * u_xlat2.x;
    u_xlat31 = u_xlat31 * u_xlat31;
    u_xlat2.x = u_xlat2.x * u_xlat31;
    u_xlat31 = u_xlat2.y * u_xlat2.y;
    u_xlat31 = dot(vec2(u_xlat31), vec2(u_xlat32));
    u_xlat31 = u_xlat31 + -0.5;
    u_xlat17 = u_xlat31 * u_xlat17 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat2.x + 1.0;
    u_xlat17 = u_xlat31 * u_xlat17;
    u_xlat43 = u_xlat43 * u_xlat3.x;
    u_xlat43 = u_xlat43 * 0.785398185;
    u_xlat3.x = max(u_xlat43, 9.99999975e-05);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat43 = (u_xlatb44) ? u_xlat3.x : u_xlat43;
    u_xlat43 = u_xlat45 * u_xlat43;
    u_xlat43 = max(u_xlat43, 0.0);
    u_xlat3.x = u_xlat45 * u_xlat17;
    u_xlat30 = u_xlat30 * u_xlat32;
    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
    u_xlat17 = float(1.0) / u_xlat4.w;
    u_xlat30 = (u_xlatb44) ? u_xlat30 : u_xlat17;
    u_xlat44 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb44 = u_xlat44!=0.0;
    u_xlat44 = u_xlatb44 ? 1.0 : float(0.0);
    u_xlat43 = u_xlat43 * u_xlat44;
    u_xlat42 = (-u_xlat42) + _Glossiness;
    u_xlat42 = u_xlat42 + 1.0;
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat43);
    u_xlat43 = (-u_xlat2.y) + 1.0;
    u_xlat16.x = u_xlat43 * u_xlat43;
    u_xlat16.x = u_xlat16.x * u_xlat16.x;
    u_xlat43 = u_xlat43 * u_xlat16.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat43) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat16.xyz = u_xlat5.xyz * vec3(u_xlat30);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat42);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 177 math, 8 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 o_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_8 * 0.5);
  vec2 tmpvar_28;
  tmpvar_28.x = tmpvar_27.x;
  tmpvar_28.y = (tmpvar_27.y * _ProjectionParams.x);
  o_26.xy = (tmpvar_28 + tmpvar_27.w);
  o_26.zw = tmpvar_8.zw;
  vec4 ambientOrLightmapUV_29;
  ambientOrLightmapUV_29.xy = vec2(0.0, 0.0);
  ambientOrLightmapUV_29.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_29;
  xlv_TEXCOORD6 = o_26;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_12 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_6, (tmpvar_14.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_14.w));
  tmpvar_12 = (tmpvar_12 * tmpvar_8);
  tmpvar_10 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  float tmpvar_15;
  vec3 tmpvar_16;
  tmpvar_15 = (1.0 - _Glossiness);
  tmpvar_16 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 originalReflUVW_17;
  vec3 specular_18;
  originalReflUVW_17 = tmpvar_16;
  vec3 worldRefl_19;
  worldRefl_19 = tmpvar_16;
  vec3 worldPos_20;
  worldPos_20 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_21;
    tmpvar_21 = normalize(tmpvar_16);
    vec3 tmpvar_22;
    tmpvar_22 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_21);
    vec3 tmpvar_23;
    tmpvar_23 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_21);
    bvec3 tmpvar_24;
    tmpvar_24 = greaterThan (tmpvar_21, vec3(0.0, 0.0, 0.0));
    float tmpvar_25;
    if (tmpvar_24.x) {
      tmpvar_25 = tmpvar_22.x;
    } else {
      tmpvar_25 = tmpvar_23.x;
    };
    float tmpvar_26;
    if (tmpvar_24.y) {
      tmpvar_26 = tmpvar_22.y;
    } else {
      tmpvar_26 = tmpvar_23.y;
    };
    float tmpvar_27;
    if (tmpvar_24.z) {
      tmpvar_27 = tmpvar_22.z;
    } else {
      tmpvar_27 = tmpvar_23.z;
    };
    worldPos_20 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_19 = (worldPos_20 + (tmpvar_21 * min (
      min (tmpvar_25, tmpvar_26)
    , tmpvar_27)));
  };
  tmpvar_16 = worldRefl_19;
  vec4 tmpvar_28;
  tmpvar_28.xyz = worldRefl_19;
  tmpvar_28.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  vec4 tmpvar_29;
  tmpvar_29 = textureCubeLod (unity_SpecCube0, worldRefl_19, tmpvar_28.w);
  vec3 tmpvar_30;
  tmpvar_30 = ((unity_SpecCube0_HDR.x * pow (tmpvar_29.w, unity_SpecCube0_HDR.y)) * tmpvar_29.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_31;
    worldRefl_31 = originalReflUVW_17;
    vec3 worldPos_32;
    worldPos_32 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_33;
      tmpvar_33 = normalize(originalReflUVW_17);
      vec3 tmpvar_34;
      tmpvar_34 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_33);
      vec3 tmpvar_35;
      tmpvar_35 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_33);
      bvec3 tmpvar_36;
      tmpvar_36 = greaterThan (tmpvar_33, vec3(0.0, 0.0, 0.0));
      float tmpvar_37;
      if (tmpvar_36.x) {
        tmpvar_37 = tmpvar_34.x;
      } else {
        tmpvar_37 = tmpvar_35.x;
      };
      float tmpvar_38;
      if (tmpvar_36.y) {
        tmpvar_38 = tmpvar_34.y;
      } else {
        tmpvar_38 = tmpvar_35.y;
      };
      float tmpvar_39;
      if (tmpvar_36.z) {
        tmpvar_39 = tmpvar_34.z;
      } else {
        tmpvar_39 = tmpvar_35.z;
      };
      worldPos_32 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_31 = (worldPos_32 + (tmpvar_33 * min (
        min (tmpvar_37, tmpvar_38)
      , tmpvar_39)));
    };
    tmpvar_16 = worldRefl_31;
    vec4 tmpvar_40;
    tmpvar_40.xyz = worldRefl_31;
    tmpvar_40.w = ((tmpvar_15 * (1.7 - 
      (0.7 * tmpvar_15)
    )) * 6.0);
    vec4 tmpvar_41;
    tmpvar_41 = textureCubeLod (unity_SpecCube1, worldRefl_31, tmpvar_40.w);
    specular_18 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_41.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_41.xyz), tmpvar_30, unity_SpecCube0_BoxMin.www);
  } else {
    specular_18 = tmpvar_30;
  };
  tmpvar_11 = (specular_18 * tmpvar_8);
  vec3 viewDir_42;
  viewDir_42 = -(tmpvar_7);
  float surfaceReduction_43;
  float specularTerm_44;
  float tmpvar_45;
  tmpvar_45 = (1.0 - _Glossiness);
  vec3 tmpvar_46;
  vec3 inVec_47;
  inVec_47 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_46 = (inVec_47 * inversesqrt(max (0.001, 
    dot (inVec_47, inVec_47)
  )));
  float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_46));
  float tmpvar_49;
  tmpvar_49 = max (0.0, dot (tmpvar_6, viewDir_42));
  float tmpvar_50;
  tmpvar_50 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_46));
  float tmpvar_51;
  tmpvar_51 = (tmpvar_45 * tmpvar_45);
  float tmpvar_52;
  tmpvar_52 = (tmpvar_45 * tmpvar_45);
  float tmpvar_53;
  tmpvar_53 = (tmpvar_52 * tmpvar_52);
  float tmpvar_54;
  tmpvar_54 = (((tmpvar_48 * tmpvar_48) * (tmpvar_53 - 1.0)) + 1.0);
  float x_55;
  x_55 = (1.0 - tmpvar_9);
  float x_56;
  x_56 = (1.0 - tmpvar_49);
  float tmpvar_57;
  tmpvar_57 = (0.5 + ((2.0 * tmpvar_50) * (tmpvar_50 * tmpvar_45)));
  float tmpvar_58;
  tmpvar_58 = ((1.0 + (
    (tmpvar_57 - 1.0)
   * 
    ((x_55 * x_55) * ((x_55 * x_55) * x_55))
  )) * (1.0 + (
    (tmpvar_57 - 1.0)
   * 
    ((x_56 * x_56) * ((x_56 * x_56) * x_56))
  )));
  float tmpvar_59;
  tmpvar_59 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_49 * (1.0 - tmpvar_51))
     + tmpvar_51)) + (tmpvar_49 * (
      (tmpvar_9 * (1.0 - tmpvar_51))
     + tmpvar_51))) + 1e-05)
  ) * (tmpvar_53 / 
    (((3.141593 * tmpvar_54) * tmpvar_54) + 1e-07)
  )) * 0.7853982);
  specularTerm_44 = tmpvar_59;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_44 = sqrt(max (0.0001, tmpvar_59));
  };
  float tmpvar_60;
  tmpvar_60 = max (0.0, (specularTerm_44 * tmpvar_9));
  specularTerm_44 = tmpvar_60;
  float tmpvar_61;
  tmpvar_61 = (tmpvar_58 * tmpvar_9);
  float tmpvar_62;
  tmpvar_62 = (tmpvar_45 * tmpvar_45);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_43 = (1.0 - ((0.28 * tmpvar_62) * tmpvar_45));
  } else {
    surfaceReduction_43 = (1.0/(((tmpvar_62 * tmpvar_62) + 1.0)));
  };
  float tmpvar_63;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_63 = 1.0;
  } else {
    tmpvar_63 = 0.0;
  };
  specularTerm_44 = (tmpvar_60 * tmpvar_63);
  float x_64;
  x_64 = (1.0 - tmpvar_50);
  float x_65;
  x_65 = (1.0 - tmpvar_49);
  vec3 tmpvar_66;
  tmpvar_66 = (((tmpvar_3 * 
    (tmpvar_12 + (tmpvar_10 * tmpvar_61))
  ) + (
    (specularTerm_44 * tmpvar_10)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_64 * x_64) * (
      (x_64 * x_64)
     * x_64))))
  )) + ((surfaceReduction_43 * tmpvar_11) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_65 * x_65) * ((x_65 * x_65) * x_65))
  ))));
  vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = tmpvar_66;
  c_1.w = tmpvar_67.w;
  c_1.xyz = (tmpvar_66 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = 1.0;
  gl_FragData[0] = xlat_varoutput_68;
}


#endif
"
}
SubProgram "metal " {
// Stats: 28 math, 1 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "VERTEXLIGHT_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 290
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [unity_WorldTransformParams]
Vector 240 [unity_DynamicLightmapST]
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  float3 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  float4 tmpvar_11;
  float4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_11 = (_mtl_u.glstate_matrix_mvp * tmpvar_12);
  float4 texcoord_13;
  texcoord_13.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_14;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_15;
  float3 n_16;
  n_16 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_15 = half3(n_16);
  float3 norm_17;
  norm_17 = float3(tmpvar_1);
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].x;
  v_18.y = _mtl_u.unity_WorldToObject[1].x;
  v_18.z = _mtl_u.unity_WorldToObject[2].x;
  v_18.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].y;
  v_19.y = _mtl_u.unity_WorldToObject[1].y;
  v_19.z = _mtl_u.unity_WorldToObject[2].y;
  v_19.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].z;
  v_20.y = _mtl_u.unity_WorldToObject[1].z;
  v_20.z = _mtl_u.unity_WorldToObject[2].z;
  v_20.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  float3 dir_22;
  dir_22 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_23;
  tmpvar_23[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_23[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_23[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = float(tmpvar_4.w);
  half3 normal_25;
  normal_25 = half3(tmpvar_21);
  half3 tangent_26;
  tangent_26 = half3(tmpvar_24.xyz);
  half tangentSign_27;
  tangentSign_27 = half(tmpvar_24.w);
  half xlat_varsign_28;
  float tmpvar_29;
  tmpvar_29 = ((float)tangentSign_27 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_28 = half(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * xlat_varsign_28);
  half3x3 tmpvar_31;
  tmpvar_31[0].x = tangent_26.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = normal_25.x;
  tmpvar_31[1].x = tangent_26.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = normal_25.y;
  tmpvar_31[2].x = tangent_26.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = normal_25.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_31);
  float3 v_32;
  v_32.x = tangentToWorld_5[0].x;
  v_32.y = tangentToWorld_5[1].x;
  v_32.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].y;
  v_33.y = tangentToWorld_5[1].y;
  v_33.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].z;
  v_34.y = tangentToWorld_5[1].z;
  v_34.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_34);
  float4 o_35;
  float4 tmpvar_36;
  tmpvar_36 = (tmpvar_11 * 0.5);
  float2 tmpvar_37;
  tmpvar_37.x = tmpvar_36.x;
  tmpvar_37.y = (tmpvar_36.y * _mtl_u._ProjectionParams.x);
  o_35.xy = (tmpvar_37 + tmpvar_36.w);
  o_35.zw = tmpvar_11.zw;
  half4 ambientOrLightmapUV_38;
  ambientOrLightmapUV_38.xy = half2(float2(0.0, 0.0));
  ambientOrLightmapUV_38.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_11;
  _mtl_o.xlv_TEXCOORD0 = texcoord_13;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_15;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_38;
  _mtl_o.xlv_TEXCOORD6 = o_35;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat2.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat2.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat2.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat3.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat3.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat3.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat3.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat3.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat15;
float u_xlat16;
float u_xlat17;
float u_xlat28;
float u_xlat29;
float u_xlat30;
float u_xlat39;
float u_xlat40;
float u_xlat41;
float u_xlat42;
float u_xlat44;
mediump float u_xlat16_44;
bool u_xlatb44;
float u_xlat45;
mediump float u_xlat16_45;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
    u_xlat40 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat2.xyz = vec3(u_xlat40) * vs_TEXCOORD4.xyz;
    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat3.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;
    u_xlat2.w = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat42 = (-_OcclusionStrength) + 1.0;
    u_xlat42 = u_xlat10_5.y * _OcclusionStrength + u_xlat42;
    u_xlat17 = (-_Glossiness) + 1.0;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat30)) + u_xlat3.xyz;
    u_xlat4.xzw = u_xlat10_4.xxx * _LightColor0.xyz;
    u_xlat10_6 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat44 = u_xlat10_6.w * unity_DynamicLightmap_HDR.x;
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat44);
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat10_7 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_7.xyz = u_xlat10_7.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat44 = dot(u_xlat2.xyz, u_xlat16_7.xyz);
    u_xlat44 = u_xlat44 + 0.5;
    u_xlat6.xyz = vec3(u_xlat44) * u_xlat6.xyz;
    u_xlat16_44 = max(u_xlat10_7.w, 9.99999975e-05);
    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_44);
    u_xlatb44 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb44){
        u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat44 = inversesqrt(u_xlat44);
        u_xlat7.xyz = vec3(u_xlat44) * u_xlat5.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat44 = min(u_xlat8.y, u_xlat8.x);
        u_xlat44 = min(u_xlat8.z, u_xlat44);
        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat44) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat44 = (-u_xlat17) * 0.699999988 + 1.70000005;
    u_xlat44 = u_xlat17 * u_xlat44;
    u_xlat44 = u_xlat44 * 6.0;
    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat44);
    u_xlat16_45 = log2(u_xlat10_7.w);
    u_xlat45 = u_xlat16_45 * unity_SpecCube0_HDR.y;
    u_xlat45 = exp2(u_xlat45);
    u_xlat45 = u_xlat45 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat45);
    u_xlatb46 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = inversesqrt(u_xlat46);
            u_xlat9.xyz = u_xlat5.xyz * vec3(u_xlat46);
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat44);
        u_xlat16_44 = log2(u_xlat10_5.w);
        u_xlat44 = u_xlat16_44 * unity_SpecCube1_HDR.y;
        u_xlat44 = exp2(u_xlat44);
        u_xlat44 = u_xlat44 * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat44);
        u_xlat7.xyz = vec3(u_xlat45) * u_xlat10_7.xyz + (-u_xlat5.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = vec3(u_xlat42) * u_xlat8.xyz;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat40) + _WorldSpaceLightPos0.xyz;
    u_xlat40 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat40 = max(u_xlat40, 0.00100000005);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat7.xyz = vec3(u_xlat40) * u_xlat7.xyz;
    u_xlat40 = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat40 = max(u_xlat40, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat28 = u_xlat17 * u_xlat17;
    u_xlat3.x = (-u_xlat17) * u_xlat17 + 1.0;
    u_xlat16 = u_xlat2.x * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat2.w * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat2.w * u_xlat16 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat16 = u_xlat28 * u_xlat28;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat7.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
    u_xlat40 = u_xlat40 * u_xlat7.x + 1.0;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat40 = u_xlat40 * 3.14159274 + 1.00000001e-07;
    u_xlat40 = u_xlat16 / u_xlat40;
    u_xlat16 = (-u_xlat2.w) + 1.0;
    u_xlat29 = u_xlat16 * u_xlat16;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat16 = u_xlat16 * u_xlat29;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat29 = u_xlat2.x * u_xlat2.x;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat2.x = u_xlat2.x * u_xlat29;
    u_xlat29 = u_xlat2.y * u_xlat2.y;
    u_xlat29 = dot(vec2(u_xlat29), vec2(u_xlat17));
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat16 = u_xlat29 * u_xlat16 + 1.0;
    u_xlat29 = u_xlat29 * u_xlat2.x + 1.0;
    u_xlat16 = u_xlat29 * u_xlat16;
    u_xlat40 = u_xlat40 * u_xlat3.x;
    u_xlat40 = u_xlat40 * 0.785398185;
    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat29 = max(u_xlat40, 9.99999975e-05);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat40 = (u_xlatb3) ? u_xlat29 : u_xlat40;
    u_xlat40 = u_xlat2.w * u_xlat40;
    u_xlat40 = max(u_xlat40, 0.0);
    u_xlat41 = u_xlat2.w * u_xlat16;
    u_xlat28 = u_xlat28 * u_xlat17;
    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;
    u_xlat16 = float(1.0) / u_xlat7.y;
    u_xlat28 = (u_xlatb3) ? u_xlat28 : u_xlat16;
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat40 = u_xlat40 * u_xlat3.x;
    u_xlat39 = (-u_xlat39) + _Glossiness;
    u_xlat39 = u_xlat39 + 1.0;
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat41) * u_xlat4.xzw;
    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat3.xyz;
    u_xlat4.xyz = u_xlat4.xzw * vec3(u_xlat40);
    u_xlat40 = (-u_xlat2.y) + 1.0;
    u_xlat15.x = u_xlat40 * u_xlat40;
    u_xlat15.x = u_xlat15.x * u_xlat15.x;
    u_xlat40 = u_xlat40 * u_xlat15.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat28);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat39);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat15.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 151 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_12;
  n_12 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_16;
  vec4 ambientOrLightmapUV_17;
  ambientOrLightmapUV_17 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_18;
  ambient_18 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_18 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_16.xyzz * tmpvar_16.yzzx);
  x1_19.x = dot (unity_SHBr, tmpvar_20);
  x1_19.y = dot (unity_SHBg, tmpvar_20);
  x1_19.z = dot (unity_SHBb, tmpvar_20);
  ambient_18 = (ambient_18 + (x1_19 + (unity_SHC.xyz * 
    ((tmpvar_16.x * tmpvar_16.x) - (tmpvar_16.y * tmpvar_16.y))
  )));
  ambientOrLightmapUV_17.xyz = ambient_18;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = n_12;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_17;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_IndirectSpecColor;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_12;
  ambient_12 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_13;
  ambient_contrib_13 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_14;
    tmpvar_14.w = 1.0;
    tmpvar_14.xyz = tmpvar_6;
    vec3 x1_15;
    vec3 texCoord_16;
    vec3 tmpvar_17;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_18;
      tmpvar_18.w = 1.0;
      tmpvar_18.xyz = xlv_TEXCOORD8;
      tmpvar_17 = (unity_ProbeVolumeWorldToObject * tmpvar_18).xyz;
    } else {
      tmpvar_17 = xlv_TEXCOORD8;
    };
    vec3 tmpvar_19;
    tmpvar_19 = ((tmpvar_17 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_16.yz = tmpvar_19.yz;
    texCoord_16.x = (tmpvar_19.x * 0.25);
    float tmpvar_20;
    float tmpvar_21;
    tmpvar_21 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_20 = clamp (texCoord_16.x, tmpvar_21, (0.25 - tmpvar_21));
    texCoord_16.x = tmpvar_20;
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.25);
    vec4 tmpvar_23;
    tmpvar_23 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.5);
    x1_15.x = dot (tmpvar_22, tmpvar_14);
    x1_15.y = dot (tmpvar_23, tmpvar_14);
    x1_15.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_16), tmpvar_14);
    ambient_contrib_13 = x1_15;
  } else {
    vec4 tmpvar_24;
    tmpvar_24.w = 1.0;
    tmpvar_24.xyz = tmpvar_6;
    vec3 x_25;
    x_25.x = dot (unity_SHAr, tmpvar_24);
    x_25.y = dot (unity_SHAg, tmpvar_24);
    x_25.z = dot (unity_SHAb, tmpvar_24);
    ambient_contrib_13 = x_25;
  };
  vec3 tmpvar_26;
  tmpvar_26 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_13));
  ambient_12 = tmpvar_26;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_12 = max (((1.055 * 
      pow (max (tmpvar_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_11 = (ambient_12 * tmpvar_8);
  tmpvar_10 = (unity_IndirectSpecColor.xyz * tmpvar_8);
  vec3 viewDir_27;
  viewDir_27 = -(tmpvar_7);
  float surfaceReduction_28;
  float specularTerm_29;
  float tmpvar_30;
  tmpvar_30 = (1.0 - _Glossiness);
  vec3 tmpvar_31;
  vec3 inVec_32;
  inVec_32 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_31 = (inVec_32 * inversesqrt(max (0.001, 
    dot (inVec_32, inVec_32)
  )));
  float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_31));
  float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_6, viewDir_27));
  float tmpvar_35;
  tmpvar_35 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_31));
  float tmpvar_36;
  tmpvar_36 = (tmpvar_30 * tmpvar_30);
  float tmpvar_37;
  tmpvar_37 = (tmpvar_30 * tmpvar_30);
  float tmpvar_38;
  tmpvar_38 = (tmpvar_37 * tmpvar_37);
  float tmpvar_39;
  tmpvar_39 = (((tmpvar_33 * tmpvar_33) * (tmpvar_38 - 1.0)) + 1.0);
  float x_40;
  x_40 = (1.0 - tmpvar_9);
  float x_41;
  x_41 = (1.0 - tmpvar_34);
  float tmpvar_42;
  tmpvar_42 = (0.5 + ((2.0 * tmpvar_35) * (tmpvar_35 * tmpvar_30)));
  float tmpvar_43;
  tmpvar_43 = ((1.0 + (
    (tmpvar_42 - 1.0)
   * 
    ((x_40 * x_40) * ((x_40 * x_40) * x_40))
  )) * (1.0 + (
    (tmpvar_42 - 1.0)
   * 
    ((x_41 * x_41) * ((x_41 * x_41) * x_41))
  )));
  float tmpvar_44;
  tmpvar_44 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_34 * (1.0 - tmpvar_36))
     + tmpvar_36)) + (tmpvar_34 * (
      (tmpvar_9 * (1.0 - tmpvar_36))
     + tmpvar_36))) + 1e-05)
  ) * (tmpvar_38 / 
    (((3.141593 * tmpvar_39) * tmpvar_39) + 1e-07)
  )) * 0.7853982);
  specularTerm_29 = tmpvar_44;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_29 = sqrt(max (0.0001, tmpvar_44));
  };
  float tmpvar_45;
  tmpvar_45 = max (0.0, (specularTerm_29 * tmpvar_9));
  specularTerm_29 = tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (tmpvar_43 * tmpvar_9);
  float tmpvar_47;
  tmpvar_47 = (tmpvar_30 * tmpvar_30);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_28 = (1.0 - ((0.28 * tmpvar_47) * tmpvar_30));
  } else {
    surfaceReduction_28 = (1.0/(((tmpvar_47 * tmpvar_47) + 1.0)));
  };
  float tmpvar_48;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_48 = 1.0;
  } else {
    tmpvar_48 = 0.0;
  };
  specularTerm_29 = (tmpvar_45 * tmpvar_48);
  float x_49;
  x_49 = (1.0 - tmpvar_35);
  float x_50;
  x_50 = (1.0 - tmpvar_34);
  vec3 tmpvar_51;
  tmpvar_51 = (((tmpvar_3 * 
    (tmpvar_11 + (_LightColor0.xyz * tmpvar_46))
  ) + (
    (specularTerm_29 * _LightColor0.xyz)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_49 * x_49) * (
      (x_49 * x_49)
     * x_49))))
  )) + ((surfaceReduction_28 * tmpvar_10) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_50 * x_50) * ((x_50 * x_50) * x_50))
  ))));
  vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = tmpvar_51;
  c_1.w = tmpvar_52.w;
  c_1.xyz = (tmpvar_51 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_53;
  xlat_varoutput_53.xyz = c_1.xyz;
  xlat_varoutput_53.w = 1.0;
  gl_FragData[0] = xlat_varoutput_53;
}


#endif
"
}
SubProgram "metal " {
// Stats: 31 math, 2 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 290
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
VectorHalf 240 [unity_ColorSpaceLuminance] 4
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float3 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_7 = tmpvar_8.xyz;
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_19);
  half3 normalWorld_20;
  normalWorld_20 = half3(tmpvar_19);
  half4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 ambient_22;
  ambient_22 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_23;
  tmpvar_23 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_23) {
    ambient_22 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_24;
  half4 tmpvar_25;
  tmpvar_25 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_24.x = dot (_mtl_u.unity_SHBr, tmpvar_25);
  x1_24.y = dot (_mtl_u.unity_SHBg, tmpvar_25);
  x1_24.z = dot (_mtl_u.unity_SHBb, tmpvar_25);
  ambient_22 = (ambient_22 + (x1_24 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  ambientOrLightmapUV_21.xyz = ambient_22;
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_7;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_IndirectSpecColor;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
lowp vec4 u_xlat10_6;
lowp vec4 u_xlat10_7;
vec3 u_xlat10;
float u_xlat11;
vec3 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
float u_xlat20;
float u_xlat24;
float u_xlat25;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
float u_xlat28;
float u_xlat29;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat25 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD4.xyz;
    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat3.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;
    u_xlat27 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat4.x = (-_OcclusionStrength) + 1.0;
    u_xlat4.x = u_xlat10_4.y * _OcclusionStrength + u_xlat4.x;
    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat12.xyz = (bool(u_xlatb12)) ? u_xlat5.xyz : vs_TEXCOORD8.xyz;
        u_xlat12.xyz = u_xlat12.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat12.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat12.x = u_xlat5.y * 0.25;
        u_xlat20 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat28 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat12.x = max(u_xlat20, u_xlat12.x);
        u_xlat5.x = min(u_xlat28, u_xlat12.x);
        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
        u_xlat12.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat12.xyz);
        u_xlat12.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_5 = texture(unity_ProbeVolumeSH, u_xlat12.xyz);
        u_xlat2.w = 1.0;
        u_xlat6.x = dot(u_xlat10_6, u_xlat2);
        u_xlat6.y = dot(u_xlat10_7, u_xlat2);
        u_xlat6.z = dot(u_xlat10_5, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat6.x = dot(unity_SHAr, u_xlat2);
        u_xlat6.y = dot(unity_SHAg, u_xlat2);
        u_xlat6.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat12.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
    u_xlat12.xyz = max(u_xlat12.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb26 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat5.xyz = log2(u_xlat12.xyz);
    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat5.xyz = exp2(u_xlat5.xyz);
    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat12.xyz = (bool(u_xlatb26)) ? u_xlat5.xyz : u_xlat12.xyz;
    u_xlat5.xyz = u_xlat4.xxx * unity_IndirectSpecColor.xyz;
    u_xlat29 = (-_Glossiness) + 1.0;
    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
    u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat6.xyz = vec3(u_xlat25) * u_xlat6.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat3.x = (-u_xlat29) * u_xlat29 + 1.0;
    u_xlat11 = u_xlat2.x * u_xlat3.x + u_xlat18;
    u_xlat3.x = u_xlat27 * u_xlat3.x + u_xlat18;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat27 * u_xlat11 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat11 = u_xlat18 * u_xlat18;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat6.xy = vec2(u_xlat18) * vec2(u_xlat18) + vec2(-1.0, 1.0);
    u_xlat25 = u_xlat25 * u_xlat6.x + 1.0;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * 3.14159274 + 1.00000001e-07;
    u_xlat25 = u_xlat11 / u_xlat25;
    u_xlat11 = (-u_xlat27) + 1.0;
    u_xlat19 = u_xlat11 * u_xlat11;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat11 = u_xlat11 * u_xlat19;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat19 = u_xlat2.x * u_xlat2.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat2.x = u_xlat2.x * u_xlat19;
    u_xlat19 = u_xlat2.y * u_xlat2.y;
    u_xlat19 = dot(vec2(u_xlat19), vec2(u_xlat29));
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat11 = u_xlat19 * u_xlat11 + 1.0;
    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat25 = u_xlat25 * u_xlat3.x;
    u_xlat25 = u_xlat25 * 0.785398185;
    u_xlat3.x = max(u_xlat25, 9.99999975e-05);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat25 = (u_xlatb26) ? u_xlat3.x : u_xlat25;
    u_xlat25 = u_xlat27 * u_xlat25;
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat3.x = u_xlat27 * u_xlat11;
    u_xlat18 = u_xlat18 * u_xlat29;
    u_xlat18 = (-u_xlat18) * 0.280000001 + 1.0;
    u_xlat11 = float(1.0) / u_xlat6.y;
    u_xlat18 = (u_xlatb26) ? u_xlat18 : u_xlat11;
    u_xlat26 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb26 = u_xlat26!=0.0;
    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);
    u_xlat25 = u_xlat25 * u_xlat26;
    u_xlat24 = (-u_xlat24) + _Glossiness;
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
    u_xlat3.xyz = u_xlat12.xyz * u_xlat4.xxx + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat25 = (-u_xlat2.y) + 1.0;
    u_xlat10.x = u_xlat25 * u_xlat25;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat25 = u_xlat25 * u_xlat10.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat25) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat10.xyz = u_xlat5.xyz * vec3(u_xlat18);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat24);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 147 math, 5 textures, 7 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 ambientOrLightmapUV_26;
  ambientOrLightmapUV_26.xy = vec2(0.0, 0.0);
  ambientOrLightmapUV_26.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_26;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_IndirectSpecColor;
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_11 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_12.w) * tmpvar_12.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_6, (tmpvar_13.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_13.w));
  tmpvar_11 = (tmpvar_11 * tmpvar_8);
  tmpvar_10 = vec3(0.0, 0.0, 0.0);
  vec3 worldRefl_14;
  worldRefl_14 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 worldPos_15;
  worldPos_15 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_16;
    tmpvar_16 = normalize(worldRefl_14);
    vec3 tmpvar_17;
    tmpvar_17 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_16);
    vec3 tmpvar_18;
    tmpvar_18 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_16);
    bvec3 tmpvar_19;
    tmpvar_19 = greaterThan (tmpvar_16, vec3(0.0, 0.0, 0.0));
    float tmpvar_20;
    if (tmpvar_19.x) {
      tmpvar_20 = tmpvar_17.x;
    } else {
      tmpvar_20 = tmpvar_18.x;
    };
    float tmpvar_21;
    if (tmpvar_19.y) {
      tmpvar_21 = tmpvar_17.y;
    } else {
      tmpvar_21 = tmpvar_18.y;
    };
    float tmpvar_22;
    if (tmpvar_19.z) {
      tmpvar_22 = tmpvar_17.z;
    } else {
      tmpvar_22 = tmpvar_18.z;
    };
    worldPos_15 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_14 = (worldPos_15 + (tmpvar_16 * min (
      min (tmpvar_20, tmpvar_21)
    , tmpvar_22)));
  };
  tmpvar_10 = (unity_IndirectSpecColor.xyz * tmpvar_8);
  vec3 viewDir_23;
  viewDir_23 = -(tmpvar_7);
  float surfaceReduction_24;
  float specularTerm_25;
  float tmpvar_26;
  tmpvar_26 = (1.0 - _Glossiness);
  vec3 tmpvar_27;
  vec3 inVec_28;
  inVec_28 = (_WorldSpaceLightPos0.xyz + viewDir_23);
  tmpvar_27 = (inVec_28 * inversesqrt(max (0.001, 
    dot (inVec_28, inVec_28)
  )));
  float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, tmpvar_27));
  float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_6, viewDir_23));
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_27));
  float tmpvar_32;
  tmpvar_32 = (tmpvar_26 * tmpvar_26);
  float tmpvar_33;
  tmpvar_33 = (tmpvar_26 * tmpvar_26);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_33 * tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (((tmpvar_29 * tmpvar_29) * (tmpvar_34 - 1.0)) + 1.0);
  float x_36;
  x_36 = (1.0 - tmpvar_9);
  float x_37;
  x_37 = (1.0 - tmpvar_30);
  float tmpvar_38;
  tmpvar_38 = (0.5 + ((2.0 * tmpvar_31) * (tmpvar_31 * tmpvar_26)));
  float tmpvar_39;
  tmpvar_39 = ((1.0 + (
    (tmpvar_38 - 1.0)
   * 
    ((x_36 * x_36) * ((x_36 * x_36) * x_36))
  )) * (1.0 + (
    (tmpvar_38 - 1.0)
   * 
    ((x_37 * x_37) * ((x_37 * x_37) * x_37))
  )));
  float tmpvar_40;
  tmpvar_40 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_30 * (1.0 - tmpvar_32))
     + tmpvar_32)) + (tmpvar_30 * (
      (tmpvar_9 * (1.0 - tmpvar_32))
     + tmpvar_32))) + 1e-05)
  ) * (tmpvar_34 / 
    (((3.141593 * tmpvar_35) * tmpvar_35) + 1e-07)
  )) * 0.7853982);
  specularTerm_25 = tmpvar_40;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_25 = sqrt(max (0.0001, tmpvar_40));
  };
  float tmpvar_41;
  tmpvar_41 = max (0.0, (specularTerm_25 * tmpvar_9));
  specularTerm_25 = tmpvar_41;
  float tmpvar_42;
  tmpvar_42 = (tmpvar_39 * tmpvar_9);
  float tmpvar_43;
  tmpvar_43 = (tmpvar_26 * tmpvar_26);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_24 = (1.0 - ((0.28 * tmpvar_43) * tmpvar_26));
  } else {
    surfaceReduction_24 = (1.0/(((tmpvar_43 * tmpvar_43) + 1.0)));
  };
  float tmpvar_44;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_44 = 1.0;
  } else {
    tmpvar_44 = 0.0;
  };
  specularTerm_25 = (tmpvar_41 * tmpvar_44);
  float x_45;
  x_45 = (1.0 - tmpvar_31);
  float x_46;
  x_46 = (1.0 - tmpvar_30);
  vec3 tmpvar_47;
  tmpvar_47 = (((tmpvar_3 * 
    (tmpvar_11 + (_LightColor0.xyz * tmpvar_42))
  ) + (
    (specularTerm_25 * _LightColor0.xyz)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_45 * x_45) * (
      (x_45 * x_45)
     * x_45))))
  )) + ((surfaceReduction_24 * tmpvar_10) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_46 * x_46) * ((x_46 * x_46) * x_46))
  ))));
  vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = tmpvar_47;
  c_1.w = tmpvar_48.w;
  c_1.xyz = (tmpvar_47 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_49;
  xlat_varoutput_49.xyz = c_1.xyz;
  xlat_varoutput_49.w = 1.0;
  gl_FragData[0] = xlat_varoutput_49;
}


#endif
"
}
SubProgram "metal " {
// Stats: 25 math, 1 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 274
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Matrix 144 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [unity_WorldTransformParams]
Vector 224 [unity_DynamicLightmapST]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  float3 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  float4 tmpvar_11;
  float4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_11 = (_mtl_u.glstate_matrix_mvp * tmpvar_12);
  float4 texcoord_13;
  texcoord_13.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_14;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_15;
  float3 n_16;
  n_16 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_15 = half3(n_16);
  float3 norm_17;
  norm_17 = float3(tmpvar_1);
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].x;
  v_18.y = _mtl_u.unity_WorldToObject[1].x;
  v_18.z = _mtl_u.unity_WorldToObject[2].x;
  v_18.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].y;
  v_19.y = _mtl_u.unity_WorldToObject[1].y;
  v_19.z = _mtl_u.unity_WorldToObject[2].y;
  v_19.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].z;
  v_20.y = _mtl_u.unity_WorldToObject[1].z;
  v_20.z = _mtl_u.unity_WorldToObject[2].z;
  v_20.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  float3 dir_22;
  dir_22 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_23;
  tmpvar_23[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_23[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_23[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = float(tmpvar_4.w);
  half3 normal_25;
  normal_25 = half3(tmpvar_21);
  half3 tangent_26;
  tangent_26 = half3(tmpvar_24.xyz);
  half tangentSign_27;
  tangentSign_27 = half(tmpvar_24.w);
  half xlat_varsign_28;
  float tmpvar_29;
  tmpvar_29 = ((float)tangentSign_27 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_28 = half(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * xlat_varsign_28);
  half3x3 tmpvar_31;
  tmpvar_31[0].x = tangent_26.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = normal_25.x;
  tmpvar_31[1].x = tangent_26.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = normal_25.y;
  tmpvar_31[2].x = tangent_26.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = normal_25.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_31);
  float3 v_32;
  v_32.x = tangentToWorld_5[0].x;
  v_32.y = tangentToWorld_5[1].x;
  v_32.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].y;
  v_33.y = tangentToWorld_5[1].y;
  v_33.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].z;
  v_34.y = tangentToWorld_5[1].z;
  v_34.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_34);
  half4 ambientOrLightmapUV_35;
  ambientOrLightmapUV_35.xy = half2(float2(0.0, 0.0));
  ambientOrLightmapUV_35.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_11;
  _mtl_o.xlv_TEXCOORD0 = texcoord_13;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_15;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_35;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_IndirectSpecColor;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat21;
float u_xlat22;
float u_xlat23;
float u_xlat24;
bool u_xlatb24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat0.w = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
    u_xlat0.z = (-_Glossiness) + 1.0;
    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
    u_xlat3.xy = u_xlat7.zz * u_xlat7.zz + vec2(-1.0, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat3.x + 1.0;
    u_xlat22 = float(1.0) / u_xlat3.y;
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * 3.14159274 + 1.00000001e-07;
    u_xlat23 = u_xlat7.z * u_xlat7.z;
    u_xlat7.x = u_xlat23 / u_xlat7.x;
    u_xlat1.x = dot(u_xlat2.xyz, (-u_xlat1.xyz));
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat8.x = (-u_xlat0.z) * u_xlat0.z + 1.0;
    u_xlat15 = u_xlat1.x * u_xlat8.x + u_xlat7.z;
    u_xlat23 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat23 = max(u_xlat23, 0.0);
    u_xlat8.x = u_xlat23 * u_xlat8.x + u_xlat7.z;
    u_xlat21 = u_xlat7.z * u_xlat0.z;
    u_xlat21 = (-u_xlat21) * 0.280000001 + 1.0;
    u_xlat8.x = u_xlat8.x * u_xlat1.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat8.x = u_xlat23 * u_xlat15 + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + 9.99999975e-06;
    u_xlat8.x = 2.0 / u_xlat8.x;
    u_xlat7.x = u_xlat7.x * u_xlat8.x;
    u_xlat7.x = u_xlat7.x * 0.785398185;
    u_xlat8.x = max(u_xlat7.x, 9.99999975e-05);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat7.x = (u_xlatb15) ? u_xlat8.x : u_xlat7.x;
    u_xlat21 = (u_xlatb15) ? u_xlat21 : u_xlat22;
    u_xlat7.x = u_xlat23 * u_xlat7.x;
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat8.xyz = _Color.xyz * u_xlat10_3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat24 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat7.x = u_xlat7.x * u_xlat24;
    u_xlat4.xyz = u_xlat7.xxx * _LightColor0.xyz;
    u_xlat7.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = dot(u_xlat0.xx, u_xlat0.zz);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat14 = u_xlat7.x * u_xlat7.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat7.xxx + u_xlat8.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
    u_xlat7.x = u_xlat1.x * u_xlat1.x;
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat1.x * u_xlat7.x;
    u_xlat14 = u_xlat0.x * u_xlat7.x + 1.0;
    u_xlat1.x = (-u_xlat23) + 1.0;
    u_xlat24 = u_xlat1.x * u_xlat1.x;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat1.x = u_xlat1.x * u_xlat24;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + 1.0;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat23 * u_xlat0.x;
    u_xlat5.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat10_6 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_0 = max(u_xlat10_6.w, 9.99999975e-05);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat14 = u_xlat14 + 0.5;
    u_xlat10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat1.x = u_xlat10_2.w * unity_DynamicLightmap_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat1.xxx;
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat16_0);
    u_xlat10_6 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat0.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.x = u_xlat10_6.y * _OcclusionStrength + u_xlat0.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat0.xxx * unity_IndirectSpecColor.xyz;
    u_xlat0.xzw = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat1.x = (-u_xlat1.x) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat5.xyz + u_xlat8.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat2.xyz + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat0.xzw * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 152 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_12;
  n_12 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_16;
  vec4 o_17;
  vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_8 * 0.5);
  vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_8.zw;
  vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_21;
  ambient_21 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_21 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_22;
  vec4 tmpvar_23;
  tmpvar_23 = (tmpvar_16.xyzz * tmpvar_16.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambient_21 = (ambient_21 + (x1_22 + (unity_SHC.xyz * 
    ((tmpvar_16.x * tmpvar_16.x) - (tmpvar_16.y * tmpvar_16.y))
  )));
  ambientOrLightmapUV_20.xyz = ambient_21;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = n_12;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD6 = o_17;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_IndirectSpecColor;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  tmpvar_12 = vec3(0.0, 0.0, 0.0);
  tmpvar_11 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  vec3 ambient_13;
  ambient_13 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_14;
  ambient_contrib_14 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_15;
    tmpvar_15.w = 1.0;
    tmpvar_15.xyz = tmpvar_6;
    vec3 x1_16;
    vec3 texCoord_17;
    vec3 tmpvar_18;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_19;
      tmpvar_19.w = 1.0;
      tmpvar_19.xyz = xlv_TEXCOORD8;
      tmpvar_18 = (unity_ProbeVolumeWorldToObject * tmpvar_19).xyz;
    } else {
      tmpvar_18 = xlv_TEXCOORD8;
    };
    vec3 tmpvar_20;
    tmpvar_20 = ((tmpvar_18 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_17.yz = tmpvar_20.yz;
    texCoord_17.x = (tmpvar_20.x * 0.25);
    float tmpvar_21;
    float tmpvar_22;
    tmpvar_22 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_21 = clamp (texCoord_17.x, tmpvar_22, (0.25 - tmpvar_22));
    texCoord_17.x = tmpvar_21;
    vec4 tmpvar_23;
    tmpvar_23 = texture3D (unity_ProbeVolumeSH, texCoord_17);
    texCoord_17.x = (tmpvar_21 + 0.25);
    vec4 tmpvar_24;
    tmpvar_24 = texture3D (unity_ProbeVolumeSH, texCoord_17);
    texCoord_17.x = (tmpvar_21 + 0.5);
    x1_16.x = dot (tmpvar_23, tmpvar_15);
    x1_16.y = dot (tmpvar_24, tmpvar_15);
    x1_16.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_17), tmpvar_15);
    ambient_contrib_14 = x1_16;
  } else {
    vec4 tmpvar_25;
    tmpvar_25.w = 1.0;
    tmpvar_25.xyz = tmpvar_6;
    vec3 x_26;
    x_26.x = dot (unity_SHAr, tmpvar_25);
    x_26.y = dot (unity_SHAg, tmpvar_25);
    x_26.z = dot (unity_SHAb, tmpvar_25);
    ambient_contrib_14 = x_26;
  };
  vec3 tmpvar_27;
  tmpvar_27 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_14));
  ambient_13 = tmpvar_27;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_13 = max (((1.055 * 
      pow (max (tmpvar_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_12 = (ambient_13 * tmpvar_8);
  tmpvar_10 = (unity_IndirectSpecColor.xyz * tmpvar_8);
  vec3 viewDir_28;
  viewDir_28 = -(tmpvar_7);
  float surfaceReduction_29;
  float specularTerm_30;
  float tmpvar_31;
  tmpvar_31 = (1.0 - _Glossiness);
  vec3 tmpvar_32;
  vec3 inVec_33;
  inVec_33 = (_WorldSpaceLightPos0.xyz + viewDir_28);
  tmpvar_32 = (inVec_33 * inversesqrt(max (0.001, 
    dot (inVec_33, inVec_33)
  )));
  float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_6, tmpvar_32));
  float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_6, viewDir_28));
  float tmpvar_36;
  tmpvar_36 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_32));
  float tmpvar_37;
  tmpvar_37 = (tmpvar_31 * tmpvar_31);
  float tmpvar_38;
  tmpvar_38 = (tmpvar_31 * tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = (tmpvar_38 * tmpvar_38);
  float tmpvar_40;
  tmpvar_40 = (((tmpvar_34 * tmpvar_34) * (tmpvar_39 - 1.0)) + 1.0);
  float x_41;
  x_41 = (1.0 - tmpvar_9);
  float x_42;
  x_42 = (1.0 - tmpvar_35);
  float tmpvar_43;
  tmpvar_43 = (0.5 + ((2.0 * tmpvar_36) * (tmpvar_36 * tmpvar_31)));
  float tmpvar_44;
  tmpvar_44 = ((1.0 + (
    (tmpvar_43 - 1.0)
   * 
    ((x_41 * x_41) * ((x_41 * x_41) * x_41))
  )) * (1.0 + (
    (tmpvar_43 - 1.0)
   * 
    ((x_42 * x_42) * ((x_42 * x_42) * x_42))
  )));
  float tmpvar_45;
  tmpvar_45 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_35 * (1.0 - tmpvar_37))
     + tmpvar_37)) + (tmpvar_35 * (
      (tmpvar_9 * (1.0 - tmpvar_37))
     + tmpvar_37))) + 1e-05)
  ) * (tmpvar_39 / 
    (((3.141593 * tmpvar_40) * tmpvar_40) + 1e-07)
  )) * 0.7853982);
  specularTerm_30 = tmpvar_45;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_30 = sqrt(max (0.0001, tmpvar_45));
  };
  float tmpvar_46;
  tmpvar_46 = max (0.0, (specularTerm_30 * tmpvar_9));
  specularTerm_30 = tmpvar_46;
  float tmpvar_47;
  tmpvar_47 = (tmpvar_44 * tmpvar_9);
  float tmpvar_48;
  tmpvar_48 = (tmpvar_31 * tmpvar_31);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_29 = (1.0 - ((0.28 * tmpvar_48) * tmpvar_31));
  } else {
    surfaceReduction_29 = (1.0/(((tmpvar_48 * tmpvar_48) + 1.0)));
  };
  float tmpvar_49;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_49 = 1.0;
  } else {
    tmpvar_49 = 0.0;
  };
  specularTerm_30 = (tmpvar_46 * tmpvar_49);
  float x_50;
  x_50 = (1.0 - tmpvar_36);
  float x_51;
  x_51 = (1.0 - tmpvar_35);
  vec3 tmpvar_52;
  tmpvar_52 = (((tmpvar_3 * 
    (tmpvar_12 + (tmpvar_11 * tmpvar_47))
  ) + (
    (specularTerm_30 * tmpvar_11)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_50 * x_50) * (
      (x_50 * x_50)
     * x_50))))
  )) + ((surfaceReduction_29 * tmpvar_10) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_51 * x_51) * ((x_51 * x_51) * x_51))
  ))));
  vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = tmpvar_52;
  c_1.w = tmpvar_53.w;
  c_1.xyz = (tmpvar_52 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_54;
  xlat_varoutput_54.xyz = c_1.xyz;
  xlat_varoutput_54.w = 1.0;
  gl_FragData[0] = xlat_varoutput_54;
}


#endif
"
}
SubProgram "metal " {
// Stats: 34 math, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 306
Matrix 64 [glstate_matrix_mvp]
Matrix 128 [unity_ObjectToWorld]
Matrix 192 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
VectorHalf 32 [unity_SHBr] 4
VectorHalf 40 [unity_SHBg] 4
VectorHalf 48 [unity_SHBb] 4
VectorHalf 56 [unity_SHC] 4
VectorHalf 256 [unity_ColorSpaceLuminance] 4
Vector 272 [_MainTex_ST]
Vector 288 [_DetailAlbedoMap_ST]
ScalarHalf 304 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float3 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_7 = tmpvar_8.xyz;
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_19);
  float4 o_20;
  float4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  float2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _mtl_u._ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  half3 normalWorld_23;
  normalWorld_23 = half3(tmpvar_19);
  half4 ambientOrLightmapUV_24;
  ambientOrLightmapUV_24 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 ambient_25;
  ambient_25 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_26;
  tmpvar_26 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_26) {
    ambient_25 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_27;
  half4 tmpvar_28;
  tmpvar_28 = (normalWorld_23.xyzz * normalWorld_23.yzzx);
  x1_27.x = dot (_mtl_u.unity_SHBr, tmpvar_28);
  x1_27.y = dot (_mtl_u.unity_SHBg, tmpvar_28);
  x1_27.z = dot (_mtl_u.unity_SHBb, tmpvar_28);
  ambient_25 = (ambient_25 + (x1_27 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_23.x * normalWorld_23.x) - (normalWorld_23.y * normalWorld_23.y))
  )));
  ambientOrLightmapUV_24.xyz = ambient_25;
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_24;
  _mtl_o.xlv_TEXCOORD6 = o_20;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_7;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat10 = u_xlat1.y * u_xlat1.y;
    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat1.x = dot(unity_SHBr, u_xlat2);
    u_xlat1.y = dot(unity_SHBg, u_xlat2);
    u_xlat1.z = dot(unity_SHBb, u_xlat2);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_IndirectSpecColor;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
bool u_xlatb5;
vec3 u_xlat6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
lowp vec4 u_xlat10_7;
vec3 u_xlat10;
float u_xlat11;
float u_xlat12;
vec3 u_xlat13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
float u_xlat24;
float u_xlat25;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
float u_xlat29;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat25 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD4.xyz;
    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat3.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;
    u_xlat27 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat12 = (-_OcclusionStrength) + 1.0;
    u_xlat12 = u_xlat10_5.y * _OcclusionStrength + u_xlat12;
    u_xlat4.xzw = u_xlat10_4.xxx * _LightColor0.xyz;
    u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb5){
        u_xlatb5 = unity_ProbeVolumeParams.y==1.0;
        u_xlat13.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat13.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat13.xyz;
        u_xlat13.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat13.xyz;
        u_xlat13.xyz = u_xlat13.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb5)) ? u_xlat13.xyz : vs_TEXCOORD8.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13.x = u_xlat5.y * 0.25;
        u_xlat6.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat14 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat13.x = max(u_xlat13.x, u_xlat6.x);
        u_xlat5.x = min(u_xlat14, u_xlat13.x);
        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat2.w = 1.0;
        u_xlat6.x = dot(u_xlat10_6, u_xlat2);
        u_xlat6.y = dot(u_xlat10_7, u_xlat2);
        u_xlat6.z = dot(u_xlat10_5, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat6.x = dot(unity_SHAr, u_xlat2);
        u_xlat6.y = dot(unity_SHAg, u_xlat2);
        u_xlat6.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb26 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat6.xyz = log2(u_xlat5.xyz);
    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = (bool(u_xlatb26)) ? u_xlat6.xyz : u_xlat5.xyz;
    u_xlat6.xyz = vec3(u_xlat12) * unity_IndirectSpecColor.xyz;
    u_xlat29 = (-_Glossiness) + 1.0;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
    u_xlat25 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat7.xyz = vec3(u_xlat25) * u_xlat7.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat3.x = (-u_xlat29) * u_xlat29 + 1.0;
    u_xlat11 = u_xlat2.x * u_xlat3.x + u_xlat18;
    u_xlat3.x = u_xlat27 * u_xlat3.x + u_xlat18;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat27 * u_xlat11 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat11 = u_xlat18 * u_xlat18;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat7.xy = vec2(u_xlat18) * vec2(u_xlat18) + vec2(-1.0, 1.0);
    u_xlat25 = u_xlat25 * u_xlat7.x + 1.0;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * 3.14159274 + 1.00000001e-07;
    u_xlat25 = u_xlat11 / u_xlat25;
    u_xlat11 = (-u_xlat27) + 1.0;
    u_xlat19 = u_xlat11 * u_xlat11;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat11 = u_xlat11 * u_xlat19;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat19 = u_xlat2.x * u_xlat2.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat2.x = u_xlat2.x * u_xlat19;
    u_xlat19 = u_xlat2.y * u_xlat2.y;
    u_xlat19 = dot(vec2(u_xlat19), vec2(u_xlat29));
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat11 = u_xlat19 * u_xlat11 + 1.0;
    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat25 = u_xlat25 * u_xlat3.x;
    u_xlat25 = u_xlat25 * 0.785398185;
    u_xlat3.x = max(u_xlat25, 9.99999975e-05);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat25 = (u_xlatb26) ? u_xlat3.x : u_xlat25;
    u_xlat25 = u_xlat27 * u_xlat25;
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat3.x = u_xlat27 * u_xlat11;
    u_xlat18 = u_xlat18 * u_xlat29;
    u_xlat18 = (-u_xlat18) * 0.280000001 + 1.0;
    u_xlat11 = float(1.0) / u_xlat7.y;
    u_xlat18 = (u_xlatb26) ? u_xlat18 : u_xlat11;
    u_xlat26 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb26 = u_xlat26!=0.0;
    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);
    u_xlat25 = u_xlat25 * u_xlat26;
    u_xlat24 = (-u_xlat24) + _Glossiness;
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat4.xzw;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat3.xyz;
    u_xlat4.xyz = u_xlat4.xzw * vec3(u_xlat25);
    u_xlat25 = (-u_xlat2.y) + 1.0;
    u_xlat10.x = u_xlat25 * u_xlat25;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat25 = u_xlat25 * u_xlat10.x;
    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat25) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat10.xyz = u_xlat6.xyz * vec3(u_xlat18);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat24);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 148 math, 6 textures, 7 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 o_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_8 * 0.5);
  vec2 tmpvar_28;
  tmpvar_28.x = tmpvar_27.x;
  tmpvar_28.y = (tmpvar_27.y * _ProjectionParams.x);
  o_26.xy = (tmpvar_28 + tmpvar_27.w);
  o_26.zw = tmpvar_8.zw;
  vec4 ambientOrLightmapUV_29;
  ambientOrLightmapUV_29.xy = vec2(0.0, 0.0);
  ambientOrLightmapUV_29.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_29;
  xlv_TEXCOORD6 = o_26;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_IndirectSpecColor;
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_12 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_6, (tmpvar_14.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_14.w));
  tmpvar_12 = (tmpvar_12 * tmpvar_8);
  tmpvar_10 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec3 worldRefl_15;
  worldRefl_15 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 worldPos_16;
  worldPos_16 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_17;
    tmpvar_17 = normalize(worldRefl_15);
    vec3 tmpvar_18;
    tmpvar_18 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_17);
    vec3 tmpvar_19;
    tmpvar_19 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_17);
    bvec3 tmpvar_20;
    tmpvar_20 = greaterThan (tmpvar_17, vec3(0.0, 0.0, 0.0));
    float tmpvar_21;
    if (tmpvar_20.x) {
      tmpvar_21 = tmpvar_18.x;
    } else {
      tmpvar_21 = tmpvar_19.x;
    };
    float tmpvar_22;
    if (tmpvar_20.y) {
      tmpvar_22 = tmpvar_18.y;
    } else {
      tmpvar_22 = tmpvar_19.y;
    };
    float tmpvar_23;
    if (tmpvar_20.z) {
      tmpvar_23 = tmpvar_18.z;
    } else {
      tmpvar_23 = tmpvar_19.z;
    };
    worldPos_16 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_15 = (worldPos_16 + (tmpvar_17 * min (
      min (tmpvar_21, tmpvar_22)
    , tmpvar_23)));
  };
  tmpvar_11 = (unity_IndirectSpecColor.xyz * tmpvar_8);
  vec3 viewDir_24;
  viewDir_24 = -(tmpvar_7);
  float surfaceReduction_25;
  float specularTerm_26;
  float tmpvar_27;
  tmpvar_27 = (1.0 - _Glossiness);
  vec3 tmpvar_28;
  vec3 inVec_29;
  inVec_29 = (_WorldSpaceLightPos0.xyz + viewDir_24);
  tmpvar_28 = (inVec_29 * inversesqrt(max (0.001, 
    dot (inVec_29, inVec_29)
  )));
  float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_6, tmpvar_28));
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_6, viewDir_24));
  float tmpvar_32;
  tmpvar_32 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_28));
  float tmpvar_33;
  tmpvar_33 = (tmpvar_27 * tmpvar_27);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_27 * tmpvar_27);
  float tmpvar_35;
  tmpvar_35 = (tmpvar_34 * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (((tmpvar_30 * tmpvar_30) * (tmpvar_35 - 1.0)) + 1.0);
  float x_37;
  x_37 = (1.0 - tmpvar_9);
  float x_38;
  x_38 = (1.0 - tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = (0.5 + ((2.0 * tmpvar_32) * (tmpvar_32 * tmpvar_27)));
  float tmpvar_40;
  tmpvar_40 = ((1.0 + (
    (tmpvar_39 - 1.0)
   * 
    ((x_37 * x_37) * ((x_37 * x_37) * x_37))
  )) * (1.0 + (
    (tmpvar_39 - 1.0)
   * 
    ((x_38 * x_38) * ((x_38 * x_38) * x_38))
  )));
  float tmpvar_41;
  tmpvar_41 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_31 * (1.0 - tmpvar_33))
     + tmpvar_33)) + (tmpvar_31 * (
      (tmpvar_9 * (1.0 - tmpvar_33))
     + tmpvar_33))) + 1e-05)
  ) * (tmpvar_35 / 
    (((3.141593 * tmpvar_36) * tmpvar_36) + 1e-07)
  )) * 0.7853982);
  specularTerm_26 = tmpvar_41;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_26 = sqrt(max (0.0001, tmpvar_41));
  };
  float tmpvar_42;
  tmpvar_42 = max (0.0, (specularTerm_26 * tmpvar_9));
  specularTerm_26 = tmpvar_42;
  float tmpvar_43;
  tmpvar_43 = (tmpvar_40 * tmpvar_9);
  float tmpvar_44;
  tmpvar_44 = (tmpvar_27 * tmpvar_27);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_25 = (1.0 - ((0.28 * tmpvar_44) * tmpvar_27));
  } else {
    surfaceReduction_25 = (1.0/(((tmpvar_44 * tmpvar_44) + 1.0)));
  };
  float tmpvar_45;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_45 = 1.0;
  } else {
    tmpvar_45 = 0.0;
  };
  specularTerm_26 = (tmpvar_42 * tmpvar_45);
  float x_46;
  x_46 = (1.0 - tmpvar_32);
  float x_47;
  x_47 = (1.0 - tmpvar_31);
  vec3 tmpvar_48;
  tmpvar_48 = (((tmpvar_3 * 
    (tmpvar_12 + (tmpvar_10 * tmpvar_43))
  ) + (
    (specularTerm_26 * tmpvar_10)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_46 * x_46) * (
      (x_46 * x_46)
     * x_46))))
  )) + ((surfaceReduction_25 * tmpvar_11) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_47 * x_47) * ((x_47 * x_47) * x_47))
  ))));
  vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = tmpvar_48;
  c_1.w = tmpvar_49.w;
  c_1.xyz = (tmpvar_48 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_50;
  xlat_varoutput_50.xyz = c_1.xyz;
  xlat_varoutput_50.w = 1.0;
  gl_FragData[0] = xlat_varoutput_50;
}


#endif
"
}
SubProgram "metal " {
// Stats: 28 math, 1 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 290
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [unity_WorldTransformParams]
Vector 240 [unity_DynamicLightmapST]
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  float3 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  float4 tmpvar_11;
  float4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_11 = (_mtl_u.glstate_matrix_mvp * tmpvar_12);
  float4 texcoord_13;
  texcoord_13.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_14;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_15;
  float3 n_16;
  n_16 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_15 = half3(n_16);
  float3 norm_17;
  norm_17 = float3(tmpvar_1);
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].x;
  v_18.y = _mtl_u.unity_WorldToObject[1].x;
  v_18.z = _mtl_u.unity_WorldToObject[2].x;
  v_18.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].y;
  v_19.y = _mtl_u.unity_WorldToObject[1].y;
  v_19.z = _mtl_u.unity_WorldToObject[2].y;
  v_19.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].z;
  v_20.y = _mtl_u.unity_WorldToObject[1].z;
  v_20.z = _mtl_u.unity_WorldToObject[2].z;
  v_20.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  float3 dir_22;
  dir_22 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_23;
  tmpvar_23[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_23[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_23[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = float(tmpvar_4.w);
  half3 normal_25;
  normal_25 = half3(tmpvar_21);
  half3 tangent_26;
  tangent_26 = half3(tmpvar_24.xyz);
  half tangentSign_27;
  tangentSign_27 = half(tmpvar_24.w);
  half xlat_varsign_28;
  float tmpvar_29;
  tmpvar_29 = ((float)tangentSign_27 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_28 = half(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * xlat_varsign_28);
  half3x3 tmpvar_31;
  tmpvar_31[0].x = tangent_26.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = normal_25.x;
  tmpvar_31[1].x = tangent_26.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = normal_25.y;
  tmpvar_31[2].x = tangent_26.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = normal_25.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_31);
  float3 v_32;
  v_32.x = tangentToWorld_5[0].x;
  v_32.y = tangentToWorld_5[1].x;
  v_32.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].y;
  v_33.y = tangentToWorld_5[1].y;
  v_33.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].z;
  v_34.y = tangentToWorld_5[1].z;
  v_34.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_34);
  float4 o_35;
  float4 tmpvar_36;
  tmpvar_36 = (tmpvar_11 * 0.5);
  float2 tmpvar_37;
  tmpvar_37.x = tmpvar_36.x;
  tmpvar_37.y = (tmpvar_36.y * _mtl_u._ProjectionParams.x);
  o_35.xy = (tmpvar_37 + tmpvar_36.w);
  o_35.zw = tmpvar_11.zw;
  half4 ambientOrLightmapUV_38;
  ambientOrLightmapUV_38.xy = half2(float2(0.0, 0.0));
  ambientOrLightmapUV_38.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_11;
  _mtl_o.xlv_TEXCOORD0 = texcoord_13;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_15;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_38;
  _mtl_o.xlv_TEXCOORD6 = o_35;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat2.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat2.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat2.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat3.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat3.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat3.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat3.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat3.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_IndirectSpecColor;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat21;
float u_xlat22;
float u_xlat23;
float u_xlat24;
bool u_xlatb24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat0.w = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
    u_xlat0.z = (-_Glossiness) + 1.0;
    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
    u_xlat3.xy = u_xlat7.zz * u_xlat7.zz + vec2(-1.0, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat3.x + 1.0;
    u_xlat22 = float(1.0) / u_xlat3.y;
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * 3.14159274 + 1.00000001e-07;
    u_xlat23 = u_xlat7.z * u_xlat7.z;
    u_xlat7.x = u_xlat23 / u_xlat7.x;
    u_xlat1.x = dot(u_xlat2.xyz, (-u_xlat1.xyz));
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat8.x = (-u_xlat0.z) * u_xlat0.z + 1.0;
    u_xlat15 = u_xlat1.x * u_xlat8.x + u_xlat7.z;
    u_xlat23 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat23 = max(u_xlat23, 0.0);
    u_xlat8.x = u_xlat23 * u_xlat8.x + u_xlat7.z;
    u_xlat21 = u_xlat7.z * u_xlat0.z;
    u_xlat21 = (-u_xlat21) * 0.280000001 + 1.0;
    u_xlat8.x = u_xlat8.x * u_xlat1.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat8.x = u_xlat23 * u_xlat15 + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + 9.99999975e-06;
    u_xlat8.x = 2.0 / u_xlat8.x;
    u_xlat7.x = u_xlat7.x * u_xlat8.x;
    u_xlat7.x = u_xlat7.x * 0.785398185;
    u_xlat8.x = max(u_xlat7.x, 9.99999975e-05);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat7.x = (u_xlatb15) ? u_xlat8.x : u_xlat7.x;
    u_xlat21 = (u_xlatb15) ? u_xlat21 : u_xlat22;
    u_xlat7.x = u_xlat23 * u_xlat7.x;
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat8.xyz = _Color.xyz * u_xlat10_3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat24 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat7.x = u_xlat7.x * u_xlat24;
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat4.xyz = u_xlat10_4.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
    u_xlat7.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = dot(u_xlat0.xx, u_xlat0.zz);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat14 = u_xlat7.x * u_xlat7.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat6.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat8.xyz;
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat7.x = u_xlat1.x * u_xlat1.x;
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat1.x * u_xlat7.x;
    u_xlat14 = u_xlat0.x * u_xlat7.x + 1.0;
    u_xlat1.x = (-u_xlat23) + 1.0;
    u_xlat24 = u_xlat1.x * u_xlat1.x;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat1.x = u_xlat1.x * u_xlat24;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + 1.0;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat23 * u_xlat0.x;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat10_6 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_0 = max(u_xlat10_6.w, 9.99999975e-05);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat14 = u_xlat14 + 0.5;
    u_xlat10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat1.x = u_xlat10_2.w * unity_DynamicLightmap_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat1.xxx;
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat16_0);
    u_xlat10_6 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat0.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.x = u_xlat10_6.y * _OcclusionStrength + u_xlat0.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat0.xxx * unity_IndirectSpecColor.xyz;
    u_xlat0.xzw = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat1.x = (-u_xlat1.x) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = (-u_xlat8.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat4.xyz + u_xlat8.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat2.xyz + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xzw * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 151 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_12;
  n_12 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_16;
  vec4 ambientOrLightmapUV_17;
  ambientOrLightmapUV_17.w = 0.0;
  vec3 col_18;
  vec4 ndotl_19;
  vec4 lengthSq_20;
  vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_22;
  tmpvar_22 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_20 = (tmpvar_21 * tmpvar_21);
  lengthSq_20 = (lengthSq_20 + (tmpvar_22 * tmpvar_22));
  lengthSq_20 = (lengthSq_20 + (tmpvar_23 * tmpvar_23));
  ndotl_19 = (tmpvar_21 * tmpvar_16.x);
  ndotl_19 = (ndotl_19 + (tmpvar_22 * tmpvar_16.y));
  ndotl_19 = (ndotl_19 + (tmpvar_23 * tmpvar_16.z));
  vec4 tmpvar_24;
  tmpvar_24 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_19 * inversesqrt(lengthSq_20)));
  ndotl_19 = tmpvar_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * (1.0/((1.0 + 
    (lengthSq_20 * unity_4LightAtten0)
  ))));
  col_18 = (unity_LightColor[0].xyz * tmpvar_25.x);
  col_18 = (col_18 + (unity_LightColor[1].xyz * tmpvar_25.y));
  col_18 = (col_18 + (unity_LightColor[2].xyz * tmpvar_25.z));
  col_18 = (col_18 + (unity_LightColor[3].xyz * tmpvar_25.w));
  ambientOrLightmapUV_17.xyz = col_18;
  vec3 ambient_26;
  ambient_26 = ambientOrLightmapUV_17.xyz;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_26 = (col_18 * ((col_18 * 
      ((col_18 * 0.305306) + 0.6821711)
    ) + 0.01252288));
  };
  vec3 x1_27;
  vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_16.xyzz * tmpvar_16.yzzx);
  x1_27.x = dot (unity_SHBr, tmpvar_28);
  x1_27.y = dot (unity_SHBg, tmpvar_28);
  x1_27.z = dot (unity_SHBb, tmpvar_28);
  ambient_26 = (ambient_26 + (x1_27 + (unity_SHC.xyz * 
    ((tmpvar_16.x * tmpvar_16.x) - (tmpvar_16.y * tmpvar_16.y))
  )));
  ambientOrLightmapUV_17.xyz = ambient_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = n_12;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_17;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_IndirectSpecColor;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_12;
  ambient_12 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_13;
  ambient_contrib_13 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_14;
    tmpvar_14.w = 1.0;
    tmpvar_14.xyz = tmpvar_6;
    vec3 x1_15;
    vec3 texCoord_16;
    vec3 tmpvar_17;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_18;
      tmpvar_18.w = 1.0;
      tmpvar_18.xyz = xlv_TEXCOORD8;
      tmpvar_17 = (unity_ProbeVolumeWorldToObject * tmpvar_18).xyz;
    } else {
      tmpvar_17 = xlv_TEXCOORD8;
    };
    vec3 tmpvar_19;
    tmpvar_19 = ((tmpvar_17 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_16.yz = tmpvar_19.yz;
    texCoord_16.x = (tmpvar_19.x * 0.25);
    float tmpvar_20;
    float tmpvar_21;
    tmpvar_21 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_20 = clamp (texCoord_16.x, tmpvar_21, (0.25 - tmpvar_21));
    texCoord_16.x = tmpvar_20;
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.25);
    vec4 tmpvar_23;
    tmpvar_23 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.5);
    x1_15.x = dot (tmpvar_22, tmpvar_14);
    x1_15.y = dot (tmpvar_23, tmpvar_14);
    x1_15.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_16), tmpvar_14);
    ambient_contrib_13 = x1_15;
  } else {
    vec4 tmpvar_24;
    tmpvar_24.w = 1.0;
    tmpvar_24.xyz = tmpvar_6;
    vec3 x_25;
    x_25.x = dot (unity_SHAr, tmpvar_24);
    x_25.y = dot (unity_SHAg, tmpvar_24);
    x_25.z = dot (unity_SHAb, tmpvar_24);
    ambient_contrib_13 = x_25;
  };
  vec3 tmpvar_26;
  tmpvar_26 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_13));
  ambient_12 = tmpvar_26;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_12 = max (((1.055 * 
      pow (max (tmpvar_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_11 = (ambient_12 * tmpvar_8);
  tmpvar_10 = (unity_IndirectSpecColor.xyz * tmpvar_8);
  vec3 viewDir_27;
  viewDir_27 = -(tmpvar_7);
  float surfaceReduction_28;
  float specularTerm_29;
  float tmpvar_30;
  tmpvar_30 = (1.0 - _Glossiness);
  vec3 tmpvar_31;
  vec3 inVec_32;
  inVec_32 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_31 = (inVec_32 * inversesqrt(max (0.001, 
    dot (inVec_32, inVec_32)
  )));
  float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_6, tmpvar_31));
  float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_6, viewDir_27));
  float tmpvar_35;
  tmpvar_35 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_31));
  float tmpvar_36;
  tmpvar_36 = (tmpvar_30 * tmpvar_30);
  float tmpvar_37;
  tmpvar_37 = (tmpvar_30 * tmpvar_30);
  float tmpvar_38;
  tmpvar_38 = (tmpvar_37 * tmpvar_37);
  float tmpvar_39;
  tmpvar_39 = (((tmpvar_33 * tmpvar_33) * (tmpvar_38 - 1.0)) + 1.0);
  float x_40;
  x_40 = (1.0 - tmpvar_9);
  float x_41;
  x_41 = (1.0 - tmpvar_34);
  float tmpvar_42;
  tmpvar_42 = (0.5 + ((2.0 * tmpvar_35) * (tmpvar_35 * tmpvar_30)));
  float tmpvar_43;
  tmpvar_43 = ((1.0 + (
    (tmpvar_42 - 1.0)
   * 
    ((x_40 * x_40) * ((x_40 * x_40) * x_40))
  )) * (1.0 + (
    (tmpvar_42 - 1.0)
   * 
    ((x_41 * x_41) * ((x_41 * x_41) * x_41))
  )));
  float tmpvar_44;
  tmpvar_44 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_34 * (1.0 - tmpvar_36))
     + tmpvar_36)) + (tmpvar_34 * (
      (tmpvar_9 * (1.0 - tmpvar_36))
     + tmpvar_36))) + 1e-05)
  ) * (tmpvar_38 / 
    (((3.141593 * tmpvar_39) * tmpvar_39) + 1e-07)
  )) * 0.7853982);
  specularTerm_29 = tmpvar_44;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_29 = sqrt(max (0.0001, tmpvar_44));
  };
  float tmpvar_45;
  tmpvar_45 = max (0.0, (specularTerm_29 * tmpvar_9));
  specularTerm_29 = tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (tmpvar_43 * tmpvar_9);
  float tmpvar_47;
  tmpvar_47 = (tmpvar_30 * tmpvar_30);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_28 = (1.0 - ((0.28 * tmpvar_47) * tmpvar_30));
  } else {
    surfaceReduction_28 = (1.0/(((tmpvar_47 * tmpvar_47) + 1.0)));
  };
  float tmpvar_48;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_48 = 1.0;
  } else {
    tmpvar_48 = 0.0;
  };
  specularTerm_29 = (tmpvar_45 * tmpvar_48);
  float x_49;
  x_49 = (1.0 - tmpvar_35);
  float x_50;
  x_50 = (1.0 - tmpvar_34);
  vec3 tmpvar_51;
  tmpvar_51 = (((tmpvar_3 * 
    (tmpvar_11 + (_LightColor0.xyz * tmpvar_46))
  ) + (
    (specularTerm_29 * _LightColor0.xyz)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_49 * x_49) * (
      (x_49 * x_49)
     * x_49))))
  )) + ((surfaceReduction_28 * tmpvar_10) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_50 * x_50) * ((x_50 * x_50) * x_50))
  ))));
  vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = tmpvar_51;
  c_1.w = tmpvar_52.w;
  c_1.xyz = (tmpvar_51 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_53;
  xlat_varoutput_53.xyz = c_1.xyz;
  xlat_varoutput_53.w = 1.0;
  gl_FragData[0] = xlat_varoutput_53;
}


#endif
"
}
SubProgram "metal " {
// Stats: 61 math, 2 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 418
Matrix 176 [glstate_matrix_mvp]
Matrix 240 [unity_ObjectToWorld]
Matrix 304 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [unity_4LightPosX0]
Vector 32 [unity_4LightPosY0]
Vector 48 [unity_4LightPosZ0]
VectorHalf 64 [unity_4LightAtten0] 4
VectorHalf 72 [unity_LightColor] 4 8
VectorHalf 136 [unity_SHBr] 4
VectorHalf 144 [unity_SHBg] 4
VectorHalf 152 [unity_SHBb] 4
VectorHalf 160 [unity_SHC] 4
VectorHalf 368 [unity_ColorSpaceLuminance] 4
Vector 384 [_MainTex_ST]
Vector 400 [_DetailAlbedoMap_ST]
ScalarHalf 416 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 unity_4LightPosX0;
  float4 unity_4LightPosY0;
  float4 unity_4LightPosZ0;
  half4 unity_4LightAtten0;
  half4 unity_LightColor[8];
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float3 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_7 = tmpvar_8.xyz;
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_19);
  half3 normalWorld_20;
  normalWorld_20 = half3(tmpvar_19);
  half4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = half(0.0);
  float3 lightColor0_22;
  lightColor0_22 = float3(_mtl_u.unity_LightColor[0].xyz);
  float3 lightColor1_23;
  lightColor1_23 = float3(_mtl_u.unity_LightColor[1].xyz);
  float3 lightColor2_24;
  lightColor2_24 = float3(_mtl_u.unity_LightColor[2].xyz);
  float3 lightColor3_25;
  lightColor3_25 = float3(_mtl_u.unity_LightColor[3].xyz);
  float4 lightAttenSq_26;
  lightAttenSq_26 = float4(_mtl_u.unity_4LightAtten0);
  float3 normal_27;
  normal_27 = float3(normalWorld_20);
  float3 col_28;
  float4 ndotl_29;
  float4 lengthSq_30;
  float4 tmpvar_31;
  tmpvar_31 = (_mtl_u.unity_4LightPosX0 - tmpvar_8.x);
  float4 tmpvar_32;
  tmpvar_32 = (_mtl_u.unity_4LightPosY0 - tmpvar_8.y);
  float4 tmpvar_33;
  tmpvar_33 = (_mtl_u.unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  float4 tmpvar_34;
  tmpvar_34 = max (float4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * rsqrt(lengthSq_30)));
  ndotl_29 = tmpvar_34;
  float4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (lengthSq_30 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_35.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_35.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_35.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_35.w));
  ambientOrLightmapUV_21.xyz = half3(col_28);
  half3 ambient_36;
  ambient_36 = ambientOrLightmapUV_21.xyz;
  bool tmpvar_37;
  tmpvar_37 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_37) {
    ambient_36 = (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 
      ((ambientOrLightmapUV_21.xyz * (half)0.305306) + (half)0.6821711)
    ) + (half)0.01252288));
  };
  half3 x1_38;
  half4 tmpvar_39;
  tmpvar_39 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_38.x = dot (_mtl_u.unity_SHBr, tmpvar_39);
  x1_38.y = dot (_mtl_u.unity_SHBg, tmpvar_39);
  x1_38.z = dot (_mtl_u.unity_SHBb, tmpvar_39);
  ambient_36 = (ambient_36 + (x1_38 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  ambientOrLightmapUV_21.xyz = ambient_36;
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_7;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat3 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
    u_xlat15 = u_xlat1.y * u_xlat1.y;
    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_IndirectSpecColor;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
lowp vec4 u_xlat10_6;
lowp vec4 u_xlat10_7;
vec3 u_xlat10;
float u_xlat11;
vec3 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
float u_xlat20;
float u_xlat24;
float u_xlat25;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
float u_xlat28;
float u_xlat29;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat25 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD4.xyz;
    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat3.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;
    u_xlat27 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat4.x = (-_OcclusionStrength) + 1.0;
    u_xlat4.x = u_xlat10_4.y * _OcclusionStrength + u_xlat4.x;
    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat12.xyz = (bool(u_xlatb12)) ? u_xlat5.xyz : vs_TEXCOORD8.xyz;
        u_xlat12.xyz = u_xlat12.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat12.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat12.x = u_xlat5.y * 0.25;
        u_xlat20 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat28 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat12.x = max(u_xlat20, u_xlat12.x);
        u_xlat5.x = min(u_xlat28, u_xlat12.x);
        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
        u_xlat12.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat12.xyz);
        u_xlat12.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_5 = texture(unity_ProbeVolumeSH, u_xlat12.xyz);
        u_xlat2.w = 1.0;
        u_xlat6.x = dot(u_xlat10_6, u_xlat2);
        u_xlat6.y = dot(u_xlat10_7, u_xlat2);
        u_xlat6.z = dot(u_xlat10_5, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat6.x = dot(unity_SHAr, u_xlat2);
        u_xlat6.y = dot(unity_SHAg, u_xlat2);
        u_xlat6.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat12.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
    u_xlat12.xyz = max(u_xlat12.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb26 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat5.xyz = log2(u_xlat12.xyz);
    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat5.xyz = exp2(u_xlat5.xyz);
    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat12.xyz = (bool(u_xlatb26)) ? u_xlat5.xyz : u_xlat12.xyz;
    u_xlat5.xyz = u_xlat4.xxx * unity_IndirectSpecColor.xyz;
    u_xlat29 = (-_Glossiness) + 1.0;
    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
    u_xlat25 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat6.xyz = vec3(u_xlat25) * u_xlat6.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat3.x = (-u_xlat29) * u_xlat29 + 1.0;
    u_xlat11 = u_xlat2.x * u_xlat3.x + u_xlat18;
    u_xlat3.x = u_xlat27 * u_xlat3.x + u_xlat18;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat27 * u_xlat11 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat11 = u_xlat18 * u_xlat18;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat6.xy = vec2(u_xlat18) * vec2(u_xlat18) + vec2(-1.0, 1.0);
    u_xlat25 = u_xlat25 * u_xlat6.x + 1.0;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * 3.14159274 + 1.00000001e-07;
    u_xlat25 = u_xlat11 / u_xlat25;
    u_xlat11 = (-u_xlat27) + 1.0;
    u_xlat19 = u_xlat11 * u_xlat11;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat11 = u_xlat11 * u_xlat19;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat19 = u_xlat2.x * u_xlat2.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat2.x = u_xlat2.x * u_xlat19;
    u_xlat19 = u_xlat2.y * u_xlat2.y;
    u_xlat19 = dot(vec2(u_xlat19), vec2(u_xlat29));
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat11 = u_xlat19 * u_xlat11 + 1.0;
    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat25 = u_xlat25 * u_xlat3.x;
    u_xlat25 = u_xlat25 * 0.785398185;
    u_xlat3.x = max(u_xlat25, 9.99999975e-05);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat25 = (u_xlatb26) ? u_xlat3.x : u_xlat25;
    u_xlat25 = u_xlat27 * u_xlat25;
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat3.x = u_xlat27 * u_xlat11;
    u_xlat18 = u_xlat18 * u_xlat29;
    u_xlat18 = (-u_xlat18) * 0.280000001 + 1.0;
    u_xlat11 = float(1.0) / u_xlat6.y;
    u_xlat18 = (u_xlatb26) ? u_xlat18 : u_xlat11;
    u_xlat26 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb26 = u_xlat26!=0.0;
    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);
    u_xlat25 = u_xlat25 * u_xlat26;
    u_xlat24 = (-u_xlat24) + _Glossiness;
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
    u_xlat3.xyz = u_xlat12.xyz * u_xlat4.xxx + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat25 = (-u_xlat2.y) + 1.0;
    u_xlat10.x = u_xlat25 * u_xlat25;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat25 = u_xlat25 * u_xlat10.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat25) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat10.xyz = u_xlat5.xyz * vec3(u_xlat18);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat24);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 147 math, 5 textures, 7 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 ambientOrLightmapUV_26;
  ambientOrLightmapUV_26.xy = vec2(0.0, 0.0);
  ambientOrLightmapUV_26.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_26;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_IndirectSpecColor;
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_11 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_12.w) * tmpvar_12.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_6, (tmpvar_13.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_13.w));
  tmpvar_11 = (tmpvar_11 * tmpvar_8);
  tmpvar_10 = vec3(0.0, 0.0, 0.0);
  vec3 worldRefl_14;
  worldRefl_14 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 worldPos_15;
  worldPos_15 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_16;
    tmpvar_16 = normalize(worldRefl_14);
    vec3 tmpvar_17;
    tmpvar_17 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_16);
    vec3 tmpvar_18;
    tmpvar_18 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_16);
    bvec3 tmpvar_19;
    tmpvar_19 = greaterThan (tmpvar_16, vec3(0.0, 0.0, 0.0));
    float tmpvar_20;
    if (tmpvar_19.x) {
      tmpvar_20 = tmpvar_17.x;
    } else {
      tmpvar_20 = tmpvar_18.x;
    };
    float tmpvar_21;
    if (tmpvar_19.y) {
      tmpvar_21 = tmpvar_17.y;
    } else {
      tmpvar_21 = tmpvar_18.y;
    };
    float tmpvar_22;
    if (tmpvar_19.z) {
      tmpvar_22 = tmpvar_17.z;
    } else {
      tmpvar_22 = tmpvar_18.z;
    };
    worldPos_15 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_14 = (worldPos_15 + (tmpvar_16 * min (
      min (tmpvar_20, tmpvar_21)
    , tmpvar_22)));
  };
  tmpvar_10 = (unity_IndirectSpecColor.xyz * tmpvar_8);
  vec3 viewDir_23;
  viewDir_23 = -(tmpvar_7);
  float surfaceReduction_24;
  float specularTerm_25;
  float tmpvar_26;
  tmpvar_26 = (1.0 - _Glossiness);
  vec3 tmpvar_27;
  vec3 inVec_28;
  inVec_28 = (_WorldSpaceLightPos0.xyz + viewDir_23);
  tmpvar_27 = (inVec_28 * inversesqrt(max (0.001, 
    dot (inVec_28, inVec_28)
  )));
  float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, tmpvar_27));
  float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_6, viewDir_23));
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_27));
  float tmpvar_32;
  tmpvar_32 = (tmpvar_26 * tmpvar_26);
  float tmpvar_33;
  tmpvar_33 = (tmpvar_26 * tmpvar_26);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_33 * tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (((tmpvar_29 * tmpvar_29) * (tmpvar_34 - 1.0)) + 1.0);
  float x_36;
  x_36 = (1.0 - tmpvar_9);
  float x_37;
  x_37 = (1.0 - tmpvar_30);
  float tmpvar_38;
  tmpvar_38 = (0.5 + ((2.0 * tmpvar_31) * (tmpvar_31 * tmpvar_26)));
  float tmpvar_39;
  tmpvar_39 = ((1.0 + (
    (tmpvar_38 - 1.0)
   * 
    ((x_36 * x_36) * ((x_36 * x_36) * x_36))
  )) * (1.0 + (
    (tmpvar_38 - 1.0)
   * 
    ((x_37 * x_37) * ((x_37 * x_37) * x_37))
  )));
  float tmpvar_40;
  tmpvar_40 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_30 * (1.0 - tmpvar_32))
     + tmpvar_32)) + (tmpvar_30 * (
      (tmpvar_9 * (1.0 - tmpvar_32))
     + tmpvar_32))) + 1e-05)
  ) * (tmpvar_34 / 
    (((3.141593 * tmpvar_35) * tmpvar_35) + 1e-07)
  )) * 0.7853982);
  specularTerm_25 = tmpvar_40;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_25 = sqrt(max (0.0001, tmpvar_40));
  };
  float tmpvar_41;
  tmpvar_41 = max (0.0, (specularTerm_25 * tmpvar_9));
  specularTerm_25 = tmpvar_41;
  float tmpvar_42;
  tmpvar_42 = (tmpvar_39 * tmpvar_9);
  float tmpvar_43;
  tmpvar_43 = (tmpvar_26 * tmpvar_26);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_24 = (1.0 - ((0.28 * tmpvar_43) * tmpvar_26));
  } else {
    surfaceReduction_24 = (1.0/(((tmpvar_43 * tmpvar_43) + 1.0)));
  };
  float tmpvar_44;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_44 = 1.0;
  } else {
    tmpvar_44 = 0.0;
  };
  specularTerm_25 = (tmpvar_41 * tmpvar_44);
  float x_45;
  x_45 = (1.0 - tmpvar_31);
  float x_46;
  x_46 = (1.0 - tmpvar_30);
  vec3 tmpvar_47;
  tmpvar_47 = (((tmpvar_3 * 
    (tmpvar_11 + (_LightColor0.xyz * tmpvar_42))
  ) + (
    (specularTerm_25 * _LightColor0.xyz)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_45 * x_45) * (
      (x_45 * x_45)
     * x_45))))
  )) + ((surfaceReduction_24 * tmpvar_10) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_46 * x_46) * ((x_46 * x_46) * x_46))
  ))));
  vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = tmpvar_47;
  c_1.w = tmpvar_48.w;
  c_1.xyz = (tmpvar_47 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_49;
  xlat_varoutput_49.xyz = c_1.xyz;
  xlat_varoutput_49.w = 1.0;
  gl_FragData[0] = xlat_varoutput_49;
}


#endif
"
}
SubProgram "metal " {
// Stats: 25 math, 1 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 274
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Matrix 144 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [unity_WorldTransformParams]
Vector 224 [unity_DynamicLightmapST]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  float3 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  float4 tmpvar_11;
  float4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_11 = (_mtl_u.glstate_matrix_mvp * tmpvar_12);
  float4 texcoord_13;
  texcoord_13.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_14;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_15;
  float3 n_16;
  n_16 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_15 = half3(n_16);
  float3 norm_17;
  norm_17 = float3(tmpvar_1);
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].x;
  v_18.y = _mtl_u.unity_WorldToObject[1].x;
  v_18.z = _mtl_u.unity_WorldToObject[2].x;
  v_18.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].y;
  v_19.y = _mtl_u.unity_WorldToObject[1].y;
  v_19.z = _mtl_u.unity_WorldToObject[2].y;
  v_19.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].z;
  v_20.y = _mtl_u.unity_WorldToObject[1].z;
  v_20.z = _mtl_u.unity_WorldToObject[2].z;
  v_20.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  float3 dir_22;
  dir_22 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_23;
  tmpvar_23[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_23[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_23[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = float(tmpvar_4.w);
  half3 normal_25;
  normal_25 = half3(tmpvar_21);
  half3 tangent_26;
  tangent_26 = half3(tmpvar_24.xyz);
  half tangentSign_27;
  tangentSign_27 = half(tmpvar_24.w);
  half xlat_varsign_28;
  float tmpvar_29;
  tmpvar_29 = ((float)tangentSign_27 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_28 = half(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * xlat_varsign_28);
  half3x3 tmpvar_31;
  tmpvar_31[0].x = tangent_26.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = normal_25.x;
  tmpvar_31[1].x = tangent_26.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = normal_25.y;
  tmpvar_31[2].x = tangent_26.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = normal_25.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_31);
  float3 v_32;
  v_32.x = tangentToWorld_5[0].x;
  v_32.y = tangentToWorld_5[1].x;
  v_32.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].y;
  v_33.y = tangentToWorld_5[1].y;
  v_33.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].z;
  v_34.y = tangentToWorld_5[1].z;
  v_34.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_34);
  half4 ambientOrLightmapUV_35;
  ambientOrLightmapUV_35.xy = half2(float2(0.0, 0.0));
  ambientOrLightmapUV_35.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_11;
  _mtl_o.xlv_TEXCOORD0 = texcoord_13;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_15;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_35;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_IndirectSpecColor;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat21;
float u_xlat22;
float u_xlat23;
float u_xlat24;
bool u_xlatb24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat0.w = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
    u_xlat0.z = (-_Glossiness) + 1.0;
    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
    u_xlat3.xy = u_xlat7.zz * u_xlat7.zz + vec2(-1.0, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat3.x + 1.0;
    u_xlat22 = float(1.0) / u_xlat3.y;
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * 3.14159274 + 1.00000001e-07;
    u_xlat23 = u_xlat7.z * u_xlat7.z;
    u_xlat7.x = u_xlat23 / u_xlat7.x;
    u_xlat1.x = dot(u_xlat2.xyz, (-u_xlat1.xyz));
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat8.x = (-u_xlat0.z) * u_xlat0.z + 1.0;
    u_xlat15 = u_xlat1.x * u_xlat8.x + u_xlat7.z;
    u_xlat23 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat23 = max(u_xlat23, 0.0);
    u_xlat8.x = u_xlat23 * u_xlat8.x + u_xlat7.z;
    u_xlat21 = u_xlat7.z * u_xlat0.z;
    u_xlat21 = (-u_xlat21) * 0.280000001 + 1.0;
    u_xlat8.x = u_xlat8.x * u_xlat1.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat8.x = u_xlat23 * u_xlat15 + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + 9.99999975e-06;
    u_xlat8.x = 2.0 / u_xlat8.x;
    u_xlat7.x = u_xlat7.x * u_xlat8.x;
    u_xlat7.x = u_xlat7.x * 0.785398185;
    u_xlat8.x = max(u_xlat7.x, 9.99999975e-05);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat7.x = (u_xlatb15) ? u_xlat8.x : u_xlat7.x;
    u_xlat21 = (u_xlatb15) ? u_xlat21 : u_xlat22;
    u_xlat7.x = u_xlat23 * u_xlat7.x;
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat8.xyz = _Color.xyz * u_xlat10_3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat24 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat7.x = u_xlat7.x * u_xlat24;
    u_xlat4.xyz = u_xlat7.xxx * _LightColor0.xyz;
    u_xlat7.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = dot(u_xlat0.xx, u_xlat0.zz);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat14 = u_xlat7.x * u_xlat7.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat7.xxx + u_xlat8.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
    u_xlat7.x = u_xlat1.x * u_xlat1.x;
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat1.x * u_xlat7.x;
    u_xlat14 = u_xlat0.x * u_xlat7.x + 1.0;
    u_xlat1.x = (-u_xlat23) + 1.0;
    u_xlat24 = u_xlat1.x * u_xlat1.x;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat1.x = u_xlat1.x * u_xlat24;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + 1.0;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat23 * u_xlat0.x;
    u_xlat5.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat10_6 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_0 = max(u_xlat10_6.w, 9.99999975e-05);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat14 = u_xlat14 + 0.5;
    u_xlat10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat1.x = u_xlat10_2.w * unity_DynamicLightmap_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat1.xxx;
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat16_0);
    u_xlat10_6 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat0.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.x = u_xlat10_6.y * _OcclusionStrength + u_xlat0.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat0.xxx * unity_IndirectSpecColor.xyz;
    u_xlat0.xzw = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat1.x = (-u_xlat1.x) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat5.xyz = (-u_xlat8.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat5.xyz + u_xlat8.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat2.xyz + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat0.xzw * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 152 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_12;
  n_12 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_16;
  vec4 o_17;
  vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_8 * 0.5);
  vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_8.zw;
  vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  vec3 col_21;
  vec4 ndotl_22;
  vec4 lengthSq_23;
  vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_23 = (tmpvar_24 * tmpvar_24);
  lengthSq_23 = (lengthSq_23 + (tmpvar_25 * tmpvar_25));
  lengthSq_23 = (lengthSq_23 + (tmpvar_26 * tmpvar_26));
  ndotl_22 = (tmpvar_24 * tmpvar_16.x);
  ndotl_22 = (ndotl_22 + (tmpvar_25 * tmpvar_16.y));
  ndotl_22 = (ndotl_22 + (tmpvar_26 * tmpvar_16.z));
  vec4 tmpvar_27;
  tmpvar_27 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_22 * inversesqrt(lengthSq_23)));
  ndotl_22 = tmpvar_27;
  vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_27 * (1.0/((1.0 + 
    (lengthSq_23 * unity_4LightAtten0)
  ))));
  col_21 = (unity_LightColor[0].xyz * tmpvar_28.x);
  col_21 = (col_21 + (unity_LightColor[1].xyz * tmpvar_28.y));
  col_21 = (col_21 + (unity_LightColor[2].xyz * tmpvar_28.z));
  col_21 = (col_21 + (unity_LightColor[3].xyz * tmpvar_28.w));
  ambientOrLightmapUV_20.xyz = col_21;
  vec3 ambient_29;
  ambient_29 = ambientOrLightmapUV_20.xyz;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_29 = (col_21 * ((col_21 * 
      ((col_21 * 0.305306) + 0.6821711)
    ) + 0.01252288));
  };
  vec3 x1_30;
  vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_16.xyzz * tmpvar_16.yzzx);
  x1_30.x = dot (unity_SHBr, tmpvar_31);
  x1_30.y = dot (unity_SHBg, tmpvar_31);
  x1_30.z = dot (unity_SHBb, tmpvar_31);
  ambient_29 = (ambient_29 + (x1_30 + (unity_SHC.xyz * 
    ((tmpvar_16.x * tmpvar_16.x) - (tmpvar_16.y * tmpvar_16.y))
  )));
  ambientOrLightmapUV_20.xyz = ambient_29;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = n_12;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD6 = o_17;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_IndirectSpecColor;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  tmpvar_12 = vec3(0.0, 0.0, 0.0);
  tmpvar_11 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  vec3 ambient_13;
  ambient_13 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_14;
  ambient_contrib_14 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_15;
    tmpvar_15.w = 1.0;
    tmpvar_15.xyz = tmpvar_6;
    vec3 x1_16;
    vec3 texCoord_17;
    vec3 tmpvar_18;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_19;
      tmpvar_19.w = 1.0;
      tmpvar_19.xyz = xlv_TEXCOORD8;
      tmpvar_18 = (unity_ProbeVolumeWorldToObject * tmpvar_19).xyz;
    } else {
      tmpvar_18 = xlv_TEXCOORD8;
    };
    vec3 tmpvar_20;
    tmpvar_20 = ((tmpvar_18 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_17.yz = tmpvar_20.yz;
    texCoord_17.x = (tmpvar_20.x * 0.25);
    float tmpvar_21;
    float tmpvar_22;
    tmpvar_22 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_21 = clamp (texCoord_17.x, tmpvar_22, (0.25 - tmpvar_22));
    texCoord_17.x = tmpvar_21;
    vec4 tmpvar_23;
    tmpvar_23 = texture3D (unity_ProbeVolumeSH, texCoord_17);
    texCoord_17.x = (tmpvar_21 + 0.25);
    vec4 tmpvar_24;
    tmpvar_24 = texture3D (unity_ProbeVolumeSH, texCoord_17);
    texCoord_17.x = (tmpvar_21 + 0.5);
    x1_16.x = dot (tmpvar_23, tmpvar_15);
    x1_16.y = dot (tmpvar_24, tmpvar_15);
    x1_16.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_17), tmpvar_15);
    ambient_contrib_14 = x1_16;
  } else {
    vec4 tmpvar_25;
    tmpvar_25.w = 1.0;
    tmpvar_25.xyz = tmpvar_6;
    vec3 x_26;
    x_26.x = dot (unity_SHAr, tmpvar_25);
    x_26.y = dot (unity_SHAg, tmpvar_25);
    x_26.z = dot (unity_SHAb, tmpvar_25);
    ambient_contrib_14 = x_26;
  };
  vec3 tmpvar_27;
  tmpvar_27 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_14));
  ambient_13 = tmpvar_27;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_13 = max (((1.055 * 
      pow (max (tmpvar_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_12 = (ambient_13 * tmpvar_8);
  tmpvar_10 = (unity_IndirectSpecColor.xyz * tmpvar_8);
  vec3 viewDir_28;
  viewDir_28 = -(tmpvar_7);
  float surfaceReduction_29;
  float specularTerm_30;
  float tmpvar_31;
  tmpvar_31 = (1.0 - _Glossiness);
  vec3 tmpvar_32;
  vec3 inVec_33;
  inVec_33 = (_WorldSpaceLightPos0.xyz + viewDir_28);
  tmpvar_32 = (inVec_33 * inversesqrt(max (0.001, 
    dot (inVec_33, inVec_33)
  )));
  float tmpvar_34;
  tmpvar_34 = max (0.0, dot (tmpvar_6, tmpvar_32));
  float tmpvar_35;
  tmpvar_35 = max (0.0, dot (tmpvar_6, viewDir_28));
  float tmpvar_36;
  tmpvar_36 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_32));
  float tmpvar_37;
  tmpvar_37 = (tmpvar_31 * tmpvar_31);
  float tmpvar_38;
  tmpvar_38 = (tmpvar_31 * tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = (tmpvar_38 * tmpvar_38);
  float tmpvar_40;
  tmpvar_40 = (((tmpvar_34 * tmpvar_34) * (tmpvar_39 - 1.0)) + 1.0);
  float x_41;
  x_41 = (1.0 - tmpvar_9);
  float x_42;
  x_42 = (1.0 - tmpvar_35);
  float tmpvar_43;
  tmpvar_43 = (0.5 + ((2.0 * tmpvar_36) * (tmpvar_36 * tmpvar_31)));
  float tmpvar_44;
  tmpvar_44 = ((1.0 + (
    (tmpvar_43 - 1.0)
   * 
    ((x_41 * x_41) * ((x_41 * x_41) * x_41))
  )) * (1.0 + (
    (tmpvar_43 - 1.0)
   * 
    ((x_42 * x_42) * ((x_42 * x_42) * x_42))
  )));
  float tmpvar_45;
  tmpvar_45 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_35 * (1.0 - tmpvar_37))
     + tmpvar_37)) + (tmpvar_35 * (
      (tmpvar_9 * (1.0 - tmpvar_37))
     + tmpvar_37))) + 1e-05)
  ) * (tmpvar_39 / 
    (((3.141593 * tmpvar_40) * tmpvar_40) + 1e-07)
  )) * 0.7853982);
  specularTerm_30 = tmpvar_45;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_30 = sqrt(max (0.0001, tmpvar_45));
  };
  float tmpvar_46;
  tmpvar_46 = max (0.0, (specularTerm_30 * tmpvar_9));
  specularTerm_30 = tmpvar_46;
  float tmpvar_47;
  tmpvar_47 = (tmpvar_44 * tmpvar_9);
  float tmpvar_48;
  tmpvar_48 = (tmpvar_31 * tmpvar_31);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_29 = (1.0 - ((0.28 * tmpvar_48) * tmpvar_31));
  } else {
    surfaceReduction_29 = (1.0/(((tmpvar_48 * tmpvar_48) + 1.0)));
  };
  float tmpvar_49;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_49 = 1.0;
  } else {
    tmpvar_49 = 0.0;
  };
  specularTerm_30 = (tmpvar_46 * tmpvar_49);
  float x_50;
  x_50 = (1.0 - tmpvar_36);
  float x_51;
  x_51 = (1.0 - tmpvar_35);
  vec3 tmpvar_52;
  tmpvar_52 = (((tmpvar_3 * 
    (tmpvar_12 + (tmpvar_11 * tmpvar_47))
  ) + (
    (specularTerm_30 * tmpvar_11)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_50 * x_50) * (
      (x_50 * x_50)
     * x_50))))
  )) + ((surfaceReduction_29 * tmpvar_10) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_51 * x_51) * ((x_51 * x_51) * x_51))
  ))));
  vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = tmpvar_52;
  c_1.w = tmpvar_53.w;
  c_1.xyz = (tmpvar_52 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_54;
  xlat_varoutput_54.xyz = c_1.xyz;
  xlat_varoutput_54.w = 1.0;
  gl_FragData[0] = xlat_varoutput_54;
}


#endif
"
}
SubProgram "metal " {
// Stats: 64 math, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 434
Matrix 192 [glstate_matrix_mvp]
Matrix 256 [unity_ObjectToWorld]
Matrix 320 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 32 [unity_4LightPosX0]
Vector 48 [unity_4LightPosY0]
Vector 64 [unity_4LightPosZ0]
VectorHalf 80 [unity_4LightAtten0] 4
VectorHalf 88 [unity_LightColor] 4 8
VectorHalf 152 [unity_SHBr] 4
VectorHalf 160 [unity_SHBg] 4
VectorHalf 168 [unity_SHBb] 4
VectorHalf 176 [unity_SHC] 4
VectorHalf 384 [unity_ColorSpaceLuminance] 4
Vector 400 [_MainTex_ST]
Vector 416 [_DetailAlbedoMap_ST]
ScalarHalf 432 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4 unity_4LightPosX0;
  float4 unity_4LightPosY0;
  float4 unity_4LightPosZ0;
  half4 unity_4LightAtten0;
  half4 unity_LightColor[8];
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float3 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_7 = tmpvar_8.xyz;
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_19);
  float4 o_20;
  float4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  float2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _mtl_u._ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  half3 normalWorld_23;
  normalWorld_23 = half3(tmpvar_19);
  half4 ambientOrLightmapUV_24;
  ambientOrLightmapUV_24.w = half(0.0);
  float3 lightColor0_25;
  lightColor0_25 = float3(_mtl_u.unity_LightColor[0].xyz);
  float3 lightColor1_26;
  lightColor1_26 = float3(_mtl_u.unity_LightColor[1].xyz);
  float3 lightColor2_27;
  lightColor2_27 = float3(_mtl_u.unity_LightColor[2].xyz);
  float3 lightColor3_28;
  lightColor3_28 = float3(_mtl_u.unity_LightColor[3].xyz);
  float4 lightAttenSq_29;
  lightAttenSq_29 = float4(_mtl_u.unity_4LightAtten0);
  float3 normal_30;
  normal_30 = float3(normalWorld_23);
  float3 col_31;
  float4 ndotl_32;
  float4 lengthSq_33;
  float4 tmpvar_34;
  tmpvar_34 = (_mtl_u.unity_4LightPosX0 - tmpvar_8.x);
  float4 tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_4LightPosY0 - tmpvar_8.y);
  float4 tmpvar_36;
  tmpvar_36 = (_mtl_u.unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_33 = (tmpvar_34 * tmpvar_34);
  lengthSq_33 = (lengthSq_33 + (tmpvar_35 * tmpvar_35));
  lengthSq_33 = (lengthSq_33 + (tmpvar_36 * tmpvar_36));
  ndotl_32 = (tmpvar_34 * normal_30.x);
  ndotl_32 = (ndotl_32 + (tmpvar_35 * normal_30.y));
  ndotl_32 = (ndotl_32 + (tmpvar_36 * normal_30.z));
  float4 tmpvar_37;
  tmpvar_37 = max (float4(0.0, 0.0, 0.0, 0.0), (ndotl_32 * rsqrt(lengthSq_33)));
  ndotl_32 = tmpvar_37;
  float4 tmpvar_38;
  tmpvar_38 = (tmpvar_37 * (1.0/((1.0 + 
    (lengthSq_33 * lightAttenSq_29)
  ))));
  col_31 = (lightColor0_25 * tmpvar_38.x);
  col_31 = (col_31 + (lightColor1_26 * tmpvar_38.y));
  col_31 = (col_31 + (lightColor2_27 * tmpvar_38.z));
  col_31 = (col_31 + (lightColor3_28 * tmpvar_38.w));
  ambientOrLightmapUV_24.xyz = half3(col_31);
  half3 ambient_39;
  ambient_39 = ambientOrLightmapUV_24.xyz;
  bool tmpvar_40;
  tmpvar_40 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_40) {
    ambient_39 = (ambientOrLightmapUV_24.xyz * ((ambientOrLightmapUV_24.xyz * 
      ((ambientOrLightmapUV_24.xyz * (half)0.305306) + (half)0.6821711)
    ) + (half)0.01252288));
  };
  half3 x1_41;
  half4 tmpvar_42;
  tmpvar_42 = (normalWorld_23.xyzz * normalWorld_23.yzzx);
  x1_41.x = dot (_mtl_u.unity_SHBr, tmpvar_42);
  x1_41.y = dot (_mtl_u.unity_SHBg, tmpvar_42);
  x1_41.z = dot (_mtl_u.unity_SHBb, tmpvar_42);
  ambient_39 = (ambient_39 + (x1_41 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_23.x * normalWorld_23.x) - (normalWorld_23.y * normalWorld_23.y))
  )));
  ambientOrLightmapUV_24.xyz = ambient_39;
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_24;
  _mtl_o.xlv_TEXCOORD6 = o_20;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_7;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat2.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat2.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat2.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat3.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat3.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat3.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat3.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat3.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat4 = inversesqrt(u_xlat3);
    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat4;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat3 * u_xlat1;
    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz;
    u_xlatb19 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat1.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat19 = u_xlat2.y * u_xlat2.y;
    u_xlat19 = u_xlat2.x * u_xlat2.x + (-u_xlat19);
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_IndirectSpecColor;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
bool u_xlatb5;
vec3 u_xlat6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
lowp vec4 u_xlat10_7;
vec3 u_xlat10;
float u_xlat11;
float u_xlat12;
vec3 u_xlat13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
float u_xlat24;
float u_xlat25;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
float u_xlat29;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat25 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD4.xyz;
    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat3.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;
    u_xlat27 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat12 = (-_OcclusionStrength) + 1.0;
    u_xlat12 = u_xlat10_5.y * _OcclusionStrength + u_xlat12;
    u_xlat4.xzw = u_xlat10_4.xxx * _LightColor0.xyz;
    u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb5){
        u_xlatb5 = unity_ProbeVolumeParams.y==1.0;
        u_xlat13.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat13.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat13.xyz;
        u_xlat13.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat13.xyz;
        u_xlat13.xyz = u_xlat13.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb5)) ? u_xlat13.xyz : vs_TEXCOORD8.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13.x = u_xlat5.y * 0.25;
        u_xlat6.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat14 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat13.x = max(u_xlat13.x, u_xlat6.x);
        u_xlat5.x = min(u_xlat14, u_xlat13.x);
        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat2.w = 1.0;
        u_xlat6.x = dot(u_xlat10_6, u_xlat2);
        u_xlat6.y = dot(u_xlat10_7, u_xlat2);
        u_xlat6.z = dot(u_xlat10_5, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat6.x = dot(unity_SHAr, u_xlat2);
        u_xlat6.y = dot(unity_SHAg, u_xlat2);
        u_xlat6.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD5.xyz;
    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb26 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat6.xyz = log2(u_xlat5.xyz);
    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = (bool(u_xlatb26)) ? u_xlat6.xyz : u_xlat5.xyz;
    u_xlat6.xyz = vec3(u_xlat12) * unity_IndirectSpecColor.xyz;
    u_xlat29 = (-_Glossiness) + 1.0;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
    u_xlat25 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat7.xyz = vec3(u_xlat25) * u_xlat7.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat3.x = (-u_xlat29) * u_xlat29 + 1.0;
    u_xlat11 = u_xlat2.x * u_xlat3.x + u_xlat18;
    u_xlat3.x = u_xlat27 * u_xlat3.x + u_xlat18;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat27 * u_xlat11 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat11 = u_xlat18 * u_xlat18;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat7.xy = vec2(u_xlat18) * vec2(u_xlat18) + vec2(-1.0, 1.0);
    u_xlat25 = u_xlat25 * u_xlat7.x + 1.0;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat25 = u_xlat25 * 3.14159274 + 1.00000001e-07;
    u_xlat25 = u_xlat11 / u_xlat25;
    u_xlat11 = (-u_xlat27) + 1.0;
    u_xlat19 = u_xlat11 * u_xlat11;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat11 = u_xlat11 * u_xlat19;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat19 = u_xlat2.x * u_xlat2.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat2.x = u_xlat2.x * u_xlat19;
    u_xlat19 = u_xlat2.y * u_xlat2.y;
    u_xlat19 = dot(vec2(u_xlat19), vec2(u_xlat29));
    u_xlat19 = u_xlat19 + -0.5;
    u_xlat11 = u_xlat19 * u_xlat11 + 1.0;
    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat25 = u_xlat25 * u_xlat3.x;
    u_xlat25 = u_xlat25 * 0.785398185;
    u_xlat3.x = max(u_xlat25, 9.99999975e-05);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat25 = (u_xlatb26) ? u_xlat3.x : u_xlat25;
    u_xlat25 = u_xlat27 * u_xlat25;
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat3.x = u_xlat27 * u_xlat11;
    u_xlat18 = u_xlat18 * u_xlat29;
    u_xlat18 = (-u_xlat18) * 0.280000001 + 1.0;
    u_xlat11 = float(1.0) / u_xlat7.y;
    u_xlat18 = (u_xlatb26) ? u_xlat18 : u_xlat11;
    u_xlat26 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb26 = u_xlat26!=0.0;
    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);
    u_xlat25 = u_xlat25 * u_xlat26;
    u_xlat24 = (-u_xlat24) + _Glossiness;
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat4.xzw;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat3.xyz;
    u_xlat4.xyz = u_xlat4.xzw * vec3(u_xlat25);
    u_xlat25 = (-u_xlat2.y) + 1.0;
    u_xlat10.x = u_xlat25 * u_xlat25;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat25 = u_xlat25 * u_xlat10.x;
    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat25) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat10.xyz = u_xlat6.xyz * vec3(u_xlat18);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat24);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 148 math, 6 textures, 7 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 o_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_8 * 0.5);
  vec2 tmpvar_28;
  tmpvar_28.x = tmpvar_27.x;
  tmpvar_28.y = (tmpvar_27.y * _ProjectionParams.x);
  o_26.xy = (tmpvar_28 + tmpvar_27.w);
  o_26.zw = tmpvar_8.zw;
  vec4 ambientOrLightmapUV_29;
  ambientOrLightmapUV_29.xy = vec2(0.0, 0.0);
  ambientOrLightmapUV_29.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_29;
  xlv_TEXCOORD6 = o_26;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_IndirectSpecColor;
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_6, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_12 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_6, (tmpvar_14.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_14.w));
  tmpvar_12 = (tmpvar_12 * tmpvar_8);
  tmpvar_10 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec3 worldRefl_15;
  worldRefl_15 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 worldPos_16;
  worldPos_16 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_17;
    tmpvar_17 = normalize(worldRefl_15);
    vec3 tmpvar_18;
    tmpvar_18 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_17);
    vec3 tmpvar_19;
    tmpvar_19 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_17);
    bvec3 tmpvar_20;
    tmpvar_20 = greaterThan (tmpvar_17, vec3(0.0, 0.0, 0.0));
    float tmpvar_21;
    if (tmpvar_20.x) {
      tmpvar_21 = tmpvar_18.x;
    } else {
      tmpvar_21 = tmpvar_19.x;
    };
    float tmpvar_22;
    if (tmpvar_20.y) {
      tmpvar_22 = tmpvar_18.y;
    } else {
      tmpvar_22 = tmpvar_19.y;
    };
    float tmpvar_23;
    if (tmpvar_20.z) {
      tmpvar_23 = tmpvar_18.z;
    } else {
      tmpvar_23 = tmpvar_19.z;
    };
    worldPos_16 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_15 = (worldPos_16 + (tmpvar_17 * min (
      min (tmpvar_21, tmpvar_22)
    , tmpvar_23)));
  };
  tmpvar_11 = (unity_IndirectSpecColor.xyz * tmpvar_8);
  vec3 viewDir_24;
  viewDir_24 = -(tmpvar_7);
  float surfaceReduction_25;
  float specularTerm_26;
  float tmpvar_27;
  tmpvar_27 = (1.0 - _Glossiness);
  vec3 tmpvar_28;
  vec3 inVec_29;
  inVec_29 = (_WorldSpaceLightPos0.xyz + viewDir_24);
  tmpvar_28 = (inVec_29 * inversesqrt(max (0.001, 
    dot (inVec_29, inVec_29)
  )));
  float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_6, tmpvar_28));
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_6, viewDir_24));
  float tmpvar_32;
  tmpvar_32 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_28));
  float tmpvar_33;
  tmpvar_33 = (tmpvar_27 * tmpvar_27);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_27 * tmpvar_27);
  float tmpvar_35;
  tmpvar_35 = (tmpvar_34 * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (((tmpvar_30 * tmpvar_30) * (tmpvar_35 - 1.0)) + 1.0);
  float x_37;
  x_37 = (1.0 - tmpvar_9);
  float x_38;
  x_38 = (1.0 - tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = (0.5 + ((2.0 * tmpvar_32) * (tmpvar_32 * tmpvar_27)));
  float tmpvar_40;
  tmpvar_40 = ((1.0 + (
    (tmpvar_39 - 1.0)
   * 
    ((x_37 * x_37) * ((x_37 * x_37) * x_37))
  )) * (1.0 + (
    (tmpvar_39 - 1.0)
   * 
    ((x_38 * x_38) * ((x_38 * x_38) * x_38))
  )));
  float tmpvar_41;
  tmpvar_41 = (((2.0 / 
    (((tmpvar_9 * (
      (tmpvar_31 * (1.0 - tmpvar_33))
     + tmpvar_33)) + (tmpvar_31 * (
      (tmpvar_9 * (1.0 - tmpvar_33))
     + tmpvar_33))) + 1e-05)
  ) * (tmpvar_35 / 
    (((3.141593 * tmpvar_36) * tmpvar_36) + 1e-07)
  )) * 0.7853982);
  specularTerm_26 = tmpvar_41;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_26 = sqrt(max (0.0001, tmpvar_41));
  };
  float tmpvar_42;
  tmpvar_42 = max (0.0, (specularTerm_26 * tmpvar_9));
  specularTerm_26 = tmpvar_42;
  float tmpvar_43;
  tmpvar_43 = (tmpvar_40 * tmpvar_9);
  float tmpvar_44;
  tmpvar_44 = (tmpvar_27 * tmpvar_27);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_25 = (1.0 - ((0.28 * tmpvar_44) * tmpvar_27));
  } else {
    surfaceReduction_25 = (1.0/(((tmpvar_44 * tmpvar_44) + 1.0)));
  };
  float tmpvar_45;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_45 = 1.0;
  } else {
    tmpvar_45 = 0.0;
  };
  specularTerm_26 = (tmpvar_42 * tmpvar_45);
  float x_46;
  x_46 = (1.0 - tmpvar_32);
  float x_47;
  x_47 = (1.0 - tmpvar_31);
  vec3 tmpvar_48;
  tmpvar_48 = (((tmpvar_3 * 
    (tmpvar_12 + (tmpvar_10 * tmpvar_43))
  ) + (
    (specularTerm_26 * tmpvar_10)
   * 
    (tmpvar_4 + ((1.0 - tmpvar_4) * ((x_46 * x_46) * (
      (x_46 * x_46)
     * x_46))))
  )) + ((surfaceReduction_25 * tmpvar_11) * mix (tmpvar_4, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)
  ), vec3(
    ((x_47 * x_47) * ((x_47 * x_47) * x_47))
  ))));
  vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = tmpvar_48;
  c_1.w = tmpvar_49.w;
  c_1.xyz = (tmpvar_48 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_50;
  xlat_varoutput_50.xyz = c_1.xyz;
  xlat_varoutput_50.w = 1.0;
  gl_FragData[0] = xlat_varoutput_50;
}


#endif
"
}
SubProgram "metal " {
// Stats: 28 math, 1 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 290
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [unity_WorldTransformParams]
Vector 240 [unity_DynamicLightmapST]
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  float3 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  float4 tmpvar_11;
  float4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_11 = (_mtl_u.glstate_matrix_mvp * tmpvar_12);
  float4 texcoord_13;
  texcoord_13.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_14;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_15;
  float3 n_16;
  n_16 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_15 = half3(n_16);
  float3 norm_17;
  norm_17 = float3(tmpvar_1);
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].x;
  v_18.y = _mtl_u.unity_WorldToObject[1].x;
  v_18.z = _mtl_u.unity_WorldToObject[2].x;
  v_18.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].y;
  v_19.y = _mtl_u.unity_WorldToObject[1].y;
  v_19.z = _mtl_u.unity_WorldToObject[2].y;
  v_19.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].z;
  v_20.y = _mtl_u.unity_WorldToObject[1].z;
  v_20.z = _mtl_u.unity_WorldToObject[2].z;
  v_20.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  float3 dir_22;
  dir_22 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_23;
  tmpvar_23[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_23[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_23[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = float(tmpvar_4.w);
  half3 normal_25;
  normal_25 = half3(tmpvar_21);
  half3 tangent_26;
  tangent_26 = half3(tmpvar_24.xyz);
  half tangentSign_27;
  tangentSign_27 = half(tmpvar_24.w);
  half xlat_varsign_28;
  float tmpvar_29;
  tmpvar_29 = ((float)tangentSign_27 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_28 = half(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * xlat_varsign_28);
  half3x3 tmpvar_31;
  tmpvar_31[0].x = tangent_26.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = normal_25.x;
  tmpvar_31[1].x = tangent_26.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = normal_25.y;
  tmpvar_31[2].x = tangent_26.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = normal_25.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_31);
  float3 v_32;
  v_32.x = tangentToWorld_5[0].x;
  v_32.y = tangentToWorld_5[1].x;
  v_32.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].y;
  v_33.y = tangentToWorld_5[1].y;
  v_33.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].z;
  v_34.y = tangentToWorld_5[1].z;
  v_34.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_34);
  float4 o_35;
  float4 tmpvar_36;
  tmpvar_36 = (tmpvar_11 * 0.5);
  float2 tmpvar_37;
  tmpvar_37.x = tmpvar_36.x;
  tmpvar_37.y = (tmpvar_36.y * _mtl_u._ProjectionParams.x);
  o_35.xy = (tmpvar_37 + tmpvar_36.w);
  o_35.zw = tmpvar_11.zw;
  half4 ambientOrLightmapUV_38;
  ambientOrLightmapUV_38.xy = half2(float2(0.0, 0.0));
  ambientOrLightmapUV_38.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_11;
  _mtl_o.xlv_TEXCOORD0 = texcoord_13;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_15;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_38;
  _mtl_o.xlv_TEXCOORD6 = o_35;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat2.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat2.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat2.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat3.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat3.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat3.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat3.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat3.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_IndirectSpecColor;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat21;
float u_xlat22;
float u_xlat23;
float u_xlat24;
bool u_xlatb24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat0.w = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
    u_xlat0.z = (-_Glossiness) + 1.0;
    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
    u_xlat3.xy = u_xlat7.zz * u_xlat7.zz + vec2(-1.0, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat3.x + 1.0;
    u_xlat22 = float(1.0) / u_xlat3.y;
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * 3.14159274 + 1.00000001e-07;
    u_xlat23 = u_xlat7.z * u_xlat7.z;
    u_xlat7.x = u_xlat23 / u_xlat7.x;
    u_xlat1.x = dot(u_xlat2.xyz, (-u_xlat1.xyz));
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat8.x = (-u_xlat0.z) * u_xlat0.z + 1.0;
    u_xlat15 = u_xlat1.x * u_xlat8.x + u_xlat7.z;
    u_xlat23 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat23 = max(u_xlat23, 0.0);
    u_xlat8.x = u_xlat23 * u_xlat8.x + u_xlat7.z;
    u_xlat21 = u_xlat7.z * u_xlat0.z;
    u_xlat21 = (-u_xlat21) * 0.280000001 + 1.0;
    u_xlat8.x = u_xlat8.x * u_xlat1.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat8.x = u_xlat23 * u_xlat15 + u_xlat8.x;
    u_xlat8.x = u_xlat8.x + 9.99999975e-06;
    u_xlat8.x = 2.0 / u_xlat8.x;
    u_xlat7.x = u_xlat7.x * u_xlat8.x;
    u_xlat7.x = u_xlat7.x * 0.785398185;
    u_xlat8.x = max(u_xlat7.x, 9.99999975e-05);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat7.x = (u_xlatb15) ? u_xlat8.x : u_xlat7.x;
    u_xlat21 = (u_xlatb15) ? u_xlat21 : u_xlat22;
    u_xlat7.x = u_xlat23 * u_xlat7.x;
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat8.xyz = _Color.xyz * u_xlat10_3.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat24 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat7.x = u_xlat7.x * u_xlat24;
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat4.xyz = u_xlat10_4.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
    u_xlat7.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = dot(u_xlat0.xx, u_xlat0.zz);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat14 = u_xlat7.x * u_xlat7.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat6.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat8.xyz;
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat7.x = u_xlat1.x * u_xlat1.x;
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat1.x * u_xlat7.x;
    u_xlat14 = u_xlat0.x * u_xlat7.x + 1.0;
    u_xlat1.x = (-u_xlat23) + 1.0;
    u_xlat24 = u_xlat1.x * u_xlat1.x;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat1.x = u_xlat1.x * u_xlat24;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + 1.0;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
    u_xlat0.x = u_xlat23 * u_xlat0.x;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat10_6 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_0 = max(u_xlat10_6.w, 9.99999975e-05);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat14 = u_xlat14 + 0.5;
    u_xlat10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat1.x = u_xlat10_2.w * unity_DynamicLightmap_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat1.xxx;
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat16_0);
    u_xlat10_6 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat0.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.x = u_xlat10_6.y * _OcclusionStrength + u_xlat0.x;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat0.xxx * unity_IndirectSpecColor.xyz;
    u_xlat0.xzw = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat1.x = (-u_xlat1.x) + _Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat4.xyz = (-u_xlat8.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat4.xyz + u_xlat8.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat2.xyz + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xzw * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 199 math, 7 textures, 15 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_12;
  n_12 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_16;
  vec4 ambientOrLightmapUV_17;
  ambientOrLightmapUV_17 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_18;
  ambient_18 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_18 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_16.xyzz * tmpvar_16.yzzx);
  x1_19.x = dot (unity_SHBr, tmpvar_20);
  x1_19.y = dot (unity_SHBg, tmpvar_20);
  x1_19.z = dot (unity_SHBb, tmpvar_20);
  ambient_18 = (ambient_18 + (x1_19 + (unity_SHC.xyz * 
    ((tmpvar_16.x * tmpvar_16.x) - (tmpvar_16.y * tmpvar_16.y))
  )));
  ambientOrLightmapUV_17.xyz = ambient_18;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = n_12;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_17;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  float tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (tmpvar_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_9;
  float outModifiedAlpha_10;
  diffColor_9 = ((tmpvar_4 * tmpvar_6) * tmpvar_2);
  outModifiedAlpha_10 = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  float tmpvar_11;
  tmpvar_11 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_7, _WorldSpaceLightPos0.xyz));
  float tmpvar_13;
  tmpvar_13 = (1.0 - _Glossiness);
  vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_8 - (2.0 * (
    dot (tmpvar_7, tmpvar_8)
   * tmpvar_7)));
  vec3 tmpvar_15;
  vec3 tmpvar_16;
  tmpvar_16 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_17;
  ambient_17 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_18;
  ambient_contrib_18 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_19;
    tmpvar_19.w = 1.0;
    tmpvar_19.xyz = tmpvar_7;
    vec3 x1_20;
    vec3 texCoord_21;
    vec3 tmpvar_22;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_23;
      tmpvar_23.w = 1.0;
      tmpvar_23.xyz = xlv_TEXCOORD8;
      tmpvar_22 = (unity_ProbeVolumeWorldToObject * tmpvar_23).xyz;
    } else {
      tmpvar_22 = xlv_TEXCOORD8;
    };
    vec3 tmpvar_24;
    tmpvar_24 = ((tmpvar_22 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_21.yz = tmpvar_24.yz;
    texCoord_21.x = (tmpvar_24.x * 0.25);
    float tmpvar_25;
    float tmpvar_26;
    tmpvar_26 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_25 = clamp (texCoord_21.x, tmpvar_26, (0.25 - tmpvar_26));
    texCoord_21.x = tmpvar_25;
    vec4 tmpvar_27;
    tmpvar_27 = texture3D (unity_ProbeVolumeSH, texCoord_21);
    texCoord_21.x = (tmpvar_25 + 0.25);
    vec4 tmpvar_28;
    tmpvar_28 = texture3D (unity_ProbeVolumeSH, texCoord_21);
    texCoord_21.x = (tmpvar_25 + 0.5);
    x1_20.x = dot (tmpvar_27, tmpvar_19);
    x1_20.y = dot (tmpvar_28, tmpvar_19);
    x1_20.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_21), tmpvar_19);
    ambient_contrib_18 = x1_20;
  } else {
    vec4 tmpvar_29;
    tmpvar_29.w = 1.0;
    tmpvar_29.xyz = tmpvar_7;
    vec3 x_30;
    x_30.x = dot (unity_SHAr, tmpvar_29);
    x_30.y = dot (unity_SHAg, tmpvar_29);
    x_30.z = dot (unity_SHAb, tmpvar_29);
    ambient_contrib_18 = x_30;
  };
  vec3 tmpvar_31;
  tmpvar_31 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_18));
  ambient_17 = tmpvar_31;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_17 = max (((1.055 * 
      pow (max (tmpvar_31, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_16 = (ambient_17 * tmpvar_11);
  tmpvar_15 = vec3(0.0, 0.0, 0.0);
  vec3 specular_32;
  vec3 worldRefl_33;
  worldRefl_33 = tmpvar_14;
  vec3 worldPos_34;
  worldPos_34 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_35;
    tmpvar_35 = normalize(tmpvar_14);
    vec3 tmpvar_36;
    tmpvar_36 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_35);
    vec3 tmpvar_37;
    tmpvar_37 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_35);
    bvec3 tmpvar_38;
    tmpvar_38 = greaterThan (tmpvar_35, vec3(0.0, 0.0, 0.0));
    float tmpvar_39;
    if (tmpvar_38.x) {
      tmpvar_39 = tmpvar_36.x;
    } else {
      tmpvar_39 = tmpvar_37.x;
    };
    float tmpvar_40;
    if (tmpvar_38.y) {
      tmpvar_40 = tmpvar_36.y;
    } else {
      tmpvar_40 = tmpvar_37.y;
    };
    float tmpvar_41;
    if (tmpvar_38.z) {
      tmpvar_41 = tmpvar_36.z;
    } else {
      tmpvar_41 = tmpvar_37.z;
    };
    worldPos_34 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_33 = (worldPos_34 + (tmpvar_35 * min (
      min (tmpvar_39, tmpvar_40)
    , tmpvar_41)));
  };
  vec4 tmpvar_42;
  tmpvar_42.xyz = worldRefl_33;
  tmpvar_42.w = ((tmpvar_13 * (1.7 - 
    (0.7 * tmpvar_13)
  )) * 6.0);
  vec4 tmpvar_43;
  tmpvar_43 = textureCubeLod (unity_SpecCube0, worldRefl_33, tmpvar_42.w);
  vec3 tmpvar_44;
  tmpvar_44 = ((unity_SpecCube0_HDR.x * pow (tmpvar_43.w, unity_SpecCube0_HDR.y)) * tmpvar_43.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_45;
    worldRefl_45 = tmpvar_14;
    vec3 worldPos_46;
    worldPos_46 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_47;
      tmpvar_47 = normalize(tmpvar_14);
      vec3 tmpvar_48;
      tmpvar_48 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_47);
      vec3 tmpvar_49;
      tmpvar_49 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_47);
      bvec3 tmpvar_50;
      tmpvar_50 = greaterThan (tmpvar_47, vec3(0.0, 0.0, 0.0));
      float tmpvar_51;
      if (tmpvar_50.x) {
        tmpvar_51 = tmpvar_48.x;
      } else {
        tmpvar_51 = tmpvar_49.x;
      };
      float tmpvar_52;
      if (tmpvar_50.y) {
        tmpvar_52 = tmpvar_48.y;
      } else {
        tmpvar_52 = tmpvar_49.y;
      };
      float tmpvar_53;
      if (tmpvar_50.z) {
        tmpvar_53 = tmpvar_48.z;
      } else {
        tmpvar_53 = tmpvar_49.z;
      };
      worldPos_46 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_45 = (worldPos_46 + (tmpvar_47 * min (
        min (tmpvar_51, tmpvar_52)
      , tmpvar_53)));
    };
    vec4 tmpvar_54;
    tmpvar_54.xyz = worldRefl_45;
    tmpvar_54.w = ((tmpvar_13 * (1.7 - 
      (0.7 * tmpvar_13)
    )) * 6.0);
    vec4 tmpvar_55;
    tmpvar_55 = textureCubeLod (unity_SpecCube1, worldRefl_45, tmpvar_54.w);
    specular_32 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_55.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_55.xyz), tmpvar_44, unity_SpecCube0_BoxMin.www);
  } else {
    specular_32 = tmpvar_44;
  };
  tmpvar_15 = (specular_32 * tmpvar_11);
  vec3 viewDir_56;
  viewDir_56 = -(tmpvar_8);
  float surfaceReduction_57;
  float specularTerm_58;
  float tmpvar_59;
  tmpvar_59 = (1.0 - _Glossiness);
  vec3 tmpvar_60;
  vec3 inVec_61;
  inVec_61 = (_WorldSpaceLightPos0.xyz + viewDir_56);
  tmpvar_60 = (inVec_61 * inversesqrt(max (0.001, 
    dot (inVec_61, inVec_61)
  )));
  float tmpvar_62;
  tmpvar_62 = max (0.0, dot (tmpvar_7, tmpvar_60));
  float tmpvar_63;
  tmpvar_63 = max (0.0, dot (tmpvar_7, viewDir_56));
  float tmpvar_64;
  tmpvar_64 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_60));
  float tmpvar_65;
  tmpvar_65 = (tmpvar_59 * tmpvar_59);
  float tmpvar_66;
  tmpvar_66 = (tmpvar_59 * tmpvar_59);
  float tmpvar_67;
  tmpvar_67 = (tmpvar_66 * tmpvar_66);
  float tmpvar_68;
  tmpvar_68 = (((tmpvar_62 * tmpvar_62) * (tmpvar_67 - 1.0)) + 1.0);
  float x_69;
  x_69 = (1.0 - tmpvar_12);
  float x_70;
  x_70 = (1.0 - tmpvar_63);
  float tmpvar_71;
  tmpvar_71 = (0.5 + ((2.0 * tmpvar_64) * (tmpvar_64 * tmpvar_59)));
  float tmpvar_72;
  tmpvar_72 = ((1.0 + (
    (tmpvar_71 - 1.0)
   * 
    ((x_69 * x_69) * ((x_69 * x_69) * x_69))
  )) * (1.0 + (
    (tmpvar_71 - 1.0)
   * 
    ((x_70 * x_70) * ((x_70 * x_70) * x_70))
  )));
  float tmpvar_73;
  tmpvar_73 = (((2.0 / 
    (((tmpvar_12 * (
      (tmpvar_63 * (1.0 - tmpvar_65))
     + tmpvar_65)) + (tmpvar_63 * (
      (tmpvar_12 * (1.0 - tmpvar_65))
     + tmpvar_65))) + 1e-05)
  ) * (tmpvar_67 / 
    (((3.141593 * tmpvar_68) * tmpvar_68) + 1e-07)
  )) * 0.7853982);
  specularTerm_58 = tmpvar_73;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_58 = sqrt(max (0.0001, tmpvar_73));
  };
  float tmpvar_74;
  tmpvar_74 = max (0.0, (specularTerm_58 * tmpvar_12));
  specularTerm_58 = tmpvar_74;
  float tmpvar_75;
  tmpvar_75 = (tmpvar_72 * tmpvar_12);
  float tmpvar_76;
  tmpvar_76 = (tmpvar_59 * tmpvar_59);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_57 = (1.0 - ((0.28 * tmpvar_76) * tmpvar_59));
  } else {
    surfaceReduction_57 = (1.0/(((tmpvar_76 * tmpvar_76) + 1.0)));
  };
  float tmpvar_77;
  if (any(bvec3(tmpvar_5))) {
    tmpvar_77 = 1.0;
  } else {
    tmpvar_77 = 0.0;
  };
  specularTerm_58 = (tmpvar_74 * tmpvar_77);
  float x_78;
  x_78 = (1.0 - tmpvar_64);
  float x_79;
  x_79 = (1.0 - tmpvar_63);
  vec3 tmpvar_80;
  tmpvar_80 = (((diffColor_9 * 
    (tmpvar_16 + (_LightColor0.xyz * tmpvar_75))
  ) + (
    (specularTerm_58 * _LightColor0.xyz)
   * 
    (tmpvar_5 + ((1.0 - tmpvar_5) * ((x_78 * x_78) * (
      (x_78 * x_78)
     * x_78))))
  )) + ((surfaceReduction_57 * tmpvar_15) * mix (tmpvar_5, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_6)), 0.0, 1.0)
  ), vec3(
    ((x_79 * x_79) * ((x_79 * x_79) * x_79))
  ))));
  vec4 tmpvar_81;
  tmpvar_81.w = 1.0;
  tmpvar_81.xyz = tmpvar_80;
  c_1.w = tmpvar_81.w;
  c_1.xyz = tmpvar_80;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_82;
  xlat_varoutput_82.xyz = c_1.xyz;
  xlat_varoutput_82.w = outModifiedAlpha_10;
  gl_FragData[0] = xlat_varoutput_82;
}


#endif
"
}
SubProgram "metal " {
// Stats: 31 math, 2 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 290
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
VectorHalf 240 [unity_ColorSpaceLuminance] 4
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float3 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_7 = tmpvar_8.xyz;
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_19);
  half3 normalWorld_20;
  normalWorld_20 = half3(tmpvar_19);
  half4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 ambient_22;
  ambient_22 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_23;
  tmpvar_23 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_23) {
    ambient_22 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_24;
  half4 tmpvar_25;
  tmpvar_25 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_24.x = dot (_mtl_u.unity_SHBr, tmpvar_25);
  x1_24.y = dot (_mtl_u.unity_SHBg, tmpvar_25);
  x1_24.z = dot (_mtl_u.unity_SHBb, tmpvar_25);
  ambient_22 = (ambient_22 + (x1_24 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  ambientOrLightmapUV_21.xyz = ambient_22;
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_7;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec4 u_xlat6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat15;
vec3 u_xlat16;
float u_xlat17;
float u_xlat28;
float u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
float u_xlat39;
float u_xlat40;
float u_xlat41;
bool u_xlatb41;
float u_xlat42;
float u_xlat43;
mediump float u_xlat16_43;
float u_xlat44;
bool u_xlatb44;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat4.x = (-u_xlat39) + 1.0;
    SV_Target0.w = u_xlat1.w * u_xlat39 + u_xlat4.x;
    u_xlat39 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat40 = (-_OcclusionStrength) + 1.0;
    u_xlat40 = u_xlat10_5.y * _OcclusionStrength + u_xlat40;
    u_xlat17 = (-_Glossiness) + 1.0;
    u_xlat30.x = dot(u_xlat16.xyz, u_xlat2.xyz);
    u_xlat30.x = u_xlat30.x + u_xlat30.x;
    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat30.xxx) + u_xlat16.xyz;
    u_xlatb30 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb30){
        u_xlatb30 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb30)) ? u_xlat6.xyz : vs_TEXCOORD8.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat30.x = u_xlat6.y * 0.25;
        u_xlat43 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat44 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat30.x = max(u_xlat43, u_xlat30.x);
        u_xlat6.x = min(u_xlat44, u_xlat30.x);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat2.w = 1.0;
        u_xlat7.x = dot(u_xlat10_7, u_xlat2);
        u_xlat7.y = dot(u_xlat10_8, u_xlat2);
        u_xlat7.z = dot(u_xlat10_6, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat7.x = dot(unity_SHAr, u_xlat2);
        u_xlat7.y = dot(unity_SHAg, u_xlat2);
        u_xlat7.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb41 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat7.xyz = log2(u_xlat6.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat6.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat6.xyz;
    u_xlatb30 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb30){
        u_xlat30.x = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat30.x = inversesqrt(u_xlat30.x);
        u_xlat7.xyz = u_xlat30.xxx * u_xlat5.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat30.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat30.x = min(u_xlat8.z, u_xlat30.x);
        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * u_xlat30.xxx + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat30.x = (-u_xlat17) * 0.699999988 + 1.70000005;
    u_xlat30.x = u_xlat30.x * u_xlat17;
    u_xlat30.x = u_xlat30.x * 6.0;
    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat30.x);
    u_xlat16_43 = log2(u_xlat10_7.w);
    u_xlat43 = u_xlat16_43 * unity_SpecCube0_HDR.y;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb44){
        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb44){
            u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat44 = inversesqrt(u_xlat44);
            u_xlat9.xyz = vec3(u_xlat44) * u_xlat5.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
            u_xlat44 = min(u_xlat10.z, u_xlat44);
            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat30.x);
        u_xlat16_30 = log2(u_xlat10_5.w);
        u_xlat30.x = u_xlat16_30 * unity_SpecCube1_HDR.y;
        u_xlat30.x = exp2(u_xlat30.x);
        u_xlat30.x = u_xlat30.x * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * u_xlat30.xxx;
        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat5.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = vec3(u_xlat40) * u_xlat8.xyz;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
    u_xlat3.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat16.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat28 = u_xlat17 * u_xlat17;
    u_xlat16.x = (-u_xlat17) * u_xlat17 + 1.0;
    u_xlat29 = u_xlat2.x * u_xlat16.x + u_xlat28;
    u_xlat16.x = u_xlat39 * u_xlat16.x + u_xlat28;
    u_xlat16.x = u_xlat2.x * u_xlat16.x;
    u_xlat16.x = u_xlat39 * u_xlat29 + u_xlat16.x;
    u_xlat16.x = u_xlat16.x + 9.99999975e-06;
    u_xlat16.x = 2.0 / u_xlat16.x;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat30.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
    u_xlat3.x = u_xlat3.x * u_xlat30.x + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = u_xlat3.x * 3.14159274 + 1.00000001e-07;
    u_xlat3.x = u_xlat29 / u_xlat3.x;
    u_xlat29 = (-u_xlat39) + 1.0;
    u_xlat42 = u_xlat29 * u_xlat29;
    u_xlat42 = u_xlat42 * u_xlat42;
    u_xlat29 = u_xlat29 * u_xlat42;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat42 = u_xlat2.x * u_xlat2.x;
    u_xlat42 = u_xlat42 * u_xlat42;
    u_xlat2.x = u_xlat2.x * u_xlat42;
    u_xlat42 = u_xlat2.y * u_xlat2.y;
    u_xlat42 = dot(vec2(u_xlat42), vec2(u_xlat17));
    u_xlat42 = u_xlat42 + -0.5;
    u_xlat16.y = u_xlat42 * u_xlat29 + 1.0;
    u_xlat3.w = u_xlat42 * u_xlat2.x + 1.0;
    u_xlat3.xz = u_xlat3.xw * u_xlat16.xy;
    u_xlat3.x = u_xlat3.x * 0.785398185;
    u_xlat16.x = max(u_xlat3.x, 9.99999975e-05);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat3.x = (u_xlatb41) ? u_xlat16.x : u_xlat3.x;
    u_xlat3.x = u_xlat39 * u_xlat3.x;
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat39 = u_xlat39 * u_xlat3.z;
    u_xlat28 = u_xlat28 * u_xlat17;
    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;
    u_xlat16.x = float(1.0) / u_xlat30.y;
    u_xlat28 = (u_xlatb41) ? u_xlat28 : u_xlat16.x;
    u_xlat41 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb41 = u_xlat41!=0.0;
    u_xlat41 = u_xlatb41 ? 1.0 : float(0.0);
    u_xlat41 = u_xlat41 * u_xlat3.x;
    u_xlat3.x = u_xlat4.x + _Glossiness;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat16.xyz = vec3(u_xlat39) * _LightColor0.xyz;
    u_xlat16.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat16.xyz;
    u_xlat4.xyz = vec3(u_xlat41) * _LightColor0.xyz;
    u_xlat39 = (-u_xlat2.y) + 1.0;
    u_xlat40 = u_xlat39 * u_xlat39;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat39 = u_xlat39 * u_xlat40;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16.xyz + u_xlat4.xyz;
    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat28);
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xxx;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat15.xyz * u_xlat0.xyz + u_xlat1.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 178 math, 6 textures, 12 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 ambientOrLightmapUV_26;
  ambientOrLightmapUV_26.xy = vec2(0.0, 0.0);
  ambientOrLightmapUV_26.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_26;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  float tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (tmpvar_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_9;
  float outModifiedAlpha_10;
  diffColor_9 = ((tmpvar_4 * tmpvar_6) * tmpvar_2);
  outModifiedAlpha_10 = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  float tmpvar_11;
  tmpvar_11 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_7, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_13;
  vec3 tmpvar_14;
  vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_14 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_15.w) * tmpvar_15.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_7, (tmpvar_16.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_16.w));
  tmpvar_14 = (tmpvar_14 * tmpvar_11);
  tmpvar_13 = vec3(0.0, 0.0, 0.0);
  float tmpvar_17;
  vec3 tmpvar_18;
  tmpvar_17 = (1.0 - _Glossiness);
  tmpvar_18 = (tmpvar_8 - (2.0 * (
    dot (tmpvar_7, tmpvar_8)
   * tmpvar_7)));
  vec3 originalReflUVW_19;
  vec3 specular_20;
  originalReflUVW_19 = tmpvar_18;
  vec3 worldRefl_21;
  worldRefl_21 = tmpvar_18;
  vec3 worldPos_22;
  worldPos_22 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_23;
    tmpvar_23 = normalize(tmpvar_18);
    vec3 tmpvar_24;
    tmpvar_24 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_23);
    vec3 tmpvar_25;
    tmpvar_25 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_23);
    bvec3 tmpvar_26;
    tmpvar_26 = greaterThan (tmpvar_23, vec3(0.0, 0.0, 0.0));
    float tmpvar_27;
    if (tmpvar_26.x) {
      tmpvar_27 = tmpvar_24.x;
    } else {
      tmpvar_27 = tmpvar_25.x;
    };
    float tmpvar_28;
    if (tmpvar_26.y) {
      tmpvar_28 = tmpvar_24.y;
    } else {
      tmpvar_28 = tmpvar_25.y;
    };
    float tmpvar_29;
    if (tmpvar_26.z) {
      tmpvar_29 = tmpvar_24.z;
    } else {
      tmpvar_29 = tmpvar_25.z;
    };
    worldPos_22 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_21 = (worldPos_22 + (tmpvar_23 * min (
      min (tmpvar_27, tmpvar_28)
    , tmpvar_29)));
  };
  tmpvar_18 = worldRefl_21;
  vec4 tmpvar_30;
  tmpvar_30.xyz = worldRefl_21;
  tmpvar_30.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  vec4 tmpvar_31;
  tmpvar_31 = textureCubeLod (unity_SpecCube0, worldRefl_21, tmpvar_30.w);
  vec3 tmpvar_32;
  tmpvar_32 = ((unity_SpecCube0_HDR.x * pow (tmpvar_31.w, unity_SpecCube0_HDR.y)) * tmpvar_31.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_33;
    worldRefl_33 = originalReflUVW_19;
    vec3 worldPos_34;
    worldPos_34 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_35;
      tmpvar_35 = normalize(originalReflUVW_19);
      vec3 tmpvar_36;
      tmpvar_36 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_35);
      vec3 tmpvar_37;
      tmpvar_37 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_35);
      bvec3 tmpvar_38;
      tmpvar_38 = greaterThan (tmpvar_35, vec3(0.0, 0.0, 0.0));
      float tmpvar_39;
      if (tmpvar_38.x) {
        tmpvar_39 = tmpvar_36.x;
      } else {
        tmpvar_39 = tmpvar_37.x;
      };
      float tmpvar_40;
      if (tmpvar_38.y) {
        tmpvar_40 = tmpvar_36.y;
      } else {
        tmpvar_40 = tmpvar_37.y;
      };
      float tmpvar_41;
      if (tmpvar_38.z) {
        tmpvar_41 = tmpvar_36.z;
      } else {
        tmpvar_41 = tmpvar_37.z;
      };
      worldPos_34 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_33 = (worldPos_34 + (tmpvar_35 * min (
        min (tmpvar_39, tmpvar_40)
      , tmpvar_41)));
    };
    tmpvar_18 = worldRefl_33;
    vec4 tmpvar_42;
    tmpvar_42.xyz = worldRefl_33;
    tmpvar_42.w = ((tmpvar_17 * (1.7 - 
      (0.7 * tmpvar_17)
    )) * 6.0);
    vec4 tmpvar_43;
    tmpvar_43 = textureCubeLod (unity_SpecCube1, worldRefl_33, tmpvar_42.w);
    specular_20 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_43.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_43.xyz), tmpvar_32, unity_SpecCube0_BoxMin.www);
  } else {
    specular_20 = tmpvar_32;
  };
  tmpvar_13 = (specular_20 * tmpvar_11);
  vec3 viewDir_44;
  viewDir_44 = -(tmpvar_8);
  float surfaceReduction_45;
  float specularTerm_46;
  float tmpvar_47;
  tmpvar_47 = (1.0 - _Glossiness);
  vec3 tmpvar_48;
  vec3 inVec_49;
  inVec_49 = (_WorldSpaceLightPos0.xyz + viewDir_44);
  tmpvar_48 = (inVec_49 * inversesqrt(max (0.001, 
    dot (inVec_49, inVec_49)
  )));
  float tmpvar_50;
  tmpvar_50 = max (0.0, dot (tmpvar_7, tmpvar_48));
  float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_7, viewDir_44));
  float tmpvar_52;
  tmpvar_52 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_48));
  float tmpvar_53;
  tmpvar_53 = (tmpvar_47 * tmpvar_47);
  float tmpvar_54;
  tmpvar_54 = (tmpvar_47 * tmpvar_47);
  float tmpvar_55;
  tmpvar_55 = (tmpvar_54 * tmpvar_54);
  float tmpvar_56;
  tmpvar_56 = (((tmpvar_50 * tmpvar_50) * (tmpvar_55 - 1.0)) + 1.0);
  float x_57;
  x_57 = (1.0 - tmpvar_12);
  float x_58;
  x_58 = (1.0 - tmpvar_51);
  float tmpvar_59;
  tmpvar_59 = (0.5 + ((2.0 * tmpvar_52) * (tmpvar_52 * tmpvar_47)));
  float tmpvar_60;
  tmpvar_60 = ((1.0 + (
    (tmpvar_59 - 1.0)
   * 
    ((x_57 * x_57) * ((x_57 * x_57) * x_57))
  )) * (1.0 + (
    (tmpvar_59 - 1.0)
   * 
    ((x_58 * x_58) * ((x_58 * x_58) * x_58))
  )));
  float tmpvar_61;
  tmpvar_61 = (((2.0 / 
    (((tmpvar_12 * (
      (tmpvar_51 * (1.0 - tmpvar_53))
     + tmpvar_53)) + (tmpvar_51 * (
      (tmpvar_12 * (1.0 - tmpvar_53))
     + tmpvar_53))) + 1e-05)
  ) * (tmpvar_55 / 
    (((3.141593 * tmpvar_56) * tmpvar_56) + 1e-07)
  )) * 0.7853982);
  specularTerm_46 = tmpvar_61;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_46 = sqrt(max (0.0001, tmpvar_61));
  };
  float tmpvar_62;
  tmpvar_62 = max (0.0, (specularTerm_46 * tmpvar_12));
  specularTerm_46 = tmpvar_62;
  float tmpvar_63;
  tmpvar_63 = (tmpvar_60 * tmpvar_12);
  float tmpvar_64;
  tmpvar_64 = (tmpvar_47 * tmpvar_47);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_45 = (1.0 - ((0.28 * tmpvar_64) * tmpvar_47));
  } else {
    surfaceReduction_45 = (1.0/(((tmpvar_64 * tmpvar_64) + 1.0)));
  };
  float tmpvar_65;
  if (any(bvec3(tmpvar_5))) {
    tmpvar_65 = 1.0;
  } else {
    tmpvar_65 = 0.0;
  };
  specularTerm_46 = (tmpvar_62 * tmpvar_65);
  float x_66;
  x_66 = (1.0 - tmpvar_52);
  float x_67;
  x_67 = (1.0 - tmpvar_51);
  vec3 tmpvar_68;
  tmpvar_68 = (((diffColor_9 * 
    (tmpvar_14 + (_LightColor0.xyz * tmpvar_63))
  ) + (
    (specularTerm_46 * _LightColor0.xyz)
   * 
    (tmpvar_5 + ((1.0 - tmpvar_5) * ((x_66 * x_66) * (
      (x_66 * x_66)
     * x_66))))
  )) + ((surfaceReduction_45 * tmpvar_13) * mix (tmpvar_5, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_6)), 0.0, 1.0)
  ), vec3(
    ((x_67 * x_67) * ((x_67 * x_67) * x_67))
  ))));
  vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = tmpvar_68;
  c_1.w = tmpvar_69.w;
  c_1.xyz = tmpvar_68;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_70;
  xlat_varoutput_70.xyz = c_1.xyz;
  xlat_varoutput_70.w = outModifiedAlpha_10;
  gl_FragData[0] = xlat_varoutput_70;
}


#endif
"
}
SubProgram "metal " {
// Stats: 25 math, 1 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 274
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Matrix 144 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [unity_WorldTransformParams]
Vector 224 [unity_DynamicLightmapST]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  float3 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  float4 tmpvar_11;
  float4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_11 = (_mtl_u.glstate_matrix_mvp * tmpvar_12);
  float4 texcoord_13;
  texcoord_13.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_14;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_15;
  float3 n_16;
  n_16 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_15 = half3(n_16);
  float3 norm_17;
  norm_17 = float3(tmpvar_1);
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].x;
  v_18.y = _mtl_u.unity_WorldToObject[1].x;
  v_18.z = _mtl_u.unity_WorldToObject[2].x;
  v_18.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].y;
  v_19.y = _mtl_u.unity_WorldToObject[1].y;
  v_19.z = _mtl_u.unity_WorldToObject[2].y;
  v_19.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].z;
  v_20.y = _mtl_u.unity_WorldToObject[1].z;
  v_20.z = _mtl_u.unity_WorldToObject[2].z;
  v_20.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  float3 dir_22;
  dir_22 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_23;
  tmpvar_23[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_23[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_23[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = float(tmpvar_4.w);
  half3 normal_25;
  normal_25 = half3(tmpvar_21);
  half3 tangent_26;
  tangent_26 = half3(tmpvar_24.xyz);
  half tangentSign_27;
  tangentSign_27 = half(tmpvar_24.w);
  half xlat_varsign_28;
  float tmpvar_29;
  tmpvar_29 = ((float)tangentSign_27 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_28 = half(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * xlat_varsign_28);
  half3x3 tmpvar_31;
  tmpvar_31[0].x = tangent_26.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = normal_25.x;
  tmpvar_31[1].x = tangent_26.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = normal_25.y;
  tmpvar_31[2].x = tangent_26.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = normal_25.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_31);
  float3 v_32;
  v_32.x = tangentToWorld_5[0].x;
  v_32.y = tangentToWorld_5[1].x;
  v_32.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].y;
  v_33.y = tangentToWorld_5[1].y;
  v_33.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].z;
  v_34.y = tangentToWorld_5[1].z;
  v_34.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_34);
  half4 ambientOrLightmapUV_35;
  ambientOrLightmapUV_35.xy = half2(float2(0.0, 0.0));
  ambientOrLightmapUV_35.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_11;
  _mtl_o.xlv_TEXCOORD0 = texcoord_13;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_15;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_35;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
float u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
vec3 u_xlat10;
bvec3 u_xlatb11;
vec3 u_xlat14;
vec3 u_xlat15;
vec3 u_xlat16;
mediump float u_xlat16_16;
float u_xlat26;
float u_xlat27;
float u_xlat36;
float u_xlat37;
float u_xlat38;
float u_xlat39;
float u_xlat41;
mediump float u_xlat16_41;
bool u_xlatb41;
float u_xlat42;
mediump float u_xlat16_42;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat36 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat38 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat3.xyz = vec3(u_xlat38) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat39 = (-u_xlat36) + 1.0;
    SV_Target0.w = u_xlat1.w * u_xlat36 + u_xlat39;
    u_xlat36 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat37 = (-_OcclusionStrength) + 1.0;
    u_xlat37 = u_xlat10_4.y * _OcclusionStrength + u_xlat37;
    u_xlat4 = (-_Glossiness) + 1.0;
    u_xlat16.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xyz = u_xlat2.xyz * (-u_xlat16.xxx) + u_xlat3.xyz;
    u_xlat10_5 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat41 = u_xlat10_5.w * unity_DynamicLightmap_HDR.x;
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat41);
    u_xlat5.xyz = log2(u_xlat5.xyz);
    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat5.xyz = exp2(u_xlat5.xyz);
    u_xlat10_6 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat41 = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat41 = u_xlat41 + 0.5;
    u_xlat5.xyz = vec3(u_xlat41) * u_xlat5.xyz;
    u_xlat16_41 = max(u_xlat10_6.w, 9.99999975e-05);
    u_xlat5.xyz = u_xlat5.xyz / vec3(u_xlat16_41);
    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb41){
        u_xlat41 = dot(u_xlat16.xyz, u_xlat16.xyz);
        u_xlat41 = inversesqrt(u_xlat41);
        u_xlat6.xyz = u_xlat16.xyz * vec3(u_xlat41);
        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
        u_xlat7.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
        u_xlat7.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
        u_xlat7.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
        u_xlat41 = min(u_xlat7.y, u_xlat7.x);
        u_xlat41 = min(u_xlat7.z, u_xlat41);
        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat41) + u_xlat7.xyz;
    } else {
        u_xlat6.xyz = u_xlat16.xyz;
    //ENDIF
    }
    u_xlat41 = (-u_xlat4) * 0.699999988 + 1.70000005;
    u_xlat41 = u_xlat4 * u_xlat41;
    u_xlat41 = u_xlat41 * 6.0;
    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat41);
    u_xlat16_42 = log2(u_xlat10_6.w);
    u_xlat42 = u_xlat16_42 * unity_SpecCube0_HDR.y;
    u_xlat42 = exp2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat42);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat16.xyz, u_xlat16.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat8.xyz = u_xlat16.xyz * vec3(u_xlat43);
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
            u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat43 = min(u_xlat9.y, u_xlat9.x);
            u_xlat43 = min(u_xlat9.z, u_xlat43);
            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat16.xyz = u_xlat8.xyz * vec3(u_xlat43) + u_xlat9.xyz;
        //ENDIF
        }
        u_xlat10_8 = textureLod(unity_SpecCube1, u_xlat16.xyz, u_xlat41);
        u_xlat16_16 = log2(u_xlat10_8.w);
        u_xlat16.x = u_xlat16_16 * unity_SpecCube1_HDR.y;
        u_xlat16.x = exp2(u_xlat16.x);
        u_xlat16.x = u_xlat16.x * unity_SpecCube1_HDR.x;
        u_xlat16.xyz = u_xlat10_8.xyz * u_xlat16.xxx;
        u_xlat6.xyz = vec3(u_xlat42) * u_xlat10_6.xyz + (-u_xlat16.xyz);
        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16.xyz;
    //ENDIF
    }
    u_xlat16.xyz = vec3(u_xlat37) * u_xlat7.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat38) + _WorldSpaceLightPos0.xyz;
    u_xlat38 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat38 = max(u_xlat38, 0.00100000005);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz;
    u_xlat2.w = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat26 = u_xlat4 * u_xlat4;
    u_xlat3.x = (-u_xlat4) * u_xlat4 + 1.0;
    u_xlat15.x = u_xlat2.x * u_xlat3.x + u_xlat26;
    u_xlat3.x = u_xlat36 * u_xlat3.x + u_xlat26;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat36 * u_xlat15.x + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat15.x = u_xlat26 * u_xlat26;
    u_xlat38 = u_xlat2.w * u_xlat2.w;
    u_xlat6.xy = vec2(u_xlat26) * vec2(u_xlat26) + vec2(-1.0, 1.0);
    u_xlat38 = u_xlat38 * u_xlat6.x + 1.0;
    u_xlat38 = u_xlat38 * u_xlat38;
    u_xlat38 = u_xlat38 * 3.14159274 + 1.00000001e-07;
    u_xlat2.w = u_xlat15.x / u_xlat38;
    u_xlat15.x = (-u_xlat36) + 1.0;
    u_xlat27 = u_xlat15.x * u_xlat15.x;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat15.x = u_xlat15.x * u_xlat27;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat27 = u_xlat2.x * u_xlat2.x;
    u_xlat3.z = u_xlat27 * u_xlat27;
    u_xlat2.xw = u_xlat2.xw * u_xlat3.zx;
    u_xlat27 = u_xlat2.y * u_xlat2.y;
    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat4));
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat15.x = u_xlat27 * u_xlat15.x + 1.0;
    u_xlat27 = u_xlat27 * u_xlat2.x + 1.0;
    u_xlat15.x = u_xlat27 * u_xlat15.x;
    u_xlat38 = u_xlat2.w * 0.785398185;
    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat27 = max(u_xlat38, 9.99999975e-05);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat38 = (u_xlatb3) ? u_xlat27 : u_xlat38;
    u_xlat38 = u_xlat36 * u_xlat38;
    u_xlat38 = max(u_xlat38, 0.0);
    u_xlat36 = u_xlat36 * u_xlat15.x;
    u_xlat26 = u_xlat26 * u_xlat4;
    u_xlat26 = (-u_xlat26) * 0.280000001 + 1.0;
    u_xlat15.x = float(1.0) / u_xlat6.y;
    u_xlat26 = (u_xlatb3) ? u_xlat26 : u_xlat15.x;
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat38 = u_xlat38 * u_xlat3.x;
    u_xlat3.x = u_xlat39 + _Glossiness;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat15.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat37) + u_xlat15.xyz;
    u_xlat5.xyz = vec3(u_xlat38) * _LightColor0.xyz;
    u_xlat36 = (-u_xlat2.y) + 1.0;
    u_xlat37 = u_xlat36 * u_xlat36;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat36 = u_xlat36 * u_xlat37;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat0.xyz;
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat15.xyz + u_xlat5.xyz;
    u_xlat14.xyz = u_xlat16.xyz * vec3(u_xlat26);
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xxx;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat14.xyz * u_xlat0.xyz + u_xlat1.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 200 math, 8 textures, 15 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_12;
  n_12 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_16;
  vec4 o_17;
  vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_8 * 0.5);
  vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_8.zw;
  vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_21;
  ambient_21 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_21 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_22;
  vec4 tmpvar_23;
  tmpvar_23 = (tmpvar_16.xyzz * tmpvar_16.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambient_21 = (ambient_21 + (x1_22 + (unity_SHC.xyz * 
    ((tmpvar_16.x * tmpvar_16.x) - (tmpvar_16.y * tmpvar_16.y))
  )));
  ambientOrLightmapUV_20.xyz = ambient_21;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = n_12;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD6 = o_17;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  float tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (tmpvar_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_9;
  float outModifiedAlpha_10;
  diffColor_9 = ((tmpvar_4 * tmpvar_6) * tmpvar_2);
  outModifiedAlpha_10 = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  float tmpvar_11;
  tmpvar_11 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_7, _WorldSpaceLightPos0.xyz));
  float tmpvar_13;
  tmpvar_13 = (1.0 - _Glossiness);
  vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_8 - (2.0 * (
    dot (tmpvar_7, tmpvar_8)
   * tmpvar_7)));
  vec3 tmpvar_15;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_17 = vec3(0.0, 0.0, 0.0);
  tmpvar_16 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  vec3 ambient_18;
  ambient_18 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_19;
  ambient_contrib_19 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_20;
    tmpvar_20.w = 1.0;
    tmpvar_20.xyz = tmpvar_7;
    vec3 x1_21;
    vec3 texCoord_22;
    vec3 tmpvar_23;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_24;
      tmpvar_24.w = 1.0;
      tmpvar_24.xyz = xlv_TEXCOORD8;
      tmpvar_23 = (unity_ProbeVolumeWorldToObject * tmpvar_24).xyz;
    } else {
      tmpvar_23 = xlv_TEXCOORD8;
    };
    vec3 tmpvar_25;
    tmpvar_25 = ((tmpvar_23 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_22.yz = tmpvar_25.yz;
    texCoord_22.x = (tmpvar_25.x * 0.25);
    float tmpvar_26;
    float tmpvar_27;
    tmpvar_27 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_26 = clamp (texCoord_22.x, tmpvar_27, (0.25 - tmpvar_27));
    texCoord_22.x = tmpvar_26;
    vec4 tmpvar_28;
    tmpvar_28 = texture3D (unity_ProbeVolumeSH, texCoord_22);
    texCoord_22.x = (tmpvar_26 + 0.25);
    vec4 tmpvar_29;
    tmpvar_29 = texture3D (unity_ProbeVolumeSH, texCoord_22);
    texCoord_22.x = (tmpvar_26 + 0.5);
    x1_21.x = dot (tmpvar_28, tmpvar_20);
    x1_21.y = dot (tmpvar_29, tmpvar_20);
    x1_21.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_22), tmpvar_20);
    ambient_contrib_19 = x1_21;
  } else {
    vec4 tmpvar_30;
    tmpvar_30.w = 1.0;
    tmpvar_30.xyz = tmpvar_7;
    vec3 x_31;
    x_31.x = dot (unity_SHAr, tmpvar_30);
    x_31.y = dot (unity_SHAg, tmpvar_30);
    x_31.z = dot (unity_SHAb, tmpvar_30);
    ambient_contrib_19 = x_31;
  };
  vec3 tmpvar_32;
  tmpvar_32 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_19));
  ambient_18 = tmpvar_32;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_18 = max (((1.055 * 
      pow (max (tmpvar_32, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_17 = (ambient_18 * tmpvar_11);
  tmpvar_15 = vec3(0.0, 0.0, 0.0);
  vec3 specular_33;
  vec3 worldRefl_34;
  worldRefl_34 = tmpvar_14;
  vec3 worldPos_35;
  worldPos_35 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_36;
    tmpvar_36 = normalize(tmpvar_14);
    vec3 tmpvar_37;
    tmpvar_37 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_36);
    vec3 tmpvar_38;
    tmpvar_38 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_36);
    bvec3 tmpvar_39;
    tmpvar_39 = greaterThan (tmpvar_36, vec3(0.0, 0.0, 0.0));
    float tmpvar_40;
    if (tmpvar_39.x) {
      tmpvar_40 = tmpvar_37.x;
    } else {
      tmpvar_40 = tmpvar_38.x;
    };
    float tmpvar_41;
    if (tmpvar_39.y) {
      tmpvar_41 = tmpvar_37.y;
    } else {
      tmpvar_41 = tmpvar_38.y;
    };
    float tmpvar_42;
    if (tmpvar_39.z) {
      tmpvar_42 = tmpvar_37.z;
    } else {
      tmpvar_42 = tmpvar_38.z;
    };
    worldPos_35 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_34 = (worldPos_35 + (tmpvar_36 * min (
      min (tmpvar_40, tmpvar_41)
    , tmpvar_42)));
  };
  vec4 tmpvar_43;
  tmpvar_43.xyz = worldRefl_34;
  tmpvar_43.w = ((tmpvar_13 * (1.7 - 
    (0.7 * tmpvar_13)
  )) * 6.0);
  vec4 tmpvar_44;
  tmpvar_44 = textureCubeLod (unity_SpecCube0, worldRefl_34, tmpvar_43.w);
  vec3 tmpvar_45;
  tmpvar_45 = ((unity_SpecCube0_HDR.x * pow (tmpvar_44.w, unity_SpecCube0_HDR.y)) * tmpvar_44.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_46;
    worldRefl_46 = tmpvar_14;
    vec3 worldPos_47;
    worldPos_47 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_48;
      tmpvar_48 = normalize(tmpvar_14);
      vec3 tmpvar_49;
      tmpvar_49 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_48);
      vec3 tmpvar_50;
      tmpvar_50 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_48);
      bvec3 tmpvar_51;
      tmpvar_51 = greaterThan (tmpvar_48, vec3(0.0, 0.0, 0.0));
      float tmpvar_52;
      if (tmpvar_51.x) {
        tmpvar_52 = tmpvar_49.x;
      } else {
        tmpvar_52 = tmpvar_50.x;
      };
      float tmpvar_53;
      if (tmpvar_51.y) {
        tmpvar_53 = tmpvar_49.y;
      } else {
        tmpvar_53 = tmpvar_50.y;
      };
      float tmpvar_54;
      if (tmpvar_51.z) {
        tmpvar_54 = tmpvar_49.z;
      } else {
        tmpvar_54 = tmpvar_50.z;
      };
      worldPos_47 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_46 = (worldPos_47 + (tmpvar_48 * min (
        min (tmpvar_52, tmpvar_53)
      , tmpvar_54)));
    };
    vec4 tmpvar_55;
    tmpvar_55.xyz = worldRefl_46;
    tmpvar_55.w = ((tmpvar_13 * (1.7 - 
      (0.7 * tmpvar_13)
    )) * 6.0);
    vec4 tmpvar_56;
    tmpvar_56 = textureCubeLod (unity_SpecCube1, worldRefl_46, tmpvar_55.w);
    specular_33 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_56.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_56.xyz), tmpvar_45, unity_SpecCube0_BoxMin.www);
  } else {
    specular_33 = tmpvar_45;
  };
  tmpvar_15 = (specular_33 * tmpvar_11);
  vec3 viewDir_57;
  viewDir_57 = -(tmpvar_8);
  float surfaceReduction_58;
  float specularTerm_59;
  float tmpvar_60;
  tmpvar_60 = (1.0 - _Glossiness);
  vec3 tmpvar_61;
  vec3 inVec_62;
  inVec_62 = (_WorldSpaceLightPos0.xyz + viewDir_57);
  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
    dot (inVec_62, inVec_62)
  )));
  float tmpvar_63;
  tmpvar_63 = max (0.0, dot (tmpvar_7, tmpvar_61));
  float tmpvar_64;
  tmpvar_64 = max (0.0, dot (tmpvar_7, viewDir_57));
  float tmpvar_65;
  tmpvar_65 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_61));
  float tmpvar_66;
  tmpvar_66 = (tmpvar_60 * tmpvar_60);
  float tmpvar_67;
  tmpvar_67 = (tmpvar_60 * tmpvar_60);
  float tmpvar_68;
  tmpvar_68 = (tmpvar_67 * tmpvar_67);
  float tmpvar_69;
  tmpvar_69 = (((tmpvar_63 * tmpvar_63) * (tmpvar_68 - 1.0)) + 1.0);
  float x_70;
  x_70 = (1.0 - tmpvar_12);
  float x_71;
  x_71 = (1.0 - tmpvar_64);
  float tmpvar_72;
  tmpvar_72 = (0.5 + ((2.0 * tmpvar_65) * (tmpvar_65 * tmpvar_60)));
  float tmpvar_73;
  tmpvar_73 = ((1.0 + (
    (tmpvar_72 - 1.0)
   * 
    ((x_70 * x_70) * ((x_70 * x_70) * x_70))
  )) * (1.0 + (
    (tmpvar_72 - 1.0)
   * 
    ((x_71 * x_71) * ((x_71 * x_71) * x_71))
  )));
  float tmpvar_74;
  tmpvar_74 = (((2.0 / 
    (((tmpvar_12 * (
      (tmpvar_64 * (1.0 - tmpvar_66))
     + tmpvar_66)) + (tmpvar_64 * (
      (tmpvar_12 * (1.0 - tmpvar_66))
     + tmpvar_66))) + 1e-05)
  ) * (tmpvar_68 / 
    (((3.141593 * tmpvar_69) * tmpvar_69) + 1e-07)
  )) * 0.7853982);
  specularTerm_59 = tmpvar_74;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_59 = sqrt(max (0.0001, tmpvar_74));
  };
  float tmpvar_75;
  tmpvar_75 = max (0.0, (specularTerm_59 * tmpvar_12));
  specularTerm_59 = tmpvar_75;
  float tmpvar_76;
  tmpvar_76 = (tmpvar_73 * tmpvar_12);
  float tmpvar_77;
  tmpvar_77 = (tmpvar_60 * tmpvar_60);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_58 = (1.0 - ((0.28 * tmpvar_77) * tmpvar_60));
  } else {
    surfaceReduction_58 = (1.0/(((tmpvar_77 * tmpvar_77) + 1.0)));
  };
  float tmpvar_78;
  if (any(bvec3(tmpvar_5))) {
    tmpvar_78 = 1.0;
  } else {
    tmpvar_78 = 0.0;
  };
  specularTerm_59 = (tmpvar_75 * tmpvar_78);
  float x_79;
  x_79 = (1.0 - tmpvar_65);
  float x_80;
  x_80 = (1.0 - tmpvar_64);
  vec3 tmpvar_81;
  tmpvar_81 = (((diffColor_9 * 
    (tmpvar_17 + (tmpvar_16 * tmpvar_76))
  ) + (
    (specularTerm_59 * tmpvar_16)
   * 
    (tmpvar_5 + ((1.0 - tmpvar_5) * ((x_79 * x_79) * (
      (x_79 * x_79)
     * x_79))))
  )) + ((surfaceReduction_58 * tmpvar_15) * mix (tmpvar_5, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_6)), 0.0, 1.0)
  ), vec3(
    ((x_80 * x_80) * ((x_80 * x_80) * x_80))
  ))));
  vec4 tmpvar_82;
  tmpvar_82.w = 1.0;
  tmpvar_82.xyz = tmpvar_81;
  c_1.w = tmpvar_82.w;
  c_1.xyz = tmpvar_81;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_83;
  xlat_varoutput_83.xyz = c_1.xyz;
  xlat_varoutput_83.w = outModifiedAlpha_10;
  gl_FragData[0] = xlat_varoutput_83;
}


#endif
"
}
SubProgram "metal " {
// Stats: 34 math, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 306
Matrix 64 [glstate_matrix_mvp]
Matrix 128 [unity_ObjectToWorld]
Matrix 192 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
VectorHalf 32 [unity_SHBr] 4
VectorHalf 40 [unity_SHBg] 4
VectorHalf 48 [unity_SHBb] 4
VectorHalf 56 [unity_SHC] 4
VectorHalf 256 [unity_ColorSpaceLuminance] 4
Vector 272 [_MainTex_ST]
Vector 288 [_DetailAlbedoMap_ST]
ScalarHalf 304 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float3 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_7 = tmpvar_8.xyz;
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_19);
  float4 o_20;
  float4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  float2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _mtl_u._ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  half3 normalWorld_23;
  normalWorld_23 = half3(tmpvar_19);
  half4 ambientOrLightmapUV_24;
  ambientOrLightmapUV_24 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 ambient_25;
  ambient_25 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_26;
  tmpvar_26 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_26) {
    ambient_25 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_27;
  half4 tmpvar_28;
  tmpvar_28 = (normalWorld_23.xyzz * normalWorld_23.yzzx);
  x1_27.x = dot (_mtl_u.unity_SHBr, tmpvar_28);
  x1_27.y = dot (_mtl_u.unity_SHBg, tmpvar_28);
  x1_27.z = dot (_mtl_u.unity_SHBb, tmpvar_28);
  ambient_25 = (ambient_25 + (x1_27 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_23.x * normalWorld_23.x) - (normalWorld_23.y * normalWorld_23.y))
  )));
  ambientOrLightmapUV_24.xyz = ambient_25;
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_24;
  _mtl_o.xlv_TEXCOORD6 = o_20;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_7;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat10 = u_xlat1.y * u_xlat1.y;
    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat1.x = dot(unity_SHBr, u_xlat2);
    u_xlat1.y = dot(unity_SHBg, u_xlat2);
    u_xlat1.z = dot(unity_SHBb, u_xlat2);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
bool u_xlatb5;
vec3 u_xlat6;
lowp vec4 u_xlat10_6;
vec4 u_xlat7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
lowp vec4 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
vec3 u_xlat12;
bvec3 u_xlatb13;
vec3 u_xlat16;
vec3 u_xlat17;
vec2 u_xlat18;
vec3 u_xlat19;
float u_xlat30;
float u_xlat31;
vec2 u_xlat32;
mediump float u_xlat16_32;
bool u_xlatb32;
float u_xlat42;
float u_xlat43;
float u_xlat44;
bool u_xlatb44;
float u_xlat45;
float u_xlat46;
mediump float u_xlat16_46;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat17.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat4.x = (-u_xlat42) + 1.0;
    SV_Target0.w = u_xlat1.w * u_xlat42 + u_xlat4.x;
    u_xlat42 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_5 = texture(_ShadowMapTexture, u_xlat18.xy);
    u_xlat10_6 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat43 = (-_OcclusionStrength) + 1.0;
    u_xlat43 = u_xlat10_6.y * _OcclusionStrength + u_xlat43;
    u_xlat18.x = (-_Glossiness) + 1.0;
    u_xlat32.x = dot(u_xlat17.xyz, u_xlat2.xyz);
    u_xlat32.x = u_xlat32.x + u_xlat32.x;
    u_xlat19.xyz = u_xlat2.xyz * (-u_xlat32.xxx) + u_xlat17.xyz;
    u_xlat6.xyz = u_xlat10_5.xxx * _LightColor0.xyz;
    u_xlatb32 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb32){
        u_xlatb32 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb32)) ? u_xlat7.xyz : vs_TEXCOORD8.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat7.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat32.x = u_xlat7.y * 0.25;
        u_xlat46 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat5.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat32.x = max(u_xlat46, u_xlat32.x);
        u_xlat7.x = min(u_xlat5.x, u_xlat32.x);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_9 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat2.w = 1.0;
        u_xlat8.x = dot(u_xlat10_8, u_xlat2);
        u_xlat8.y = dot(u_xlat10_9, u_xlat2);
        u_xlat8.z = dot(u_xlat10_7, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat8.x = dot(unity_SHAr, u_xlat2);
        u_xlat8.y = dot(unity_SHAg, u_xlat2);
        u_xlat8.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat7.xyz = u_xlat8.xyz + vs_TEXCOORD5.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb44 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat8.xyz = log2(u_xlat7.xyz);
    u_xlat8.xyz = u_xlat8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat8.xyz = exp2(u_xlat8.xyz);
    u_xlat8.xyz = u_xlat8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat7.xyz = (bool(u_xlatb44)) ? u_xlat8.xyz : u_xlat7.xyz;
    u_xlatb32 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb32){
        u_xlat32.x = dot(u_xlat19.xyz, u_xlat19.xyz);
        u_xlat32.x = inversesqrt(u_xlat32.x);
        u_xlat8.xyz = u_xlat32.xxx * u_xlat19.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
        u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
        u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
        u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
        u_xlat32.x = min(u_xlat9.y, u_xlat9.x);
        u_xlat32.x = min(u_xlat9.z, u_xlat32.x);
        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = u_xlat8.xyz * u_xlat32.xxx + u_xlat9.xyz;
    } else {
        u_xlat8.xyz = u_xlat19.xyz;
    //ENDIF
    }
    u_xlat32.x = (-u_xlat18.x) * 0.699999988 + 1.70000005;
    u_xlat32.x = u_xlat32.x * u_xlat18.x;
    u_xlat32.x = u_xlat32.x * 6.0;
    u_xlat10_8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat32.x);
    u_xlat16_46 = log2(u_xlat10_8.w);
    u_xlat46 = u_xlat16_46 * unity_SpecCube0_HDR.y;
    u_xlat46 = exp2(u_xlat46);
    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat10_8.xyz * vec3(u_xlat46);
    u_xlatb5 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb5){
        u_xlatb5 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb5){
            u_xlat5.x = dot(u_xlat19.xyz, u_xlat19.xyz);
            u_xlat5.x = inversesqrt(u_xlat5.x);
            u_xlat10.xyz = u_xlat5.xxx * u_xlat19.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
            u_xlat11.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
            u_xlat11.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
            u_xlat11.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
            u_xlat5.x = min(u_xlat11.y, u_xlat11.x);
            u_xlat5.x = min(u_xlat11.z, u_xlat5.x);
            u_xlat11.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat19.xyz = u_xlat10.xyz * u_xlat5.xxx + u_xlat11.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat19.xyz, u_xlat32.x);
        u_xlat16_32 = log2(u_xlat10_5.w);
        u_xlat32.x = u_xlat16_32 * unity_SpecCube1_HDR.y;
        u_xlat32.x = exp2(u_xlat32.x);
        u_xlat32.x = u_xlat32.x * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * u_xlat32.xxx;
        u_xlat8.xyz = vec3(u_xlat46) * u_xlat10_8.xyz + (-u_xlat5.xyz);
        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = vec3(u_xlat43) * u_xlat9.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat8.xyz = u_xlat3.xxx * u_xlat8.xyz;
    u_xlat3.x = dot(u_xlat2.xyz, u_xlat8.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat17.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat30 = u_xlat18.x * u_xlat18.x;
    u_xlat17.x = (-u_xlat18.x) * u_xlat18.x + 1.0;
    u_xlat31 = u_xlat2.x * u_xlat17.x + u_xlat30;
    u_xlat17.x = u_xlat42 * u_xlat17.x + u_xlat30;
    u_xlat17.x = u_xlat2.x * u_xlat17.x;
    u_xlat17.x = u_xlat42 * u_xlat31 + u_xlat17.x;
    u_xlat17.x = u_xlat17.x + 9.99999975e-06;
    u_xlat17.x = 2.0 / u_xlat17.x;
    u_xlat31 = u_xlat30 * u_xlat30;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat32.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
    u_xlat3.x = u_xlat3.x * u_xlat32.x + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = u_xlat3.x * 3.14159274 + 1.00000001e-07;
    u_xlat3.x = u_xlat31 / u_xlat3.x;
    u_xlat31 = (-u_xlat42) + 1.0;
    u_xlat45 = u_xlat31 * u_xlat31;
    u_xlat45 = u_xlat45 * u_xlat45;
    u_xlat31 = u_xlat31 * u_xlat45;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat45 = u_xlat2.x * u_xlat2.x;
    u_xlat45 = u_xlat45 * u_xlat45;
    u_xlat2.x = u_xlat2.x * u_xlat45;
    u_xlat45 = u_xlat2.y * u_xlat2.y;
    u_xlat45 = dot(vec2(u_xlat45), u_xlat18.xx);
    u_xlat45 = u_xlat45 + -0.5;
    u_xlat17.y = u_xlat45 * u_xlat31 + 1.0;
    u_xlat3.w = u_xlat45 * u_xlat2.x + 1.0;
    u_xlat3.xz = u_xlat3.xw * u_xlat17.xy;
    u_xlat3.x = u_xlat3.x * 0.785398185;
    u_xlat17.x = max(u_xlat3.x, 9.99999975e-05);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat3.x = (u_xlatb44) ? u_xlat17.x : u_xlat3.x;
    u_xlat3.x = u_xlat42 * u_xlat3.x;
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat42 = u_xlat42 * u_xlat3.z;
    u_xlat30 = u_xlat30 * u_xlat18.x;
    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
    u_xlat17.x = float(1.0) / u_xlat32.y;
    u_xlat30 = (u_xlatb44) ? u_xlat30 : u_xlat17.x;
    u_xlat44 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb44 = u_xlat44!=0.0;
    u_xlat44 = u_xlatb44 ? 1.0 : float(0.0);
    u_xlat44 = u_xlat44 * u_xlat3.x;
    u_xlat3.x = u_xlat4.x + _Glossiness;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat17.xyz = vec3(u_xlat42) * u_xlat6.xyz;
    u_xlat17.xyz = u_xlat7.xyz * vec3(u_xlat43) + u_xlat17.xyz;
    u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat44);
    u_xlat42 = (-u_xlat2.y) + 1.0;
    u_xlat43 = u_xlat42 * u_xlat42;
    u_xlat43 = u_xlat43 * u_xlat43;
    u_xlat42 = u_xlat42 * u_xlat43;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat17.xyz + u_xlat4.xyz;
    u_xlat16.xyz = u_xlat5.xyz * vec3(u_xlat30);
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xxx;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat16.xyz * u_xlat0.xyz + u_xlat1.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 179 math, 7 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 o_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_8 * 0.5);
  vec2 tmpvar_28;
  tmpvar_28.x = tmpvar_27.x;
  tmpvar_28.y = (tmpvar_27.y * _ProjectionParams.x);
  o_26.xy = (tmpvar_28 + tmpvar_27.w);
  o_26.zw = tmpvar_8.zw;
  vec4 ambientOrLightmapUV_29;
  ambientOrLightmapUV_29.xy = vec2(0.0, 0.0);
  ambientOrLightmapUV_29.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_29;
  xlv_TEXCOORD6 = o_26;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  float tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (tmpvar_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_9;
  float outModifiedAlpha_10;
  diffColor_9 = ((tmpvar_4 * tmpvar_6) * tmpvar_2);
  outModifiedAlpha_10 = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  float tmpvar_11;
  tmpvar_11 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_7, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_13;
  vec3 tmpvar_14;
  vec3 tmpvar_15;
  vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_15 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_16.w) * tmpvar_16.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_7, (tmpvar_17.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_17.w));
  tmpvar_15 = (tmpvar_15 * tmpvar_11);
  tmpvar_13 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_14 = vec3(0.0, 0.0, 0.0);
  float tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = (1.0 - _Glossiness);
  tmpvar_19 = (tmpvar_8 - (2.0 * (
    dot (tmpvar_7, tmpvar_8)
   * tmpvar_7)));
  vec3 originalReflUVW_20;
  vec3 specular_21;
  originalReflUVW_20 = tmpvar_19;
  vec3 worldRefl_22;
  worldRefl_22 = tmpvar_19;
  vec3 worldPos_23;
  worldPos_23 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_24;
    tmpvar_24 = normalize(tmpvar_19);
    vec3 tmpvar_25;
    tmpvar_25 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_24);
    vec3 tmpvar_26;
    tmpvar_26 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_24);
    bvec3 tmpvar_27;
    tmpvar_27 = greaterThan (tmpvar_24, vec3(0.0, 0.0, 0.0));
    float tmpvar_28;
    if (tmpvar_27.x) {
      tmpvar_28 = tmpvar_25.x;
    } else {
      tmpvar_28 = tmpvar_26.x;
    };
    float tmpvar_29;
    if (tmpvar_27.y) {
      tmpvar_29 = tmpvar_25.y;
    } else {
      tmpvar_29 = tmpvar_26.y;
    };
    float tmpvar_30;
    if (tmpvar_27.z) {
      tmpvar_30 = tmpvar_25.z;
    } else {
      tmpvar_30 = tmpvar_26.z;
    };
    worldPos_23 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_22 = (worldPos_23 + (tmpvar_24 * min (
      min (tmpvar_28, tmpvar_29)
    , tmpvar_30)));
  };
  tmpvar_19 = worldRefl_22;
  vec4 tmpvar_31;
  tmpvar_31.xyz = worldRefl_22;
  tmpvar_31.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  vec4 tmpvar_32;
  tmpvar_32 = textureCubeLod (unity_SpecCube0, worldRefl_22, tmpvar_31.w);
  vec3 tmpvar_33;
  tmpvar_33 = ((unity_SpecCube0_HDR.x * pow (tmpvar_32.w, unity_SpecCube0_HDR.y)) * tmpvar_32.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_34;
    worldRefl_34 = originalReflUVW_20;
    vec3 worldPos_35;
    worldPos_35 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_36;
      tmpvar_36 = normalize(originalReflUVW_20);
      vec3 tmpvar_37;
      tmpvar_37 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_36);
      vec3 tmpvar_38;
      tmpvar_38 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_36);
      bvec3 tmpvar_39;
      tmpvar_39 = greaterThan (tmpvar_36, vec3(0.0, 0.0, 0.0));
      float tmpvar_40;
      if (tmpvar_39.x) {
        tmpvar_40 = tmpvar_37.x;
      } else {
        tmpvar_40 = tmpvar_38.x;
      };
      float tmpvar_41;
      if (tmpvar_39.y) {
        tmpvar_41 = tmpvar_37.y;
      } else {
        tmpvar_41 = tmpvar_38.y;
      };
      float tmpvar_42;
      if (tmpvar_39.z) {
        tmpvar_42 = tmpvar_37.z;
      } else {
        tmpvar_42 = tmpvar_38.z;
      };
      worldPos_35 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_34 = (worldPos_35 + (tmpvar_36 * min (
        min (tmpvar_40, tmpvar_41)
      , tmpvar_42)));
    };
    tmpvar_19 = worldRefl_34;
    vec4 tmpvar_43;
    tmpvar_43.xyz = worldRefl_34;
    tmpvar_43.w = ((tmpvar_18 * (1.7 - 
      (0.7 * tmpvar_18)
    )) * 6.0);
    vec4 tmpvar_44;
    tmpvar_44 = textureCubeLod (unity_SpecCube1, worldRefl_34, tmpvar_43.w);
    specular_21 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_44.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_44.xyz), tmpvar_33, unity_SpecCube0_BoxMin.www);
  } else {
    specular_21 = tmpvar_33;
  };
  tmpvar_14 = (specular_21 * tmpvar_11);
  vec3 viewDir_45;
  viewDir_45 = -(tmpvar_8);
  float surfaceReduction_46;
  float specularTerm_47;
  float tmpvar_48;
  tmpvar_48 = (1.0 - _Glossiness);
  vec3 tmpvar_49;
  vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_45);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_7, tmpvar_49));
  float tmpvar_52;
  tmpvar_52 = max (0.0, dot (tmpvar_7, viewDir_45));
  float tmpvar_53;
  tmpvar_53 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_49));
  float tmpvar_54;
  tmpvar_54 = (tmpvar_48 * tmpvar_48);
  float tmpvar_55;
  tmpvar_55 = (tmpvar_48 * tmpvar_48);
  float tmpvar_56;
  tmpvar_56 = (tmpvar_55 * tmpvar_55);
  float tmpvar_57;
  tmpvar_57 = (((tmpvar_51 * tmpvar_51) * (tmpvar_56 - 1.0)) + 1.0);
  float x_58;
  x_58 = (1.0 - tmpvar_12);
  float x_59;
  x_59 = (1.0 - tmpvar_52);
  float tmpvar_60;
  tmpvar_60 = (0.5 + ((2.0 * tmpvar_53) * (tmpvar_53 * tmpvar_48)));
  float tmpvar_61;
  tmpvar_61 = ((1.0 + (
    (tmpvar_60 - 1.0)
   * 
    ((x_58 * x_58) * ((x_58 * x_58) * x_58))
  )) * (1.0 + (
    (tmpvar_60 - 1.0)
   * 
    ((x_59 * x_59) * ((x_59 * x_59) * x_59))
  )));
  float tmpvar_62;
  tmpvar_62 = (((2.0 / 
    (((tmpvar_12 * (
      (tmpvar_52 * (1.0 - tmpvar_54))
     + tmpvar_54)) + (tmpvar_52 * (
      (tmpvar_12 * (1.0 - tmpvar_54))
     + tmpvar_54))) + 1e-05)
  ) * (tmpvar_56 / 
    (((3.141593 * tmpvar_57) * tmpvar_57) + 1e-07)
  )) * 0.7853982);
  specularTerm_47 = tmpvar_62;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_47 = sqrt(max (0.0001, tmpvar_62));
  };
  float tmpvar_63;
  tmpvar_63 = max (0.0, (specularTerm_47 * tmpvar_12));
  specularTerm_47 = tmpvar_63;
  float tmpvar_64;
  tmpvar_64 = (tmpvar_61 * tmpvar_12);
  float tmpvar_65;
  tmpvar_65 = (tmpvar_48 * tmpvar_48);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_46 = (1.0 - ((0.28 * tmpvar_65) * tmpvar_48));
  } else {
    surfaceReduction_46 = (1.0/(((tmpvar_65 * tmpvar_65) + 1.0)));
  };
  float tmpvar_66;
  if (any(bvec3(tmpvar_5))) {
    tmpvar_66 = 1.0;
  } else {
    tmpvar_66 = 0.0;
  };
  specularTerm_47 = (tmpvar_63 * tmpvar_66);
  float x_67;
  x_67 = (1.0 - tmpvar_53);
  float x_68;
  x_68 = (1.0 - tmpvar_52);
  vec3 tmpvar_69;
  tmpvar_69 = (((diffColor_9 * 
    (tmpvar_15 + (tmpvar_13 * tmpvar_64))
  ) + (
    (specularTerm_47 * tmpvar_13)
   * 
    (tmpvar_5 + ((1.0 - tmpvar_5) * ((x_67 * x_67) * (
      (x_67 * x_67)
     * x_67))))
  )) + ((surfaceReduction_46 * tmpvar_14) * mix (tmpvar_5, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_6)), 0.0, 1.0)
  ), vec3(
    ((x_68 * x_68) * ((x_68 * x_68) * x_68))
  ))));
  vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = tmpvar_69;
  c_1.w = tmpvar_70.w;
  c_1.xyz = tmpvar_69;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_71;
  xlat_varoutput_71.xyz = c_1.xyz;
  xlat_varoutput_71.w = outModifiedAlpha_10;
  gl_FragData[0] = xlat_varoutput_71;
}


#endif
"
}
SubProgram "metal " {
// Stats: 28 math, 1 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 290
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [unity_WorldTransformParams]
Vector 240 [unity_DynamicLightmapST]
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  float3 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  float4 tmpvar_11;
  float4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_11 = (_mtl_u.glstate_matrix_mvp * tmpvar_12);
  float4 texcoord_13;
  texcoord_13.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_14;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_15;
  float3 n_16;
  n_16 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_15 = half3(n_16);
  float3 norm_17;
  norm_17 = float3(tmpvar_1);
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].x;
  v_18.y = _mtl_u.unity_WorldToObject[1].x;
  v_18.z = _mtl_u.unity_WorldToObject[2].x;
  v_18.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].y;
  v_19.y = _mtl_u.unity_WorldToObject[1].y;
  v_19.z = _mtl_u.unity_WorldToObject[2].y;
  v_19.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].z;
  v_20.y = _mtl_u.unity_WorldToObject[1].z;
  v_20.z = _mtl_u.unity_WorldToObject[2].z;
  v_20.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  float3 dir_22;
  dir_22 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_23;
  tmpvar_23[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_23[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_23[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = float(tmpvar_4.w);
  half3 normal_25;
  normal_25 = half3(tmpvar_21);
  half3 tangent_26;
  tangent_26 = half3(tmpvar_24.xyz);
  half tangentSign_27;
  tangentSign_27 = half(tmpvar_24.w);
  half xlat_varsign_28;
  float tmpvar_29;
  tmpvar_29 = ((float)tangentSign_27 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_28 = half(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * xlat_varsign_28);
  half3x3 tmpvar_31;
  tmpvar_31[0].x = tangent_26.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = normal_25.x;
  tmpvar_31[1].x = tangent_26.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = normal_25.y;
  tmpvar_31[2].x = tangent_26.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = normal_25.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_31);
  float3 v_32;
  v_32.x = tangentToWorld_5[0].x;
  v_32.y = tangentToWorld_5[1].x;
  v_32.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].y;
  v_33.y = tangentToWorld_5[1].y;
  v_33.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].z;
  v_34.y = tangentToWorld_5[1].z;
  v_34.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_34);
  float4 o_35;
  float4 tmpvar_36;
  tmpvar_36 = (tmpvar_11 * 0.5);
  float2 tmpvar_37;
  tmpvar_37.x = tmpvar_36.x;
  tmpvar_37.y = (tmpvar_36.y * _mtl_u._ProjectionParams.x);
  o_35.xy = (tmpvar_37 + tmpvar_36.w);
  o_35.zw = tmpvar_11.zw;
  half4 ambientOrLightmapUV_38;
  ambientOrLightmapUV_38.xy = half2(float2(0.0, 0.0));
  ambientOrLightmapUV_38.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_11;
  _mtl_o.xlv_TEXCOORD0 = texcoord_13;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_15;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_38;
  _mtl_o.xlv_TEXCOORD6 = o_35;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat2.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat2.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat2.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat3.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat3.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat3.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat3.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat3.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat15;
vec3 u_xlat16;
float u_xlat17;
float u_xlat28;
float u_xlat29;
float u_xlat30;
float u_xlat39;
float u_xlat40;
float u_xlat41;
float u_xlat42;
float u_xlat44;
mediump float u_xlat16_44;
bool u_xlatb44;
float u_xlat45;
mediump float u_xlat16_45;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat41 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat3.xyz = vec3(u_xlat41) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat42 = (-u_xlat39) + 1.0;
    SV_Target0.w = u_xlat1.w * u_xlat39 + u_xlat42;
    u_xlat39 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat40 = (-_OcclusionStrength) + 1.0;
    u_xlat40 = u_xlat10_5.y * _OcclusionStrength + u_xlat40;
    u_xlat17 = (-_Glossiness) + 1.0;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat30)) + u_xlat3.xyz;
    u_xlat4.xzw = u_xlat10_4.xxx * _LightColor0.xyz;
    u_xlat10_6 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat44 = u_xlat10_6.w * unity_DynamicLightmap_HDR.x;
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat44);
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat10_7 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_7.xyz = u_xlat10_7.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat44 = dot(u_xlat2.xyz, u_xlat16_7.xyz);
    u_xlat44 = u_xlat44 + 0.5;
    u_xlat6.xyz = vec3(u_xlat44) * u_xlat6.xyz;
    u_xlat16_44 = max(u_xlat10_7.w, 9.99999975e-05);
    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_44);
    u_xlatb44 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb44){
        u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat44 = inversesqrt(u_xlat44);
        u_xlat7.xyz = vec3(u_xlat44) * u_xlat5.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat44 = min(u_xlat8.y, u_xlat8.x);
        u_xlat44 = min(u_xlat8.z, u_xlat44);
        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat44) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat44 = (-u_xlat17) * 0.699999988 + 1.70000005;
    u_xlat44 = u_xlat17 * u_xlat44;
    u_xlat44 = u_xlat44 * 6.0;
    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat44);
    u_xlat16_45 = log2(u_xlat10_7.w);
    u_xlat45 = u_xlat16_45 * unity_SpecCube0_HDR.y;
    u_xlat45 = exp2(u_xlat45);
    u_xlat45 = u_xlat45 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat45);
    u_xlatb46 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = inversesqrt(u_xlat46);
            u_xlat9.xyz = u_xlat5.xyz * vec3(u_xlat46);
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat44);
        u_xlat16_44 = log2(u_xlat10_5.w);
        u_xlat44 = u_xlat16_44 * unity_SpecCube1_HDR.y;
        u_xlat44 = exp2(u_xlat44);
        u_xlat44 = u_xlat44 * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat44);
        u_xlat7.xyz = vec3(u_xlat45) * u_xlat10_7.xyz + (-u_xlat5.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = vec3(u_xlat40) * u_xlat8.xyz;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat41) + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat41 = max(u_xlat41, 0.00100000005);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat7.xyz = vec3(u_xlat41) * u_xlat7.xyz;
    u_xlat2.w = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat28 = u_xlat17 * u_xlat17;
    u_xlat3.x = (-u_xlat17) * u_xlat17 + 1.0;
    u_xlat16.x = u_xlat2.x * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat39 * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat39 * u_xlat16.x + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat16.x = u_xlat28 * u_xlat28;
    u_xlat41 = u_xlat2.w * u_xlat2.w;
    u_xlat7.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
    u_xlat41 = u_xlat41 * u_xlat7.x + 1.0;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat41 = u_xlat41 * 3.14159274 + 1.00000001e-07;
    u_xlat2.w = u_xlat16.x / u_xlat41;
    u_xlat16.x = (-u_xlat39) + 1.0;
    u_xlat29 = u_xlat16.x * u_xlat16.x;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat16.x = u_xlat16.x * u_xlat29;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat29 = u_xlat2.x * u_xlat2.x;
    u_xlat3.z = u_xlat29 * u_xlat29;
    u_xlat2.xw = u_xlat2.xw * u_xlat3.zx;
    u_xlat29 = u_xlat2.y * u_xlat2.y;
    u_xlat29 = dot(vec2(u_xlat29), vec2(u_xlat17));
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat16.x = u_xlat29 * u_xlat16.x + 1.0;
    u_xlat29 = u_xlat29 * u_xlat2.x + 1.0;
    u_xlat16.x = u_xlat29 * u_xlat16.x;
    u_xlat41 = u_xlat2.w * 0.785398185;
    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat29 = max(u_xlat41, 9.99999975e-05);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat41 = (u_xlatb3) ? u_xlat29 : u_xlat41;
    u_xlat41 = u_xlat39 * u_xlat41;
    u_xlat41 = max(u_xlat41, 0.0);
    u_xlat39 = u_xlat39 * u_xlat16.x;
    u_xlat28 = u_xlat28 * u_xlat17;
    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;
    u_xlat16.x = float(1.0) / u_xlat7.y;
    u_xlat28 = (u_xlatb3) ? u_xlat28 : u_xlat16.x;
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat41 = u_xlat41 * u_xlat3.x;
    u_xlat3.x = u_xlat42 + _Glossiness;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat16.xyz = vec3(u_xlat39) * u_xlat4.xzw;
    u_xlat16.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat16.xyz;
    u_xlat4.xyz = u_xlat4.xzw * vec3(u_xlat41);
    u_xlat39 = (-u_xlat2.y) + 1.0;
    u_xlat40 = u_xlat39 * u_xlat39;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat39 = u_xlat39 * u_xlat40;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16.xyz + u_xlat4.xyz;
    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat28);
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xxx;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat15.xyz * u_xlat0.xyz + u_xlat1.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 199 math, 7 textures, 15 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_12;
  n_12 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_16;
  vec4 ambientOrLightmapUV_17;
  ambientOrLightmapUV_17.w = 0.0;
  vec3 col_18;
  vec4 ndotl_19;
  vec4 lengthSq_20;
  vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_22;
  tmpvar_22 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_20 = (tmpvar_21 * tmpvar_21);
  lengthSq_20 = (lengthSq_20 + (tmpvar_22 * tmpvar_22));
  lengthSq_20 = (lengthSq_20 + (tmpvar_23 * tmpvar_23));
  ndotl_19 = (tmpvar_21 * tmpvar_16.x);
  ndotl_19 = (ndotl_19 + (tmpvar_22 * tmpvar_16.y));
  ndotl_19 = (ndotl_19 + (tmpvar_23 * tmpvar_16.z));
  vec4 tmpvar_24;
  tmpvar_24 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_19 * inversesqrt(lengthSq_20)));
  ndotl_19 = tmpvar_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * (1.0/((1.0 + 
    (lengthSq_20 * unity_4LightAtten0)
  ))));
  col_18 = (unity_LightColor[0].xyz * tmpvar_25.x);
  col_18 = (col_18 + (unity_LightColor[1].xyz * tmpvar_25.y));
  col_18 = (col_18 + (unity_LightColor[2].xyz * tmpvar_25.z));
  col_18 = (col_18 + (unity_LightColor[3].xyz * tmpvar_25.w));
  ambientOrLightmapUV_17.xyz = col_18;
  vec3 ambient_26;
  ambient_26 = ambientOrLightmapUV_17.xyz;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_26 = (col_18 * ((col_18 * 
      ((col_18 * 0.305306) + 0.6821711)
    ) + 0.01252288));
  };
  vec3 x1_27;
  vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_16.xyzz * tmpvar_16.yzzx);
  x1_27.x = dot (unity_SHBr, tmpvar_28);
  x1_27.y = dot (unity_SHBg, tmpvar_28);
  x1_27.z = dot (unity_SHBb, tmpvar_28);
  ambient_26 = (ambient_26 + (x1_27 + (unity_SHC.xyz * 
    ((tmpvar_16.x * tmpvar_16.x) - (tmpvar_16.y * tmpvar_16.y))
  )));
  ambientOrLightmapUV_17.xyz = ambient_26;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = n_12;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_17;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  float tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (tmpvar_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_9;
  float outModifiedAlpha_10;
  diffColor_9 = ((tmpvar_4 * tmpvar_6) * tmpvar_2);
  outModifiedAlpha_10 = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  float tmpvar_11;
  tmpvar_11 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_7, _WorldSpaceLightPos0.xyz));
  float tmpvar_13;
  tmpvar_13 = (1.0 - _Glossiness);
  vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_8 - (2.0 * (
    dot (tmpvar_7, tmpvar_8)
   * tmpvar_7)));
  vec3 tmpvar_15;
  vec3 tmpvar_16;
  tmpvar_16 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_17;
  ambient_17 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_18;
  ambient_contrib_18 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_19;
    tmpvar_19.w = 1.0;
    tmpvar_19.xyz = tmpvar_7;
    vec3 x1_20;
    vec3 texCoord_21;
    vec3 tmpvar_22;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_23;
      tmpvar_23.w = 1.0;
      tmpvar_23.xyz = xlv_TEXCOORD8;
      tmpvar_22 = (unity_ProbeVolumeWorldToObject * tmpvar_23).xyz;
    } else {
      tmpvar_22 = xlv_TEXCOORD8;
    };
    vec3 tmpvar_24;
    tmpvar_24 = ((tmpvar_22 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_21.yz = tmpvar_24.yz;
    texCoord_21.x = (tmpvar_24.x * 0.25);
    float tmpvar_25;
    float tmpvar_26;
    tmpvar_26 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_25 = clamp (texCoord_21.x, tmpvar_26, (0.25 - tmpvar_26));
    texCoord_21.x = tmpvar_25;
    vec4 tmpvar_27;
    tmpvar_27 = texture3D (unity_ProbeVolumeSH, texCoord_21);
    texCoord_21.x = (tmpvar_25 + 0.25);
    vec4 tmpvar_28;
    tmpvar_28 = texture3D (unity_ProbeVolumeSH, texCoord_21);
    texCoord_21.x = (tmpvar_25 + 0.5);
    x1_20.x = dot (tmpvar_27, tmpvar_19);
    x1_20.y = dot (tmpvar_28, tmpvar_19);
    x1_20.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_21), tmpvar_19);
    ambient_contrib_18 = x1_20;
  } else {
    vec4 tmpvar_29;
    tmpvar_29.w = 1.0;
    tmpvar_29.xyz = tmpvar_7;
    vec3 x_30;
    x_30.x = dot (unity_SHAr, tmpvar_29);
    x_30.y = dot (unity_SHAg, tmpvar_29);
    x_30.z = dot (unity_SHAb, tmpvar_29);
    ambient_contrib_18 = x_30;
  };
  vec3 tmpvar_31;
  tmpvar_31 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_18));
  ambient_17 = tmpvar_31;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_17 = max (((1.055 * 
      pow (max (tmpvar_31, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_16 = (ambient_17 * tmpvar_11);
  tmpvar_15 = vec3(0.0, 0.0, 0.0);
  vec3 specular_32;
  vec3 worldRefl_33;
  worldRefl_33 = tmpvar_14;
  vec3 worldPos_34;
  worldPos_34 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_35;
    tmpvar_35 = normalize(tmpvar_14);
    vec3 tmpvar_36;
    tmpvar_36 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_35);
    vec3 tmpvar_37;
    tmpvar_37 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_35);
    bvec3 tmpvar_38;
    tmpvar_38 = greaterThan (tmpvar_35, vec3(0.0, 0.0, 0.0));
    float tmpvar_39;
    if (tmpvar_38.x) {
      tmpvar_39 = tmpvar_36.x;
    } else {
      tmpvar_39 = tmpvar_37.x;
    };
    float tmpvar_40;
    if (tmpvar_38.y) {
      tmpvar_40 = tmpvar_36.y;
    } else {
      tmpvar_40 = tmpvar_37.y;
    };
    float tmpvar_41;
    if (tmpvar_38.z) {
      tmpvar_41 = tmpvar_36.z;
    } else {
      tmpvar_41 = tmpvar_37.z;
    };
    worldPos_34 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_33 = (worldPos_34 + (tmpvar_35 * min (
      min (tmpvar_39, tmpvar_40)
    , tmpvar_41)));
  };
  vec4 tmpvar_42;
  tmpvar_42.xyz = worldRefl_33;
  tmpvar_42.w = ((tmpvar_13 * (1.7 - 
    (0.7 * tmpvar_13)
  )) * 6.0);
  vec4 tmpvar_43;
  tmpvar_43 = textureCubeLod (unity_SpecCube0, worldRefl_33, tmpvar_42.w);
  vec3 tmpvar_44;
  tmpvar_44 = ((unity_SpecCube0_HDR.x * pow (tmpvar_43.w, unity_SpecCube0_HDR.y)) * tmpvar_43.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_45;
    worldRefl_45 = tmpvar_14;
    vec3 worldPos_46;
    worldPos_46 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_47;
      tmpvar_47 = normalize(tmpvar_14);
      vec3 tmpvar_48;
      tmpvar_48 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_47);
      vec3 tmpvar_49;
      tmpvar_49 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_47);
      bvec3 tmpvar_50;
      tmpvar_50 = greaterThan (tmpvar_47, vec3(0.0, 0.0, 0.0));
      float tmpvar_51;
      if (tmpvar_50.x) {
        tmpvar_51 = tmpvar_48.x;
      } else {
        tmpvar_51 = tmpvar_49.x;
      };
      float tmpvar_52;
      if (tmpvar_50.y) {
        tmpvar_52 = tmpvar_48.y;
      } else {
        tmpvar_52 = tmpvar_49.y;
      };
      float tmpvar_53;
      if (tmpvar_50.z) {
        tmpvar_53 = tmpvar_48.z;
      } else {
        tmpvar_53 = tmpvar_49.z;
      };
      worldPos_46 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_45 = (worldPos_46 + (tmpvar_47 * min (
        min (tmpvar_51, tmpvar_52)
      , tmpvar_53)));
    };
    vec4 tmpvar_54;
    tmpvar_54.xyz = worldRefl_45;
    tmpvar_54.w = ((tmpvar_13 * (1.7 - 
      (0.7 * tmpvar_13)
    )) * 6.0);
    vec4 tmpvar_55;
    tmpvar_55 = textureCubeLod (unity_SpecCube1, worldRefl_45, tmpvar_54.w);
    specular_32 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_55.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_55.xyz), tmpvar_44, unity_SpecCube0_BoxMin.www);
  } else {
    specular_32 = tmpvar_44;
  };
  tmpvar_15 = (specular_32 * tmpvar_11);
  vec3 viewDir_56;
  viewDir_56 = -(tmpvar_8);
  float surfaceReduction_57;
  float specularTerm_58;
  float tmpvar_59;
  tmpvar_59 = (1.0 - _Glossiness);
  vec3 tmpvar_60;
  vec3 inVec_61;
  inVec_61 = (_WorldSpaceLightPos0.xyz + viewDir_56);
  tmpvar_60 = (inVec_61 * inversesqrt(max (0.001, 
    dot (inVec_61, inVec_61)
  )));
  float tmpvar_62;
  tmpvar_62 = max (0.0, dot (tmpvar_7, tmpvar_60));
  float tmpvar_63;
  tmpvar_63 = max (0.0, dot (tmpvar_7, viewDir_56));
  float tmpvar_64;
  tmpvar_64 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_60));
  float tmpvar_65;
  tmpvar_65 = (tmpvar_59 * tmpvar_59);
  float tmpvar_66;
  tmpvar_66 = (tmpvar_59 * tmpvar_59);
  float tmpvar_67;
  tmpvar_67 = (tmpvar_66 * tmpvar_66);
  float tmpvar_68;
  tmpvar_68 = (((tmpvar_62 * tmpvar_62) * (tmpvar_67 - 1.0)) + 1.0);
  float x_69;
  x_69 = (1.0 - tmpvar_12);
  float x_70;
  x_70 = (1.0 - tmpvar_63);
  float tmpvar_71;
  tmpvar_71 = (0.5 + ((2.0 * tmpvar_64) * (tmpvar_64 * tmpvar_59)));
  float tmpvar_72;
  tmpvar_72 = ((1.0 + (
    (tmpvar_71 - 1.0)
   * 
    ((x_69 * x_69) * ((x_69 * x_69) * x_69))
  )) * (1.0 + (
    (tmpvar_71 - 1.0)
   * 
    ((x_70 * x_70) * ((x_70 * x_70) * x_70))
  )));
  float tmpvar_73;
  tmpvar_73 = (((2.0 / 
    (((tmpvar_12 * (
      (tmpvar_63 * (1.0 - tmpvar_65))
     + tmpvar_65)) + (tmpvar_63 * (
      (tmpvar_12 * (1.0 - tmpvar_65))
     + tmpvar_65))) + 1e-05)
  ) * (tmpvar_67 / 
    (((3.141593 * tmpvar_68) * tmpvar_68) + 1e-07)
  )) * 0.7853982);
  specularTerm_58 = tmpvar_73;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_58 = sqrt(max (0.0001, tmpvar_73));
  };
  float tmpvar_74;
  tmpvar_74 = max (0.0, (specularTerm_58 * tmpvar_12));
  specularTerm_58 = tmpvar_74;
  float tmpvar_75;
  tmpvar_75 = (tmpvar_72 * tmpvar_12);
  float tmpvar_76;
  tmpvar_76 = (tmpvar_59 * tmpvar_59);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_57 = (1.0 - ((0.28 * tmpvar_76) * tmpvar_59));
  } else {
    surfaceReduction_57 = (1.0/(((tmpvar_76 * tmpvar_76) + 1.0)));
  };
  float tmpvar_77;
  if (any(bvec3(tmpvar_5))) {
    tmpvar_77 = 1.0;
  } else {
    tmpvar_77 = 0.0;
  };
  specularTerm_58 = (tmpvar_74 * tmpvar_77);
  float x_78;
  x_78 = (1.0 - tmpvar_64);
  float x_79;
  x_79 = (1.0 - tmpvar_63);
  vec3 tmpvar_80;
  tmpvar_80 = (((diffColor_9 * 
    (tmpvar_16 + (_LightColor0.xyz * tmpvar_75))
  ) + (
    (specularTerm_58 * _LightColor0.xyz)
   * 
    (tmpvar_5 + ((1.0 - tmpvar_5) * ((x_78 * x_78) * (
      (x_78 * x_78)
     * x_78))))
  )) + ((surfaceReduction_57 * tmpvar_15) * mix (tmpvar_5, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_6)), 0.0, 1.0)
  ), vec3(
    ((x_79 * x_79) * ((x_79 * x_79) * x_79))
  ))));
  vec4 tmpvar_81;
  tmpvar_81.w = 1.0;
  tmpvar_81.xyz = tmpvar_80;
  c_1.w = tmpvar_81.w;
  c_1.xyz = tmpvar_80;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_82;
  xlat_varoutput_82.xyz = c_1.xyz;
  xlat_varoutput_82.w = outModifiedAlpha_10;
  gl_FragData[0] = xlat_varoutput_82;
}


#endif
"
}
SubProgram "metal " {
// Stats: 61 math, 2 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 418
Matrix 176 [glstate_matrix_mvp]
Matrix 240 [unity_ObjectToWorld]
Matrix 304 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [unity_4LightPosX0]
Vector 32 [unity_4LightPosY0]
Vector 48 [unity_4LightPosZ0]
VectorHalf 64 [unity_4LightAtten0] 4
VectorHalf 72 [unity_LightColor] 4 8
VectorHalf 136 [unity_SHBr] 4
VectorHalf 144 [unity_SHBg] 4
VectorHalf 152 [unity_SHBb] 4
VectorHalf 160 [unity_SHC] 4
VectorHalf 368 [unity_ColorSpaceLuminance] 4
Vector 384 [_MainTex_ST]
Vector 400 [_DetailAlbedoMap_ST]
ScalarHalf 416 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 unity_4LightPosX0;
  float4 unity_4LightPosY0;
  float4 unity_4LightPosZ0;
  half4 unity_4LightAtten0;
  half4 unity_LightColor[8];
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float3 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_7 = tmpvar_8.xyz;
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_19);
  half3 normalWorld_20;
  normalWorld_20 = half3(tmpvar_19);
  half4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = half(0.0);
  float3 lightColor0_22;
  lightColor0_22 = float3(_mtl_u.unity_LightColor[0].xyz);
  float3 lightColor1_23;
  lightColor1_23 = float3(_mtl_u.unity_LightColor[1].xyz);
  float3 lightColor2_24;
  lightColor2_24 = float3(_mtl_u.unity_LightColor[2].xyz);
  float3 lightColor3_25;
  lightColor3_25 = float3(_mtl_u.unity_LightColor[3].xyz);
  float4 lightAttenSq_26;
  lightAttenSq_26 = float4(_mtl_u.unity_4LightAtten0);
  float3 normal_27;
  normal_27 = float3(normalWorld_20);
  float3 col_28;
  float4 ndotl_29;
  float4 lengthSq_30;
  float4 tmpvar_31;
  tmpvar_31 = (_mtl_u.unity_4LightPosX0 - tmpvar_8.x);
  float4 tmpvar_32;
  tmpvar_32 = (_mtl_u.unity_4LightPosY0 - tmpvar_8.y);
  float4 tmpvar_33;
  tmpvar_33 = (_mtl_u.unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  float4 tmpvar_34;
  tmpvar_34 = max (float4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * rsqrt(lengthSq_30)));
  ndotl_29 = tmpvar_34;
  float4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (lengthSq_30 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_35.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_35.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_35.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_35.w));
  ambientOrLightmapUV_21.xyz = half3(col_28);
  half3 ambient_36;
  ambient_36 = ambientOrLightmapUV_21.xyz;
  bool tmpvar_37;
  tmpvar_37 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_37) {
    ambient_36 = (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 
      ((ambientOrLightmapUV_21.xyz * (half)0.305306) + (half)0.6821711)
    ) + (half)0.01252288));
  };
  half3 x1_38;
  half4 tmpvar_39;
  tmpvar_39 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_38.x = dot (_mtl_u.unity_SHBr, tmpvar_39);
  x1_38.y = dot (_mtl_u.unity_SHBg, tmpvar_39);
  x1_38.z = dot (_mtl_u.unity_SHBb, tmpvar_39);
  ambient_36 = (ambient_36 + (x1_38 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  ambientOrLightmapUV_21.xyz = ambient_36;
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_7;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat3 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
    u_xlat15 = u_xlat1.y * u_xlat1.y;
    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec4 u_xlat6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat15;
vec3 u_xlat16;
float u_xlat17;
float u_xlat28;
float u_xlat29;
vec2 u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
float u_xlat39;
float u_xlat40;
float u_xlat41;
bool u_xlatb41;
float u_xlat42;
float u_xlat43;
mediump float u_xlat16_43;
float u_xlat44;
bool u_xlatb44;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat16.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat4.x = (-u_xlat39) + 1.0;
    SV_Target0.w = u_xlat1.w * u_xlat39 + u_xlat4.x;
    u_xlat39 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat40 = (-_OcclusionStrength) + 1.0;
    u_xlat40 = u_xlat10_5.y * _OcclusionStrength + u_xlat40;
    u_xlat17 = (-_Glossiness) + 1.0;
    u_xlat30.x = dot(u_xlat16.xyz, u_xlat2.xyz);
    u_xlat30.x = u_xlat30.x + u_xlat30.x;
    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat30.xxx) + u_xlat16.xyz;
    u_xlatb30 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb30){
        u_xlatb30 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb30)) ? u_xlat6.xyz : vs_TEXCOORD8.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat30.x = u_xlat6.y * 0.25;
        u_xlat43 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat44 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat30.x = max(u_xlat43, u_xlat30.x);
        u_xlat6.x = min(u_xlat44, u_xlat30.x);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat2.w = 1.0;
        u_xlat7.x = dot(u_xlat10_7, u_xlat2);
        u_xlat7.y = dot(u_xlat10_8, u_xlat2);
        u_xlat7.z = dot(u_xlat10_6, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat7.x = dot(unity_SHAr, u_xlat2);
        u_xlat7.y = dot(unity_SHAg, u_xlat2);
        u_xlat7.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb41 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat7.xyz = log2(u_xlat6.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat6.xyz = (bool(u_xlatb41)) ? u_xlat7.xyz : u_xlat6.xyz;
    u_xlatb30 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb30){
        u_xlat30.x = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat30.x = inversesqrt(u_xlat30.x);
        u_xlat7.xyz = u_xlat30.xxx * u_xlat5.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat30.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat30.x = min(u_xlat8.z, u_xlat30.x);
        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * u_xlat30.xxx + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat30.x = (-u_xlat17) * 0.699999988 + 1.70000005;
    u_xlat30.x = u_xlat30.x * u_xlat17;
    u_xlat30.x = u_xlat30.x * 6.0;
    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat30.x);
    u_xlat16_43 = log2(u_xlat10_7.w);
    u_xlat43 = u_xlat16_43 * unity_SpecCube0_HDR.y;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat43);
    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb44){
        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb44){
            u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat44 = inversesqrt(u_xlat44);
            u_xlat9.xyz = vec3(u_xlat44) * u_xlat5.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
            u_xlat44 = min(u_xlat10.z, u_xlat44);
            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat30.x);
        u_xlat16_30 = log2(u_xlat10_5.w);
        u_xlat30.x = u_xlat16_30 * unity_SpecCube1_HDR.y;
        u_xlat30.x = exp2(u_xlat30.x);
        u_xlat30.x = u_xlat30.x * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * u_xlat30.xxx;
        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10_7.xyz + (-u_xlat5.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = vec3(u_xlat40) * u_xlat8.xyz;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
    u_xlat3.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat16.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat28 = u_xlat17 * u_xlat17;
    u_xlat16.x = (-u_xlat17) * u_xlat17 + 1.0;
    u_xlat29 = u_xlat2.x * u_xlat16.x + u_xlat28;
    u_xlat16.x = u_xlat39 * u_xlat16.x + u_xlat28;
    u_xlat16.x = u_xlat2.x * u_xlat16.x;
    u_xlat16.x = u_xlat39 * u_xlat29 + u_xlat16.x;
    u_xlat16.x = u_xlat16.x + 9.99999975e-06;
    u_xlat16.x = 2.0 / u_xlat16.x;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat30.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
    u_xlat3.x = u_xlat3.x * u_xlat30.x + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = u_xlat3.x * 3.14159274 + 1.00000001e-07;
    u_xlat3.x = u_xlat29 / u_xlat3.x;
    u_xlat29 = (-u_xlat39) + 1.0;
    u_xlat42 = u_xlat29 * u_xlat29;
    u_xlat42 = u_xlat42 * u_xlat42;
    u_xlat29 = u_xlat29 * u_xlat42;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat42 = u_xlat2.x * u_xlat2.x;
    u_xlat42 = u_xlat42 * u_xlat42;
    u_xlat2.x = u_xlat2.x * u_xlat42;
    u_xlat42 = u_xlat2.y * u_xlat2.y;
    u_xlat42 = dot(vec2(u_xlat42), vec2(u_xlat17));
    u_xlat42 = u_xlat42 + -0.5;
    u_xlat16.y = u_xlat42 * u_xlat29 + 1.0;
    u_xlat3.w = u_xlat42 * u_xlat2.x + 1.0;
    u_xlat3.xz = u_xlat3.xw * u_xlat16.xy;
    u_xlat3.x = u_xlat3.x * 0.785398185;
    u_xlat16.x = max(u_xlat3.x, 9.99999975e-05);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat3.x = (u_xlatb41) ? u_xlat16.x : u_xlat3.x;
    u_xlat3.x = u_xlat39 * u_xlat3.x;
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat39 = u_xlat39 * u_xlat3.z;
    u_xlat28 = u_xlat28 * u_xlat17;
    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;
    u_xlat16.x = float(1.0) / u_xlat30.y;
    u_xlat28 = (u_xlatb41) ? u_xlat28 : u_xlat16.x;
    u_xlat41 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb41 = u_xlat41!=0.0;
    u_xlat41 = u_xlatb41 ? 1.0 : float(0.0);
    u_xlat41 = u_xlat41 * u_xlat3.x;
    u_xlat3.x = u_xlat4.x + _Glossiness;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat16.xyz = vec3(u_xlat39) * _LightColor0.xyz;
    u_xlat16.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat16.xyz;
    u_xlat4.xyz = vec3(u_xlat41) * _LightColor0.xyz;
    u_xlat39 = (-u_xlat2.y) + 1.0;
    u_xlat40 = u_xlat39 * u_xlat39;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat39 = u_xlat39 * u_xlat40;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16.xyz + u_xlat4.xyz;
    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat28);
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xxx;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat15.xyz * u_xlat0.xyz + u_xlat1.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 178 math, 6 textures, 12 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 ambientOrLightmapUV_26;
  ambientOrLightmapUV_26.xy = vec2(0.0, 0.0);
  ambientOrLightmapUV_26.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_26;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  float tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (tmpvar_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_9;
  float outModifiedAlpha_10;
  diffColor_9 = ((tmpvar_4 * tmpvar_6) * tmpvar_2);
  outModifiedAlpha_10 = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  float tmpvar_11;
  tmpvar_11 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_7, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_13;
  vec3 tmpvar_14;
  vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_14 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_15.w) * tmpvar_15.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_7, (tmpvar_16.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_16.w));
  tmpvar_14 = (tmpvar_14 * tmpvar_11);
  tmpvar_13 = vec3(0.0, 0.0, 0.0);
  float tmpvar_17;
  vec3 tmpvar_18;
  tmpvar_17 = (1.0 - _Glossiness);
  tmpvar_18 = (tmpvar_8 - (2.0 * (
    dot (tmpvar_7, tmpvar_8)
   * tmpvar_7)));
  vec3 originalReflUVW_19;
  vec3 specular_20;
  originalReflUVW_19 = tmpvar_18;
  vec3 worldRefl_21;
  worldRefl_21 = tmpvar_18;
  vec3 worldPos_22;
  worldPos_22 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_23;
    tmpvar_23 = normalize(tmpvar_18);
    vec3 tmpvar_24;
    tmpvar_24 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_23);
    vec3 tmpvar_25;
    tmpvar_25 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_23);
    bvec3 tmpvar_26;
    tmpvar_26 = greaterThan (tmpvar_23, vec3(0.0, 0.0, 0.0));
    float tmpvar_27;
    if (tmpvar_26.x) {
      tmpvar_27 = tmpvar_24.x;
    } else {
      tmpvar_27 = tmpvar_25.x;
    };
    float tmpvar_28;
    if (tmpvar_26.y) {
      tmpvar_28 = tmpvar_24.y;
    } else {
      tmpvar_28 = tmpvar_25.y;
    };
    float tmpvar_29;
    if (tmpvar_26.z) {
      tmpvar_29 = tmpvar_24.z;
    } else {
      tmpvar_29 = tmpvar_25.z;
    };
    worldPos_22 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_21 = (worldPos_22 + (tmpvar_23 * min (
      min (tmpvar_27, tmpvar_28)
    , tmpvar_29)));
  };
  tmpvar_18 = worldRefl_21;
  vec4 tmpvar_30;
  tmpvar_30.xyz = worldRefl_21;
  tmpvar_30.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  vec4 tmpvar_31;
  tmpvar_31 = textureCubeLod (unity_SpecCube0, worldRefl_21, tmpvar_30.w);
  vec3 tmpvar_32;
  tmpvar_32 = ((unity_SpecCube0_HDR.x * pow (tmpvar_31.w, unity_SpecCube0_HDR.y)) * tmpvar_31.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_33;
    worldRefl_33 = originalReflUVW_19;
    vec3 worldPos_34;
    worldPos_34 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_35;
      tmpvar_35 = normalize(originalReflUVW_19);
      vec3 tmpvar_36;
      tmpvar_36 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_35);
      vec3 tmpvar_37;
      tmpvar_37 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_35);
      bvec3 tmpvar_38;
      tmpvar_38 = greaterThan (tmpvar_35, vec3(0.0, 0.0, 0.0));
      float tmpvar_39;
      if (tmpvar_38.x) {
        tmpvar_39 = tmpvar_36.x;
      } else {
        tmpvar_39 = tmpvar_37.x;
      };
      float tmpvar_40;
      if (tmpvar_38.y) {
        tmpvar_40 = tmpvar_36.y;
      } else {
        tmpvar_40 = tmpvar_37.y;
      };
      float tmpvar_41;
      if (tmpvar_38.z) {
        tmpvar_41 = tmpvar_36.z;
      } else {
        tmpvar_41 = tmpvar_37.z;
      };
      worldPos_34 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_33 = (worldPos_34 + (tmpvar_35 * min (
        min (tmpvar_39, tmpvar_40)
      , tmpvar_41)));
    };
    tmpvar_18 = worldRefl_33;
    vec4 tmpvar_42;
    tmpvar_42.xyz = worldRefl_33;
    tmpvar_42.w = ((tmpvar_17 * (1.7 - 
      (0.7 * tmpvar_17)
    )) * 6.0);
    vec4 tmpvar_43;
    tmpvar_43 = textureCubeLod (unity_SpecCube1, worldRefl_33, tmpvar_42.w);
    specular_20 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_43.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_43.xyz), tmpvar_32, unity_SpecCube0_BoxMin.www);
  } else {
    specular_20 = tmpvar_32;
  };
  tmpvar_13 = (specular_20 * tmpvar_11);
  vec3 viewDir_44;
  viewDir_44 = -(tmpvar_8);
  float surfaceReduction_45;
  float specularTerm_46;
  float tmpvar_47;
  tmpvar_47 = (1.0 - _Glossiness);
  vec3 tmpvar_48;
  vec3 inVec_49;
  inVec_49 = (_WorldSpaceLightPos0.xyz + viewDir_44);
  tmpvar_48 = (inVec_49 * inversesqrt(max (0.001, 
    dot (inVec_49, inVec_49)
  )));
  float tmpvar_50;
  tmpvar_50 = max (0.0, dot (tmpvar_7, tmpvar_48));
  float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_7, viewDir_44));
  float tmpvar_52;
  tmpvar_52 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_48));
  float tmpvar_53;
  tmpvar_53 = (tmpvar_47 * tmpvar_47);
  float tmpvar_54;
  tmpvar_54 = (tmpvar_47 * tmpvar_47);
  float tmpvar_55;
  tmpvar_55 = (tmpvar_54 * tmpvar_54);
  float tmpvar_56;
  tmpvar_56 = (((tmpvar_50 * tmpvar_50) * (tmpvar_55 - 1.0)) + 1.0);
  float x_57;
  x_57 = (1.0 - tmpvar_12);
  float x_58;
  x_58 = (1.0 - tmpvar_51);
  float tmpvar_59;
  tmpvar_59 = (0.5 + ((2.0 * tmpvar_52) * (tmpvar_52 * tmpvar_47)));
  float tmpvar_60;
  tmpvar_60 = ((1.0 + (
    (tmpvar_59 - 1.0)
   * 
    ((x_57 * x_57) * ((x_57 * x_57) * x_57))
  )) * (1.0 + (
    (tmpvar_59 - 1.0)
   * 
    ((x_58 * x_58) * ((x_58 * x_58) * x_58))
  )));
  float tmpvar_61;
  tmpvar_61 = (((2.0 / 
    (((tmpvar_12 * (
      (tmpvar_51 * (1.0 - tmpvar_53))
     + tmpvar_53)) + (tmpvar_51 * (
      (tmpvar_12 * (1.0 - tmpvar_53))
     + tmpvar_53))) + 1e-05)
  ) * (tmpvar_55 / 
    (((3.141593 * tmpvar_56) * tmpvar_56) + 1e-07)
  )) * 0.7853982);
  specularTerm_46 = tmpvar_61;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_46 = sqrt(max (0.0001, tmpvar_61));
  };
  float tmpvar_62;
  tmpvar_62 = max (0.0, (specularTerm_46 * tmpvar_12));
  specularTerm_46 = tmpvar_62;
  float tmpvar_63;
  tmpvar_63 = (tmpvar_60 * tmpvar_12);
  float tmpvar_64;
  tmpvar_64 = (tmpvar_47 * tmpvar_47);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_45 = (1.0 - ((0.28 * tmpvar_64) * tmpvar_47));
  } else {
    surfaceReduction_45 = (1.0/(((tmpvar_64 * tmpvar_64) + 1.0)));
  };
  float tmpvar_65;
  if (any(bvec3(tmpvar_5))) {
    tmpvar_65 = 1.0;
  } else {
    tmpvar_65 = 0.0;
  };
  specularTerm_46 = (tmpvar_62 * tmpvar_65);
  float x_66;
  x_66 = (1.0 - tmpvar_52);
  float x_67;
  x_67 = (1.0 - tmpvar_51);
  vec3 tmpvar_68;
  tmpvar_68 = (((diffColor_9 * 
    (tmpvar_14 + (_LightColor0.xyz * tmpvar_63))
  ) + (
    (specularTerm_46 * _LightColor0.xyz)
   * 
    (tmpvar_5 + ((1.0 - tmpvar_5) * ((x_66 * x_66) * (
      (x_66 * x_66)
     * x_66))))
  )) + ((surfaceReduction_45 * tmpvar_13) * mix (tmpvar_5, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_6)), 0.0, 1.0)
  ), vec3(
    ((x_67 * x_67) * ((x_67 * x_67) * x_67))
  ))));
  vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = tmpvar_68;
  c_1.w = tmpvar_69.w;
  c_1.xyz = tmpvar_68;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_70;
  xlat_varoutput_70.xyz = c_1.xyz;
  xlat_varoutput_70.w = outModifiedAlpha_10;
  gl_FragData[0] = xlat_varoutput_70;
}


#endif
"
}
SubProgram "metal " {
// Stats: 25 math, 1 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 274
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Matrix 144 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [unity_WorldTransformParams]
Vector 224 [unity_DynamicLightmapST]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  float3 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  float4 tmpvar_11;
  float4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_11 = (_mtl_u.glstate_matrix_mvp * tmpvar_12);
  float4 texcoord_13;
  texcoord_13.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_14;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_15;
  float3 n_16;
  n_16 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_15 = half3(n_16);
  float3 norm_17;
  norm_17 = float3(tmpvar_1);
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].x;
  v_18.y = _mtl_u.unity_WorldToObject[1].x;
  v_18.z = _mtl_u.unity_WorldToObject[2].x;
  v_18.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].y;
  v_19.y = _mtl_u.unity_WorldToObject[1].y;
  v_19.z = _mtl_u.unity_WorldToObject[2].y;
  v_19.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].z;
  v_20.y = _mtl_u.unity_WorldToObject[1].z;
  v_20.z = _mtl_u.unity_WorldToObject[2].z;
  v_20.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  float3 dir_22;
  dir_22 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_23;
  tmpvar_23[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_23[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_23[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = float(tmpvar_4.w);
  half3 normal_25;
  normal_25 = half3(tmpvar_21);
  half3 tangent_26;
  tangent_26 = half3(tmpvar_24.xyz);
  half tangentSign_27;
  tangentSign_27 = half(tmpvar_24.w);
  half xlat_varsign_28;
  float tmpvar_29;
  tmpvar_29 = ((float)tangentSign_27 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_28 = half(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * xlat_varsign_28);
  half3x3 tmpvar_31;
  tmpvar_31[0].x = tangent_26.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = normal_25.x;
  tmpvar_31[1].x = tangent_26.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = normal_25.y;
  tmpvar_31[2].x = tangent_26.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = normal_25.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_31);
  float3 v_32;
  v_32.x = tangentToWorld_5[0].x;
  v_32.y = tangentToWorld_5[1].x;
  v_32.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].y;
  v_33.y = tangentToWorld_5[1].y;
  v_33.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].z;
  v_34.y = tangentToWorld_5[1].z;
  v_34.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_34);
  half4 ambientOrLightmapUV_35;
  ambientOrLightmapUV_35.xy = half2(float2(0.0, 0.0));
  ambientOrLightmapUV_35.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_11;
  _mtl_o.xlv_TEXCOORD0 = texcoord_13;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_15;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_35;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
float u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
bvec3 u_xlatb9;
vec3 u_xlat10;
bvec3 u_xlatb11;
vec3 u_xlat14;
vec3 u_xlat15;
vec3 u_xlat16;
mediump float u_xlat16_16;
float u_xlat26;
float u_xlat27;
float u_xlat36;
float u_xlat37;
float u_xlat38;
float u_xlat39;
float u_xlat41;
mediump float u_xlat16_41;
bool u_xlatb41;
float u_xlat42;
mediump float u_xlat16_42;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat36 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat38 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat3.xyz = vec3(u_xlat38) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat39 = (-u_xlat36) + 1.0;
    SV_Target0.w = u_xlat1.w * u_xlat36 + u_xlat39;
    u_xlat36 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat37 = (-_OcclusionStrength) + 1.0;
    u_xlat37 = u_xlat10_4.y * _OcclusionStrength + u_xlat37;
    u_xlat4 = (-_Glossiness) + 1.0;
    u_xlat16.x = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xyz = u_xlat2.xyz * (-u_xlat16.xxx) + u_xlat3.xyz;
    u_xlat10_5 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat41 = u_xlat10_5.w * unity_DynamicLightmap_HDR.x;
    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat41);
    u_xlat5.xyz = log2(u_xlat5.xyz);
    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat5.xyz = exp2(u_xlat5.xyz);
    u_xlat10_6 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat41 = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat41 = u_xlat41 + 0.5;
    u_xlat5.xyz = vec3(u_xlat41) * u_xlat5.xyz;
    u_xlat16_41 = max(u_xlat10_6.w, 9.99999975e-05);
    u_xlat5.xyz = u_xlat5.xyz / vec3(u_xlat16_41);
    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb41){
        u_xlat41 = dot(u_xlat16.xyz, u_xlat16.xyz);
        u_xlat41 = inversesqrt(u_xlat41);
        u_xlat6.xyz = u_xlat16.xyz * vec3(u_xlat41);
        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
        u_xlat7.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
        u_xlat7.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
        u_xlat7.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
        u_xlat41 = min(u_xlat7.y, u_xlat7.x);
        u_xlat41 = min(u_xlat7.z, u_xlat41);
        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat41) + u_xlat7.xyz;
    } else {
        u_xlat6.xyz = u_xlat16.xyz;
    //ENDIF
    }
    u_xlat41 = (-u_xlat4) * 0.699999988 + 1.70000005;
    u_xlat41 = u_xlat4 * u_xlat41;
    u_xlat41 = u_xlat41 * 6.0;
    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat41);
    u_xlat16_42 = log2(u_xlat10_6.w);
    u_xlat42 = u_xlat16_42 * unity_SpecCube0_HDR.y;
    u_xlat42 = exp2(u_xlat42);
    u_xlat42 = u_xlat42 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat10_6.xyz * vec3(u_xlat42);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat16.xyz, u_xlat16.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat8.xyz = u_xlat16.xyz * vec3(u_xlat43);
            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
            u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat43 = min(u_xlat9.y, u_xlat9.x);
            u_xlat43 = min(u_xlat9.z, u_xlat43);
            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat16.xyz = u_xlat8.xyz * vec3(u_xlat43) + u_xlat9.xyz;
        //ENDIF
        }
        u_xlat10_8 = textureLod(unity_SpecCube1, u_xlat16.xyz, u_xlat41);
        u_xlat16_16 = log2(u_xlat10_8.w);
        u_xlat16.x = u_xlat16_16 * unity_SpecCube1_HDR.y;
        u_xlat16.x = exp2(u_xlat16.x);
        u_xlat16.x = u_xlat16.x * unity_SpecCube1_HDR.x;
        u_xlat16.xyz = u_xlat10_8.xyz * u_xlat16.xxx;
        u_xlat6.xyz = vec3(u_xlat42) * u_xlat10_6.xyz + (-u_xlat16.xyz);
        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16.xyz;
    //ENDIF
    }
    u_xlat16.xyz = vec3(u_xlat37) * u_xlat7.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat38) + _WorldSpaceLightPos0.xyz;
    u_xlat38 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat38 = max(u_xlat38, 0.00100000005);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz;
    u_xlat2.w = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);
    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat26 = u_xlat4 * u_xlat4;
    u_xlat3.x = (-u_xlat4) * u_xlat4 + 1.0;
    u_xlat15.x = u_xlat2.x * u_xlat3.x + u_xlat26;
    u_xlat3.x = u_xlat36 * u_xlat3.x + u_xlat26;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat36 * u_xlat15.x + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat15.x = u_xlat26 * u_xlat26;
    u_xlat38 = u_xlat2.w * u_xlat2.w;
    u_xlat6.xy = vec2(u_xlat26) * vec2(u_xlat26) + vec2(-1.0, 1.0);
    u_xlat38 = u_xlat38 * u_xlat6.x + 1.0;
    u_xlat38 = u_xlat38 * u_xlat38;
    u_xlat38 = u_xlat38 * 3.14159274 + 1.00000001e-07;
    u_xlat2.w = u_xlat15.x / u_xlat38;
    u_xlat15.x = (-u_xlat36) + 1.0;
    u_xlat27 = u_xlat15.x * u_xlat15.x;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat15.x = u_xlat15.x * u_xlat27;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat27 = u_xlat2.x * u_xlat2.x;
    u_xlat3.z = u_xlat27 * u_xlat27;
    u_xlat2.xw = u_xlat2.xw * u_xlat3.zx;
    u_xlat27 = u_xlat2.y * u_xlat2.y;
    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat4));
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat15.x = u_xlat27 * u_xlat15.x + 1.0;
    u_xlat27 = u_xlat27 * u_xlat2.x + 1.0;
    u_xlat15.x = u_xlat27 * u_xlat15.x;
    u_xlat38 = u_xlat2.w * 0.785398185;
    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat27 = max(u_xlat38, 9.99999975e-05);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat38 = (u_xlatb3) ? u_xlat27 : u_xlat38;
    u_xlat38 = u_xlat36 * u_xlat38;
    u_xlat38 = max(u_xlat38, 0.0);
    u_xlat36 = u_xlat36 * u_xlat15.x;
    u_xlat26 = u_xlat26 * u_xlat4;
    u_xlat26 = (-u_xlat26) * 0.280000001 + 1.0;
    u_xlat15.x = float(1.0) / u_xlat6.y;
    u_xlat26 = (u_xlatb3) ? u_xlat26 : u_xlat15.x;
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat38 = u_xlat38 * u_xlat3.x;
    u_xlat3.x = u_xlat39 + _Glossiness;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat15.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat37) + u_xlat15.xyz;
    u_xlat5.xyz = vec3(u_xlat38) * _LightColor0.xyz;
    u_xlat36 = (-u_xlat2.y) + 1.0;
    u_xlat37 = u_xlat36 * u_xlat36;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat36 = u_xlat36 * u_xlat37;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat0.xyz;
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat15.xyz + u_xlat5.xyz;
    u_xlat14.xyz = u_xlat16.xyz * vec3(u_xlat26);
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xxx;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat14.xyz * u_xlat0.xyz + u_xlat1.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 200 math, 8 textures, 15 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_12;
  n_12 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_16;
  vec4 o_17;
  vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_8 * 0.5);
  vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_8.zw;
  vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  vec3 col_21;
  vec4 ndotl_22;
  vec4 lengthSq_23;
  vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_23 = (tmpvar_24 * tmpvar_24);
  lengthSq_23 = (lengthSq_23 + (tmpvar_25 * tmpvar_25));
  lengthSq_23 = (lengthSq_23 + (tmpvar_26 * tmpvar_26));
  ndotl_22 = (tmpvar_24 * tmpvar_16.x);
  ndotl_22 = (ndotl_22 + (tmpvar_25 * tmpvar_16.y));
  ndotl_22 = (ndotl_22 + (tmpvar_26 * tmpvar_16.z));
  vec4 tmpvar_27;
  tmpvar_27 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_22 * inversesqrt(lengthSq_23)));
  ndotl_22 = tmpvar_27;
  vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_27 * (1.0/((1.0 + 
    (lengthSq_23 * unity_4LightAtten0)
  ))));
  col_21 = (unity_LightColor[0].xyz * tmpvar_28.x);
  col_21 = (col_21 + (unity_LightColor[1].xyz * tmpvar_28.y));
  col_21 = (col_21 + (unity_LightColor[2].xyz * tmpvar_28.z));
  col_21 = (col_21 + (unity_LightColor[3].xyz * tmpvar_28.w));
  ambientOrLightmapUV_20.xyz = col_21;
  vec3 ambient_29;
  ambient_29 = ambientOrLightmapUV_20.xyz;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_29 = (col_21 * ((col_21 * 
      ((col_21 * 0.305306) + 0.6821711)
    ) + 0.01252288));
  };
  vec3 x1_30;
  vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_16.xyzz * tmpvar_16.yzzx);
  x1_30.x = dot (unity_SHBr, tmpvar_31);
  x1_30.y = dot (unity_SHBg, tmpvar_31);
  x1_30.z = dot (unity_SHBb, tmpvar_31);
  ambient_29 = (ambient_29 + (x1_30 + (unity_SHC.xyz * 
    ((tmpvar_16.x * tmpvar_16.x) - (tmpvar_16.y * tmpvar_16.y))
  )));
  ambientOrLightmapUV_20.xyz = ambient_29;
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = n_12;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD6 = o_17;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  float tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (tmpvar_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_9;
  float outModifiedAlpha_10;
  diffColor_9 = ((tmpvar_4 * tmpvar_6) * tmpvar_2);
  outModifiedAlpha_10 = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  float tmpvar_11;
  tmpvar_11 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_7, _WorldSpaceLightPos0.xyz));
  float tmpvar_13;
  tmpvar_13 = (1.0 - _Glossiness);
  vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_8 - (2.0 * (
    dot (tmpvar_7, tmpvar_8)
   * tmpvar_7)));
  vec3 tmpvar_15;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_17 = vec3(0.0, 0.0, 0.0);
  tmpvar_16 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  vec3 ambient_18;
  ambient_18 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_19;
  ambient_contrib_19 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_20;
    tmpvar_20.w = 1.0;
    tmpvar_20.xyz = tmpvar_7;
    vec3 x1_21;
    vec3 texCoord_22;
    vec3 tmpvar_23;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_24;
      tmpvar_24.w = 1.0;
      tmpvar_24.xyz = xlv_TEXCOORD8;
      tmpvar_23 = (unity_ProbeVolumeWorldToObject * tmpvar_24).xyz;
    } else {
      tmpvar_23 = xlv_TEXCOORD8;
    };
    vec3 tmpvar_25;
    tmpvar_25 = ((tmpvar_23 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_22.yz = tmpvar_25.yz;
    texCoord_22.x = (tmpvar_25.x * 0.25);
    float tmpvar_26;
    float tmpvar_27;
    tmpvar_27 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_26 = clamp (texCoord_22.x, tmpvar_27, (0.25 - tmpvar_27));
    texCoord_22.x = tmpvar_26;
    vec4 tmpvar_28;
    tmpvar_28 = texture3D (unity_ProbeVolumeSH, texCoord_22);
    texCoord_22.x = (tmpvar_26 + 0.25);
    vec4 tmpvar_29;
    tmpvar_29 = texture3D (unity_ProbeVolumeSH, texCoord_22);
    texCoord_22.x = (tmpvar_26 + 0.5);
    x1_21.x = dot (tmpvar_28, tmpvar_20);
    x1_21.y = dot (tmpvar_29, tmpvar_20);
    x1_21.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_22), tmpvar_20);
    ambient_contrib_19 = x1_21;
  } else {
    vec4 tmpvar_30;
    tmpvar_30.w = 1.0;
    tmpvar_30.xyz = tmpvar_7;
    vec3 x_31;
    x_31.x = dot (unity_SHAr, tmpvar_30);
    x_31.y = dot (unity_SHAg, tmpvar_30);
    x_31.z = dot (unity_SHAb, tmpvar_30);
    ambient_contrib_19 = x_31;
  };
  vec3 tmpvar_32;
  tmpvar_32 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_19));
  ambient_18 = tmpvar_32;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_18 = max (((1.055 * 
      pow (max (tmpvar_32, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_17 = (ambient_18 * tmpvar_11);
  tmpvar_15 = vec3(0.0, 0.0, 0.0);
  vec3 specular_33;
  vec3 worldRefl_34;
  worldRefl_34 = tmpvar_14;
  vec3 worldPos_35;
  worldPos_35 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_36;
    tmpvar_36 = normalize(tmpvar_14);
    vec3 tmpvar_37;
    tmpvar_37 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_36);
    vec3 tmpvar_38;
    tmpvar_38 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_36);
    bvec3 tmpvar_39;
    tmpvar_39 = greaterThan (tmpvar_36, vec3(0.0, 0.0, 0.0));
    float tmpvar_40;
    if (tmpvar_39.x) {
      tmpvar_40 = tmpvar_37.x;
    } else {
      tmpvar_40 = tmpvar_38.x;
    };
    float tmpvar_41;
    if (tmpvar_39.y) {
      tmpvar_41 = tmpvar_37.y;
    } else {
      tmpvar_41 = tmpvar_38.y;
    };
    float tmpvar_42;
    if (tmpvar_39.z) {
      tmpvar_42 = tmpvar_37.z;
    } else {
      tmpvar_42 = tmpvar_38.z;
    };
    worldPos_35 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_34 = (worldPos_35 + (tmpvar_36 * min (
      min (tmpvar_40, tmpvar_41)
    , tmpvar_42)));
  };
  vec4 tmpvar_43;
  tmpvar_43.xyz = worldRefl_34;
  tmpvar_43.w = ((tmpvar_13 * (1.7 - 
    (0.7 * tmpvar_13)
  )) * 6.0);
  vec4 tmpvar_44;
  tmpvar_44 = textureCubeLod (unity_SpecCube0, worldRefl_34, tmpvar_43.w);
  vec3 tmpvar_45;
  tmpvar_45 = ((unity_SpecCube0_HDR.x * pow (tmpvar_44.w, unity_SpecCube0_HDR.y)) * tmpvar_44.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_46;
    worldRefl_46 = tmpvar_14;
    vec3 worldPos_47;
    worldPos_47 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_48;
      tmpvar_48 = normalize(tmpvar_14);
      vec3 tmpvar_49;
      tmpvar_49 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_48);
      vec3 tmpvar_50;
      tmpvar_50 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_48);
      bvec3 tmpvar_51;
      tmpvar_51 = greaterThan (tmpvar_48, vec3(0.0, 0.0, 0.0));
      float tmpvar_52;
      if (tmpvar_51.x) {
        tmpvar_52 = tmpvar_49.x;
      } else {
        tmpvar_52 = tmpvar_50.x;
      };
      float tmpvar_53;
      if (tmpvar_51.y) {
        tmpvar_53 = tmpvar_49.y;
      } else {
        tmpvar_53 = tmpvar_50.y;
      };
      float tmpvar_54;
      if (tmpvar_51.z) {
        tmpvar_54 = tmpvar_49.z;
      } else {
        tmpvar_54 = tmpvar_50.z;
      };
      worldPos_47 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_46 = (worldPos_47 + (tmpvar_48 * min (
        min (tmpvar_52, tmpvar_53)
      , tmpvar_54)));
    };
    vec4 tmpvar_55;
    tmpvar_55.xyz = worldRefl_46;
    tmpvar_55.w = ((tmpvar_13 * (1.7 - 
      (0.7 * tmpvar_13)
    )) * 6.0);
    vec4 tmpvar_56;
    tmpvar_56 = textureCubeLod (unity_SpecCube1, worldRefl_46, tmpvar_55.w);
    specular_33 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_56.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_56.xyz), tmpvar_45, unity_SpecCube0_BoxMin.www);
  } else {
    specular_33 = tmpvar_45;
  };
  tmpvar_15 = (specular_33 * tmpvar_11);
  vec3 viewDir_57;
  viewDir_57 = -(tmpvar_8);
  float surfaceReduction_58;
  float specularTerm_59;
  float tmpvar_60;
  tmpvar_60 = (1.0 - _Glossiness);
  vec3 tmpvar_61;
  vec3 inVec_62;
  inVec_62 = (_WorldSpaceLightPos0.xyz + viewDir_57);
  tmpvar_61 = (inVec_62 * inversesqrt(max (0.001, 
    dot (inVec_62, inVec_62)
  )));
  float tmpvar_63;
  tmpvar_63 = max (0.0, dot (tmpvar_7, tmpvar_61));
  float tmpvar_64;
  tmpvar_64 = max (0.0, dot (tmpvar_7, viewDir_57));
  float tmpvar_65;
  tmpvar_65 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_61));
  float tmpvar_66;
  tmpvar_66 = (tmpvar_60 * tmpvar_60);
  float tmpvar_67;
  tmpvar_67 = (tmpvar_60 * tmpvar_60);
  float tmpvar_68;
  tmpvar_68 = (tmpvar_67 * tmpvar_67);
  float tmpvar_69;
  tmpvar_69 = (((tmpvar_63 * tmpvar_63) * (tmpvar_68 - 1.0)) + 1.0);
  float x_70;
  x_70 = (1.0 - tmpvar_12);
  float x_71;
  x_71 = (1.0 - tmpvar_64);
  float tmpvar_72;
  tmpvar_72 = (0.5 + ((2.0 * tmpvar_65) * (tmpvar_65 * tmpvar_60)));
  float tmpvar_73;
  tmpvar_73 = ((1.0 + (
    (tmpvar_72 - 1.0)
   * 
    ((x_70 * x_70) * ((x_70 * x_70) * x_70))
  )) * (1.0 + (
    (tmpvar_72 - 1.0)
   * 
    ((x_71 * x_71) * ((x_71 * x_71) * x_71))
  )));
  float tmpvar_74;
  tmpvar_74 = (((2.0 / 
    (((tmpvar_12 * (
      (tmpvar_64 * (1.0 - tmpvar_66))
     + tmpvar_66)) + (tmpvar_64 * (
      (tmpvar_12 * (1.0 - tmpvar_66))
     + tmpvar_66))) + 1e-05)
  ) * (tmpvar_68 / 
    (((3.141593 * tmpvar_69) * tmpvar_69) + 1e-07)
  )) * 0.7853982);
  specularTerm_59 = tmpvar_74;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_59 = sqrt(max (0.0001, tmpvar_74));
  };
  float tmpvar_75;
  tmpvar_75 = max (0.0, (specularTerm_59 * tmpvar_12));
  specularTerm_59 = tmpvar_75;
  float tmpvar_76;
  tmpvar_76 = (tmpvar_73 * tmpvar_12);
  float tmpvar_77;
  tmpvar_77 = (tmpvar_60 * tmpvar_60);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_58 = (1.0 - ((0.28 * tmpvar_77) * tmpvar_60));
  } else {
    surfaceReduction_58 = (1.0/(((tmpvar_77 * tmpvar_77) + 1.0)));
  };
  float tmpvar_78;
  if (any(bvec3(tmpvar_5))) {
    tmpvar_78 = 1.0;
  } else {
    tmpvar_78 = 0.0;
  };
  specularTerm_59 = (tmpvar_75 * tmpvar_78);
  float x_79;
  x_79 = (1.0 - tmpvar_65);
  float x_80;
  x_80 = (1.0 - tmpvar_64);
  vec3 tmpvar_81;
  tmpvar_81 = (((diffColor_9 * 
    (tmpvar_17 + (tmpvar_16 * tmpvar_76))
  ) + (
    (specularTerm_59 * tmpvar_16)
   * 
    (tmpvar_5 + ((1.0 - tmpvar_5) * ((x_79 * x_79) * (
      (x_79 * x_79)
     * x_79))))
  )) + ((surfaceReduction_58 * tmpvar_15) * mix (tmpvar_5, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_6)), 0.0, 1.0)
  ), vec3(
    ((x_80 * x_80) * ((x_80 * x_80) * x_80))
  ))));
  vec4 tmpvar_82;
  tmpvar_82.w = 1.0;
  tmpvar_82.xyz = tmpvar_81;
  c_1.w = tmpvar_82.w;
  c_1.xyz = tmpvar_81;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_83;
  xlat_varoutput_83.xyz = c_1.xyz;
  xlat_varoutput_83.w = outModifiedAlpha_10;
  gl_FragData[0] = xlat_varoutput_83;
}


#endif
"
}
SubProgram "metal " {
// Stats: 64 math, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 434
Matrix 192 [glstate_matrix_mvp]
Matrix 256 [unity_ObjectToWorld]
Matrix 320 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 32 [unity_4LightPosX0]
Vector 48 [unity_4LightPosY0]
Vector 64 [unity_4LightPosZ0]
VectorHalf 80 [unity_4LightAtten0] 4
VectorHalf 88 [unity_LightColor] 4 8
VectorHalf 152 [unity_SHBr] 4
VectorHalf 160 [unity_SHBg] 4
VectorHalf 168 [unity_SHBb] 4
VectorHalf 176 [unity_SHC] 4
VectorHalf 384 [unity_ColorSpaceLuminance] 4
Vector 400 [_MainTex_ST]
Vector 416 [_DetailAlbedoMap_ST]
ScalarHalf 432 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4 unity_4LightPosX0;
  float4 unity_4LightPosY0;
  float4 unity_4LightPosZ0;
  half4 unity_4LightAtten0;
  half4 unity_LightColor[8];
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float3 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_7 = tmpvar_8.xyz;
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_19);
  float4 o_20;
  float4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  float2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _mtl_u._ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  half3 normalWorld_23;
  normalWorld_23 = half3(tmpvar_19);
  half4 ambientOrLightmapUV_24;
  ambientOrLightmapUV_24.w = half(0.0);
  float3 lightColor0_25;
  lightColor0_25 = float3(_mtl_u.unity_LightColor[0].xyz);
  float3 lightColor1_26;
  lightColor1_26 = float3(_mtl_u.unity_LightColor[1].xyz);
  float3 lightColor2_27;
  lightColor2_27 = float3(_mtl_u.unity_LightColor[2].xyz);
  float3 lightColor3_28;
  lightColor3_28 = float3(_mtl_u.unity_LightColor[3].xyz);
  float4 lightAttenSq_29;
  lightAttenSq_29 = float4(_mtl_u.unity_4LightAtten0);
  float3 normal_30;
  normal_30 = float3(normalWorld_23);
  float3 col_31;
  float4 ndotl_32;
  float4 lengthSq_33;
  float4 tmpvar_34;
  tmpvar_34 = (_mtl_u.unity_4LightPosX0 - tmpvar_8.x);
  float4 tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_4LightPosY0 - tmpvar_8.y);
  float4 tmpvar_36;
  tmpvar_36 = (_mtl_u.unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_33 = (tmpvar_34 * tmpvar_34);
  lengthSq_33 = (lengthSq_33 + (tmpvar_35 * tmpvar_35));
  lengthSq_33 = (lengthSq_33 + (tmpvar_36 * tmpvar_36));
  ndotl_32 = (tmpvar_34 * normal_30.x);
  ndotl_32 = (ndotl_32 + (tmpvar_35 * normal_30.y));
  ndotl_32 = (ndotl_32 + (tmpvar_36 * normal_30.z));
  float4 tmpvar_37;
  tmpvar_37 = max (float4(0.0, 0.0, 0.0, 0.0), (ndotl_32 * rsqrt(lengthSq_33)));
  ndotl_32 = tmpvar_37;
  float4 tmpvar_38;
  tmpvar_38 = (tmpvar_37 * (1.0/((1.0 + 
    (lengthSq_33 * lightAttenSq_29)
  ))));
  col_31 = (lightColor0_25 * tmpvar_38.x);
  col_31 = (col_31 + (lightColor1_26 * tmpvar_38.y));
  col_31 = (col_31 + (lightColor2_27 * tmpvar_38.z));
  col_31 = (col_31 + (lightColor3_28 * tmpvar_38.w));
  ambientOrLightmapUV_24.xyz = half3(col_31);
  half3 ambient_39;
  ambient_39 = ambientOrLightmapUV_24.xyz;
  bool tmpvar_40;
  tmpvar_40 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_40) {
    ambient_39 = (ambientOrLightmapUV_24.xyz * ((ambientOrLightmapUV_24.xyz * 
      ((ambientOrLightmapUV_24.xyz * (half)0.305306) + (half)0.6821711)
    ) + (half)0.01252288));
  };
  half3 x1_41;
  half4 tmpvar_42;
  tmpvar_42 = (normalWorld_23.xyzz * normalWorld_23.yzzx);
  x1_41.x = dot (_mtl_u.unity_SHBr, tmpvar_42);
  x1_41.y = dot (_mtl_u.unity_SHBg, tmpvar_42);
  x1_41.z = dot (_mtl_u.unity_SHBb, tmpvar_42);
  ambient_39 = (ambient_39 + (x1_41 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_23.x * normalWorld_23.x) - (normalWorld_23.y * normalWorld_23.y))
  )));
  ambientOrLightmapUV_24.xyz = ambient_39;
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_24;
  _mtl_o.xlv_TEXCOORD6 = o_20;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_7;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat2.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat2.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat2.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat3.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat3.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat3.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat3.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat3.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat4 = inversesqrt(u_xlat3);
    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat4;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat3 * u_xlat1;
    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz;
    u_xlatb19 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat1.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat19 = u_xlat2.y * u_xlat2.y;
    u_xlat19 = u_xlat2.x * u_xlat2.x + (-u_xlat19);
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
bool u_xlatb5;
vec3 u_xlat6;
lowp vec4 u_xlat10_6;
vec4 u_xlat7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
lowp vec4 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
vec3 u_xlat12;
bvec3 u_xlatb13;
vec3 u_xlat16;
vec3 u_xlat17;
vec2 u_xlat18;
vec3 u_xlat19;
float u_xlat30;
float u_xlat31;
vec2 u_xlat32;
mediump float u_xlat16_32;
bool u_xlatb32;
float u_xlat42;
float u_xlat43;
float u_xlat44;
bool u_xlatb44;
float u_xlat45;
float u_xlat46;
mediump float u_xlat16_46;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat17.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat4.x = (-u_xlat42) + 1.0;
    SV_Target0.w = u_xlat1.w * u_xlat42 + u_xlat4.x;
    u_xlat42 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat42 = max(u_xlat42, 0.0);
    u_xlat18.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_5 = texture(_ShadowMapTexture, u_xlat18.xy);
    u_xlat10_6 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat43 = (-_OcclusionStrength) + 1.0;
    u_xlat43 = u_xlat10_6.y * _OcclusionStrength + u_xlat43;
    u_xlat18.x = (-_Glossiness) + 1.0;
    u_xlat32.x = dot(u_xlat17.xyz, u_xlat2.xyz);
    u_xlat32.x = u_xlat32.x + u_xlat32.x;
    u_xlat19.xyz = u_xlat2.xyz * (-u_xlat32.xxx) + u_xlat17.xyz;
    u_xlat6.xyz = u_xlat10_5.xxx * _LightColor0.xyz;
    u_xlatb32 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb32){
        u_xlatb32 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb32)) ? u_xlat7.xyz : vs_TEXCOORD8.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat7.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat32.x = u_xlat7.y * 0.25;
        u_xlat46 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat5.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat32.x = max(u_xlat46, u_xlat32.x);
        u_xlat7.x = min(u_xlat5.x, u_xlat32.x);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_9 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat2.w = 1.0;
        u_xlat8.x = dot(u_xlat10_8, u_xlat2);
        u_xlat8.y = dot(u_xlat10_9, u_xlat2);
        u_xlat8.z = dot(u_xlat10_7, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat8.x = dot(unity_SHAr, u_xlat2);
        u_xlat8.y = dot(unity_SHAg, u_xlat2);
        u_xlat8.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat7.xyz = u_xlat8.xyz + vs_TEXCOORD5.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb44 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat8.xyz = log2(u_xlat7.xyz);
    u_xlat8.xyz = u_xlat8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat8.xyz = exp2(u_xlat8.xyz);
    u_xlat8.xyz = u_xlat8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat7.xyz = (bool(u_xlatb44)) ? u_xlat8.xyz : u_xlat7.xyz;
    u_xlatb32 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb32){
        u_xlat32.x = dot(u_xlat19.xyz, u_xlat19.xyz);
        u_xlat32.x = inversesqrt(u_xlat32.x);
        u_xlat8.xyz = u_xlat32.xxx * u_xlat19.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
        u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
        u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
        u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
        u_xlat32.x = min(u_xlat9.y, u_xlat9.x);
        u_xlat32.x = min(u_xlat9.z, u_xlat32.x);
        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = u_xlat8.xyz * u_xlat32.xxx + u_xlat9.xyz;
    } else {
        u_xlat8.xyz = u_xlat19.xyz;
    //ENDIF
    }
    u_xlat32.x = (-u_xlat18.x) * 0.699999988 + 1.70000005;
    u_xlat32.x = u_xlat32.x * u_xlat18.x;
    u_xlat32.x = u_xlat32.x * 6.0;
    u_xlat10_8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat32.x);
    u_xlat16_46 = log2(u_xlat10_8.w);
    u_xlat46 = u_xlat16_46 * unity_SpecCube0_HDR.y;
    u_xlat46 = exp2(u_xlat46);
    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat10_8.xyz * vec3(u_xlat46);
    u_xlatb5 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb5){
        u_xlatb5 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb5){
            u_xlat5.x = dot(u_xlat19.xyz, u_xlat19.xyz);
            u_xlat5.x = inversesqrt(u_xlat5.x);
            u_xlat10.xyz = u_xlat5.xxx * u_xlat19.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
            u_xlat11.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
            u_xlat11.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
            u_xlat11.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
            u_xlat5.x = min(u_xlat11.y, u_xlat11.x);
            u_xlat5.x = min(u_xlat11.z, u_xlat5.x);
            u_xlat11.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat19.xyz = u_xlat10.xyz * u_xlat5.xxx + u_xlat11.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat19.xyz, u_xlat32.x);
        u_xlat16_32 = log2(u_xlat10_5.w);
        u_xlat32.x = u_xlat16_32 * unity_SpecCube1_HDR.y;
        u_xlat32.x = exp2(u_xlat32.x);
        u_xlat32.x = u_xlat32.x * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * u_xlat32.xxx;
        u_xlat8.xyz = vec3(u_xlat46) * u_xlat10_8.xyz + (-u_xlat5.xyz);
        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = vec3(u_xlat43) * u_xlat9.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat3.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat8.xyz = u_xlat3.xxx * u_xlat8.xyz;
    u_xlat3.x = dot(u_xlat2.xyz, u_xlat8.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat17.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat30 = u_xlat18.x * u_xlat18.x;
    u_xlat17.x = (-u_xlat18.x) * u_xlat18.x + 1.0;
    u_xlat31 = u_xlat2.x * u_xlat17.x + u_xlat30;
    u_xlat17.x = u_xlat42 * u_xlat17.x + u_xlat30;
    u_xlat17.x = u_xlat2.x * u_xlat17.x;
    u_xlat17.x = u_xlat42 * u_xlat31 + u_xlat17.x;
    u_xlat17.x = u_xlat17.x + 9.99999975e-06;
    u_xlat17.x = 2.0 / u_xlat17.x;
    u_xlat31 = u_xlat30 * u_xlat30;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat32.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
    u_xlat3.x = u_xlat3.x * u_xlat32.x + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = u_xlat3.x * 3.14159274 + 1.00000001e-07;
    u_xlat3.x = u_xlat31 / u_xlat3.x;
    u_xlat31 = (-u_xlat42) + 1.0;
    u_xlat45 = u_xlat31 * u_xlat31;
    u_xlat45 = u_xlat45 * u_xlat45;
    u_xlat31 = u_xlat31 * u_xlat45;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat45 = u_xlat2.x * u_xlat2.x;
    u_xlat45 = u_xlat45 * u_xlat45;
    u_xlat2.x = u_xlat2.x * u_xlat45;
    u_xlat45 = u_xlat2.y * u_xlat2.y;
    u_xlat45 = dot(vec2(u_xlat45), u_xlat18.xx);
    u_xlat45 = u_xlat45 + -0.5;
    u_xlat17.y = u_xlat45 * u_xlat31 + 1.0;
    u_xlat3.w = u_xlat45 * u_xlat2.x + 1.0;
    u_xlat3.xz = u_xlat3.xw * u_xlat17.xy;
    u_xlat3.x = u_xlat3.x * 0.785398185;
    u_xlat17.x = max(u_xlat3.x, 9.99999975e-05);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat3.x = (u_xlatb44) ? u_xlat17.x : u_xlat3.x;
    u_xlat3.x = u_xlat42 * u_xlat3.x;
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat42 = u_xlat42 * u_xlat3.z;
    u_xlat30 = u_xlat30 * u_xlat18.x;
    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
    u_xlat17.x = float(1.0) / u_xlat32.y;
    u_xlat30 = (u_xlatb44) ? u_xlat30 : u_xlat17.x;
    u_xlat44 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb44 = u_xlat44!=0.0;
    u_xlat44 = u_xlatb44 ? 1.0 : float(0.0);
    u_xlat44 = u_xlat44 * u_xlat3.x;
    u_xlat3.x = u_xlat4.x + _Glossiness;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat17.xyz = vec3(u_xlat42) * u_xlat6.xyz;
    u_xlat17.xyz = u_xlat7.xyz * vec3(u_xlat43) + u_xlat17.xyz;
    u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat44);
    u_xlat42 = (-u_xlat2.y) + 1.0;
    u_xlat43 = u_xlat42 * u_xlat42;
    u_xlat43 = u_xlat43 * u_xlat43;
    u_xlat42 = u_xlat42 * u_xlat43;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat17.xyz + u_xlat4.xyz;
    u_xlat16.xyz = u_xlat5.xyz * vec3(u_xlat30);
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xxx;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat16.xyz * u_xlat0.xyz + u_xlat1.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 179 math, 7 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec3 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  tmpvar_6 = tmpvar_7.xyz;
  vec4 tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = gl_Vertex.xyz;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * tmpvar_9);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_16[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_16[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 o_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_8 * 0.5);
  vec2 tmpvar_28;
  tmpvar_28.x = tmpvar_27.x;
  tmpvar_28.y = (tmpvar_27.y * _ProjectionParams.x);
  o_26.xy = (tmpvar_28 + tmpvar_27.w);
  o_26.zw = tmpvar_8.zw;
  vec4 ambientOrLightmapUV_29;
  ambientOrLightmapUV_29.xy = vec2(0.0, 0.0);
  ambientOrLightmapUV_29.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_29;
  xlv_TEXCOORD6 = o_26;
  xlv_TEXCOORD8 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  float tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (tmpvar_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_9;
  float outModifiedAlpha_10;
  diffColor_9 = ((tmpvar_4 * tmpvar_6) * tmpvar_2);
  outModifiedAlpha_10 = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  float tmpvar_11;
  tmpvar_11 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_7, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_13;
  vec3 tmpvar_14;
  vec3 tmpvar_15;
  vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_15 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_16.w) * tmpvar_16.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_7, (tmpvar_17.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_17.w));
  tmpvar_15 = (tmpvar_15 * tmpvar_11);
  tmpvar_13 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_14 = vec3(0.0, 0.0, 0.0);
  float tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = (1.0 - _Glossiness);
  tmpvar_19 = (tmpvar_8 - (2.0 * (
    dot (tmpvar_7, tmpvar_8)
   * tmpvar_7)));
  vec3 originalReflUVW_20;
  vec3 specular_21;
  originalReflUVW_20 = tmpvar_19;
  vec3 worldRefl_22;
  worldRefl_22 = tmpvar_19;
  vec3 worldPos_23;
  worldPos_23 = xlv_TEXCOORD8;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_24;
    tmpvar_24 = normalize(tmpvar_19);
    vec3 tmpvar_25;
    tmpvar_25 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_24);
    vec3 tmpvar_26;
    tmpvar_26 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_24);
    bvec3 tmpvar_27;
    tmpvar_27 = greaterThan (tmpvar_24, vec3(0.0, 0.0, 0.0));
    float tmpvar_28;
    if (tmpvar_27.x) {
      tmpvar_28 = tmpvar_25.x;
    } else {
      tmpvar_28 = tmpvar_26.x;
    };
    float tmpvar_29;
    if (tmpvar_27.y) {
      tmpvar_29 = tmpvar_25.y;
    } else {
      tmpvar_29 = tmpvar_26.y;
    };
    float tmpvar_30;
    if (tmpvar_27.z) {
      tmpvar_30 = tmpvar_25.z;
    } else {
      tmpvar_30 = tmpvar_26.z;
    };
    worldPos_23 = (xlv_TEXCOORD8 - unity_SpecCube0_ProbePosition.xyz);
    worldRefl_22 = (worldPos_23 + (tmpvar_24 * min (
      min (tmpvar_28, tmpvar_29)
    , tmpvar_30)));
  };
  tmpvar_19 = worldRefl_22;
  vec4 tmpvar_31;
  tmpvar_31.xyz = worldRefl_22;
  tmpvar_31.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  vec4 tmpvar_32;
  tmpvar_32 = textureCubeLod (unity_SpecCube0, worldRefl_22, tmpvar_31.w);
  vec3 tmpvar_33;
  tmpvar_33 = ((unity_SpecCube0_HDR.x * pow (tmpvar_32.w, unity_SpecCube0_HDR.y)) * tmpvar_32.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldRefl_34;
    worldRefl_34 = originalReflUVW_20;
    vec3 worldPos_35;
    worldPos_35 = xlv_TEXCOORD8;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_36;
      tmpvar_36 = normalize(originalReflUVW_20);
      vec3 tmpvar_37;
      tmpvar_37 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_36);
      vec3 tmpvar_38;
      tmpvar_38 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_36);
      bvec3 tmpvar_39;
      tmpvar_39 = greaterThan (tmpvar_36, vec3(0.0, 0.0, 0.0));
      float tmpvar_40;
      if (tmpvar_39.x) {
        tmpvar_40 = tmpvar_37.x;
      } else {
        tmpvar_40 = tmpvar_38.x;
      };
      float tmpvar_41;
      if (tmpvar_39.y) {
        tmpvar_41 = tmpvar_37.y;
      } else {
        tmpvar_41 = tmpvar_38.y;
      };
      float tmpvar_42;
      if (tmpvar_39.z) {
        tmpvar_42 = tmpvar_37.z;
      } else {
        tmpvar_42 = tmpvar_38.z;
      };
      worldPos_35 = (xlv_TEXCOORD8 - unity_SpecCube1_ProbePosition.xyz);
      worldRefl_34 = (worldPos_35 + (tmpvar_36 * min (
        min (tmpvar_40, tmpvar_41)
      , tmpvar_42)));
    };
    tmpvar_19 = worldRefl_34;
    vec4 tmpvar_43;
    tmpvar_43.xyz = worldRefl_34;
    tmpvar_43.w = ((tmpvar_18 * (1.7 - 
      (0.7 * tmpvar_18)
    )) * 6.0);
    vec4 tmpvar_44;
    tmpvar_44 = textureCubeLod (unity_SpecCube1, worldRefl_34, tmpvar_43.w);
    specular_21 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_44.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_44.xyz), tmpvar_33, unity_SpecCube0_BoxMin.www);
  } else {
    specular_21 = tmpvar_33;
  };
  tmpvar_14 = (specular_21 * tmpvar_11);
  vec3 viewDir_45;
  viewDir_45 = -(tmpvar_8);
  float surfaceReduction_46;
  float specularTerm_47;
  float tmpvar_48;
  tmpvar_48 = (1.0 - _Glossiness);
  vec3 tmpvar_49;
  vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_45);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  float tmpvar_51;
  tmpvar_51 = max (0.0, dot (tmpvar_7, tmpvar_49));
  float tmpvar_52;
  tmpvar_52 = max (0.0, dot (tmpvar_7, viewDir_45));
  float tmpvar_53;
  tmpvar_53 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_49));
  float tmpvar_54;
  tmpvar_54 = (tmpvar_48 * tmpvar_48);
  float tmpvar_55;
  tmpvar_55 = (tmpvar_48 * tmpvar_48);
  float tmpvar_56;
  tmpvar_56 = (tmpvar_55 * tmpvar_55);
  float tmpvar_57;
  tmpvar_57 = (((tmpvar_51 * tmpvar_51) * (tmpvar_56 - 1.0)) + 1.0);
  float x_58;
  x_58 = (1.0 - tmpvar_12);
  float x_59;
  x_59 = (1.0 - tmpvar_52);
  float tmpvar_60;
  tmpvar_60 = (0.5 + ((2.0 * tmpvar_53) * (tmpvar_53 * tmpvar_48)));
  float tmpvar_61;
  tmpvar_61 = ((1.0 + (
    (tmpvar_60 - 1.0)
   * 
    ((x_58 * x_58) * ((x_58 * x_58) * x_58))
  )) * (1.0 + (
    (tmpvar_60 - 1.0)
   * 
    ((x_59 * x_59) * ((x_59 * x_59) * x_59))
  )));
  float tmpvar_62;
  tmpvar_62 = (((2.0 / 
    (((tmpvar_12 * (
      (tmpvar_52 * (1.0 - tmpvar_54))
     + tmpvar_54)) + (tmpvar_52 * (
      (tmpvar_12 * (1.0 - tmpvar_54))
     + tmpvar_54))) + 1e-05)
  ) * (tmpvar_56 / 
    (((3.141593 * tmpvar_57) * tmpvar_57) + 1e-07)
  )) * 0.7853982);
  specularTerm_47 = tmpvar_62;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_47 = sqrt(max (0.0001, tmpvar_62));
  };
  float tmpvar_63;
  tmpvar_63 = max (0.0, (specularTerm_47 * tmpvar_12));
  specularTerm_47 = tmpvar_63;
  float tmpvar_64;
  tmpvar_64 = (tmpvar_61 * tmpvar_12);
  float tmpvar_65;
  tmpvar_65 = (tmpvar_48 * tmpvar_48);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    surfaceReduction_46 = (1.0 - ((0.28 * tmpvar_65) * tmpvar_48));
  } else {
    surfaceReduction_46 = (1.0/(((tmpvar_65 * tmpvar_65) + 1.0)));
  };
  float tmpvar_66;
  if (any(bvec3(tmpvar_5))) {
    tmpvar_66 = 1.0;
  } else {
    tmpvar_66 = 0.0;
  };
  specularTerm_47 = (tmpvar_63 * tmpvar_66);
  float x_67;
  x_67 = (1.0 - tmpvar_53);
  float x_68;
  x_68 = (1.0 - tmpvar_52);
  vec3 tmpvar_69;
  tmpvar_69 = (((diffColor_9 * 
    (tmpvar_15 + (tmpvar_13 * tmpvar_64))
  ) + (
    (specularTerm_47 * tmpvar_13)
   * 
    (tmpvar_5 + ((1.0 - tmpvar_5) * ((x_67 * x_67) * (
      (x_67 * x_67)
     * x_67))))
  )) + ((surfaceReduction_46 * tmpvar_14) * mix (tmpvar_5, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_6)), 0.0, 1.0)
  ), vec3(
    ((x_68 * x_68) * ((x_68 * x_68) * x_68))
  ))));
  vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = tmpvar_69;
  c_1.w = tmpvar_70.w;
  c_1.xyz = tmpvar_69;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_71;
  xlat_varoutput_71.xyz = c_1.xyz;
  xlat_varoutput_71.w = outModifiedAlpha_10;
  gl_FragData[0] = xlat_varoutput_71;
}


#endif
"
}
SubProgram "metal " {
// Stats: 28 math, 1 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 290
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 224 [unity_WorldTransformParams]
Vector 240 [unity_DynamicLightmapST]
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  float3 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  float4 tmpvar_11;
  float4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_11 = (_mtl_u.glstate_matrix_mvp * tmpvar_12);
  float4 texcoord_13;
  texcoord_13.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_14;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_15;
  float3 n_16;
  n_16 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_15 = half3(n_16);
  float3 norm_17;
  norm_17 = float3(tmpvar_1);
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].x;
  v_18.y = _mtl_u.unity_WorldToObject[1].x;
  v_18.z = _mtl_u.unity_WorldToObject[2].x;
  v_18.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].y;
  v_19.y = _mtl_u.unity_WorldToObject[1].y;
  v_19.z = _mtl_u.unity_WorldToObject[2].y;
  v_19.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].z;
  v_20.y = _mtl_u.unity_WorldToObject[1].z;
  v_20.z = _mtl_u.unity_WorldToObject[2].z;
  v_20.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  float3 dir_22;
  dir_22 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_23;
  tmpvar_23[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_23[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_23[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = float(tmpvar_4.w);
  half3 normal_25;
  normal_25 = half3(tmpvar_21);
  half3 tangent_26;
  tangent_26 = half3(tmpvar_24.xyz);
  half tangentSign_27;
  tangentSign_27 = half(tmpvar_24.w);
  half xlat_varsign_28;
  float tmpvar_29;
  tmpvar_29 = ((float)tangentSign_27 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_28 = half(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * xlat_varsign_28);
  half3x3 tmpvar_31;
  tmpvar_31[0].x = tangent_26.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = normal_25.x;
  tmpvar_31[1].x = tangent_26.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = normal_25.y;
  tmpvar_31[2].x = tangent_26.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = normal_25.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_31);
  float3 v_32;
  v_32.x = tangentToWorld_5[0].x;
  v_32.y = tangentToWorld_5[1].x;
  v_32.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].y;
  v_33.y = tangentToWorld_5[1].y;
  v_33.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].z;
  v_34.y = tangentToWorld_5[1].z;
  v_34.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_34);
  float4 o_35;
  float4 tmpvar_36;
  tmpvar_36 = (tmpvar_11 * 0.5);
  float2 tmpvar_37;
  tmpvar_37.x = tmpvar_36.x;
  tmpvar_37.y = (tmpvar_36.y * _mtl_u._ProjectionParams.x);
  o_35.xy = (tmpvar_37 + tmpvar_36.w);
  o_35.zw = tmpvar_11.zw;
  half4 ambientOrLightmapUV_38;
  ambientOrLightmapUV_38.xy = half2(float2(0.0, 0.0));
  ambientOrLightmapUV_38.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_11;
  _mtl_o.xlv_TEXCOORD0 = texcoord_13;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_15;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_38;
  _mtl_o.xlv_TEXCOORD6 = o_35;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat2.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat2.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat2.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat3.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat3.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat3.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat3.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat3.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.zxy;
    u_xlat1.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat3.xyz);
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat15;
vec3 u_xlat16;
float u_xlat17;
float u_xlat28;
float u_xlat29;
float u_xlat30;
float u_xlat39;
float u_xlat40;
float u_xlat41;
float u_xlat42;
float u_xlat44;
mediump float u_xlat16_44;
bool u_xlatb44;
float u_xlat45;
mediump float u_xlat16_45;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat41 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat3.xyz = vec3(u_xlat41) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat42 = (-u_xlat39) + 1.0;
    SV_Target0.w = u_xlat1.w * u_xlat39 + u_xlat42;
    u_xlat39 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat40 = (-_OcclusionStrength) + 1.0;
    u_xlat40 = u_xlat10_5.y * _OcclusionStrength + u_xlat40;
    u_xlat17 = (-_Glossiness) + 1.0;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat30)) + u_xlat3.xyz;
    u_xlat4.xzw = u_xlat10_4.xxx * _LightColor0.xyz;
    u_xlat10_6 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat44 = u_xlat10_6.w * unity_DynamicLightmap_HDR.x;
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat44);
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat10_7 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_7.xyz = u_xlat10_7.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat44 = dot(u_xlat2.xyz, u_xlat16_7.xyz);
    u_xlat44 = u_xlat44 + 0.5;
    u_xlat6.xyz = vec3(u_xlat44) * u_xlat6.xyz;
    u_xlat16_44 = max(u_xlat10_7.w, 9.99999975e-05);
    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_44);
    u_xlatb44 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb44){
        u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat44 = inversesqrt(u_xlat44);
        u_xlat7.xyz = vec3(u_xlat44) * u_xlat5.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat44 = min(u_xlat8.y, u_xlat8.x);
        u_xlat44 = min(u_xlat8.z, u_xlat44);
        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat44) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat44 = (-u_xlat17) * 0.699999988 + 1.70000005;
    u_xlat44 = u_xlat17 * u_xlat44;
    u_xlat44 = u_xlat44 * 6.0;
    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat44);
    u_xlat16_45 = log2(u_xlat10_7.w);
    u_xlat45 = u_xlat16_45 * unity_SpecCube0_HDR.y;
    u_xlat45 = exp2(u_xlat45);
    u_xlat45 = u_xlat45 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat45);
    u_xlatb46 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = inversesqrt(u_xlat46);
            u_xlat9.xyz = u_xlat5.xyz * vec3(u_xlat46);
            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat9.xyz * vec3(u_xlat46) + u_xlat10.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat44);
        u_xlat16_44 = log2(u_xlat10_5.w);
        u_xlat44 = u_xlat16_44 * unity_SpecCube1_HDR.y;
        u_xlat44 = exp2(u_xlat44);
        u_xlat44 = u_xlat44 * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat44);
        u_xlat7.xyz = vec3(u_xlat45) * u_xlat10_7.xyz + (-u_xlat5.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = vec3(u_xlat40) * u_xlat8.xyz;
    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat41) + _WorldSpaceLightPos0.xyz;
    u_xlat41 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat41 = max(u_xlat41, 0.00100000005);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat7.xyz = vec3(u_xlat41) * u_xlat7.xyz;
    u_xlat2.w = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);
    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat28 = u_xlat17 * u_xlat17;
    u_xlat3.x = (-u_xlat17) * u_xlat17 + 1.0;
    u_xlat16.x = u_xlat2.x * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat39 * u_xlat3.x + u_xlat28;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat39 * u_xlat16.x + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat16.x = u_xlat28 * u_xlat28;
    u_xlat41 = u_xlat2.w * u_xlat2.w;
    u_xlat7.xy = vec2(u_xlat28) * vec2(u_xlat28) + vec2(-1.0, 1.0);
    u_xlat41 = u_xlat41 * u_xlat7.x + 1.0;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat41 = u_xlat41 * 3.14159274 + 1.00000001e-07;
    u_xlat2.w = u_xlat16.x / u_xlat41;
    u_xlat16.x = (-u_xlat39) + 1.0;
    u_xlat29 = u_xlat16.x * u_xlat16.x;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat16.x = u_xlat16.x * u_xlat29;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat29 = u_xlat2.x * u_xlat2.x;
    u_xlat3.z = u_xlat29 * u_xlat29;
    u_xlat2.xw = u_xlat2.xw * u_xlat3.zx;
    u_xlat29 = u_xlat2.y * u_xlat2.y;
    u_xlat29 = dot(vec2(u_xlat29), vec2(u_xlat17));
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat16.x = u_xlat29 * u_xlat16.x + 1.0;
    u_xlat29 = u_xlat29 * u_xlat2.x + 1.0;
    u_xlat16.x = u_xlat29 * u_xlat16.x;
    u_xlat41 = u_xlat2.w * 0.785398185;
    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat29 = max(u_xlat41, 9.99999975e-05);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat41 = (u_xlatb3) ? u_xlat29 : u_xlat41;
    u_xlat41 = u_xlat39 * u_xlat41;
    u_xlat41 = max(u_xlat41, 0.0);
    u_xlat39 = u_xlat39 * u_xlat16.x;
    u_xlat28 = u_xlat28 * u_xlat17;
    u_xlat28 = (-u_xlat28) * 0.280000001 + 1.0;
    u_xlat16.x = float(1.0) / u_xlat7.y;
    u_xlat28 = (u_xlatb3) ? u_xlat28 : u_xlat16.x;
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat41 = u_xlat41 * u_xlat3.x;
    u_xlat3.x = u_xlat42 + _Glossiness;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat16.xyz = vec3(u_xlat39) * u_xlat4.xzw;
    u_xlat16.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat16.xyz;
    u_xlat4.xyz = u_xlat4.xzw * vec3(u_xlat41);
    u_xlat39 = (-u_xlat2.y) + 1.0;
    u_xlat40 = u_xlat39 * u_xlat39;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat39 = u_xlat39 * u_xlat40;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat16.xyz + u_xlat4.xyz;
    u_xlat15.xyz = u_xlat5.xyz * vec3(u_xlat28);
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xxx;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat15.xyz * u_xlat0.xyz + u_xlat1.xyz;
    return;
}
#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 195 math, 7 textures, 15 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
SetTexture 0 [unity_SpecCube0] CUBE 0
SetTexture 1 [unity_SpecCube1] CUBE 1
SetTexture 2 [unity_ProbeVolumeSH] 3D 2
SetTexture 3 [_MainTex] 2D 3
SetTexture 4 [_OcclusionMap] 2D 4
ConstBuffer "$Globals" 310
Matrix 176 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_SHAr] 4
VectorHalf 16 [unity_SHAg] 4
VectorHalf 24 [unity_SHAb] 4
Vector 32 [unity_SpecCube0_BoxMax]
Vector 48 [unity_SpecCube0_BoxMin]
Vector 64 [unity_SpecCube0_ProbePosition]
VectorHalf 80 [unity_SpecCube0_HDR] 4
Vector 96 [unity_SpecCube1_BoxMax]
Vector 112 [unity_SpecCube1_BoxMin]
Vector 128 [unity_SpecCube1_ProbePosition]
VectorHalf 144 [unity_SpecCube1_HDR] 4
Vector 160 [unity_ProbeVolumeParams]
Vector 240 [unity_ProbeVolumeSizeInv] 3
Vector 256 [unity_ProbeVolumeMin] 3
VectorHalf 272 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 280 [unity_ColorSpaceLuminance] 4
VectorHalf 288 [_LightColor0] 4
VectorHalf 296 [_Color] 4
ScalarHalf 304 [_Metallic]
ScalarHalf 306 [_Glossiness]
ScalarHalf 308 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_SpecCube0_BoxMax;
  float4 unity_SpecCube0_BoxMin;
  float4 unity_SpecCube0_ProbePosition;
  half4 unity_SpecCube0_HDR;
  float4 unity_SpecCube1_BoxMax;
  float4 unity_SpecCube1_BoxMin;
  float4 unity_SpecCube1_ProbePosition;
  half4 unity_SpecCube1_HDR;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(0)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(0)]]
  ,   texturecube<half> unity_SpecCube1 [[texture(1)]], sampler _mtlsmp_unity_SpecCube1 [[sampler(1)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(2)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(2)]]
  ,   texture2d<half> _MainTex [[texture(3)]], sampler _mtlsmp__MainTex [[sampler(3)]]
  ,   texture2d<half> _OcclusionMap [[texture(4)]], sampler _mtlsmp__OcclusionMap [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD8);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_4;
  tmpvar_4 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_5;
  half3 tmpvar_6;
  tmpvar_6 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, half3(_mtl_u._Metallic));
  half tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 tmpvar_10;
  tmpvar_10 = _mtl_u._LightColor0.xyz;
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  half tmpvar_14;
  tmpvar_14 = max ((half)0.0, dot (tmpvar_8, _mtl_u._WorldSpaceLightPos0.xyz));
  float3 tmpvar_15;
  float4 tmpvar_16;
  float4 tmpvar_17;
  tmpvar_15 = float3(i_posWorld_2);
  tmpvar_16 = float4(_mtl_u.unity_SpecCube0_HDR);
  tmpvar_17 = float4(_mtl_u.unity_SpecCube1_HDR);
  half tmpvar_18;
  tmpvar_18 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_19;
  tmpvar_19 = (tmpvar_9 - ((half)2.0 * (
    dot (tmpvar_8, tmpvar_9)
   * tmpvar_8)));
  half3 tmpvar_20;
  half3 tmpvar_21;
  tmpvar_21 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_22;
  ambient_22 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_23;
  ambient_contrib_23 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_24;
    tmpvar_24.w = half(1.0);
    tmpvar_24.xyz = tmpvar_8;
    half3 x1_25;
    half4 SHAb_26;
    half4 SHAg_27;
    half4 SHAr_28;
    float3 texCoord_29;
    float3 tmpvar_30;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_31;
      tmpvar_31.w = 1.0;
      tmpvar_31.xyz = tmpvar_15;
      tmpvar_30 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_31).xyz;
    } else {
      tmpvar_30 = tmpvar_15;
    };
    float3 tmpvar_32;
    tmpvar_32 = ((tmpvar_30 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_29.yz = tmpvar_32.yz;
    texCoord_29.x = (tmpvar_32.x * 0.25);
    float tmpvar_33;
    float tmpvar_34;
    tmpvar_34 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_33 = clamp (texCoord_29.x, tmpvar_34, (0.25 - tmpvar_34));
    texCoord_29.x = tmpvar_33;
    half4 tmpvar_35;
    tmpvar_35 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_29));
    SHAr_28 = tmpvar_35;
    texCoord_29.x = (tmpvar_33 + 0.25);
    half4 tmpvar_36;
    tmpvar_36 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_29));
    SHAg_27 = tmpvar_36;
    texCoord_29.x = (tmpvar_33 + 0.5);
    half4 tmpvar_37;
    tmpvar_37 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_29));
    SHAb_26 = tmpvar_37;
    x1_25.x = dot (SHAr_28, tmpvar_24);
    x1_25.y = dot (SHAg_27, tmpvar_24);
    x1_25.z = dot (SHAb_26, tmpvar_24);
    ambient_contrib_23 = x1_25;
  } else {
    half4 tmpvar_38;
    tmpvar_38.w = half(1.0);
    tmpvar_38.xyz = tmpvar_8;
    half3 x_39;
    x_39.x = dot (_mtl_u.unity_SHAr, tmpvar_38);
    x_39.y = dot (_mtl_u.unity_SHAg, tmpvar_38);
    x_39.z = dot (_mtl_u.unity_SHAb, tmpvar_38);
    ambient_contrib_23 = x_39;
  };
  half3 tmpvar_40;
  tmpvar_40 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_23));
  ambient_22 = tmpvar_40;
  bool tmpvar_41;
  tmpvar_41 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_41) {
    ambient_22 = max ((((half)1.055 * 
      pow (max (tmpvar_40, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_21 = (ambient_22 * tmpvar_13);
  tmpvar_20 = half3(float3(0.0, 0.0, 0.0));
  half3 specular_42;
  half3 worldRefl_43;
  worldRefl_43 = tmpvar_19;
  float3 worldPos_44;
  worldPos_44 = tmpvar_15;
  if ((_mtl_u.unity_SpecCube0_ProbePosition.w > 0.0)) {
    half3 rbmin_45;
    half3 rbmax_46;
    half3 tmpvar_47;
    tmpvar_47 = normalize(tmpvar_19);
    float3 tmpvar_48;
    tmpvar_48 = ((_mtl_u.unity_SpecCube0_BoxMax.xyz - tmpvar_15) / (float3)tmpvar_47);
    rbmax_46 = half3(tmpvar_48);
    float3 tmpvar_49;
    tmpvar_49 = ((_mtl_u.unity_SpecCube0_BoxMin.xyz - tmpvar_15) / (float3)tmpvar_47);
    rbmin_45 = half3(tmpvar_49);
    bool3 tmpvar_50;
    tmpvar_50 = (tmpvar_47 > (half3)float3(0.0, 0.0, 0.0));
    half tmpvar_51;
    if (tmpvar_50.x) {
      tmpvar_51 = rbmax_46.x;
    } else {
      tmpvar_51 = rbmin_45.x;
    };
    half tmpvar_52;
    if (tmpvar_50.y) {
      tmpvar_52 = rbmax_46.y;
    } else {
      tmpvar_52 = rbmin_45.y;
    };
    half tmpvar_53;
    if (tmpvar_50.z) {
      tmpvar_53 = rbmax_46.z;
    } else {
      tmpvar_53 = rbmin_45.z;
    };
    worldPos_44 = (tmpvar_15 - _mtl_u.unity_SpecCube0_ProbePosition.xyz);
    worldRefl_43 = half3((worldPos_44 + (float3)(tmpvar_47 * min (
      min (tmpvar_51, tmpvar_52)
    , tmpvar_53))));
  };
  half4 hdr_54;
  hdr_54 = half4(tmpvar_16);
  half4 tmpvar_55;
  tmpvar_55.xyz = worldRefl_43;
  tmpvar_55.w = ((tmpvar_18 * ((half)1.7 - 
    ((half)0.7 * tmpvar_18)
  )) * (half)6.0);
  half4 tmpvar_56;
  tmpvar_56 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(worldRefl_43), level(tmpvar_55.w));
  half4 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  half3 tmpvar_58;
  tmpvar_58 = ((hdr_54.x * pow (tmpvar_57.w, hdr_54.y)) * tmpvar_57.xyz);
  if ((_mtl_u.unity_SpecCube0_BoxMin.w < 0.99999)) {
    half3 worldRefl_59;
    worldRefl_59 = tmpvar_19;
    float3 worldPos_60;
    worldPos_60 = tmpvar_15;
    if ((_mtl_u.unity_SpecCube1_ProbePosition.w > 0.0)) {
      half3 rbmin_61;
      half3 rbmax_62;
      half3 tmpvar_63;
      tmpvar_63 = normalize(tmpvar_19);
      float3 tmpvar_64;
      tmpvar_64 = ((_mtl_u.unity_SpecCube1_BoxMax.xyz - tmpvar_15) / (float3)tmpvar_63);
      rbmax_62 = half3(tmpvar_64);
      float3 tmpvar_65;
      tmpvar_65 = ((_mtl_u.unity_SpecCube1_BoxMin.xyz - tmpvar_15) / (float3)tmpvar_63);
      rbmin_61 = half3(tmpvar_65);
      bool3 tmpvar_66;
      tmpvar_66 = (tmpvar_63 > (half3)float3(0.0, 0.0, 0.0));
      half tmpvar_67;
      if (tmpvar_66.x) {
        tmpvar_67 = rbmax_62.x;
      } else {
        tmpvar_67 = rbmin_61.x;
      };
      half tmpvar_68;
      if (tmpvar_66.y) {
        tmpvar_68 = rbmax_62.y;
      } else {
        tmpvar_68 = rbmin_61.y;
      };
      half tmpvar_69;
      if (tmpvar_66.z) {
        tmpvar_69 = rbmax_62.z;
      } else {
        tmpvar_69 = rbmin_61.z;
      };
      worldPos_60 = (tmpvar_15 - _mtl_u.unity_SpecCube1_ProbePosition.xyz);
      worldRefl_59 = half3((worldPos_60 + (float3)(tmpvar_63 * min (
        min (tmpvar_67, tmpvar_68)
      , tmpvar_69))));
    };
    half4 hdr_70;
    hdr_70 = half4(tmpvar_17);
    half4 tmpvar_71;
    tmpvar_71.xyz = worldRefl_59;
    tmpvar_71.w = ((tmpvar_18 * ((half)1.7 - 
      ((half)0.7 * tmpvar_18)
    )) * (half)6.0);
    half4 tmpvar_72;
    tmpvar_72 = unity_SpecCube1.sample(_mtlsmp_unity_SpecCube1, (float3)(worldRefl_59), level(tmpvar_71.w));
    half4 tmpvar_73;
    tmpvar_73 = tmpvar_72;
    half3 tmpvar_74;
    tmpvar_74 = ((hdr_70.x * pow (tmpvar_73.w, hdr_70.y)) * tmpvar_73.xyz);
    float3 tmpvar_75;
    tmpvar_75 = mix ((float3)tmpvar_74, (float3)tmpvar_58, _mtl_u.unity_SpecCube0_BoxMin.www);
    specular_42 = half3(tmpvar_75);
  } else {
    specular_42 = tmpvar_58;
  };
  tmpvar_20 = (specular_42 * tmpvar_13);
  half3 viewDir_76;
  viewDir_76 = -(tmpvar_9);
  half surfaceReduction_77;
  half specularTerm_78;
  half tmpvar_79;
  tmpvar_79 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_80;
  half3 inVec_81;
  inVec_81 = (_mtl_u._WorldSpaceLightPos0.xyz + viewDir_76);
  tmpvar_80 = (inVec_81 * rsqrt(max ((half)0.001, 
    dot (inVec_81, inVec_81)
  )));
  half tmpvar_82;
  tmpvar_82 = max ((half)0.0, dot (tmpvar_8, tmpvar_80));
  half tmpvar_83;
  tmpvar_83 = max ((half)0.0, dot (tmpvar_8, viewDir_76));
  half tmpvar_84;
  tmpvar_84 = max ((half)0.0, dot (_mtl_u._WorldSpaceLightPos0.xyz, tmpvar_80));
  half tmpvar_85;
  tmpvar_85 = (tmpvar_79 * tmpvar_79);
  half tmpvar_86;
  tmpvar_86 = (tmpvar_79 * tmpvar_79);
  half tmpvar_87;
  tmpvar_87 = (tmpvar_86 * tmpvar_86);
  half tmpvar_88;
  tmpvar_88 = (((tmpvar_82 * tmpvar_82) * (tmpvar_87 - (half)1.0)) + (half)1.0);
  half x_89;
  x_89 = ((half)1.0 - tmpvar_14);
  half x_90;
  x_90 = ((half)1.0 - tmpvar_83);
  half tmpvar_91;
  tmpvar_91 = ((half)0.5 + (((half)2.0 * tmpvar_84) * (tmpvar_84 * tmpvar_79)));
  half tmpvar_92;
  tmpvar_92 = (((half)1.0 + (
    (tmpvar_91 - (half)1.0)
   * 
    ((x_89 * x_89) * ((x_89 * x_89) * x_89))
  )) * ((half)1.0 + (
    (tmpvar_91 - (half)1.0)
   * 
    ((x_90 * x_90) * ((x_90 * x_90) * x_90))
  )));
  half tmpvar_93;
  tmpvar_93 = ((((half)2.0 / 
    (((tmpvar_14 * (
      (tmpvar_83 * ((half)1.0 - tmpvar_85))
     + tmpvar_85)) + (tmpvar_83 * (
      (tmpvar_14 * ((half)1.0 - tmpvar_85))
     + tmpvar_85))) + (half)1e-05)
  ) * (tmpvar_87 / 
    ((((half)3.141593 * tmpvar_88) * tmpvar_88) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_78 = tmpvar_93;
  bool tmpvar_94;
  tmpvar_94 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_94) {
    specularTerm_78 = sqrt(max ((half)0.0001, tmpvar_93));
  };
  half tmpvar_95;
  tmpvar_95 = max ((half)0.0, (specularTerm_78 * tmpvar_14));
  specularTerm_78 = tmpvar_95;
  half tmpvar_96;
  tmpvar_96 = (tmpvar_92 * tmpvar_14);
  half tmpvar_97;
  tmpvar_97 = (tmpvar_79 * tmpvar_79);
  bool tmpvar_98;
  tmpvar_98 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_98) {
    surfaceReduction_77 = ((half)1.0 - (((half)0.28 * tmpvar_97) * tmpvar_79));
  } else {
    surfaceReduction_77 = ((half)1.0/(((tmpvar_97 * tmpvar_97) + (half)1.0)));
  };
  bool3 tmpvar_99;
  tmpvar_99 = bool3(tmpvar_6);
  bool tmpvar_100;
  tmpvar_100 = any(tmpvar_99);
  float tmpvar_101;
  if (tmpvar_100) {
    tmpvar_101 = 1.0;
  } else {
    tmpvar_101 = 0.0;
  };
  specularTerm_78 = (tmpvar_95 * (half)tmpvar_101);
  half x_102;
  x_102 = ((half)1.0 - tmpvar_84);
  half x_103;
  x_103 = ((half)1.0 - tmpvar_83);
  half3 tmpvar_104;
  tmpvar_104 = (((tmpvar_5 * 
    (tmpvar_21 + (tmpvar_10 * tmpvar_96))
  ) + (
    (specularTerm_78 * tmpvar_10)
   * 
    (tmpvar_6 + (((half)1.0 - tmpvar_6) * ((x_102 * x_102) * (
      (x_102 * x_102)
     * x_102))))
  )) + ((surfaceReduction_77 * tmpvar_20) * mix (tmpvar_6, half3(
    clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_7)), (half)0.0, (half)1.0)
  ), half3(
    ((x_103 * x_103) * ((x_103 * x_103) * x_103))
  ))));
  half4 tmpvar_105;
  tmpvar_105.w = half(1.0);
  tmpvar_105.xyz = tmpvar_104;
  c_1.w = tmpvar_105.w;
  c_1.xyz = tmpvar_104;
  c_1.xyz = c_1.xyz;
  half4 xlat_varoutput_106;
  xlat_varoutput_106.xyz = c_1.xyz;
  xlat_varoutput_106.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_106;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 174 math, 6 textures, 12 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
SetTexture 0 [unity_DynamicLightmap] 2D 0
SetTexture 1 [unity_DynamicDirectionality] 2D 1
SetTexture 2 [unity_SpecCube0] CUBE 2
SetTexture 3 [unity_SpecCube1] CUBE 3
SetTexture 4 [_MainTex] 2D 4
SetTexture 5 [_OcclusionMap] 2D 5
ConstBuffer "$Globals" 182
VectorHalf 0 [_WorldSpaceLightPos0] 4
Vector 16 [unity_SpecCube0_BoxMax]
Vector 32 [unity_SpecCube0_BoxMin]
Vector 48 [unity_SpecCube0_ProbePosition]
VectorHalf 64 [unity_SpecCube0_HDR] 4
Vector 80 [unity_SpecCube1_BoxMax]
Vector 96 [unity_SpecCube1_BoxMin]
Vector 112 [unity_SpecCube1_ProbePosition]
VectorHalf 128 [unity_SpecCube1_HDR] 4
VectorHalf 136 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 144 [unity_ColorSpaceLuminance] 4
VectorHalf 152 [unity_DynamicLightmap_HDR] 4
VectorHalf 160 [_LightColor0] 4
VectorHalf 168 [_Color] 4
ScalarHalf 176 [_Metallic]
ScalarHalf 178 [_Glossiness]
ScalarHalf 180 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  float4 unity_SpecCube0_BoxMax;
  float4 unity_SpecCube0_BoxMin;
  float4 unity_SpecCube0_ProbePosition;
  half4 unity_SpecCube0_HDR;
  float4 unity_SpecCube1_BoxMax;
  float4 unity_SpecCube1_BoxMin;
  float4 unity_SpecCube1_ProbePosition;
  half4 unity_SpecCube1_HDR;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 unity_DynamicLightmap_HDR;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_DynamicLightmap [[texture(0)]], sampler _mtlsmp_unity_DynamicLightmap [[sampler(0)]]
  ,   texture2d<half> unity_DynamicDirectionality [[texture(1)]], sampler _mtlsmp_unity_DynamicDirectionality [[sampler(1)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(2)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(2)]]
  ,   texturecube<half> unity_SpecCube1 [[texture(3)]], sampler _mtlsmp_unity_SpecCube1 [[sampler(3)]]
  ,   texture2d<half> _MainTex [[texture(4)]], sampler _mtlsmp__MainTex [[sampler(4)]]
  ,   texture2d<half> _OcclusionMap [[texture(5)]], sampler _mtlsmp__OcclusionMap [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD8);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_4;
  tmpvar_4 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_5;
  half3 tmpvar_6;
  tmpvar_6 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, half3(_mtl_u._Metallic));
  half tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 tmpvar_10;
  tmpvar_10 = _mtl_u._LightColor0.xyz;
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  half tmpvar_14;
  tmpvar_14 = max ((half)0.0, dot (tmpvar_8, _mtl_u._WorldSpaceLightPos0.xyz));
  float3 tmpvar_15;
  float4 tmpvar_16;
  float4 tmpvar_17;
  float4 tmpvar_18;
  tmpvar_15 = float3(i_posWorld_2);
  tmpvar_16 = float4(_mtl_i.xlv_TEXCOORD5);
  tmpvar_17 = float4(_mtl_u.unity_SpecCube0_HDR);
  tmpvar_18 = float4(_mtl_u.unity_SpecCube1_HDR);
  half3 tmpvar_19;
  half4 realtimeDirTex_20;
  half3 tmpvar_21;
  half4 tmpvar_22;
  tmpvar_22 = unity_DynamicLightmap.sample(_mtlsmp_unity_DynamicLightmap, (float2)(tmpvar_16.zw));
  half4 tmpvar_23;
  tmpvar_23 = unity_DynamicDirectionality.sample(_mtlsmp_unity_DynamicDirectionality, (float2)(tmpvar_16.zw));
  realtimeDirTex_20 = tmpvar_23;
  half4 dirTex_24;
  dirTex_24 = realtimeDirTex_20;
  half3 y_25;
  y_25 = (dirTex_24.xyz - (half)0.5);
  half tmpvar_26;
  tmpvar_26 = max ((half)0.0001, dirTex_24.w);
  tmpvar_21 = ((pow (
    ((_mtl_u.unity_DynamicLightmap_HDR.x * tmpvar_22.w) * tmpvar_22.xyz)
  , _mtl_u.unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_8, y_25)
   + (half)0.5)) / tmpvar_26);
  tmpvar_21 = (tmpvar_21 * tmpvar_13);
  tmpvar_19 = half3(float3(0.0, 0.0, 0.0));
  half tmpvar_27;
  half3 tmpvar_28;
  tmpvar_27 = ((half)1.0 - _mtl_u._Glossiness);
  tmpvar_28 = (tmpvar_9 - ((half)2.0 * (
    dot (tmpvar_8, tmpvar_9)
   * tmpvar_8)));
  half3 originalReflUVW_29;
  half3 specular_30;
  originalReflUVW_29 = tmpvar_28;
  half3 worldRefl_31;
  worldRefl_31 = tmpvar_28;
  float3 worldPos_32;
  worldPos_32 = tmpvar_15;
  if ((_mtl_u.unity_SpecCube0_ProbePosition.w > 0.0)) {
    half3 rbmin_33;
    half3 rbmax_34;
    half3 tmpvar_35;
    tmpvar_35 = normalize(tmpvar_28);
    float3 tmpvar_36;
    tmpvar_36 = ((_mtl_u.unity_SpecCube0_BoxMax.xyz - tmpvar_15) / (float3)tmpvar_35);
    rbmax_34 = half3(tmpvar_36);
    float3 tmpvar_37;
    tmpvar_37 = ((_mtl_u.unity_SpecCube0_BoxMin.xyz - tmpvar_15) / (float3)tmpvar_35);
    rbmin_33 = half3(tmpvar_37);
    bool3 tmpvar_38;
    tmpvar_38 = (tmpvar_35 > (half3)float3(0.0, 0.0, 0.0));
    half tmpvar_39;
    if (tmpvar_38.x) {
      tmpvar_39 = rbmax_34.x;
    } else {
      tmpvar_39 = rbmin_33.x;
    };
    half tmpvar_40;
    if (tmpvar_38.y) {
      tmpvar_40 = rbmax_34.y;
    } else {
      tmpvar_40 = rbmin_33.y;
    };
    half tmpvar_41;
    if (tmpvar_38.z) {
      tmpvar_41 = rbmax_34.z;
    } else {
      tmpvar_41 = rbmin_33.z;
    };
    worldPos_32 = (tmpvar_15 - _mtl_u.unity_SpecCube0_ProbePosition.xyz);
    worldRefl_31 = half3((worldPos_32 + (float3)(tmpvar_35 * min (
      min (tmpvar_39, tmpvar_40)
    , tmpvar_41))));
  };
  tmpvar_28 = worldRefl_31;
  half4 hdr_42;
  hdr_42 = half4(tmpvar_17);
  half4 tmpvar_43;
  tmpvar_43.xyz = worldRefl_31;
  tmpvar_43.w = ((tmpvar_27 * ((half)1.7 - 
    ((half)0.7 * tmpvar_27)
  )) * (half)6.0);
  half4 tmpvar_44;
  tmpvar_44 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(worldRefl_31), level(tmpvar_43.w));
  half4 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  half3 tmpvar_46;
  tmpvar_46 = ((hdr_42.x * pow (tmpvar_45.w, hdr_42.y)) * tmpvar_45.xyz);
  if ((_mtl_u.unity_SpecCube0_BoxMin.w < 0.99999)) {
    half3 worldRefl_47;
    worldRefl_47 = originalReflUVW_29;
    float3 worldPos_48;
    worldPos_48 = tmpvar_15;
    if ((_mtl_u.unity_SpecCube1_ProbePosition.w > 0.0)) {
      half3 rbmin_49;
      half3 rbmax_50;
      half3 tmpvar_51;
      tmpvar_51 = normalize(originalReflUVW_29);
      float3 tmpvar_52;
      tmpvar_52 = ((_mtl_u.unity_SpecCube1_BoxMax.xyz - tmpvar_15) / (float3)tmpvar_51);
      rbmax_50 = half3(tmpvar_52);
      float3 tmpvar_53;
      tmpvar_53 = ((_mtl_u.unity_SpecCube1_BoxMin.xyz - tmpvar_15) / (float3)tmpvar_51);
      rbmin_49 = half3(tmpvar_53);
      bool3 tmpvar_54;
      tmpvar_54 = (tmpvar_51 > (half3)float3(0.0, 0.0, 0.0));
      half tmpvar_55;
      if (tmpvar_54.x) {
        tmpvar_55 = rbmax_50.x;
      } else {
        tmpvar_55 = rbmin_49.x;
      };
      half tmpvar_56;
      if (tmpvar_54.y) {
        tmpvar_56 = rbmax_50.y;
      } else {
        tmpvar_56 = rbmin_49.y;
      };
      half tmpvar_57;
      if (tmpvar_54.z) {
        tmpvar_57 = rbmax_50.z;
      } else {
        tmpvar_57 = rbmin_49.z;
      };
      worldPos_48 = (tmpvar_15 - _mtl_u.unity_SpecCube1_ProbePosition.xyz);
      worldRefl_47 = half3((worldPos_48 + (float3)(tmpvar_51 * min (
        min (tmpvar_55, tmpvar_56)
      , tmpvar_57))));
    };
    tmpvar_28 = worldRefl_47;
    half4 hdr_58;
    hdr_58 = half4(tmpvar_18);
    half4 tmpvar_59;
    tmpvar_59.xyz = worldRefl_47;
    tmpvar_59.w = ((tmpvar_27 * ((half)1.7 - 
      ((half)0.7 * tmpvar_27)
    )) * (half)6.0);
    half4 tmpvar_60;
    tmpvar_60 = unity_SpecCube1.sample(_mtlsmp_unity_SpecCube1, (float3)(worldRefl_47), level(tmpvar_59.w));
    half4 tmpvar_61;
    tmpvar_61 = tmpvar_60;
    half3 tmpvar_62;
    tmpvar_62 = ((hdr_58.x * pow (tmpvar_61.w, hdr_58.y)) * tmpvar_61.xyz);
    float3 tmpvar_63;
    tmpvar_63 = mix ((float3)tmpvar_62, (float3)tmpvar_46, _mtl_u.unity_SpecCube0_BoxMin.www);
    specular_30 = half3(tmpvar_63);
  } else {
    specular_30 = tmpvar_46;
  };
  tmpvar_19 = (specular_30 * tmpvar_13);
  half3 viewDir_64;
  viewDir_64 = -(tmpvar_9);
  half surfaceReduction_65;
  half specularTerm_66;
  half tmpvar_67;
  tmpvar_67 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_68;
  half3 inVec_69;
  inVec_69 = (_mtl_u._WorldSpaceLightPos0.xyz + viewDir_64);
  tmpvar_68 = (inVec_69 * rsqrt(max ((half)0.001, 
    dot (inVec_69, inVec_69)
  )));
  half tmpvar_70;
  tmpvar_70 = max ((half)0.0, dot (tmpvar_8, tmpvar_68));
  half tmpvar_71;
  tmpvar_71 = max ((half)0.0, dot (tmpvar_8, viewDir_64));
  half tmpvar_72;
  tmpvar_72 = max ((half)0.0, dot (_mtl_u._WorldSpaceLightPos0.xyz, tmpvar_68));
  half tmpvar_73;
  tmpvar_73 = (tmpvar_67 * tmpvar_67);
  half tmpvar_74;
  tmpvar_74 = (tmpvar_67 * tmpvar_67);
  half tmpvar_75;
  tmpvar_75 = (tmpvar_74 * tmpvar_74);
  half tmpvar_76;
  tmpvar_76 = (((tmpvar_70 * tmpvar_70) * (tmpvar_75 - (half)1.0)) + (half)1.0);
  half x_77;
  x_77 = ((half)1.0 - tmpvar_14);
  half x_78;
  x_78 = ((half)1.0 - tmpvar_71);
  half tmpvar_79;
  tmpvar_79 = ((half)0.5 + (((half)2.0 * tmpvar_72) * (tmpvar_72 * tmpvar_67)));
  half tmpvar_80;
  tmpvar_80 = (((half)1.0 + (
    (tmpvar_79 - (half)1.0)
   * 
    ((x_77 * x_77) * ((x_77 * x_77) * x_77))
  )) * ((half)1.0 + (
    (tmpvar_79 - (half)1.0)
   * 
    ((x_78 * x_78) * ((x_78 * x_78) * x_78))
  )));
  half tmpvar_81;
  tmpvar_81 = ((((half)2.0 / 
    (((tmpvar_14 * (
      (tmpvar_71 * ((half)1.0 - tmpvar_73))
     + tmpvar_73)) + (tmpvar_71 * (
      (tmpvar_14 * ((half)1.0 - tmpvar_73))
     + tmpvar_73))) + (half)1e-05)
  ) * (tmpvar_75 / 
    ((((half)3.141593 * tmpvar_76) * tmpvar_76) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_66 = tmpvar_81;
  bool tmpvar_82;
  tmpvar_82 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_82) {
    specularTerm_66 = sqrt(max ((half)0.0001, tmpvar_81));
  };
  half tmpvar_83;
  tmpvar_83 = max ((half)0.0, (specularTerm_66 * tmpvar_14));
  specularTerm_66 = tmpvar_83;
  half tmpvar_84;
  tmpvar_84 = (tmpvar_80 * tmpvar_14);
  half tmpvar_85;
  tmpvar_85 = (tmpvar_67 * tmpvar_67);
  bool tmpvar_86;
  tmpvar_86 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_86) {
    surfaceReduction_65 = ((half)1.0 - (((half)0.28 * tmpvar_85) * tmpvar_67));
  } else {
    surfaceReduction_65 = ((half)1.0/(((tmpvar_85 * tmpvar_85) + (half)1.0)));
  };
  bool3 tmpvar_87;
  tmpvar_87 = bool3(tmpvar_6);
  bool tmpvar_88;
  tmpvar_88 = any(tmpvar_87);
  float tmpvar_89;
  if (tmpvar_88) {
    tmpvar_89 = 1.0;
  } else {
    tmpvar_89 = 0.0;
  };
  specularTerm_66 = (tmpvar_83 * (half)tmpvar_89);
  half x_90;
  x_90 = ((half)1.0 - tmpvar_72);
  half x_91;
  x_91 = ((half)1.0 - tmpvar_71);
  half3 tmpvar_92;
  tmpvar_92 = (((tmpvar_5 * 
    (tmpvar_21 + (tmpvar_10 * tmpvar_84))
  ) + (
    (specularTerm_66 * tmpvar_10)
   * 
    (tmpvar_6 + (((half)1.0 - tmpvar_6) * ((x_90 * x_90) * (
      (x_90 * x_90)
     * x_90))))
  )) + ((surfaceReduction_65 * tmpvar_19) * mix (tmpvar_6, half3(
    clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_7)), (half)0.0, (half)1.0)
  ), half3(
    ((x_91 * x_91) * ((x_91 * x_91) * x_91))
  ))));
  half4 tmpvar_93;
  tmpvar_93.w = half(1.0);
  tmpvar_93.xyz = tmpvar_92;
  c_1.w = tmpvar_93.w;
  c_1.xyz = tmpvar_92;
  c_1.xyz = c_1.xyz;
  half4 xlat_varoutput_94;
  xlat_varoutput_94.xyz = c_1.xyz;
  xlat_varoutput_94.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_94;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 196 math, 8 textures, 15 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
SetTexture 0 [unity_SpecCube0] CUBE 0
SetTexture 1 [unity_SpecCube1] CUBE 1
SetTexture 2 [unity_ProbeVolumeSH] 3D 2
SetTexture 3 [_MainTex] 2D 3
SetTexture 4 [_OcclusionMap] 2D 4
SetTexture 5 [_ShadowMapTexture] 2D 5
ConstBuffer "$Globals" 310
Matrix 176 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_SHAr] 4
VectorHalf 16 [unity_SHAg] 4
VectorHalf 24 [unity_SHAb] 4
Vector 32 [unity_SpecCube0_BoxMax]
Vector 48 [unity_SpecCube0_BoxMin]
Vector 64 [unity_SpecCube0_ProbePosition]
VectorHalf 80 [unity_SpecCube0_HDR] 4
Vector 96 [unity_SpecCube1_BoxMax]
Vector 112 [unity_SpecCube1_BoxMin]
Vector 128 [unity_SpecCube1_ProbePosition]
VectorHalf 144 [unity_SpecCube1_HDR] 4
Vector 160 [unity_ProbeVolumeParams]
Vector 240 [unity_ProbeVolumeSizeInv] 3
Vector 256 [unity_ProbeVolumeMin] 3
VectorHalf 272 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 280 [unity_ColorSpaceLuminance] 4
VectorHalf 288 [_LightColor0] 4
VectorHalf 296 [_Color] 4
ScalarHalf 304 [_Metallic]
ScalarHalf 306 [_Glossiness]
ScalarHalf 308 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_SpecCube0_BoxMax;
  float4 unity_SpecCube0_BoxMin;
  float4 unity_SpecCube0_ProbePosition;
  half4 unity_SpecCube0_HDR;
  float4 unity_SpecCube1_BoxMax;
  float4 unity_SpecCube1_BoxMin;
  float4 unity_SpecCube1_ProbePosition;
  half4 unity_SpecCube1_HDR;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(0)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(0)]]
  ,   texturecube<half> unity_SpecCube1 [[texture(1)]], sampler _mtlsmp_unity_SpecCube1 [[sampler(1)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(2)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(2)]]
  ,   texture2d<half> _MainTex [[texture(3)]], sampler _mtlsmp__MainTex [[sampler(3)]]
  ,   texture2d<half> _OcclusionMap [[texture(4)]], sampler _mtlsmp__OcclusionMap [[sampler(4)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(5)]], sampler _mtlsmp__ShadowMapTexture [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half atten_2;
  half3 i_posWorld_3;
  i_posWorld_3 = half3(_mtl_i.xlv_TEXCOORD8);
  half4 tmpvar_4;
  tmpvar_4 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_5;
  tmpvar_5 = (_mtl_u._Color.xyz * tmpvar_4.xyz);
  half3 tmpvar_6;
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, half3(_mtl_u._Metallic));
  half tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 tmpvar_11;
  tmpvar_11 = _mtl_u._LightColor0.xyz;
  half tmpvar_12;
  tmpvar_12 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  atten_2 = tmpvar_12;
  half occ_13;
  half tmpvar_14;
  tmpvar_14 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_13 = tmpvar_14;
  half tmpvar_15;
  tmpvar_15 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_13 * _mtl_u._OcclusionStrength));
  half tmpvar_16;
  tmpvar_16 = max ((half)0.0, dot (tmpvar_9, _mtl_u._WorldSpaceLightPos0.xyz));
  float3 tmpvar_17;
  float4 tmpvar_18;
  float4 tmpvar_19;
  tmpvar_17 = float3(i_posWorld_3);
  tmpvar_18 = float4(_mtl_u.unity_SpecCube0_HDR);
  tmpvar_19 = float4(_mtl_u.unity_SpecCube1_HDR);
  half tmpvar_20;
  tmpvar_20 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_21;
  tmpvar_21 = (tmpvar_10 - ((half)2.0 * (
    dot (tmpvar_9, tmpvar_10)
   * tmpvar_9)));
  half3 tmpvar_22;
  half3 tmpvar_23;
  half3 tmpvar_24;
  tmpvar_24 = half3(float3(0.0, 0.0, 0.0));
  tmpvar_23 = (tmpvar_11 * atten_2);
  half3 ambient_25;
  ambient_25 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_26;
  ambient_contrib_26 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_27;
    tmpvar_27.w = half(1.0);
    tmpvar_27.xyz = tmpvar_9;
    half3 x1_28;
    half4 SHAb_29;
    half4 SHAg_30;
    half4 SHAr_31;
    float3 texCoord_32;
    float3 tmpvar_33;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_34;
      tmpvar_34.w = 1.0;
      tmpvar_34.xyz = tmpvar_17;
      tmpvar_33 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_34).xyz;
    } else {
      tmpvar_33 = tmpvar_17;
    };
    float3 tmpvar_35;
    tmpvar_35 = ((tmpvar_33 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_32.yz = tmpvar_35.yz;
    texCoord_32.x = (tmpvar_35.x * 0.25);
    float tmpvar_36;
    float tmpvar_37;
    tmpvar_37 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_36 = clamp (texCoord_32.x, tmpvar_37, (0.25 - tmpvar_37));
    texCoord_32.x = tmpvar_36;
    half4 tmpvar_38;
    tmpvar_38 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_32));
    SHAr_31 = tmpvar_38;
    texCoord_32.x = (tmpvar_36 + 0.25);
    half4 tmpvar_39;
    tmpvar_39 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_32));
    SHAg_30 = tmpvar_39;
    texCoord_32.x = (tmpvar_36 + 0.5);
    half4 tmpvar_40;
    tmpvar_40 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_32));
    SHAb_29 = tmpvar_40;
    x1_28.x = dot (SHAr_31, tmpvar_27);
    x1_28.y = dot (SHAg_30, tmpvar_27);
    x1_28.z = dot (SHAb_29, tmpvar_27);
    ambient_contrib_26 = x1_28;
  } else {
    half4 tmpvar_41;
    tmpvar_41.w = half(1.0);
    tmpvar_41.xyz = tmpvar_9;
    half3 x_42;
    x_42.x = dot (_mtl_u.unity_SHAr, tmpvar_41);
    x_42.y = dot (_mtl_u.unity_SHAg, tmpvar_41);
    x_42.z = dot (_mtl_u.unity_SHAb, tmpvar_41);
    ambient_contrib_26 = x_42;
  };
  half3 tmpvar_43;
  tmpvar_43 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_26));
  ambient_25 = tmpvar_43;
  bool tmpvar_44;
  tmpvar_44 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_44) {
    ambient_25 = max ((((half)1.055 * 
      pow (max (tmpvar_43, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_24 = (ambient_25 * tmpvar_15);
  tmpvar_22 = half3(float3(0.0, 0.0, 0.0));
  half3 specular_45;
  half3 worldRefl_46;
  worldRefl_46 = tmpvar_21;
  float3 worldPos_47;
  worldPos_47 = tmpvar_17;
  if ((_mtl_u.unity_SpecCube0_ProbePosition.w > 0.0)) {
    half3 rbmin_48;
    half3 rbmax_49;
    half3 tmpvar_50;
    tmpvar_50 = normalize(tmpvar_21);
    float3 tmpvar_51;
    tmpvar_51 = ((_mtl_u.unity_SpecCube0_BoxMax.xyz - tmpvar_17) / (float3)tmpvar_50);
    rbmax_49 = half3(tmpvar_51);
    float3 tmpvar_52;
    tmpvar_52 = ((_mtl_u.unity_SpecCube0_BoxMin.xyz - tmpvar_17) / (float3)tmpvar_50);
    rbmin_48 = half3(tmpvar_52);
    bool3 tmpvar_53;
    tmpvar_53 = (tmpvar_50 > (half3)float3(0.0, 0.0, 0.0));
    half tmpvar_54;
    if (tmpvar_53.x) {
      tmpvar_54 = rbmax_49.x;
    } else {
      tmpvar_54 = rbmin_48.x;
    };
    half tmpvar_55;
    if (tmpvar_53.y) {
      tmpvar_55 = rbmax_49.y;
    } else {
      tmpvar_55 = rbmin_48.y;
    };
    half tmpvar_56;
    if (tmpvar_53.z) {
      tmpvar_56 = rbmax_49.z;
    } else {
      tmpvar_56 = rbmin_48.z;
    };
    worldPos_47 = (tmpvar_17 - _mtl_u.unity_SpecCube0_ProbePosition.xyz);
    worldRefl_46 = half3((worldPos_47 + (float3)(tmpvar_50 * min (
      min (tmpvar_54, tmpvar_55)
    , tmpvar_56))));
  };
  half4 hdr_57;
  hdr_57 = half4(tmpvar_18);
  half4 tmpvar_58;
  tmpvar_58.xyz = worldRefl_46;
  tmpvar_58.w = ((tmpvar_20 * ((half)1.7 - 
    ((half)0.7 * tmpvar_20)
  )) * (half)6.0);
  half4 tmpvar_59;
  tmpvar_59 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(worldRefl_46), level(tmpvar_58.w));
  half4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  half3 tmpvar_61;
  tmpvar_61 = ((hdr_57.x * pow (tmpvar_60.w, hdr_57.y)) * tmpvar_60.xyz);
  if ((_mtl_u.unity_SpecCube0_BoxMin.w < 0.99999)) {
    half3 worldRefl_62;
    worldRefl_62 = tmpvar_21;
    float3 worldPos_63;
    worldPos_63 = tmpvar_17;
    if ((_mtl_u.unity_SpecCube1_ProbePosition.w > 0.0)) {
      half3 rbmin_64;
      half3 rbmax_65;
      half3 tmpvar_66;
      tmpvar_66 = normalize(tmpvar_21);
      float3 tmpvar_67;
      tmpvar_67 = ((_mtl_u.unity_SpecCube1_BoxMax.xyz - tmpvar_17) / (float3)tmpvar_66);
      rbmax_65 = half3(tmpvar_67);
      float3 tmpvar_68;
      tmpvar_68 = ((_mtl_u.unity_SpecCube1_BoxMin.xyz - tmpvar_17) / (float3)tmpvar_66);
      rbmin_64 = half3(tmpvar_68);
      bool3 tmpvar_69;
      tmpvar_69 = (tmpvar_66 > (half3)float3(0.0, 0.0, 0.0));
      half tmpvar_70;
      if (tmpvar_69.x) {
        tmpvar_70 = rbmax_65.x;
      } else {
        tmpvar_70 = rbmin_64.x;
      };
      half tmpvar_71;
      if (tmpvar_69.y) {
        tmpvar_71 = rbmax_65.y;
      } else {
        tmpvar_71 = rbmin_64.y;
      };
      half tmpvar_72;
      if (tmpvar_69.z) {
        tmpvar_72 = rbmax_65.z;
      } else {
        tmpvar_72 = rbmin_64.z;
      };
      worldPos_63 = (tmpvar_17 - _mtl_u.unity_SpecCube1_ProbePosition.xyz);
      worldRefl_62 = half3((worldPos_63 + (float3)(tmpvar_66 * min (
        min (tmpvar_70, tmpvar_71)
      , tmpvar_72))));
    };
    half4 hdr_73;
    hdr_73 = half4(tmpvar_19);
    half4 tmpvar_74;
    tmpvar_74.xyz = worldRefl_62;
    tmpvar_74.w = ((tmpvar_20 * ((half)1.7 - 
      ((half)0.7 * tmpvar_20)
    )) * (half)6.0);
    half4 tmpvar_75;
    tmpvar_75 = unity_SpecCube1.sample(_mtlsmp_unity_SpecCube1, (float3)(worldRefl_62), level(tmpvar_74.w));
    half4 tmpvar_76;
    tmpvar_76 = tmpvar_75;
    half3 tmpvar_77;
    tmpvar_77 = ((hdr_73.x * pow (tmpvar_76.w, hdr_73.y)) * tmpvar_76.xyz);
    float3 tmpvar_78;
    tmpvar_78 = mix ((float3)tmpvar_77, (float3)tmpvar_61, _mtl_u.unity_SpecCube0_BoxMin.www);
    specular_45 = half3(tmpvar_78);
  } else {
    specular_45 = tmpvar_61;
  };
  tmpvar_22 = (specular_45 * tmpvar_15);
  half3 viewDir_79;
  viewDir_79 = -(tmpvar_10);
  half surfaceReduction_80;
  half specularTerm_81;
  half tmpvar_82;
  tmpvar_82 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_83;
  half3 inVec_84;
  inVec_84 = (_mtl_u._WorldSpaceLightPos0.xyz + viewDir_79);
  tmpvar_83 = (inVec_84 * rsqrt(max ((half)0.001, 
    dot (inVec_84, inVec_84)
  )));
  half tmpvar_85;
  tmpvar_85 = max ((half)0.0, dot (tmpvar_9, tmpvar_83));
  half tmpvar_86;
  tmpvar_86 = max ((half)0.0, dot (tmpvar_9, viewDir_79));
  half tmpvar_87;
  tmpvar_87 = max ((half)0.0, dot (_mtl_u._WorldSpaceLightPos0.xyz, tmpvar_83));
  half tmpvar_88;
  tmpvar_88 = (tmpvar_82 * tmpvar_82);
  half tmpvar_89;
  tmpvar_89 = (tmpvar_82 * tmpvar_82);
  half tmpvar_90;
  tmpvar_90 = (tmpvar_89 * tmpvar_89);
  half tmpvar_91;
  tmpvar_91 = (((tmpvar_85 * tmpvar_85) * (tmpvar_90 - (half)1.0)) + (half)1.0);
  half x_92;
  x_92 = ((half)1.0 - tmpvar_16);
  half x_93;
  x_93 = ((half)1.0 - tmpvar_86);
  half tmpvar_94;
  tmpvar_94 = ((half)0.5 + (((half)2.0 * tmpvar_87) * (tmpvar_87 * tmpvar_82)));
  half tmpvar_95;
  tmpvar_95 = (((half)1.0 + (
    (tmpvar_94 - (half)1.0)
   * 
    ((x_92 * x_92) * ((x_92 * x_92) * x_92))
  )) * ((half)1.0 + (
    (tmpvar_94 - (half)1.0)
   * 
    ((x_93 * x_93) * ((x_93 * x_93) * x_93))
  )));
  half tmpvar_96;
  tmpvar_96 = ((((half)2.0 / 
    (((tmpvar_16 * (
      (tmpvar_86 * ((half)1.0 - tmpvar_88))
     + tmpvar_88)) + (tmpvar_86 * (
      (tmpvar_16 * ((half)1.0 - tmpvar_88))
     + tmpvar_88))) + (half)1e-05)
  ) * (tmpvar_90 / 
    ((((half)3.141593 * tmpvar_91) * tmpvar_91) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_81 = tmpvar_96;
  bool tmpvar_97;
  tmpvar_97 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_97) {
    specularTerm_81 = sqrt(max ((half)0.0001, tmpvar_96));
  };
  half tmpvar_98;
  tmpvar_98 = max ((half)0.0, (specularTerm_81 * tmpvar_16));
  specularTerm_81 = tmpvar_98;
  half tmpvar_99;
  tmpvar_99 = (tmpvar_95 * tmpvar_16);
  half tmpvar_100;
  tmpvar_100 = (tmpvar_82 * tmpvar_82);
  bool tmpvar_101;
  tmpvar_101 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_101) {
    surfaceReduction_80 = ((half)1.0 - (((half)0.28 * tmpvar_100) * tmpvar_82));
  } else {
    surfaceReduction_80 = ((half)1.0/(((tmpvar_100 * tmpvar_100) + (half)1.0)));
  };
  bool3 tmpvar_102;
  tmpvar_102 = bool3(tmpvar_7);
  bool tmpvar_103;
  tmpvar_103 = any(tmpvar_102);
  float tmpvar_104;
  if (tmpvar_103) {
    tmpvar_104 = 1.0;
  } else {
    tmpvar_104 = 0.0;
  };
  specularTerm_81 = (tmpvar_98 * (half)tmpvar_104);
  half x_105;
  x_105 = ((half)1.0 - tmpvar_87);
  half x_106;
  x_106 = ((half)1.0 - tmpvar_86);
  half3 tmpvar_107;
  tmpvar_107 = (((tmpvar_6 * 
    (tmpvar_24 + (tmpvar_23 * tmpvar_99))
  ) + (
    (specularTerm_81 * tmpvar_23)
   * 
    (tmpvar_7 + (((half)1.0 - tmpvar_7) * ((x_105 * x_105) * (
      (x_105 * x_105)
     * x_105))))
  )) + ((surfaceReduction_80 * tmpvar_22) * mix (tmpvar_7, half3(
    clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_8)), (half)0.0, (half)1.0)
  ), half3(
    ((x_106 * x_106) * ((x_106 * x_106) * x_106))
  ))));
  half4 tmpvar_108;
  tmpvar_108.w = half(1.0);
  tmpvar_108.xyz = tmpvar_107;
  c_1.w = tmpvar_108.w;
  c_1.xyz = tmpvar_107;
  c_1.xyz = c_1.xyz;
  half4 xlat_varoutput_109;
  xlat_varoutput_109.xyz = c_1.xyz;
  xlat_varoutput_109.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_109;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 175 math, 7 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
SetTexture 0 [unity_DynamicLightmap] 2D 0
SetTexture 1 [unity_DynamicDirectionality] 2D 1
SetTexture 2 [unity_SpecCube0] CUBE 2
SetTexture 3 [unity_SpecCube1] CUBE 3
SetTexture 4 [_MainTex] 2D 4
SetTexture 5 [_OcclusionMap] 2D 5
SetTexture 6 [_ShadowMapTexture] 2D 6
ConstBuffer "$Globals" 182
VectorHalf 0 [_WorldSpaceLightPos0] 4
Vector 16 [unity_SpecCube0_BoxMax]
Vector 32 [unity_SpecCube0_BoxMin]
Vector 48 [unity_SpecCube0_ProbePosition]
VectorHalf 64 [unity_SpecCube0_HDR] 4
Vector 80 [unity_SpecCube1_BoxMax]
Vector 96 [unity_SpecCube1_BoxMin]
Vector 112 [unity_SpecCube1_ProbePosition]
VectorHalf 128 [unity_SpecCube1_HDR] 4
VectorHalf 136 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 144 [unity_ColorSpaceLuminance] 4
VectorHalf 152 [unity_DynamicLightmap_HDR] 4
VectorHalf 160 [_LightColor0] 4
VectorHalf 168 [_Color] 4
ScalarHalf 176 [_Metallic]
ScalarHalf 178 [_Glossiness]
ScalarHalf 180 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  float4 unity_SpecCube0_BoxMax;
  float4 unity_SpecCube0_BoxMin;
  float4 unity_SpecCube0_ProbePosition;
  half4 unity_SpecCube0_HDR;
  float4 unity_SpecCube1_BoxMax;
  float4 unity_SpecCube1_BoxMin;
  float4 unity_SpecCube1_ProbePosition;
  half4 unity_SpecCube1_HDR;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 unity_DynamicLightmap_HDR;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_DynamicLightmap [[texture(0)]], sampler _mtlsmp_unity_DynamicLightmap [[sampler(0)]]
  ,   texture2d<half> unity_DynamicDirectionality [[texture(1)]], sampler _mtlsmp_unity_DynamicDirectionality [[sampler(1)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(2)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(2)]]
  ,   texturecube<half> unity_SpecCube1 [[texture(3)]], sampler _mtlsmp_unity_SpecCube1 [[sampler(3)]]
  ,   texture2d<half> _MainTex [[texture(4)]], sampler _mtlsmp__MainTex [[sampler(4)]]
  ,   texture2d<half> _OcclusionMap [[texture(5)]], sampler _mtlsmp__OcclusionMap [[sampler(5)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(6)]], sampler _mtlsmp__ShadowMapTexture [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half atten_2;
  half3 i_posWorld_3;
  i_posWorld_3 = half3(_mtl_i.xlv_TEXCOORD8);
  half4 tmpvar_4;
  tmpvar_4 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_5;
  tmpvar_5 = (_mtl_u._Color.xyz * tmpvar_4.xyz);
  half3 tmpvar_6;
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, half3(_mtl_u._Metallic));
  half tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 tmpvar_11;
  tmpvar_11 = _mtl_u._LightColor0.xyz;
  half tmpvar_12;
  tmpvar_12 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  atten_2 = tmpvar_12;
  half occ_13;
  half tmpvar_14;
  tmpvar_14 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_13 = tmpvar_14;
  half tmpvar_15;
  tmpvar_15 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_13 * _mtl_u._OcclusionStrength));
  half tmpvar_16;
  tmpvar_16 = max ((half)0.0, dot (tmpvar_9, _mtl_u._WorldSpaceLightPos0.xyz));
  float3 tmpvar_17;
  float4 tmpvar_18;
  float4 tmpvar_19;
  float4 tmpvar_20;
  tmpvar_17 = float3(i_posWorld_3);
  tmpvar_18 = float4(_mtl_i.xlv_TEXCOORD5);
  tmpvar_19 = float4(_mtl_u.unity_SpecCube0_HDR);
  tmpvar_20 = float4(_mtl_u.unity_SpecCube1_HDR);
  half3 tmpvar_21;
  half3 tmpvar_22;
  half4 realtimeDirTex_23;
  half3 tmpvar_24;
  half4 tmpvar_25;
  tmpvar_25 = unity_DynamicLightmap.sample(_mtlsmp_unity_DynamicLightmap, (float2)(tmpvar_18.zw));
  half4 tmpvar_26;
  tmpvar_26 = unity_DynamicDirectionality.sample(_mtlsmp_unity_DynamicDirectionality, (float2)(tmpvar_18.zw));
  realtimeDirTex_23 = tmpvar_26;
  half4 dirTex_27;
  dirTex_27 = realtimeDirTex_23;
  half3 y_28;
  y_28 = (dirTex_27.xyz - (half)0.5);
  half tmpvar_29;
  tmpvar_29 = max ((half)0.0001, dirTex_27.w);
  tmpvar_24 = ((pow (
    ((_mtl_u.unity_DynamicLightmap_HDR.x * tmpvar_25.w) * tmpvar_25.xyz)
  , _mtl_u.unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_9, y_28)
   + (half)0.5)) / tmpvar_29);
  tmpvar_24 = (tmpvar_24 * tmpvar_15);
  tmpvar_21 = (tmpvar_11 * atten_2);
  tmpvar_22 = half3(float3(0.0, 0.0, 0.0));
  half tmpvar_30;
  half3 tmpvar_31;
  tmpvar_30 = ((half)1.0 - _mtl_u._Glossiness);
  tmpvar_31 = (tmpvar_10 - ((half)2.0 * (
    dot (tmpvar_9, tmpvar_10)
   * tmpvar_9)));
  half3 originalReflUVW_32;
  half3 specular_33;
  originalReflUVW_32 = tmpvar_31;
  half3 worldRefl_34;
  worldRefl_34 = tmpvar_31;
  float3 worldPos_35;
  worldPos_35 = tmpvar_17;
  if ((_mtl_u.unity_SpecCube0_ProbePosition.w > 0.0)) {
    half3 rbmin_36;
    half3 rbmax_37;
    half3 tmpvar_38;
    tmpvar_38 = normalize(tmpvar_31);
    float3 tmpvar_39;
    tmpvar_39 = ((_mtl_u.unity_SpecCube0_BoxMax.xyz - tmpvar_17) / (float3)tmpvar_38);
    rbmax_37 = half3(tmpvar_39);
    float3 tmpvar_40;
    tmpvar_40 = ((_mtl_u.unity_SpecCube0_BoxMin.xyz - tmpvar_17) / (float3)tmpvar_38);
    rbmin_36 = half3(tmpvar_40);
    bool3 tmpvar_41;
    tmpvar_41 = (tmpvar_38 > (half3)float3(0.0, 0.0, 0.0));
    half tmpvar_42;
    if (tmpvar_41.x) {
      tmpvar_42 = rbmax_37.x;
    } else {
      tmpvar_42 = rbmin_36.x;
    };
    half tmpvar_43;
    if (tmpvar_41.y) {
      tmpvar_43 = rbmax_37.y;
    } else {
      tmpvar_43 = rbmin_36.y;
    };
    half tmpvar_44;
    if (tmpvar_41.z) {
      tmpvar_44 = rbmax_37.z;
    } else {
      tmpvar_44 = rbmin_36.z;
    };
    worldPos_35 = (tmpvar_17 - _mtl_u.unity_SpecCube0_ProbePosition.xyz);
    worldRefl_34 = half3((worldPos_35 + (float3)(tmpvar_38 * min (
      min (tmpvar_42, tmpvar_43)
    , tmpvar_44))));
  };
  tmpvar_31 = worldRefl_34;
  half4 hdr_45;
  hdr_45 = half4(tmpvar_19);
  half4 tmpvar_46;
  tmpvar_46.xyz = worldRefl_34;
  tmpvar_46.w = ((tmpvar_30 * ((half)1.7 - 
    ((half)0.7 * tmpvar_30)
  )) * (half)6.0);
  half4 tmpvar_47;
  tmpvar_47 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(worldRefl_34), level(tmpvar_46.w));
  half4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  half3 tmpvar_49;
  tmpvar_49 = ((hdr_45.x * pow (tmpvar_48.w, hdr_45.y)) * tmpvar_48.xyz);
  if ((_mtl_u.unity_SpecCube0_BoxMin.w < 0.99999)) {
    half3 worldRefl_50;
    worldRefl_50 = originalReflUVW_32;
    float3 worldPos_51;
    worldPos_51 = tmpvar_17;
    if ((_mtl_u.unity_SpecCube1_ProbePosition.w > 0.0)) {
      half3 rbmin_52;
      half3 rbmax_53;
      half3 tmpvar_54;
      tmpvar_54 = normalize(originalReflUVW_32);
      float3 tmpvar_55;
      tmpvar_55 = ((_mtl_u.unity_SpecCube1_BoxMax.xyz - tmpvar_17) / (float3)tmpvar_54);
      rbmax_53 = half3(tmpvar_55);
      float3 tmpvar_56;
      tmpvar_56 = ((_mtl_u.unity_SpecCube1_BoxMin.xyz - tmpvar_17) / (float3)tmpvar_54);
      rbmin_52 = half3(tmpvar_56);
      bool3 tmpvar_57;
      tmpvar_57 = (tmpvar_54 > (half3)float3(0.0, 0.0, 0.0));
      half tmpvar_58;
      if (tmpvar_57.x) {
        tmpvar_58 = rbmax_53.x;
      } else {
        tmpvar_58 = rbmin_52.x;
      };
      half tmpvar_59;
      if (tmpvar_57.y) {
        tmpvar_59 = rbmax_53.y;
      } else {
        tmpvar_59 = rbmin_52.y;
      };
      half tmpvar_60;
      if (tmpvar_57.z) {
        tmpvar_60 = rbmax_53.z;
      } else {
        tmpvar_60 = rbmin_52.z;
      };
      worldPos_51 = (tmpvar_17 - _mtl_u.unity_SpecCube1_ProbePosition.xyz);
      worldRefl_50 = half3((worldPos_51 + (float3)(tmpvar_54 * min (
        min (tmpvar_58, tmpvar_59)
      , tmpvar_60))));
    };
    tmpvar_31 = worldRefl_50;
    half4 hdr_61;
    hdr_61 = half4(tmpvar_20);
    half4 tmpvar_62;
    tmpvar_62.xyz = worldRefl_50;
    tmpvar_62.w = ((tmpvar_30 * ((half)1.7 - 
      ((half)0.7 * tmpvar_30)
    )) * (half)6.0);
    half4 tmpvar_63;
    tmpvar_63 = unity_SpecCube1.sample(_mtlsmp_unity_SpecCube1, (float3)(worldRefl_50), level(tmpvar_62.w));
    half4 tmpvar_64;
    tmpvar_64 = tmpvar_63;
    half3 tmpvar_65;
    tmpvar_65 = ((hdr_61.x * pow (tmpvar_64.w, hdr_61.y)) * tmpvar_64.xyz);
    float3 tmpvar_66;
    tmpvar_66 = mix ((float3)tmpvar_65, (float3)tmpvar_49, _mtl_u.unity_SpecCube0_BoxMin.www);
    specular_33 = half3(tmpvar_66);
  } else {
    specular_33 = tmpvar_49;
  };
  tmpvar_22 = (specular_33 * tmpvar_15);
  half3 viewDir_67;
  viewDir_67 = -(tmpvar_10);
  half surfaceReduction_68;
  half specularTerm_69;
  half tmpvar_70;
  tmpvar_70 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_71;
  half3 inVec_72;
  inVec_72 = (_mtl_u._WorldSpaceLightPos0.xyz + viewDir_67);
  tmpvar_71 = (inVec_72 * rsqrt(max ((half)0.001, 
    dot (inVec_72, inVec_72)
  )));
  half tmpvar_73;
  tmpvar_73 = max ((half)0.0, dot (tmpvar_9, tmpvar_71));
  half tmpvar_74;
  tmpvar_74 = max ((half)0.0, dot (tmpvar_9, viewDir_67));
  half tmpvar_75;
  tmpvar_75 = max ((half)0.0, dot (_mtl_u._WorldSpaceLightPos0.xyz, tmpvar_71));
  half tmpvar_76;
  tmpvar_76 = (tmpvar_70 * tmpvar_70);
  half tmpvar_77;
  tmpvar_77 = (tmpvar_70 * tmpvar_70);
  half tmpvar_78;
  tmpvar_78 = (tmpvar_77 * tmpvar_77);
  half tmpvar_79;
  tmpvar_79 = (((tmpvar_73 * tmpvar_73) * (tmpvar_78 - (half)1.0)) + (half)1.0);
  half x_80;
  x_80 = ((half)1.0 - tmpvar_16);
  half x_81;
  x_81 = ((half)1.0 - tmpvar_74);
  half tmpvar_82;
  tmpvar_82 = ((half)0.5 + (((half)2.0 * tmpvar_75) * (tmpvar_75 * tmpvar_70)));
  half tmpvar_83;
  tmpvar_83 = (((half)1.0 + (
    (tmpvar_82 - (half)1.0)
   * 
    ((x_80 * x_80) * ((x_80 * x_80) * x_80))
  )) * ((half)1.0 + (
    (tmpvar_82 - (half)1.0)
   * 
    ((x_81 * x_81) * ((x_81 * x_81) * x_81))
  )));
  half tmpvar_84;
  tmpvar_84 = ((((half)2.0 / 
    (((tmpvar_16 * (
      (tmpvar_74 * ((half)1.0 - tmpvar_76))
     + tmpvar_76)) + (tmpvar_74 * (
      (tmpvar_16 * ((half)1.0 - tmpvar_76))
     + tmpvar_76))) + (half)1e-05)
  ) * (tmpvar_78 / 
    ((((half)3.141593 * tmpvar_79) * tmpvar_79) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_69 = tmpvar_84;
  bool tmpvar_85;
  tmpvar_85 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_85) {
    specularTerm_69 = sqrt(max ((half)0.0001, tmpvar_84));
  };
  half tmpvar_86;
  tmpvar_86 = max ((half)0.0, (specularTerm_69 * tmpvar_16));
  specularTerm_69 = tmpvar_86;
  half tmpvar_87;
  tmpvar_87 = (tmpvar_83 * tmpvar_16);
  half tmpvar_88;
  tmpvar_88 = (tmpvar_70 * tmpvar_70);
  bool tmpvar_89;
  tmpvar_89 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_89) {
    surfaceReduction_68 = ((half)1.0 - (((half)0.28 * tmpvar_88) * tmpvar_70));
  } else {
    surfaceReduction_68 = ((half)1.0/(((tmpvar_88 * tmpvar_88) + (half)1.0)));
  };
  bool3 tmpvar_90;
  tmpvar_90 = bool3(tmpvar_7);
  bool tmpvar_91;
  tmpvar_91 = any(tmpvar_90);
  float tmpvar_92;
  if (tmpvar_91) {
    tmpvar_92 = 1.0;
  } else {
    tmpvar_92 = 0.0;
  };
  specularTerm_69 = (tmpvar_86 * (half)tmpvar_92);
  half x_93;
  x_93 = ((half)1.0 - tmpvar_75);
  half x_94;
  x_94 = ((half)1.0 - tmpvar_74);
  half3 tmpvar_95;
  tmpvar_95 = (((tmpvar_6 * 
    (tmpvar_24 + (tmpvar_21 * tmpvar_87))
  ) + (
    (specularTerm_69 * tmpvar_21)
   * 
    (tmpvar_7 + (((half)1.0 - tmpvar_7) * ((x_93 * x_93) * (
      (x_93 * x_93)
     * x_93))))
  )) + ((surfaceReduction_68 * tmpvar_22) * mix (tmpvar_7, half3(
    clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_8)), (half)0.0, (half)1.0)
  ), half3(
    ((x_94 * x_94) * ((x_94 * x_94) * x_94))
  ))));
  half4 tmpvar_96;
  tmpvar_96.w = half(1.0);
  tmpvar_96.xyz = tmpvar_95;
  c_1.w = tmpvar_96.w;
  c_1.xyz = tmpvar_95;
  c_1.xyz = c_1.xyz;
  half4 xlat_varoutput_97;
  xlat_varoutput_97.xyz = c_1.xyz;
  xlat_varoutput_97.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_97;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 197 math, 8 textures, 15 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
SetTexture 0 [unity_SpecCube0] CUBE 0
SetTexture 1 [unity_SpecCube1] CUBE 1
SetTexture 2 [unity_ProbeVolumeSH] 3D 2
SetTexture 3 [_MainTex] 2D 3
SetTexture 4 [_OcclusionMap] 2D 4
SetTexture 5 [_EmissionMap] 2D 5
ConstBuffer "$Globals" 320
Matrix 176 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_SHAr] 4
VectorHalf 16 [unity_SHAg] 4
VectorHalf 24 [unity_SHAb] 4
Vector 32 [unity_SpecCube0_BoxMax]
Vector 48 [unity_SpecCube0_BoxMin]
Vector 64 [unity_SpecCube0_ProbePosition]
VectorHalf 80 [unity_SpecCube0_HDR] 4
Vector 96 [unity_SpecCube1_BoxMax]
Vector 112 [unity_SpecCube1_BoxMin]
Vector 128 [unity_SpecCube1_ProbePosition]
VectorHalf 144 [unity_SpecCube1_HDR] 4
Vector 160 [unity_ProbeVolumeParams]
Vector 240 [unity_ProbeVolumeSizeInv] 3
Vector 256 [unity_ProbeVolumeMin] 3
VectorHalf 272 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 280 [unity_ColorSpaceLuminance] 4
VectorHalf 288 [_LightColor0] 4
VectorHalf 296 [_Color] 4
ScalarHalf 304 [_Metallic]
ScalarHalf 306 [_Glossiness]
ScalarHalf 308 [_OcclusionStrength]
VectorHalf 312 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_SpecCube0_BoxMax;
  float4 unity_SpecCube0_BoxMin;
  float4 unity_SpecCube0_ProbePosition;
  half4 unity_SpecCube0_HDR;
  float4 unity_SpecCube1_BoxMax;
  float4 unity_SpecCube1_BoxMin;
  float4 unity_SpecCube1_ProbePosition;
  half4 unity_SpecCube1_HDR;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(0)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(0)]]
  ,   texturecube<half> unity_SpecCube1 [[texture(1)]], sampler _mtlsmp_unity_SpecCube1 [[sampler(1)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(2)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(2)]]
  ,   texture2d<half> _MainTex [[texture(3)]], sampler _mtlsmp__MainTex [[sampler(3)]]
  ,   texture2d<half> _OcclusionMap [[texture(4)]], sampler _mtlsmp__OcclusionMap [[sampler(4)]]
  ,   texture2d<half> _EmissionMap [[texture(5)]], sampler _mtlsmp__EmissionMap [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD8);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_4;
  tmpvar_4 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_5;
  half3 tmpvar_6;
  tmpvar_6 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, half3(_mtl_u._Metallic));
  half tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 tmpvar_10;
  tmpvar_10 = _mtl_u._LightColor0.xyz;
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  half tmpvar_14;
  tmpvar_14 = max ((half)0.0, dot (tmpvar_8, _mtl_u._WorldSpaceLightPos0.xyz));
  float3 tmpvar_15;
  float4 tmpvar_16;
  float4 tmpvar_17;
  tmpvar_15 = float3(i_posWorld_2);
  tmpvar_16 = float4(_mtl_u.unity_SpecCube0_HDR);
  tmpvar_17 = float4(_mtl_u.unity_SpecCube1_HDR);
  half tmpvar_18;
  tmpvar_18 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_19;
  tmpvar_19 = (tmpvar_9 - ((half)2.0 * (
    dot (tmpvar_8, tmpvar_9)
   * tmpvar_8)));
  half3 tmpvar_20;
  half3 tmpvar_21;
  tmpvar_21 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_22;
  ambient_22 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_23;
  ambient_contrib_23 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_24;
    tmpvar_24.w = half(1.0);
    tmpvar_24.xyz = tmpvar_8;
    half3 x1_25;
    half4 SHAb_26;
    half4 SHAg_27;
    half4 SHAr_28;
    float3 texCoord_29;
    float3 tmpvar_30;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_31;
      tmpvar_31.w = 1.0;
      tmpvar_31.xyz = tmpvar_15;
      tmpvar_30 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_31).xyz;
    } else {
      tmpvar_30 = tmpvar_15;
    };
    float3 tmpvar_32;
    tmpvar_32 = ((tmpvar_30 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_29.yz = tmpvar_32.yz;
    texCoord_29.x = (tmpvar_32.x * 0.25);
    float tmpvar_33;
    float tmpvar_34;
    tmpvar_34 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_33 = clamp (texCoord_29.x, tmpvar_34, (0.25 - tmpvar_34));
    texCoord_29.x = tmpvar_33;
    half4 tmpvar_35;
    tmpvar_35 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_29));
    SHAr_28 = tmpvar_35;
    texCoord_29.x = (tmpvar_33 + 0.25);
    half4 tmpvar_36;
    tmpvar_36 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_29));
    SHAg_27 = tmpvar_36;
    texCoord_29.x = (tmpvar_33 + 0.5);
    half4 tmpvar_37;
    tmpvar_37 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_29));
    SHAb_26 = tmpvar_37;
    x1_25.x = dot (SHAr_28, tmpvar_24);
    x1_25.y = dot (SHAg_27, tmpvar_24);
    x1_25.z = dot (SHAb_26, tmpvar_24);
    ambient_contrib_23 = x1_25;
  } else {
    half4 tmpvar_38;
    tmpvar_38.w = half(1.0);
    tmpvar_38.xyz = tmpvar_8;
    half3 x_39;
    x_39.x = dot (_mtl_u.unity_SHAr, tmpvar_38);
    x_39.y = dot (_mtl_u.unity_SHAg, tmpvar_38);
    x_39.z = dot (_mtl_u.unity_SHAb, tmpvar_38);
    ambient_contrib_23 = x_39;
  };
  half3 tmpvar_40;
  tmpvar_40 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_23));
  ambient_22 = tmpvar_40;
  bool tmpvar_41;
  tmpvar_41 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_41) {
    ambient_22 = max ((((half)1.055 * 
      pow (max (tmpvar_40, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_21 = (ambient_22 * tmpvar_13);
  tmpvar_20 = half3(float3(0.0, 0.0, 0.0));
  half3 specular_42;
  half3 worldRefl_43;
  worldRefl_43 = tmpvar_19;
  float3 worldPos_44;
  worldPos_44 = tmpvar_15;
  if ((_mtl_u.unity_SpecCube0_ProbePosition.w > 0.0)) {
    half3 rbmin_45;
    half3 rbmax_46;
    half3 tmpvar_47;
    tmpvar_47 = normalize(tmpvar_19);
    float3 tmpvar_48;
    tmpvar_48 = ((_mtl_u.unity_SpecCube0_BoxMax.xyz - tmpvar_15) / (float3)tmpvar_47);
    rbmax_46 = half3(tmpvar_48);
    float3 tmpvar_49;
    tmpvar_49 = ((_mtl_u.unity_SpecCube0_BoxMin.xyz - tmpvar_15) / (float3)tmpvar_47);
    rbmin_45 = half3(tmpvar_49);
    bool3 tmpvar_50;
    tmpvar_50 = (tmpvar_47 > (half3)float3(0.0, 0.0, 0.0));
    half tmpvar_51;
    if (tmpvar_50.x) {
      tmpvar_51 = rbmax_46.x;
    } else {
      tmpvar_51 = rbmin_45.x;
    };
    half tmpvar_52;
    if (tmpvar_50.y) {
      tmpvar_52 = rbmax_46.y;
    } else {
      tmpvar_52 = rbmin_45.y;
    };
    half tmpvar_53;
    if (tmpvar_50.z) {
      tmpvar_53 = rbmax_46.z;
    } else {
      tmpvar_53 = rbmin_45.z;
    };
    worldPos_44 = (tmpvar_15 - _mtl_u.unity_SpecCube0_ProbePosition.xyz);
    worldRefl_43 = half3((worldPos_44 + (float3)(tmpvar_47 * min (
      min (tmpvar_51, tmpvar_52)
    , tmpvar_53))));
  };
  half4 hdr_54;
  hdr_54 = half4(tmpvar_16);
  half4 tmpvar_55;
  tmpvar_55.xyz = worldRefl_43;
  tmpvar_55.w = ((tmpvar_18 * ((half)1.7 - 
    ((half)0.7 * tmpvar_18)
  )) * (half)6.0);
  half4 tmpvar_56;
  tmpvar_56 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(worldRefl_43), level(tmpvar_55.w));
  half4 tmpvar_57;
  tmpvar_57 = tmpvar_56;
  half3 tmpvar_58;
  tmpvar_58 = ((hdr_54.x * pow (tmpvar_57.w, hdr_54.y)) * tmpvar_57.xyz);
  if ((_mtl_u.unity_SpecCube0_BoxMin.w < 0.99999)) {
    half3 worldRefl_59;
    worldRefl_59 = tmpvar_19;
    float3 worldPos_60;
    worldPos_60 = tmpvar_15;
    if ((_mtl_u.unity_SpecCube1_ProbePosition.w > 0.0)) {
      half3 rbmin_61;
      half3 rbmax_62;
      half3 tmpvar_63;
      tmpvar_63 = normalize(tmpvar_19);
      float3 tmpvar_64;
      tmpvar_64 = ((_mtl_u.unity_SpecCube1_BoxMax.xyz - tmpvar_15) / (float3)tmpvar_63);
      rbmax_62 = half3(tmpvar_64);
      float3 tmpvar_65;
      tmpvar_65 = ((_mtl_u.unity_SpecCube1_BoxMin.xyz - tmpvar_15) / (float3)tmpvar_63);
      rbmin_61 = half3(tmpvar_65);
      bool3 tmpvar_66;
      tmpvar_66 = (tmpvar_63 > (half3)float3(0.0, 0.0, 0.0));
      half tmpvar_67;
      if (tmpvar_66.x) {
        tmpvar_67 = rbmax_62.x;
      } else {
        tmpvar_67 = rbmin_61.x;
      };
      half tmpvar_68;
      if (tmpvar_66.y) {
        tmpvar_68 = rbmax_62.y;
      } else {
        tmpvar_68 = rbmin_61.y;
      };
      half tmpvar_69;
      if (tmpvar_66.z) {
        tmpvar_69 = rbmax_62.z;
      } else {
        tmpvar_69 = rbmin_61.z;
      };
      worldPos_60 = (tmpvar_15 - _mtl_u.unity_SpecCube1_ProbePosition.xyz);
      worldRefl_59 = half3((worldPos_60 + (float3)(tmpvar_63 * min (
        min (tmpvar_67, tmpvar_68)
      , tmpvar_69))));
    };
    half4 hdr_70;
    hdr_70 = half4(tmpvar_17);
    half4 tmpvar_71;
    tmpvar_71.xyz = worldRefl_59;
    tmpvar_71.w = ((tmpvar_18 * ((half)1.7 - 
      ((half)0.7 * tmpvar_18)
    )) * (half)6.0);
    half4 tmpvar_72;
    tmpvar_72 = unity_SpecCube1.sample(_mtlsmp_unity_SpecCube1, (float3)(worldRefl_59), level(tmpvar_71.w));
    half4 tmpvar_73;
    tmpvar_73 = tmpvar_72;
    half3 tmpvar_74;
    tmpvar_74 = ((hdr_70.x * pow (tmpvar_73.w, hdr_70.y)) * tmpvar_73.xyz);
    float3 tmpvar_75;
    tmpvar_75 = mix ((float3)tmpvar_74, (float3)tmpvar_58, _mtl_u.unity_SpecCube0_BoxMin.www);
    specular_42 = half3(tmpvar_75);
  } else {
    specular_42 = tmpvar_58;
  };
  tmpvar_20 = (specular_42 * tmpvar_13);
  half3 viewDir_76;
  viewDir_76 = -(tmpvar_9);
  half surfaceReduction_77;
  half specularTerm_78;
  half tmpvar_79;
  tmpvar_79 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_80;
  half3 inVec_81;
  inVec_81 = (_mtl_u._WorldSpaceLightPos0.xyz + viewDir_76);
  tmpvar_80 = (inVec_81 * rsqrt(max ((half)0.001, 
    dot (inVec_81, inVec_81)
  )));
  half tmpvar_82;
  tmpvar_82 = max ((half)0.0, dot (tmpvar_8, tmpvar_80));
  half tmpvar_83;
  tmpvar_83 = max ((half)0.0, dot (tmpvar_8, viewDir_76));
  half tmpvar_84;
  tmpvar_84 = max ((half)0.0, dot (_mtl_u._WorldSpaceLightPos0.xyz, tmpvar_80));
  half tmpvar_85;
  tmpvar_85 = (tmpvar_79 * tmpvar_79);
  half tmpvar_86;
  tmpvar_86 = (tmpvar_79 * tmpvar_79);
  half tmpvar_87;
  tmpvar_87 = (tmpvar_86 * tmpvar_86);
  half tmpvar_88;
  tmpvar_88 = (((tmpvar_82 * tmpvar_82) * (tmpvar_87 - (half)1.0)) + (half)1.0);
  half x_89;
  x_89 = ((half)1.0 - tmpvar_14);
  half x_90;
  x_90 = ((half)1.0 - tmpvar_83);
  half tmpvar_91;
  tmpvar_91 = ((half)0.5 + (((half)2.0 * tmpvar_84) * (tmpvar_84 * tmpvar_79)));
  half tmpvar_92;
  tmpvar_92 = (((half)1.0 + (
    (tmpvar_91 - (half)1.0)
   * 
    ((x_89 * x_89) * ((x_89 * x_89) * x_89))
  )) * ((half)1.0 + (
    (tmpvar_91 - (half)1.0)
   * 
    ((x_90 * x_90) * ((x_90 * x_90) * x_90))
  )));
  half tmpvar_93;
  tmpvar_93 = ((((half)2.0 / 
    (((tmpvar_14 * (
      (tmpvar_83 * ((half)1.0 - tmpvar_85))
     + tmpvar_85)) + (tmpvar_83 * (
      (tmpvar_14 * ((half)1.0 - tmpvar_85))
     + tmpvar_85))) + (half)1e-05)
  ) * (tmpvar_87 / 
    ((((half)3.141593 * tmpvar_88) * tmpvar_88) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_78 = tmpvar_93;
  bool tmpvar_94;
  tmpvar_94 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_94) {
    specularTerm_78 = sqrt(max ((half)0.0001, tmpvar_93));
  };
  half tmpvar_95;
  tmpvar_95 = max ((half)0.0, (specularTerm_78 * tmpvar_14));
  specularTerm_78 = tmpvar_95;
  half tmpvar_96;
  tmpvar_96 = (tmpvar_92 * tmpvar_14);
  half tmpvar_97;
  tmpvar_97 = (tmpvar_79 * tmpvar_79);
  bool tmpvar_98;
  tmpvar_98 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_98) {
    surfaceReduction_77 = ((half)1.0 - (((half)0.28 * tmpvar_97) * tmpvar_79));
  } else {
    surfaceReduction_77 = ((half)1.0/(((tmpvar_97 * tmpvar_97) + (half)1.0)));
  };
  bool3 tmpvar_99;
  tmpvar_99 = bool3(tmpvar_6);
  bool tmpvar_100;
  tmpvar_100 = any(tmpvar_99);
  float tmpvar_101;
  if (tmpvar_100) {
    tmpvar_101 = 1.0;
  } else {
    tmpvar_101 = 0.0;
  };
  specularTerm_78 = (tmpvar_95 * (half)tmpvar_101);
  half x_102;
  x_102 = ((half)1.0 - tmpvar_84);
  half x_103;
  x_103 = ((half)1.0 - tmpvar_83);
  half3 tmpvar_104;
  tmpvar_104 = (((tmpvar_5 * 
    (tmpvar_21 + (tmpvar_10 * tmpvar_96))
  ) + (
    (specularTerm_78 * tmpvar_10)
   * 
    (tmpvar_6 + (((half)1.0 - tmpvar_6) * ((x_102 * x_102) * (
      (x_102 * x_102)
     * x_102))))
  )) + ((surfaceReduction_77 * tmpvar_20) * mix (tmpvar_6, half3(
    clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_7)), (half)0.0, (half)1.0)
  ), half3(
    ((x_103 * x_103) * ((x_103 * x_103) * x_103))
  ))));
  half4 tmpvar_105;
  tmpvar_105.w = half(1.0);
  tmpvar_105.xyz = tmpvar_104;
  c_1.w = tmpvar_105.w;
  half4 tmpvar_106;
  tmpvar_106 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  c_1.xyz = (tmpvar_104 + (tmpvar_106.xyz * _mtl_u._EmissionColor.xyz));
  half4 xlat_varoutput_107;
  xlat_varoutput_107.xyz = c_1.xyz;
  xlat_varoutput_107.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_107;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 176 math, 7 textures, 12 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
SetTexture 0 [unity_DynamicLightmap] 2D 0
SetTexture 1 [unity_DynamicDirectionality] 2D 1
SetTexture 2 [unity_SpecCube0] CUBE 2
SetTexture 3 [unity_SpecCube1] CUBE 3
SetTexture 4 [_MainTex] 2D 4
SetTexture 5 [_OcclusionMap] 2D 5
SetTexture 6 [_EmissionMap] 2D 6
ConstBuffer "$Globals" 192
VectorHalf 0 [_WorldSpaceLightPos0] 4
Vector 16 [unity_SpecCube0_BoxMax]
Vector 32 [unity_SpecCube0_BoxMin]
Vector 48 [unity_SpecCube0_ProbePosition]
VectorHalf 64 [unity_SpecCube0_HDR] 4
Vector 80 [unity_SpecCube1_BoxMax]
Vector 96 [unity_SpecCube1_BoxMin]
Vector 112 [unity_SpecCube1_ProbePosition]
VectorHalf 128 [unity_SpecCube1_HDR] 4
VectorHalf 136 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 144 [unity_ColorSpaceLuminance] 4
VectorHalf 152 [unity_DynamicLightmap_HDR] 4
VectorHalf 160 [_LightColor0] 4
VectorHalf 168 [_Color] 4
ScalarHalf 176 [_Metallic]
ScalarHalf 178 [_Glossiness]
ScalarHalf 180 [_OcclusionStrength]
VectorHalf 184 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  float4 unity_SpecCube0_BoxMax;
  float4 unity_SpecCube0_BoxMin;
  float4 unity_SpecCube0_ProbePosition;
  half4 unity_SpecCube0_HDR;
  float4 unity_SpecCube1_BoxMax;
  float4 unity_SpecCube1_BoxMin;
  float4 unity_SpecCube1_ProbePosition;
  half4 unity_SpecCube1_HDR;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 unity_DynamicLightmap_HDR;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_DynamicLightmap [[texture(0)]], sampler _mtlsmp_unity_DynamicLightmap [[sampler(0)]]
  ,   texture2d<half> unity_DynamicDirectionality [[texture(1)]], sampler _mtlsmp_unity_DynamicDirectionality [[sampler(1)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(2)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(2)]]
  ,   texturecube<half> unity_SpecCube1 [[texture(3)]], sampler _mtlsmp_unity_SpecCube1 [[sampler(3)]]
  ,   texture2d<half> _MainTex [[texture(4)]], sampler _mtlsmp__MainTex [[sampler(4)]]
  ,   texture2d<half> _OcclusionMap [[texture(5)]], sampler _mtlsmp__OcclusionMap [[sampler(5)]]
  ,   texture2d<half> _EmissionMap [[texture(6)]], sampler _mtlsmp__EmissionMap [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD8);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_4;
  tmpvar_4 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_5;
  half3 tmpvar_6;
  tmpvar_6 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, half3(_mtl_u._Metallic));
  half tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 tmpvar_10;
  tmpvar_10 = _mtl_u._LightColor0.xyz;
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  half tmpvar_14;
  tmpvar_14 = max ((half)0.0, dot (tmpvar_8, _mtl_u._WorldSpaceLightPos0.xyz));
  float3 tmpvar_15;
  float4 tmpvar_16;
  float4 tmpvar_17;
  float4 tmpvar_18;
  tmpvar_15 = float3(i_posWorld_2);
  tmpvar_16 = float4(_mtl_i.xlv_TEXCOORD5);
  tmpvar_17 = float4(_mtl_u.unity_SpecCube0_HDR);
  tmpvar_18 = float4(_mtl_u.unity_SpecCube1_HDR);
  half3 tmpvar_19;
  half4 realtimeDirTex_20;
  half3 tmpvar_21;
  half4 tmpvar_22;
  tmpvar_22 = unity_DynamicLightmap.sample(_mtlsmp_unity_DynamicLightmap, (float2)(tmpvar_16.zw));
  half4 tmpvar_23;
  tmpvar_23 = unity_DynamicDirectionality.sample(_mtlsmp_unity_DynamicDirectionality, (float2)(tmpvar_16.zw));
  realtimeDirTex_20 = tmpvar_23;
  half4 dirTex_24;
  dirTex_24 = realtimeDirTex_20;
  half3 y_25;
  y_25 = (dirTex_24.xyz - (half)0.5);
  half tmpvar_26;
  tmpvar_26 = max ((half)0.0001, dirTex_24.w);
  tmpvar_21 = ((pow (
    ((_mtl_u.unity_DynamicLightmap_HDR.x * tmpvar_22.w) * tmpvar_22.xyz)
  , _mtl_u.unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_8, y_25)
   + (half)0.5)) / tmpvar_26);
  tmpvar_21 = (tmpvar_21 * tmpvar_13);
  tmpvar_19 = half3(float3(0.0, 0.0, 0.0));
  half tmpvar_27;
  half3 tmpvar_28;
  tmpvar_27 = ((half)1.0 - _mtl_u._Glossiness);
  tmpvar_28 = (tmpvar_9 - ((half)2.0 * (
    dot (tmpvar_8, tmpvar_9)
   * tmpvar_8)));
  half3 originalReflUVW_29;
  half3 specular_30;
  originalReflUVW_29 = tmpvar_28;
  half3 worldRefl_31;
  worldRefl_31 = tmpvar_28;
  float3 worldPos_32;
  worldPos_32 = tmpvar_15;
  if ((_mtl_u.unity_SpecCube0_ProbePosition.w > 0.0)) {
    half3 rbmin_33;
    half3 rbmax_34;
    half3 tmpvar_35;
    tmpvar_35 = normalize(tmpvar_28);
    float3 tmpvar_36;
    tmpvar_36 = ((_mtl_u.unity_SpecCube0_BoxMax.xyz - tmpvar_15) / (float3)tmpvar_35);
    rbmax_34 = half3(tmpvar_36);
    float3 tmpvar_37;
    tmpvar_37 = ((_mtl_u.unity_SpecCube0_BoxMin.xyz - tmpvar_15) / (float3)tmpvar_35);
    rbmin_33 = half3(tmpvar_37);
    bool3 tmpvar_38;
    tmpvar_38 = (tmpvar_35 > (half3)float3(0.0, 0.0, 0.0));
    half tmpvar_39;
    if (tmpvar_38.x) {
      tmpvar_39 = rbmax_34.x;
    } else {
      tmpvar_39 = rbmin_33.x;
    };
    half tmpvar_40;
    if (tmpvar_38.y) {
      tmpvar_40 = rbmax_34.y;
    } else {
      tmpvar_40 = rbmin_33.y;
    };
    half tmpvar_41;
    if (tmpvar_38.z) {
      tmpvar_41 = rbmax_34.z;
    } else {
      tmpvar_41 = rbmin_33.z;
    };
    worldPos_32 = (tmpvar_15 - _mtl_u.unity_SpecCube0_ProbePosition.xyz);
    worldRefl_31 = half3((worldPos_32 + (float3)(tmpvar_35 * min (
      min (tmpvar_39, tmpvar_40)
    , tmpvar_41))));
  };
  tmpvar_28 = worldRefl_31;
  half4 hdr_42;
  hdr_42 = half4(tmpvar_17);
  half4 tmpvar_43;
  tmpvar_43.xyz = worldRefl_31;
  tmpvar_43.w = ((tmpvar_27 * ((half)1.7 - 
    ((half)0.7 * tmpvar_27)
  )) * (half)6.0);
  half4 tmpvar_44;
  tmpvar_44 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(worldRefl_31), level(tmpvar_43.w));
  half4 tmpvar_45;
  tmpvar_45 = tmpvar_44;
  half3 tmpvar_46;
  tmpvar_46 = ((hdr_42.x * pow (tmpvar_45.w, hdr_42.y)) * tmpvar_45.xyz);
  if ((_mtl_u.unity_SpecCube0_BoxMin.w < 0.99999)) {
    half3 worldRefl_47;
    worldRefl_47 = originalReflUVW_29;
    float3 worldPos_48;
    worldPos_48 = tmpvar_15;
    if ((_mtl_u.unity_SpecCube1_ProbePosition.w > 0.0)) {
      half3 rbmin_49;
      half3 rbmax_50;
      half3 tmpvar_51;
      tmpvar_51 = normalize(originalReflUVW_29);
      float3 tmpvar_52;
      tmpvar_52 = ((_mtl_u.unity_SpecCube1_BoxMax.xyz - tmpvar_15) / (float3)tmpvar_51);
      rbmax_50 = half3(tmpvar_52);
      float3 tmpvar_53;
      tmpvar_53 = ((_mtl_u.unity_SpecCube1_BoxMin.xyz - tmpvar_15) / (float3)tmpvar_51);
      rbmin_49 = half3(tmpvar_53);
      bool3 tmpvar_54;
      tmpvar_54 = (tmpvar_51 > (half3)float3(0.0, 0.0, 0.0));
      half tmpvar_55;
      if (tmpvar_54.x) {
        tmpvar_55 = rbmax_50.x;
      } else {
        tmpvar_55 = rbmin_49.x;
      };
      half tmpvar_56;
      if (tmpvar_54.y) {
        tmpvar_56 = rbmax_50.y;
      } else {
        tmpvar_56 = rbmin_49.y;
      };
      half tmpvar_57;
      if (tmpvar_54.z) {
        tmpvar_57 = rbmax_50.z;
      } else {
        tmpvar_57 = rbmin_49.z;
      };
      worldPos_48 = (tmpvar_15 - _mtl_u.unity_SpecCube1_ProbePosition.xyz);
      worldRefl_47 = half3((worldPos_48 + (float3)(tmpvar_51 * min (
        min (tmpvar_55, tmpvar_56)
      , tmpvar_57))));
    };
    tmpvar_28 = worldRefl_47;
    half4 hdr_58;
    hdr_58 = half4(tmpvar_18);
    half4 tmpvar_59;
    tmpvar_59.xyz = worldRefl_47;
    tmpvar_59.w = ((tmpvar_27 * ((half)1.7 - 
      ((half)0.7 * tmpvar_27)
    )) * (half)6.0);
    half4 tmpvar_60;
    tmpvar_60 = unity_SpecCube1.sample(_mtlsmp_unity_SpecCube1, (float3)(worldRefl_47), level(tmpvar_59.w));
    half4 tmpvar_61;
    tmpvar_61 = tmpvar_60;
    half3 tmpvar_62;
    tmpvar_62 = ((hdr_58.x * pow (tmpvar_61.w, hdr_58.y)) * tmpvar_61.xyz);
    float3 tmpvar_63;
    tmpvar_63 = mix ((float3)tmpvar_62, (float3)tmpvar_46, _mtl_u.unity_SpecCube0_BoxMin.www);
    specular_30 = half3(tmpvar_63);
  } else {
    specular_30 = tmpvar_46;
  };
  tmpvar_19 = (specular_30 * tmpvar_13);
  half3 viewDir_64;
  viewDir_64 = -(tmpvar_9);
  half surfaceReduction_65;
  half specularTerm_66;
  half tmpvar_67;
  tmpvar_67 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_68;
  half3 inVec_69;
  inVec_69 = (_mtl_u._WorldSpaceLightPos0.xyz + viewDir_64);
  tmpvar_68 = (inVec_69 * rsqrt(max ((half)0.001, 
    dot (inVec_69, inVec_69)
  )));
  half tmpvar_70;
  tmpvar_70 = max ((half)0.0, dot (tmpvar_8, tmpvar_68));
  half tmpvar_71;
  tmpvar_71 = max ((half)0.0, dot (tmpvar_8, viewDir_64));
  half tmpvar_72;
  tmpvar_72 = max ((half)0.0, dot (_mtl_u._WorldSpaceLightPos0.xyz, tmpvar_68));
  half tmpvar_73;
  tmpvar_73 = (tmpvar_67 * tmpvar_67);
  half tmpvar_74;
  tmpvar_74 = (tmpvar_67 * tmpvar_67);
  half tmpvar_75;
  tmpvar_75 = (tmpvar_74 * tmpvar_74);
  half tmpvar_76;
  tmpvar_76 = (((tmpvar_70 * tmpvar_70) * (tmpvar_75 - (half)1.0)) + (half)1.0);
  half x_77;
  x_77 = ((half)1.0 - tmpvar_14);
  half x_78;
  x_78 = ((half)1.0 - tmpvar_71);
  half tmpvar_79;
  tmpvar_79 = ((half)0.5 + (((half)2.0 * tmpvar_72) * (tmpvar_72 * tmpvar_67)));
  half tmpvar_80;
  tmpvar_80 = (((half)1.0 + (
    (tmpvar_79 - (half)1.0)
   * 
    ((x_77 * x_77) * ((x_77 * x_77) * x_77))
  )) * ((half)1.0 + (
    (tmpvar_79 - (half)1.0)
   * 
    ((x_78 * x_78) * ((x_78 * x_78) * x_78))
  )));
  half tmpvar_81;
  tmpvar_81 = ((((half)2.0 / 
    (((tmpvar_14 * (
      (tmpvar_71 * ((half)1.0 - tmpvar_73))
     + tmpvar_73)) + (tmpvar_71 * (
      (tmpvar_14 * ((half)1.0 - tmpvar_73))
     + tmpvar_73))) + (half)1e-05)
  ) * (tmpvar_75 / 
    ((((half)3.141593 * tmpvar_76) * tmpvar_76) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_66 = tmpvar_81;
  bool tmpvar_82;
  tmpvar_82 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_82) {
    specularTerm_66 = sqrt(max ((half)0.0001, tmpvar_81));
  };
  half tmpvar_83;
  tmpvar_83 = max ((half)0.0, (specularTerm_66 * tmpvar_14));
  specularTerm_66 = tmpvar_83;
  half tmpvar_84;
  tmpvar_84 = (tmpvar_80 * tmpvar_14);
  half tmpvar_85;
  tmpvar_85 = (tmpvar_67 * tmpvar_67);
  bool tmpvar_86;
  tmpvar_86 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_86) {
    surfaceReduction_65 = ((half)1.0 - (((half)0.28 * tmpvar_85) * tmpvar_67));
  } else {
    surfaceReduction_65 = ((half)1.0/(((tmpvar_85 * tmpvar_85) + (half)1.0)));
  };
  bool3 tmpvar_87;
  tmpvar_87 = bool3(tmpvar_6);
  bool tmpvar_88;
  tmpvar_88 = any(tmpvar_87);
  float tmpvar_89;
  if (tmpvar_88) {
    tmpvar_89 = 1.0;
  } else {
    tmpvar_89 = 0.0;
  };
  specularTerm_66 = (tmpvar_83 * (half)tmpvar_89);
  half x_90;
  x_90 = ((half)1.0 - tmpvar_72);
  half x_91;
  x_91 = ((half)1.0 - tmpvar_71);
  half3 tmpvar_92;
  tmpvar_92 = (((tmpvar_5 * 
    (tmpvar_21 + (tmpvar_10 * tmpvar_84))
  ) + (
    (specularTerm_66 * tmpvar_10)
   * 
    (tmpvar_6 + (((half)1.0 - tmpvar_6) * ((x_90 * x_90) * (
      (x_90 * x_90)
     * x_90))))
  )) + ((surfaceReduction_65 * tmpvar_19) * mix (tmpvar_6, half3(
    clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_7)), (half)0.0, (half)1.0)
  ), half3(
    ((x_91 * x_91) * ((x_91 * x_91) * x_91))
  ))));
  half4 tmpvar_93;
  tmpvar_93.w = half(1.0);
  tmpvar_93.xyz = tmpvar_92;
  c_1.w = tmpvar_93.w;
  half4 tmpvar_94;
  tmpvar_94 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  c_1.xyz = (tmpvar_92 + (tmpvar_94.xyz * _mtl_u._EmissionColor.xyz));
  half4 xlat_varoutput_95;
  xlat_varoutput_95.xyz = c_1.xyz;
  xlat_varoutput_95.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_95;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 198 math, 9 textures, 15 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
SetTexture 0 [unity_SpecCube0] CUBE 0
SetTexture 1 [unity_SpecCube1] CUBE 1
SetTexture 2 [unity_ProbeVolumeSH] 3D 2
SetTexture 3 [_MainTex] 2D 3
SetTexture 4 [_OcclusionMap] 2D 4
SetTexture 5 [_EmissionMap] 2D 5
SetTexture 6 [_ShadowMapTexture] 2D 6
ConstBuffer "$Globals" 320
Matrix 176 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_SHAr] 4
VectorHalf 16 [unity_SHAg] 4
VectorHalf 24 [unity_SHAb] 4
Vector 32 [unity_SpecCube0_BoxMax]
Vector 48 [unity_SpecCube0_BoxMin]
Vector 64 [unity_SpecCube0_ProbePosition]
VectorHalf 80 [unity_SpecCube0_HDR] 4
Vector 96 [unity_SpecCube1_BoxMax]
Vector 112 [unity_SpecCube1_BoxMin]
Vector 128 [unity_SpecCube1_ProbePosition]
VectorHalf 144 [unity_SpecCube1_HDR] 4
Vector 160 [unity_ProbeVolumeParams]
Vector 240 [unity_ProbeVolumeSizeInv] 3
Vector 256 [unity_ProbeVolumeMin] 3
VectorHalf 272 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 280 [unity_ColorSpaceLuminance] 4
VectorHalf 288 [_LightColor0] 4
VectorHalf 296 [_Color] 4
ScalarHalf 304 [_Metallic]
ScalarHalf 306 [_Glossiness]
ScalarHalf 308 [_OcclusionStrength]
VectorHalf 312 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_SpecCube0_BoxMax;
  float4 unity_SpecCube0_BoxMin;
  float4 unity_SpecCube0_ProbePosition;
  half4 unity_SpecCube0_HDR;
  float4 unity_SpecCube1_BoxMax;
  float4 unity_SpecCube1_BoxMin;
  float4 unity_SpecCube1_ProbePosition;
  half4 unity_SpecCube1_HDR;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(0)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(0)]]
  ,   texturecube<half> unity_SpecCube1 [[texture(1)]], sampler _mtlsmp_unity_SpecCube1 [[sampler(1)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(2)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(2)]]
  ,   texture2d<half> _MainTex [[texture(3)]], sampler _mtlsmp__MainTex [[sampler(3)]]
  ,   texture2d<half> _OcclusionMap [[texture(4)]], sampler _mtlsmp__OcclusionMap [[sampler(4)]]
  ,   texture2d<half> _EmissionMap [[texture(5)]], sampler _mtlsmp__EmissionMap [[sampler(5)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(6)]], sampler _mtlsmp__ShadowMapTexture [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half atten_2;
  half3 i_posWorld_3;
  i_posWorld_3 = half3(_mtl_i.xlv_TEXCOORD8);
  half4 tmpvar_4;
  tmpvar_4 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_5;
  tmpvar_5 = (_mtl_u._Color.xyz * tmpvar_4.xyz);
  half3 tmpvar_6;
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, half3(_mtl_u._Metallic));
  half tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 tmpvar_11;
  tmpvar_11 = _mtl_u._LightColor0.xyz;
  half tmpvar_12;
  tmpvar_12 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  atten_2 = tmpvar_12;
  half occ_13;
  half tmpvar_14;
  tmpvar_14 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_13 = tmpvar_14;
  half tmpvar_15;
  tmpvar_15 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_13 * _mtl_u._OcclusionStrength));
  half tmpvar_16;
  tmpvar_16 = max ((half)0.0, dot (tmpvar_9, _mtl_u._WorldSpaceLightPos0.xyz));
  float3 tmpvar_17;
  float4 tmpvar_18;
  float4 tmpvar_19;
  tmpvar_17 = float3(i_posWorld_3);
  tmpvar_18 = float4(_mtl_u.unity_SpecCube0_HDR);
  tmpvar_19 = float4(_mtl_u.unity_SpecCube1_HDR);
  half tmpvar_20;
  tmpvar_20 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_21;
  tmpvar_21 = (tmpvar_10 - ((half)2.0 * (
    dot (tmpvar_9, tmpvar_10)
   * tmpvar_9)));
  half3 tmpvar_22;
  half3 tmpvar_23;
  half3 tmpvar_24;
  tmpvar_24 = half3(float3(0.0, 0.0, 0.0));
  tmpvar_23 = (tmpvar_11 * atten_2);
  half3 ambient_25;
  ambient_25 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_26;
  ambient_contrib_26 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_27;
    tmpvar_27.w = half(1.0);
    tmpvar_27.xyz = tmpvar_9;
    half3 x1_28;
    half4 SHAb_29;
    half4 SHAg_30;
    half4 SHAr_31;
    float3 texCoord_32;
    float3 tmpvar_33;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_34;
      tmpvar_34.w = 1.0;
      tmpvar_34.xyz = tmpvar_17;
      tmpvar_33 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_34).xyz;
    } else {
      tmpvar_33 = tmpvar_17;
    };
    float3 tmpvar_35;
    tmpvar_35 = ((tmpvar_33 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_32.yz = tmpvar_35.yz;
    texCoord_32.x = (tmpvar_35.x * 0.25);
    float tmpvar_36;
    float tmpvar_37;
    tmpvar_37 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_36 = clamp (texCoord_32.x, tmpvar_37, (0.25 - tmpvar_37));
    texCoord_32.x = tmpvar_36;
    half4 tmpvar_38;
    tmpvar_38 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_32));
    SHAr_31 = tmpvar_38;
    texCoord_32.x = (tmpvar_36 + 0.25);
    half4 tmpvar_39;
    tmpvar_39 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_32));
    SHAg_30 = tmpvar_39;
    texCoord_32.x = (tmpvar_36 + 0.5);
    half4 tmpvar_40;
    tmpvar_40 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_32));
    SHAb_29 = tmpvar_40;
    x1_28.x = dot (SHAr_31, tmpvar_27);
    x1_28.y = dot (SHAg_30, tmpvar_27);
    x1_28.z = dot (SHAb_29, tmpvar_27);
    ambient_contrib_26 = x1_28;
  } else {
    half4 tmpvar_41;
    tmpvar_41.w = half(1.0);
    tmpvar_41.xyz = tmpvar_9;
    half3 x_42;
    x_42.x = dot (_mtl_u.unity_SHAr, tmpvar_41);
    x_42.y = dot (_mtl_u.unity_SHAg, tmpvar_41);
    x_42.z = dot (_mtl_u.unity_SHAb, tmpvar_41);
    ambient_contrib_26 = x_42;
  };
  half3 tmpvar_43;
  tmpvar_43 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_26));
  ambient_25 = tmpvar_43;
  bool tmpvar_44;
  tmpvar_44 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_44) {
    ambient_25 = max ((((half)1.055 * 
      pow (max (tmpvar_43, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_24 = (ambient_25 * tmpvar_15);
  tmpvar_22 = half3(float3(0.0, 0.0, 0.0));
  half3 specular_45;
  half3 worldRefl_46;
  worldRefl_46 = tmpvar_21;
  float3 worldPos_47;
  worldPos_47 = tmpvar_17;
  if ((_mtl_u.unity_SpecCube0_ProbePosition.w > 0.0)) {
    half3 rbmin_48;
    half3 rbmax_49;
    half3 tmpvar_50;
    tmpvar_50 = normalize(tmpvar_21);
    float3 tmpvar_51;
    tmpvar_51 = ((_mtl_u.unity_SpecCube0_BoxMax.xyz - tmpvar_17) / (float3)tmpvar_50);
    rbmax_49 = half3(tmpvar_51);
    float3 tmpvar_52;
    tmpvar_52 = ((_mtl_u.unity_SpecCube0_BoxMin.xyz - tmpvar_17) / (float3)tmpvar_50);
    rbmin_48 = half3(tmpvar_52);
    bool3 tmpvar_53;
    tmpvar_53 = (tmpvar_50 > (half3)float3(0.0, 0.0, 0.0));
    half tmpvar_54;
    if (tmpvar_53.x) {
      tmpvar_54 = rbmax_49.x;
    } else {
      tmpvar_54 = rbmin_48.x;
    };
    half tmpvar_55;
    if (tmpvar_53.y) {
      tmpvar_55 = rbmax_49.y;
    } else {
      tmpvar_55 = rbmin_48.y;
    };
    half tmpvar_56;
    if (tmpvar_53.z) {
      tmpvar_56 = rbmax_49.z;
    } else {
      tmpvar_56 = rbmin_48.z;
    };
    worldPos_47 = (tmpvar_17 - _mtl_u.unity_SpecCube0_ProbePosition.xyz);
    worldRefl_46 = half3((worldPos_47 + (float3)(tmpvar_50 * min (
      min (tmpvar_54, tmpvar_55)
    , tmpvar_56))));
  };
  half4 hdr_57;
  hdr_57 = half4(tmpvar_18);
  half4 tmpvar_58;
  tmpvar_58.xyz = worldRefl_46;
  tmpvar_58.w = ((tmpvar_20 * ((half)1.7 - 
    ((half)0.7 * tmpvar_20)
  )) * (half)6.0);
  half4 tmpvar_59;
  tmpvar_59 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(worldRefl_46), level(tmpvar_58.w));
  half4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  half3 tmpvar_61;
  tmpvar_61 = ((hdr_57.x * pow (tmpvar_60.w, hdr_57.y)) * tmpvar_60.xyz);
  if ((_mtl_u.unity_SpecCube0_BoxMin.w < 0.99999)) {
    half3 worldRefl_62;
    worldRefl_62 = tmpvar_21;
    float3 worldPos_63;
    worldPos_63 = tmpvar_17;
    if ((_mtl_u.unity_SpecCube1_ProbePosition.w > 0.0)) {
      half3 rbmin_64;
      half3 rbmax_65;
      half3 tmpvar_66;
      tmpvar_66 = normalize(tmpvar_21);
      float3 tmpvar_67;
      tmpvar_67 = ((_mtl_u.unity_SpecCube1_BoxMax.xyz - tmpvar_17) / (float3)tmpvar_66);
      rbmax_65 = half3(tmpvar_67);
      float3 tmpvar_68;
      tmpvar_68 = ((_mtl_u.unity_SpecCube1_BoxMin.xyz - tmpvar_17) / (float3)tmpvar_66);
      rbmin_64 = half3(tmpvar_68);
      bool3 tmpvar_69;
      tmpvar_69 = (tmpvar_66 > (half3)float3(0.0, 0.0, 0.0));
      half tmpvar_70;
      if (tmpvar_69.x) {
        tmpvar_70 = rbmax_65.x;
      } else {
        tmpvar_70 = rbmin_64.x;
      };
      half tmpvar_71;
      if (tmpvar_69.y) {
        tmpvar_71 = rbmax_65.y;
      } else {
        tmpvar_71 = rbmin_64.y;
      };
      half tmpvar_72;
      if (tmpvar_69.z) {
        tmpvar_72 = rbmax_65.z;
      } else {
        tmpvar_72 = rbmin_64.z;
      };
      worldPos_63 = (tmpvar_17 - _mtl_u.unity_SpecCube1_ProbePosition.xyz);
      worldRefl_62 = half3((worldPos_63 + (float3)(tmpvar_66 * min (
        min (tmpvar_70, tmpvar_71)
      , tmpvar_72))));
    };
    half4 hdr_73;
    hdr_73 = half4(tmpvar_19);
    half4 tmpvar_74;
    tmpvar_74.xyz = worldRefl_62;
    tmpvar_74.w = ((tmpvar_20 * ((half)1.7 - 
      ((half)0.7 * tmpvar_20)
    )) * (half)6.0);
    half4 tmpvar_75;
    tmpvar_75 = unity_SpecCube1.sample(_mtlsmp_unity_SpecCube1, (float3)(worldRefl_62), level(tmpvar_74.w));
    half4 tmpvar_76;
    tmpvar_76 = tmpvar_75;
    half3 tmpvar_77;
    tmpvar_77 = ((hdr_73.x * pow (tmpvar_76.w, hdr_73.y)) * tmpvar_76.xyz);
    float3 tmpvar_78;
    tmpvar_78 = mix ((float3)tmpvar_77, (float3)tmpvar_61, _mtl_u.unity_SpecCube0_BoxMin.www);
    specular_45 = half3(tmpvar_78);
  } else {
    specular_45 = tmpvar_61;
  };
  tmpvar_22 = (specular_45 * tmpvar_15);
  half3 viewDir_79;
  viewDir_79 = -(tmpvar_10);
  half surfaceReduction_80;
  half specularTerm_81;
  half tmpvar_82;
  tmpvar_82 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_83;
  half3 inVec_84;
  inVec_84 = (_mtl_u._WorldSpaceLightPos0.xyz + viewDir_79);
  tmpvar_83 = (inVec_84 * rsqrt(max ((half)0.001, 
    dot (inVec_84, inVec_84)
  )));
  half tmpvar_85;
  tmpvar_85 = max ((half)0.0, dot (tmpvar_9, tmpvar_83));
  half tmpvar_86;
  tmpvar_86 = max ((half)0.0, dot (tmpvar_9, viewDir_79));
  half tmpvar_87;
  tmpvar_87 = max ((half)0.0, dot (_mtl_u._WorldSpaceLightPos0.xyz, tmpvar_83));
  half tmpvar_88;
  tmpvar_88 = (tmpvar_82 * tmpvar_82);
  half tmpvar_89;
  tmpvar_89 = (tmpvar_82 * tmpvar_82);
  half tmpvar_90;
  tmpvar_90 = (tmpvar_89 * tmpvar_89);
  half tmpvar_91;
  tmpvar_91 = (((tmpvar_85 * tmpvar_85) * (tmpvar_90 - (half)1.0)) + (half)1.0);
  half x_92;
  x_92 = ((half)1.0 - tmpvar_16);
  half x_93;
  x_93 = ((half)1.0 - tmpvar_86);
  half tmpvar_94;
  tmpvar_94 = ((half)0.5 + (((half)2.0 * tmpvar_87) * (tmpvar_87 * tmpvar_82)));
  half tmpvar_95;
  tmpvar_95 = (((half)1.0 + (
    (tmpvar_94 - (half)1.0)
   * 
    ((x_92 * x_92) * ((x_92 * x_92) * x_92))
  )) * ((half)1.0 + (
    (tmpvar_94 - (half)1.0)
   * 
    ((x_93 * x_93) * ((x_93 * x_93) * x_93))
  )));
  half tmpvar_96;
  tmpvar_96 = ((((half)2.0 / 
    (((tmpvar_16 * (
      (tmpvar_86 * ((half)1.0 - tmpvar_88))
     + tmpvar_88)) + (tmpvar_86 * (
      (tmpvar_16 * ((half)1.0 - tmpvar_88))
     + tmpvar_88))) + (half)1e-05)
  ) * (tmpvar_90 / 
    ((((half)3.141593 * tmpvar_91) * tmpvar_91) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_81 = tmpvar_96;
  bool tmpvar_97;
  tmpvar_97 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_97) {
    specularTerm_81 = sqrt(max ((half)0.0001, tmpvar_96));
  };
  half tmpvar_98;
  tmpvar_98 = max ((half)0.0, (specularTerm_81 * tmpvar_16));
  specularTerm_81 = tmpvar_98;
  half tmpvar_99;
  tmpvar_99 = (tmpvar_95 * tmpvar_16);
  half tmpvar_100;
  tmpvar_100 = (tmpvar_82 * tmpvar_82);
  bool tmpvar_101;
  tmpvar_101 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_101) {
    surfaceReduction_80 = ((half)1.0 - (((half)0.28 * tmpvar_100) * tmpvar_82));
  } else {
    surfaceReduction_80 = ((half)1.0/(((tmpvar_100 * tmpvar_100) + (half)1.0)));
  };
  bool3 tmpvar_102;
  tmpvar_102 = bool3(tmpvar_7);
  bool tmpvar_103;
  tmpvar_103 = any(tmpvar_102);
  float tmpvar_104;
  if (tmpvar_103) {
    tmpvar_104 = 1.0;
  } else {
    tmpvar_104 = 0.0;
  };
  specularTerm_81 = (tmpvar_98 * (half)tmpvar_104);
  half x_105;
  x_105 = ((half)1.0 - tmpvar_87);
  half x_106;
  x_106 = ((half)1.0 - tmpvar_86);
  half3 tmpvar_107;
  tmpvar_107 = (((tmpvar_6 * 
    (tmpvar_24 + (tmpvar_23 * tmpvar_99))
  ) + (
    (specularTerm_81 * tmpvar_23)
   * 
    (tmpvar_7 + (((half)1.0 - tmpvar_7) * ((x_105 * x_105) * (
      (x_105 * x_105)
     * x_105))))
  )) + ((surfaceReduction_80 * tmpvar_22) * mix (tmpvar_7, half3(
    clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_8)), (half)0.0, (half)1.0)
  ), half3(
    ((x_106 * x_106) * ((x_106 * x_106) * x_106))
  ))));
  half4 tmpvar_108;
  tmpvar_108.w = half(1.0);
  tmpvar_108.xyz = tmpvar_107;
  c_1.w = tmpvar_108.w;
  half4 tmpvar_109;
  tmpvar_109 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  c_1.xyz = (tmpvar_107 + (tmpvar_109.xyz * _mtl_u._EmissionColor.xyz));
  half4 xlat_varoutput_110;
  xlat_varoutput_110.xyz = c_1.xyz;
  xlat_varoutput_110.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_110;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 177 math, 8 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
SetTexture 0 [unity_DynamicLightmap] 2D 0
SetTexture 1 [unity_DynamicDirectionality] 2D 1
SetTexture 2 [unity_SpecCube0] CUBE 2
SetTexture 3 [unity_SpecCube1] CUBE 3
SetTexture 4 [_MainTex] 2D 4
SetTexture 5 [_OcclusionMap] 2D 5
SetTexture 6 [_EmissionMap] 2D 6
SetTexture 7 [_ShadowMapTexture] 2D 7
ConstBuffer "$Globals" 192
VectorHalf 0 [_WorldSpaceLightPos0] 4
Vector 16 [unity_SpecCube0_BoxMax]
Vector 32 [unity_SpecCube0_BoxMin]
Vector 48 [unity_SpecCube0_ProbePosition]
VectorHalf 64 [unity_SpecCube0_HDR] 4
Vector 80 [unity_SpecCube1_BoxMax]
Vector 96 [unity_SpecCube1_BoxMin]
Vector 112 [unity_SpecCube1_ProbePosition]
VectorHalf 128 [unity_SpecCube1_HDR] 4
VectorHalf 136 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 144 [unity_ColorSpaceLuminance] 4
VectorHalf 152 [unity_DynamicLightmap_HDR] 4
VectorHalf 160 [_LightColor0] 4
VectorHalf 168 [_Color] 4
ScalarHalf 176 [_Metallic]
ScalarHalf 178 [_Glossiness]
ScalarHalf 180 [_OcclusionStrength]
VectorHalf 184 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  float4 unity_SpecCube0_BoxMax;
  float4 unity_SpecCube0_BoxMin;
  float4 unity_SpecCube0_ProbePosition;
  half4 unity_SpecCube0_HDR;
  float4 unity_SpecCube1_BoxMax;
  float4 unity_SpecCube1_BoxMin;
  float4 unity_SpecCube1_ProbePosition;
  half4 unity_SpecCube1_HDR;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 unity_DynamicLightmap_HDR;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_DynamicLightmap [[texture(0)]], sampler _mtlsmp_unity_DynamicLightmap [[sampler(0)]]
  ,   texture2d<half> unity_DynamicDirectionality [[texture(1)]], sampler _mtlsmp_unity_DynamicDirectionality [[sampler(1)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(2)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(2)]]
  ,   texturecube<half> unity_SpecCube1 [[texture(3)]], sampler _mtlsmp_unity_SpecCube1 [[sampler(3)]]
  ,   texture2d<half> _MainTex [[texture(4)]], sampler _mtlsmp__MainTex [[sampler(4)]]
  ,   texture2d<half> _OcclusionMap [[texture(5)]], sampler _mtlsmp__OcclusionMap [[sampler(5)]]
  ,   texture2d<half> _EmissionMap [[texture(6)]], sampler _mtlsmp__EmissionMap [[sampler(6)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(7)]], sampler _mtlsmp__ShadowMapTexture [[sampler(7)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half atten_2;
  half3 i_posWorld_3;
  i_posWorld_3 = half3(_mtl_i.xlv_TEXCOORD8);
  half4 tmpvar_4;
  tmpvar_4 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_5;
  tmpvar_5 = (_mtl_u._Color.xyz * tmpvar_4.xyz);
  half3 tmpvar_6;
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, half3(_mtl_u._Metallic));
  half tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 tmpvar_11;
  tmpvar_11 = _mtl_u._LightColor0.xyz;
  half tmpvar_12;
  tmpvar_12 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  atten_2 = tmpvar_12;
  half occ_13;
  half tmpvar_14;
  tmpvar_14 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_13 = tmpvar_14;
  half tmpvar_15;
  tmpvar_15 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_13 * _mtl_u._OcclusionStrength));
  half tmpvar_16;
  tmpvar_16 = max ((half)0.0, dot (tmpvar_9, _mtl_u._WorldSpaceLightPos0.xyz));
  float3 tmpvar_17;
  float4 tmpvar_18;
  float4 tmpvar_19;
  float4 tmpvar_20;
  tmpvar_17 = float3(i_posWorld_3);
  tmpvar_18 = float4(_mtl_i.xlv_TEXCOORD5);
  tmpvar_19 = float4(_mtl_u.unity_SpecCube0_HDR);
  tmpvar_20 = float4(_mtl_u.unity_SpecCube1_HDR);
  half3 tmpvar_21;
  half3 tmpvar_22;
  half4 realtimeDirTex_23;
  half3 tmpvar_24;
  half4 tmpvar_25;
  tmpvar_25 = unity_DynamicLightmap.sample(_mtlsmp_unity_DynamicLightmap, (float2)(tmpvar_18.zw));
  half4 tmpvar_26;
  tmpvar_26 = unity_DynamicDirectionality.sample(_mtlsmp_unity_DynamicDirectionality, (float2)(tmpvar_18.zw));
  realtimeDirTex_23 = tmpvar_26;
  half4 dirTex_27;
  dirTex_27 = realtimeDirTex_23;
  half3 y_28;
  y_28 = (dirTex_27.xyz - (half)0.5);
  half tmpvar_29;
  tmpvar_29 = max ((half)0.0001, dirTex_27.w);
  tmpvar_24 = ((pow (
    ((_mtl_u.unity_DynamicLightmap_HDR.x * tmpvar_25.w) * tmpvar_25.xyz)
  , _mtl_u.unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_9, y_28)
   + (half)0.5)) / tmpvar_29);
  tmpvar_24 = (tmpvar_24 * tmpvar_15);
  tmpvar_21 = (tmpvar_11 * atten_2);
  tmpvar_22 = half3(float3(0.0, 0.0, 0.0));
  half tmpvar_30;
  half3 tmpvar_31;
  tmpvar_30 = ((half)1.0 - _mtl_u._Glossiness);
  tmpvar_31 = (tmpvar_10 - ((half)2.0 * (
    dot (tmpvar_9, tmpvar_10)
   * tmpvar_9)));
  half3 originalReflUVW_32;
  half3 specular_33;
  originalReflUVW_32 = tmpvar_31;
  half3 worldRefl_34;
  worldRefl_34 = tmpvar_31;
  float3 worldPos_35;
  worldPos_35 = tmpvar_17;
  if ((_mtl_u.unity_SpecCube0_ProbePosition.w > 0.0)) {
    half3 rbmin_36;
    half3 rbmax_37;
    half3 tmpvar_38;
    tmpvar_38 = normalize(tmpvar_31);
    float3 tmpvar_39;
    tmpvar_39 = ((_mtl_u.unity_SpecCube0_BoxMax.xyz - tmpvar_17) / (float3)tmpvar_38);
    rbmax_37 = half3(tmpvar_39);
    float3 tmpvar_40;
    tmpvar_40 = ((_mtl_u.unity_SpecCube0_BoxMin.xyz - tmpvar_17) / (float3)tmpvar_38);
    rbmin_36 = half3(tmpvar_40);
    bool3 tmpvar_41;
    tmpvar_41 = (tmpvar_38 > (half3)float3(0.0, 0.0, 0.0));
    half tmpvar_42;
    if (tmpvar_41.x) {
      tmpvar_42 = rbmax_37.x;
    } else {
      tmpvar_42 = rbmin_36.x;
    };
    half tmpvar_43;
    if (tmpvar_41.y) {
      tmpvar_43 = rbmax_37.y;
    } else {
      tmpvar_43 = rbmin_36.y;
    };
    half tmpvar_44;
    if (tmpvar_41.z) {
      tmpvar_44 = rbmax_37.z;
    } else {
      tmpvar_44 = rbmin_36.z;
    };
    worldPos_35 = (tmpvar_17 - _mtl_u.unity_SpecCube0_ProbePosition.xyz);
    worldRefl_34 = half3((worldPos_35 + (float3)(tmpvar_38 * min (
      min (tmpvar_42, tmpvar_43)
    , tmpvar_44))));
  };
  tmpvar_31 = worldRefl_34;
  half4 hdr_45;
  hdr_45 = half4(tmpvar_19);
  half4 tmpvar_46;
  tmpvar_46.xyz = worldRefl_34;
  tmpvar_46.w = ((tmpvar_30 * ((half)1.7 - 
    ((half)0.7 * tmpvar_30)
  )) * (half)6.0);
  half4 tmpvar_47;
  tmpvar_47 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(worldRefl_34), level(tmpvar_46.w));
  half4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  half3 tmpvar_49;
  tmpvar_49 = ((hdr_45.x * pow (tmpvar_48.w, hdr_45.y)) * tmpvar_48.xyz);
  if ((_mtl_u.unity_SpecCube0_BoxMin.w < 0.99999)) {
    half3 worldRefl_50;
    worldRefl_50 = originalReflUVW_32;
    float3 worldPos_51;
    worldPos_51 = tmpvar_17;
    if ((_mtl_u.unity_SpecCube1_ProbePosition.w > 0.0)) {
      half3 rbmin_52;
      half3 rbmax_53;
      half3 tmpvar_54;
      tmpvar_54 = normalize(originalReflUVW_32);
      float3 tmpvar_55;
      tmpvar_55 = ((_mtl_u.unity_SpecCube1_BoxMax.xyz - tmpvar_17) / (float3)tmpvar_54);
      rbmax_53 = half3(tmpvar_55);
      float3 tmpvar_56;
      tmpvar_56 = ((_mtl_u.unity_SpecCube1_BoxMin.xyz - tmpvar_17) / (float3)tmpvar_54);
      rbmin_52 = half3(tmpvar_56);
      bool3 tmpvar_57;
      tmpvar_57 = (tmpvar_54 > (half3)float3(0.0, 0.0, 0.0));
      half tmpvar_58;
      if (tmpvar_57.x) {
        tmpvar_58 = rbmax_53.x;
      } else {
        tmpvar_58 = rbmin_52.x;
      };
      half tmpvar_59;
      if (tmpvar_57.y) {
        tmpvar_59 = rbmax_53.y;
      } else {
        tmpvar_59 = rbmin_52.y;
      };
      half tmpvar_60;
      if (tmpvar_57.z) {
        tmpvar_60 = rbmax_53.z;
      } else {
        tmpvar_60 = rbmin_52.z;
      };
      worldPos_51 = (tmpvar_17 - _mtl_u.unity_SpecCube1_ProbePosition.xyz);
      worldRefl_50 = half3((worldPos_51 + (float3)(tmpvar_54 * min (
        min (tmpvar_58, tmpvar_59)
      , tmpvar_60))));
    };
    tmpvar_31 = worldRefl_50;
    half4 hdr_61;
    hdr_61 = half4(tmpvar_20);
    half4 tmpvar_62;
    tmpvar_62.xyz = worldRefl_50;
    tmpvar_62.w = ((tmpvar_30 * ((half)1.7 - 
      ((half)0.7 * tmpvar_30)
    )) * (half)6.0);
    half4 tmpvar_63;
    tmpvar_63 = unity_SpecCube1.sample(_mtlsmp_unity_SpecCube1, (float3)(worldRefl_50), level(tmpvar_62.w));
    half4 tmpvar_64;
    tmpvar_64 = tmpvar_63;
    half3 tmpvar_65;
    tmpvar_65 = ((hdr_61.x * pow (tmpvar_64.w, hdr_61.y)) * tmpvar_64.xyz);
    float3 tmpvar_66;
    tmpvar_66 = mix ((float3)tmpvar_65, (float3)tmpvar_49, _mtl_u.unity_SpecCube0_BoxMin.www);
    specular_33 = half3(tmpvar_66);
  } else {
    specular_33 = tmpvar_49;
  };
  tmpvar_22 = (specular_33 * tmpvar_15);
  half3 viewDir_67;
  viewDir_67 = -(tmpvar_10);
  half surfaceReduction_68;
  half specularTerm_69;
  half tmpvar_70;
  tmpvar_70 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_71;
  half3 inVec_72;
  inVec_72 = (_mtl_u._WorldSpaceLightPos0.xyz + viewDir_67);
  tmpvar_71 = (inVec_72 * rsqrt(max ((half)0.001, 
    dot (inVec_72, inVec_72)
  )));
  half tmpvar_73;
  tmpvar_73 = max ((half)0.0, dot (tmpvar_9, tmpvar_71));
  half tmpvar_74;
  tmpvar_74 = max ((half)0.0, dot (tmpvar_9, viewDir_67));
  half tmpvar_75;
  tmpvar_75 = max ((half)0.0, dot (_mtl_u._WorldSpaceLightPos0.xyz, tmpvar_71));
  half tmpvar_76;
  tmpvar_76 = (tmpvar_70 * tmpvar_70);
  half tmpvar_77;
  tmpvar_77 = (tmpvar_70 * tmpvar_70);
  half tmpvar_78;
  tmpvar_78 = (tmpvar_77 * tmpvar_77);
  half tmpvar_79;
  tmpvar_79 = (((tmpvar_73 * tmpvar_73) * (tmpvar_78 - (half)1.0)) + (half)1.0);
  half x_80;
  x_80 = ((half)1.0 - tmpvar_16);
  half x_81;
  x_81 = ((half)1.0 - tmpvar_74);
  half tmpvar_82;
  tmpvar_82 = ((half)0.5 + (((half)2.0 * tmpvar_75) * (tmpvar_75 * tmpvar_70)));
  half tmpvar_83;
  tmpvar_83 = (((half)1.0 + (
    (tmpvar_82 - (half)1.0)
   * 
    ((x_80 * x_80) * ((x_80 * x_80) * x_80))
  )) * ((half)1.0 + (
    (tmpvar_82 - (half)1.0)
   * 
    ((x_81 * x_81) * ((x_81 * x_81) * x_81))
  )));
  half tmpvar_84;
  tmpvar_84 = ((((half)2.0 / 
    (((tmpvar_16 * (
      (tmpvar_74 * ((half)1.0 - tmpvar_76))
     + tmpvar_76)) + (tmpvar_74 * (
      (tmpvar_16 * ((half)1.0 - tmpvar_76))
     + tmpvar_76))) + (half)1e-05)
  ) * (tmpvar_78 / 
    ((((half)3.141593 * tmpvar_79) * tmpvar_79) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_69 = tmpvar_84;
  bool tmpvar_85;
  tmpvar_85 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_85) {
    specularTerm_69 = sqrt(max ((half)0.0001, tmpvar_84));
  };
  half tmpvar_86;
  tmpvar_86 = max ((half)0.0, (specularTerm_69 * tmpvar_16));
  specularTerm_69 = tmpvar_86;
  half tmpvar_87;
  tmpvar_87 = (tmpvar_83 * tmpvar_16);
  half tmpvar_88;
  tmpvar_88 = (tmpvar_70 * tmpvar_70);
  bool tmpvar_89;
  tmpvar_89 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_89) {
    surfaceReduction_68 = ((half)1.0 - (((half)0.28 * tmpvar_88) * tmpvar_70));
  } else {
    surfaceReduction_68 = ((half)1.0/(((tmpvar_88 * tmpvar_88) + (half)1.0)));
  };
  bool3 tmpvar_90;
  tmpvar_90 = bool3(tmpvar_7);
  bool tmpvar_91;
  tmpvar_91 = any(tmpvar_90);
  float tmpvar_92;
  if (tmpvar_91) {
    tmpvar_92 = 1.0;
  } else {
    tmpvar_92 = 0.0;
  };
  specularTerm_69 = (tmpvar_86 * (half)tmpvar_92);
  half x_93;
  x_93 = ((half)1.0 - tmpvar_75);
  half x_94;
  x_94 = ((half)1.0 - tmpvar_74);
  half3 tmpvar_95;
  tmpvar_95 = (((tmpvar_6 * 
    (tmpvar_24 + (tmpvar_21 * tmpvar_87))
  ) + (
    (specularTerm_69 * tmpvar_21)
   * 
    (tmpvar_7 + (((half)1.0 - tmpvar_7) * ((x_93 * x_93) * (
      (x_93 * x_93)
     * x_93))))
  )) + ((surfaceReduction_68 * tmpvar_22) * mix (tmpvar_7, half3(
    clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_8)), (half)0.0, (half)1.0)
  ), half3(
    ((x_94 * x_94) * ((x_94 * x_94) * x_94))
  ))));
  half4 tmpvar_96;
  tmpvar_96.w = half(1.0);
  tmpvar_96.xyz = tmpvar_95;
  c_1.w = tmpvar_96.w;
  half4 tmpvar_97;
  tmpvar_97 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  c_1.xyz = (tmpvar_95 + (tmpvar_97.xyz * _mtl_u._EmissionColor.xyz));
  half4 xlat_varoutput_98;
  xlat_varoutput_98.xyz = c_1.xyz;
  xlat_varoutput_98.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_98;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 151 math, 6 textures, 6 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
SetTexture 3 [_EmissionMap] 2D 3
ConstBuffer "$Globals" 208
Matrix 64 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_SHAr] 4
VectorHalf 16 [unity_SHAg] 4
VectorHalf 24 [unity_SHAb] 4
VectorHalf 32 [unity_IndirectSpecColor] 4
Vector 48 [unity_ProbeVolumeParams]
Vector 128 [unity_ProbeVolumeSizeInv] 3
Vector 144 [unity_ProbeVolumeMin] 3
VectorHalf 160 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 168 [unity_ColorSpaceLuminance] 4
VectorHalf 176 [_LightColor0] 4
VectorHalf 184 [_Color] 4
ScalarHalf 192 [_Metallic]
ScalarHalf 194 [_Glossiness]
ScalarHalf 196 [_OcclusionStrength]
VectorHalf 200 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_IndirectSpecColor;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]]
  ,   texture2d<half> _EmissionMap [[texture(3)]], sampler _mtlsmp__EmissionMap [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD8);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_4;
  tmpvar_4 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_5;
  half3 tmpvar_6;
  tmpvar_6 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, half3(_mtl_u._Metallic));
  half tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 tmpvar_10;
  tmpvar_10 = _mtl_u._LightColor0.xyz;
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  half tmpvar_14;
  tmpvar_14 = max ((half)0.0, dot (tmpvar_8, _mtl_u._WorldSpaceLightPos0.xyz));
  float3 tmpvar_15;
  tmpvar_15 = float3(i_posWorld_2);
  half3 tmpvar_16;
  half3 tmpvar_17;
  tmpvar_17 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_18;
  ambient_18 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_19;
  ambient_contrib_19 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_20;
    tmpvar_20.w = half(1.0);
    tmpvar_20.xyz = tmpvar_8;
    half3 x1_21;
    half4 SHAb_22;
    half4 SHAg_23;
    half4 SHAr_24;
    float3 texCoord_25;
    float3 tmpvar_26;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_27;
      tmpvar_27.w = 1.0;
      tmpvar_27.xyz = tmpvar_15;
      tmpvar_26 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_27).xyz;
    } else {
      tmpvar_26 = tmpvar_15;
    };
    float3 tmpvar_28;
    tmpvar_28 = ((tmpvar_26 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_25.yz = tmpvar_28.yz;
    texCoord_25.x = (tmpvar_28.x * 0.25);
    float tmpvar_29;
    float tmpvar_30;
    tmpvar_30 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_29 = clamp (texCoord_25.x, tmpvar_30, (0.25 - tmpvar_30));
    texCoord_25.x = tmpvar_29;
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_25));
    SHAr_24 = tmpvar_31;
    texCoord_25.x = (tmpvar_29 + 0.25);
    half4 tmpvar_32;
    tmpvar_32 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_25));
    SHAg_23 = tmpvar_32;
    texCoord_25.x = (tmpvar_29 + 0.5);
    half4 tmpvar_33;
    tmpvar_33 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_25));
    SHAb_22 = tmpvar_33;
    x1_21.x = dot (SHAr_24, tmpvar_20);
    x1_21.y = dot (SHAg_23, tmpvar_20);
    x1_21.z = dot (SHAb_22, tmpvar_20);
    ambient_contrib_19 = x1_21;
  } else {
    half4 tmpvar_34;
    tmpvar_34.w = half(1.0);
    tmpvar_34.xyz = tmpvar_8;
    half3 x_35;
    x_35.x = dot (_mtl_u.unity_SHAr, tmpvar_34);
    x_35.y = dot (_mtl_u.unity_SHAg, tmpvar_34);
    x_35.z = dot (_mtl_u.unity_SHAb, tmpvar_34);
    ambient_contrib_19 = x_35;
  };
  half3 tmpvar_36;
  tmpvar_36 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_19));
  ambient_18 = tmpvar_36;
  bool tmpvar_37;
  tmpvar_37 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_37) {
    ambient_18 = max ((((half)1.055 * 
      pow (max (tmpvar_36, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_17 = (ambient_18 * tmpvar_13);
  half3 specular_38;
  specular_38 = _mtl_u.unity_IndirectSpecColor.xyz;
  tmpvar_16 = (specular_38 * tmpvar_13);
  half3 viewDir_39;
  viewDir_39 = -(tmpvar_9);
  half surfaceReduction_40;
  half specularTerm_41;
  half tmpvar_42;
  tmpvar_42 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_43;
  half3 inVec_44;
  inVec_44 = (_mtl_u._WorldSpaceLightPos0.xyz + viewDir_39);
  tmpvar_43 = (inVec_44 * rsqrt(max ((half)0.001, 
    dot (inVec_44, inVec_44)
  )));
  half tmpvar_45;
  tmpvar_45 = max ((half)0.0, dot (tmpvar_8, tmpvar_43));
  half tmpvar_46;
  tmpvar_46 = max ((half)0.0, dot (tmpvar_8, viewDir_39));
  half tmpvar_47;
  tmpvar_47 = max ((half)0.0, dot (_mtl_u._WorldSpaceLightPos0.xyz, tmpvar_43));
  half tmpvar_48;
  tmpvar_48 = (tmpvar_42 * tmpvar_42);
  half tmpvar_49;
  tmpvar_49 = (tmpvar_42 * tmpvar_42);
  half tmpvar_50;
  tmpvar_50 = (tmpvar_49 * tmpvar_49);
  half tmpvar_51;
  tmpvar_51 = (((tmpvar_45 * tmpvar_45) * (tmpvar_50 - (half)1.0)) + (half)1.0);
  half x_52;
  x_52 = ((half)1.0 - tmpvar_14);
  half x_53;
  x_53 = ((half)1.0 - tmpvar_46);
  half tmpvar_54;
  tmpvar_54 = ((half)0.5 + (((half)2.0 * tmpvar_47) * (tmpvar_47 * tmpvar_42)));
  half tmpvar_55;
  tmpvar_55 = (((half)1.0 + (
    (tmpvar_54 - (half)1.0)
   * 
    ((x_52 * x_52) * ((x_52 * x_52) * x_52))
  )) * ((half)1.0 + (
    (tmpvar_54 - (half)1.0)
   * 
    ((x_53 * x_53) * ((x_53 * x_53) * x_53))
  )));
  half tmpvar_56;
  tmpvar_56 = ((((half)2.0 / 
    (((tmpvar_14 * (
      (tmpvar_46 * ((half)1.0 - tmpvar_48))
     + tmpvar_48)) + (tmpvar_46 * (
      (tmpvar_14 * ((half)1.0 - tmpvar_48))
     + tmpvar_48))) + (half)1e-05)
  ) * (tmpvar_50 / 
    ((((half)3.141593 * tmpvar_51) * tmpvar_51) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_41 = tmpvar_56;
  bool tmpvar_57;
  tmpvar_57 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_57) {
    specularTerm_41 = sqrt(max ((half)0.0001, tmpvar_56));
  };
  half tmpvar_58;
  tmpvar_58 = max ((half)0.0, (specularTerm_41 * tmpvar_14));
  specularTerm_41 = tmpvar_58;
  half tmpvar_59;
  tmpvar_59 = (tmpvar_55 * tmpvar_14);
  half tmpvar_60;
  tmpvar_60 = (tmpvar_42 * tmpvar_42);
  bool tmpvar_61;
  tmpvar_61 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_61) {
    surfaceReduction_40 = ((half)1.0 - (((half)0.28 * tmpvar_60) * tmpvar_42));
  } else {
    surfaceReduction_40 = ((half)1.0/(((tmpvar_60 * tmpvar_60) + (half)1.0)));
  };
  bool3 tmpvar_62;
  tmpvar_62 = bool3(tmpvar_6);
  bool tmpvar_63;
  tmpvar_63 = any(tmpvar_62);
  float tmpvar_64;
  if (tmpvar_63) {
    tmpvar_64 = 1.0;
  } else {
    tmpvar_64 = 0.0;
  };
  specularTerm_41 = (tmpvar_58 * (half)tmpvar_64);
  half x_65;
  x_65 = ((half)1.0 - tmpvar_47);
  half x_66;
  x_66 = ((half)1.0 - tmpvar_46);
  half3 tmpvar_67;
  tmpvar_67 = (((tmpvar_5 * 
    (tmpvar_17 + (tmpvar_10 * tmpvar_59))
  ) + (
    (specularTerm_41 * tmpvar_10)
   * 
    (tmpvar_6 + (((half)1.0 - tmpvar_6) * ((x_65 * x_65) * (
      (x_65 * x_65)
     * x_65))))
  )) + ((surfaceReduction_40 * tmpvar_16) * mix (tmpvar_6, half3(
    clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_7)), (half)0.0, (half)1.0)
  ), half3(
    ((x_66 * x_66) * ((x_66 * x_66) * x_66))
  ))));
  half4 tmpvar_68;
  tmpvar_68.w = half(1.0);
  tmpvar_68.xyz = tmpvar_67;
  c_1.w = tmpvar_68.w;
  half4 tmpvar_69;
  tmpvar_69 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  c_1.xyz = (tmpvar_67 + (tmpvar_69.xyz * _mtl_u._EmissionColor.xyz));
  half4 xlat_varoutput_70;
  xlat_varoutput_70.xyz = c_1.xyz;
  xlat_varoutput_70.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_70;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 147 math, 5 textures, 7 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
SetTexture 0 [unity_DynamicLightmap] 2D 0
SetTexture 1 [unity_DynamicDirectionality] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_OcclusionMap] 2D 3
SetTexture 4 [_EmissionMap] 2D 4
ConstBuffer "$Globals" 120
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_IndirectSpecColor] 4
Vector 16 [unity_SpecCube0_BoxMax]
Vector 32 [unity_SpecCube0_BoxMin]
Vector 48 [unity_SpecCube0_ProbePosition]
VectorHalf 64 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 72 [unity_ColorSpaceLuminance] 4
VectorHalf 80 [unity_DynamicLightmap_HDR] 4
VectorHalf 88 [_LightColor0] 4
VectorHalf 96 [_Color] 4
ScalarHalf 104 [_Metallic]
ScalarHalf 106 [_Glossiness]
ScalarHalf 108 [_OcclusionStrength]
VectorHalf 112 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_IndirectSpecColor;
  float4 unity_SpecCube0_BoxMax;
  float4 unity_SpecCube0_BoxMin;
  float4 unity_SpecCube0_ProbePosition;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 unity_DynamicLightmap_HDR;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_DynamicLightmap [[texture(0)]], sampler _mtlsmp_unity_DynamicLightmap [[sampler(0)]]
  ,   texture2d<half> unity_DynamicDirectionality [[texture(1)]], sampler _mtlsmp_unity_DynamicDirectionality [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _OcclusionMap [[texture(3)]], sampler _mtlsmp__OcclusionMap [[sampler(3)]]
  ,   texture2d<half> _EmissionMap [[texture(4)]], sampler _mtlsmp__EmissionMap [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD8);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_4;
  tmpvar_4 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_5;
  half3 tmpvar_6;
  tmpvar_6 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, half3(_mtl_u._Metallic));
  half tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 tmpvar_10;
  tmpvar_10 = _mtl_u._LightColor0.xyz;
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  half tmpvar_14;
  tmpvar_14 = max ((half)0.0, dot (tmpvar_8, _mtl_u._WorldSpaceLightPos0.xyz));
  float3 tmpvar_15;
  float4 tmpvar_16;
  tmpvar_15 = float3(i_posWorld_2);
  tmpvar_16 = float4(_mtl_i.xlv_TEXCOORD5);
  half3 tmpvar_17;
  half4 realtimeDirTex_18;
  half3 tmpvar_19;
  half4 tmpvar_20;
  tmpvar_20 = unity_DynamicLightmap.sample(_mtlsmp_unity_DynamicLightmap, (float2)(tmpvar_16.zw));
  half4 tmpvar_21;
  tmpvar_21 = unity_DynamicDirectionality.sample(_mtlsmp_unity_DynamicDirectionality, (float2)(tmpvar_16.zw));
  realtimeDirTex_18 = tmpvar_21;
  half4 dirTex_22;
  dirTex_22 = realtimeDirTex_18;
  half3 y_23;
  y_23 = (dirTex_22.xyz - (half)0.5);
  half tmpvar_24;
  tmpvar_24 = max ((half)0.0001, dirTex_22.w);
  tmpvar_19 = ((pow (
    ((_mtl_u.unity_DynamicLightmap_HDR.x * tmpvar_20.w) * tmpvar_20.xyz)
  , _mtl_u.unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_8, y_23)
   + (half)0.5)) / tmpvar_24);
  tmpvar_19 = (tmpvar_19 * tmpvar_13);
  tmpvar_17 = half3(float3(0.0, 0.0, 0.0));
  half3 specular_25;
  half3 worldRefl_26;
  worldRefl_26 = (tmpvar_9 - ((half)2.0 * (
    dot (tmpvar_8, tmpvar_9)
   * tmpvar_8)));
  float3 worldPos_27;
  worldPos_27 = tmpvar_15;
  if ((_mtl_u.unity_SpecCube0_ProbePosition.w > 0.0)) {
    half3 rbmin_28;
    half3 rbmax_29;
    half3 tmpvar_30;
    tmpvar_30 = normalize(worldRefl_26);
    float3 tmpvar_31;
    tmpvar_31 = ((_mtl_u.unity_SpecCube0_BoxMax.xyz - tmpvar_15) / (float3)tmpvar_30);
    rbmax_29 = half3(tmpvar_31);
    float3 tmpvar_32;
    tmpvar_32 = ((_mtl_u.unity_SpecCube0_BoxMin.xyz - tmpvar_15) / (float3)tmpvar_30);
    rbmin_28 = half3(tmpvar_32);
    bool3 tmpvar_33;
    tmpvar_33 = (tmpvar_30 > (half3)float3(0.0, 0.0, 0.0));
    half tmpvar_34;
    if (tmpvar_33.x) {
      tmpvar_34 = rbmax_29.x;
    } else {
      tmpvar_34 = rbmin_28.x;
    };
    half tmpvar_35;
    if (tmpvar_33.y) {
      tmpvar_35 = rbmax_29.y;
    } else {
      tmpvar_35 = rbmin_28.y;
    };
    half tmpvar_36;
    if (tmpvar_33.z) {
      tmpvar_36 = rbmax_29.z;
    } else {
      tmpvar_36 = rbmin_28.z;
    };
    worldPos_27 = (tmpvar_15 - _mtl_u.unity_SpecCube0_ProbePosition.xyz);
    worldRefl_26 = half3((worldPos_27 + (float3)(tmpvar_30 * min (
      min (tmpvar_34, tmpvar_35)
    , tmpvar_36))));
  };
  specular_25 = _mtl_u.unity_IndirectSpecColor.xyz;
  tmpvar_17 = (specular_25 * tmpvar_13);
  half3 viewDir_37;
  viewDir_37 = -(tmpvar_9);
  half surfaceReduction_38;
  half specularTerm_39;
  half tmpvar_40;
  tmpvar_40 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_41;
  half3 inVec_42;
  inVec_42 = (_mtl_u._WorldSpaceLightPos0.xyz + viewDir_37);
  tmpvar_41 = (inVec_42 * rsqrt(max ((half)0.001, 
    dot (inVec_42, inVec_42)
  )));
  half tmpvar_43;
  tmpvar_43 = max ((half)0.0, dot (tmpvar_8, tmpvar_41));
  half tmpvar_44;
  tmpvar_44 = max ((half)0.0, dot (tmpvar_8, viewDir_37));
  half tmpvar_45;
  tmpvar_45 = max ((half)0.0, dot (_mtl_u._WorldSpaceLightPos0.xyz, tmpvar_41));
  half tmpvar_46;
  tmpvar_46 = (tmpvar_40 * tmpvar_40);
  half tmpvar_47;
  tmpvar_47 = (tmpvar_40 * tmpvar_40);
  half tmpvar_48;
  tmpvar_48 = (tmpvar_47 * tmpvar_47);
  half tmpvar_49;
  tmpvar_49 = (((tmpvar_43 * tmpvar_43) * (tmpvar_48 - (half)1.0)) + (half)1.0);
  half x_50;
  x_50 = ((half)1.0 - tmpvar_14);
  half x_51;
  x_51 = ((half)1.0 - tmpvar_44);
  half tmpvar_52;
  tmpvar_52 = ((half)0.5 + (((half)2.0 * tmpvar_45) * (tmpvar_45 * tmpvar_40)));
  half tmpvar_53;
  tmpvar_53 = (((half)1.0 + (
    (tmpvar_52 - (half)1.0)
   * 
    ((x_50 * x_50) * ((x_50 * x_50) * x_50))
  )) * ((half)1.0 + (
    (tmpvar_52 - (half)1.0)
   * 
    ((x_51 * x_51) * ((x_51 * x_51) * x_51))
  )));
  half tmpvar_54;
  tmpvar_54 = ((((half)2.0 / 
    (((tmpvar_14 * (
      (tmpvar_44 * ((half)1.0 - tmpvar_46))
     + tmpvar_46)) + (tmpvar_44 * (
      (tmpvar_14 * ((half)1.0 - tmpvar_46))
     + tmpvar_46))) + (half)1e-05)
  ) * (tmpvar_48 / 
    ((((half)3.141593 * tmpvar_49) * tmpvar_49) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_39 = tmpvar_54;
  bool tmpvar_55;
  tmpvar_55 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_55) {
    specularTerm_39 = sqrt(max ((half)0.0001, tmpvar_54));
  };
  half tmpvar_56;
  tmpvar_56 = max ((half)0.0, (specularTerm_39 * tmpvar_14));
  specularTerm_39 = tmpvar_56;
  half tmpvar_57;
  tmpvar_57 = (tmpvar_53 * tmpvar_14);
  half tmpvar_58;
  tmpvar_58 = (tmpvar_40 * tmpvar_40);
  bool tmpvar_59;
  tmpvar_59 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_59) {
    surfaceReduction_38 = ((half)1.0 - (((half)0.28 * tmpvar_58) * tmpvar_40));
  } else {
    surfaceReduction_38 = ((half)1.0/(((tmpvar_58 * tmpvar_58) + (half)1.0)));
  };
  bool3 tmpvar_60;
  tmpvar_60 = bool3(tmpvar_6);
  bool tmpvar_61;
  tmpvar_61 = any(tmpvar_60);
  float tmpvar_62;
  if (tmpvar_61) {
    tmpvar_62 = 1.0;
  } else {
    tmpvar_62 = 0.0;
  };
  specularTerm_39 = (tmpvar_56 * (half)tmpvar_62);
  half x_63;
  x_63 = ((half)1.0 - tmpvar_45);
  half x_64;
  x_64 = ((half)1.0 - tmpvar_44);
  half3 tmpvar_65;
  tmpvar_65 = (((tmpvar_5 * 
    (tmpvar_19 + (tmpvar_10 * tmpvar_57))
  ) + (
    (specularTerm_39 * tmpvar_10)
   * 
    (tmpvar_6 + (((half)1.0 - tmpvar_6) * ((x_63 * x_63) * (
      (x_63 * x_63)
     * x_63))))
  )) + ((surfaceReduction_38 * tmpvar_17) * mix (tmpvar_6, half3(
    clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_7)), (half)0.0, (half)1.0)
  ), half3(
    ((x_64 * x_64) * ((x_64 * x_64) * x_64))
  ))));
  half4 tmpvar_66;
  tmpvar_66.w = half(1.0);
  tmpvar_66.xyz = tmpvar_65;
  c_1.w = tmpvar_66.w;
  half4 tmpvar_67;
  tmpvar_67 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  c_1.xyz = (tmpvar_65 + (tmpvar_67.xyz * _mtl_u._EmissionColor.xyz));
  half4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_68;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 152 math, 7 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
SetTexture 3 [_EmissionMap] 2D 3
SetTexture 4 [_ShadowMapTexture] 2D 4
ConstBuffer "$Globals" 208
Matrix 64 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_SHAr] 4
VectorHalf 16 [unity_SHAg] 4
VectorHalf 24 [unity_SHAb] 4
VectorHalf 32 [unity_IndirectSpecColor] 4
Vector 48 [unity_ProbeVolumeParams]
Vector 128 [unity_ProbeVolumeSizeInv] 3
Vector 144 [unity_ProbeVolumeMin] 3
VectorHalf 160 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 168 [unity_ColorSpaceLuminance] 4
VectorHalf 176 [_LightColor0] 4
VectorHalf 184 [_Color] 4
ScalarHalf 192 [_Metallic]
ScalarHalf 194 [_Glossiness]
ScalarHalf 196 [_OcclusionStrength]
VectorHalf 200 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_IndirectSpecColor;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]]
  ,   texture2d<half> _EmissionMap [[texture(3)]], sampler _mtlsmp__EmissionMap [[sampler(3)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(4)]], sampler _mtlsmp__ShadowMapTexture [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half atten_2;
  half3 i_posWorld_3;
  i_posWorld_3 = half3(_mtl_i.xlv_TEXCOORD8);
  half4 tmpvar_4;
  tmpvar_4 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_5;
  tmpvar_5 = (_mtl_u._Color.xyz * tmpvar_4.xyz);
  half3 tmpvar_6;
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, half3(_mtl_u._Metallic));
  half tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 tmpvar_11;
  tmpvar_11 = _mtl_u._LightColor0.xyz;
  half tmpvar_12;
  tmpvar_12 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  atten_2 = tmpvar_12;
  half occ_13;
  half tmpvar_14;
  tmpvar_14 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_13 = tmpvar_14;
  half tmpvar_15;
  tmpvar_15 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_13 * _mtl_u._OcclusionStrength));
  half tmpvar_16;
  tmpvar_16 = max ((half)0.0, dot (tmpvar_9, _mtl_u._WorldSpaceLightPos0.xyz));
  float3 tmpvar_17;
  tmpvar_17 = float3(i_posWorld_3);
  half3 tmpvar_18;
  half3 tmpvar_19;
  half3 tmpvar_20;
  tmpvar_20 = half3(float3(0.0, 0.0, 0.0));
  tmpvar_19 = (tmpvar_11 * atten_2);
  half3 ambient_21;
  ambient_21 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_22;
  ambient_contrib_22 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_23;
    tmpvar_23.w = half(1.0);
    tmpvar_23.xyz = tmpvar_9;
    half3 x1_24;
    half4 SHAb_25;
    half4 SHAg_26;
    half4 SHAr_27;
    float3 texCoord_28;
    float3 tmpvar_29;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_30;
      tmpvar_30.w = 1.0;
      tmpvar_30.xyz = tmpvar_17;
      tmpvar_29 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_30).xyz;
    } else {
      tmpvar_29 = tmpvar_17;
    };
    float3 tmpvar_31;
    tmpvar_31 = ((tmpvar_29 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_28.yz = tmpvar_31.yz;
    texCoord_28.x = (tmpvar_31.x * 0.25);
    float tmpvar_32;
    float tmpvar_33;
    tmpvar_33 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_32 = clamp (texCoord_28.x, tmpvar_33, (0.25 - tmpvar_33));
    texCoord_28.x = tmpvar_32;
    half4 tmpvar_34;
    tmpvar_34 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_28));
    SHAr_27 = tmpvar_34;
    texCoord_28.x = (tmpvar_32 + 0.25);
    half4 tmpvar_35;
    tmpvar_35 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_28));
    SHAg_26 = tmpvar_35;
    texCoord_28.x = (tmpvar_32 + 0.5);
    half4 tmpvar_36;
    tmpvar_36 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_28));
    SHAb_25 = tmpvar_36;
    x1_24.x = dot (SHAr_27, tmpvar_23);
    x1_24.y = dot (SHAg_26, tmpvar_23);
    x1_24.z = dot (SHAb_25, tmpvar_23);
    ambient_contrib_22 = x1_24;
  } else {
    half4 tmpvar_37;
    tmpvar_37.w = half(1.0);
    tmpvar_37.xyz = tmpvar_9;
    half3 x_38;
    x_38.x = dot (_mtl_u.unity_SHAr, tmpvar_37);
    x_38.y = dot (_mtl_u.unity_SHAg, tmpvar_37);
    x_38.z = dot (_mtl_u.unity_SHAb, tmpvar_37);
    ambient_contrib_22 = x_38;
  };
  half3 tmpvar_39;
  tmpvar_39 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_22));
  ambient_21 = tmpvar_39;
  bool tmpvar_40;
  tmpvar_40 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_40) {
    ambient_21 = max ((((half)1.055 * 
      pow (max (tmpvar_39, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_20 = (ambient_21 * tmpvar_15);
  half3 specular_41;
  specular_41 = _mtl_u.unity_IndirectSpecColor.xyz;
  tmpvar_18 = (specular_41 * tmpvar_15);
  half3 viewDir_42;
  viewDir_42 = -(tmpvar_10);
  half surfaceReduction_43;
  half specularTerm_44;
  half tmpvar_45;
  tmpvar_45 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_46;
  half3 inVec_47;
  inVec_47 = (_mtl_u._WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_46 = (inVec_47 * rsqrt(max ((half)0.001, 
    dot (inVec_47, inVec_47)
  )));
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, dot (tmpvar_9, tmpvar_46));
  half tmpvar_49;
  tmpvar_49 = max ((half)0.0, dot (tmpvar_9, viewDir_42));
  half tmpvar_50;
  tmpvar_50 = max ((half)0.0, dot (_mtl_u._WorldSpaceLightPos0.xyz, tmpvar_46));
  half tmpvar_51;
  tmpvar_51 = (tmpvar_45 * tmpvar_45);
  half tmpvar_52;
  tmpvar_52 = (tmpvar_45 * tmpvar_45);
  half tmpvar_53;
  tmpvar_53 = (tmpvar_52 * tmpvar_52);
  half tmpvar_54;
  tmpvar_54 = (((tmpvar_48 * tmpvar_48) * (tmpvar_53 - (half)1.0)) + (half)1.0);
  half x_55;
  x_55 = ((half)1.0 - tmpvar_16);
  half x_56;
  x_56 = ((half)1.0 - tmpvar_49);
  half tmpvar_57;
  tmpvar_57 = ((half)0.5 + (((half)2.0 * tmpvar_50) * (tmpvar_50 * tmpvar_45)));
  half tmpvar_58;
  tmpvar_58 = (((half)1.0 + (
    (tmpvar_57 - (half)1.0)
   * 
    ((x_55 * x_55) * ((x_55 * x_55) * x_55))
  )) * ((half)1.0 + (
    (tmpvar_57 - (half)1.0)
   * 
    ((x_56 * x_56) * ((x_56 * x_56) * x_56))
  )));
  half tmpvar_59;
  tmpvar_59 = ((((half)2.0 / 
    (((tmpvar_16 * (
      (tmpvar_49 * ((half)1.0 - tmpvar_51))
     + tmpvar_51)) + (tmpvar_49 * (
      (tmpvar_16 * ((half)1.0 - tmpvar_51))
     + tmpvar_51))) + (half)1e-05)
  ) * (tmpvar_53 / 
    ((((half)3.141593 * tmpvar_54) * tmpvar_54) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_44 = tmpvar_59;
  bool tmpvar_60;
  tmpvar_60 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_60) {
    specularTerm_44 = sqrt(max ((half)0.0001, tmpvar_59));
  };
  half tmpvar_61;
  tmpvar_61 = max ((half)0.0, (specularTerm_44 * tmpvar_16));
  specularTerm_44 = tmpvar_61;
  half tmpvar_62;
  tmpvar_62 = (tmpvar_58 * tmpvar_16);
  half tmpvar_63;
  tmpvar_63 = (tmpvar_45 * tmpvar_45);
  bool tmpvar_64;
  tmpvar_64 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_64) {
    surfaceReduction_43 = ((half)1.0 - (((half)0.28 * tmpvar_63) * tmpvar_45));
  } else {
    surfaceReduction_43 = ((half)1.0/(((tmpvar_63 * tmpvar_63) + (half)1.0)));
  };
  bool3 tmpvar_65;
  tmpvar_65 = bool3(tmpvar_7);
  bool tmpvar_66;
  tmpvar_66 = any(tmpvar_65);
  float tmpvar_67;
  if (tmpvar_66) {
    tmpvar_67 = 1.0;
  } else {
    tmpvar_67 = 0.0;
  };
  specularTerm_44 = (tmpvar_61 * (half)tmpvar_67);
  half x_68;
  x_68 = ((half)1.0 - tmpvar_50);
  half x_69;
  x_69 = ((half)1.0 - tmpvar_49);
  half3 tmpvar_70;
  tmpvar_70 = (((tmpvar_6 * 
    (tmpvar_20 + (tmpvar_19 * tmpvar_62))
  ) + (
    (specularTerm_44 * tmpvar_19)
   * 
    (tmpvar_7 + (((half)1.0 - tmpvar_7) * ((x_68 * x_68) * (
      (x_68 * x_68)
     * x_68))))
  )) + ((surfaceReduction_43 * tmpvar_18) * mix (tmpvar_7, half3(
    clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_8)), (half)0.0, (half)1.0)
  ), half3(
    ((x_69 * x_69) * ((x_69 * x_69) * x_69))
  ))));
  half4 tmpvar_71;
  tmpvar_71.w = half(1.0);
  tmpvar_71.xyz = tmpvar_70;
  c_1.w = tmpvar_71.w;
  half4 tmpvar_72;
  tmpvar_72 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  c_1.xyz = (tmpvar_70 + (tmpvar_72.xyz * _mtl_u._EmissionColor.xyz));
  half4 xlat_varoutput_73;
  xlat_varoutput_73.xyz = c_1.xyz;
  xlat_varoutput_73.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_73;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 148 math, 6 textures, 7 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
SetTexture 0 [unity_DynamicLightmap] 2D 0
SetTexture 1 [unity_DynamicDirectionality] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_OcclusionMap] 2D 3
SetTexture 4 [_EmissionMap] 2D 4
SetTexture 5 [_ShadowMapTexture] 2D 5
ConstBuffer "$Globals" 120
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_IndirectSpecColor] 4
Vector 16 [unity_SpecCube0_BoxMax]
Vector 32 [unity_SpecCube0_BoxMin]
Vector 48 [unity_SpecCube0_ProbePosition]
VectorHalf 64 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 72 [unity_ColorSpaceLuminance] 4
VectorHalf 80 [unity_DynamicLightmap_HDR] 4
VectorHalf 88 [_LightColor0] 4
VectorHalf 96 [_Color] 4
ScalarHalf 104 [_Metallic]
ScalarHalf 106 [_Glossiness]
ScalarHalf 108 [_OcclusionStrength]
VectorHalf 112 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_IndirectSpecColor;
  float4 unity_SpecCube0_BoxMax;
  float4 unity_SpecCube0_BoxMin;
  float4 unity_SpecCube0_ProbePosition;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 unity_DynamicLightmap_HDR;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_DynamicLightmap [[texture(0)]], sampler _mtlsmp_unity_DynamicLightmap [[sampler(0)]]
  ,   texture2d<half> unity_DynamicDirectionality [[texture(1)]], sampler _mtlsmp_unity_DynamicDirectionality [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _OcclusionMap [[texture(3)]], sampler _mtlsmp__OcclusionMap [[sampler(3)]]
  ,   texture2d<half> _EmissionMap [[texture(4)]], sampler _mtlsmp__EmissionMap [[sampler(4)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(5)]], sampler _mtlsmp__ShadowMapTexture [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half atten_2;
  half3 i_posWorld_3;
  i_posWorld_3 = half3(_mtl_i.xlv_TEXCOORD8);
  half4 tmpvar_4;
  tmpvar_4 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_5;
  tmpvar_5 = (_mtl_u._Color.xyz * tmpvar_4.xyz);
  half3 tmpvar_6;
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, half3(_mtl_u._Metallic));
  half tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 tmpvar_11;
  tmpvar_11 = _mtl_u._LightColor0.xyz;
  half tmpvar_12;
  tmpvar_12 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  atten_2 = tmpvar_12;
  half occ_13;
  half tmpvar_14;
  tmpvar_14 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_13 = tmpvar_14;
  half tmpvar_15;
  tmpvar_15 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_13 * _mtl_u._OcclusionStrength));
  half tmpvar_16;
  tmpvar_16 = max ((half)0.0, dot (tmpvar_9, _mtl_u._WorldSpaceLightPos0.xyz));
  float3 tmpvar_17;
  float4 tmpvar_18;
  tmpvar_17 = float3(i_posWorld_3);
  tmpvar_18 = float4(_mtl_i.xlv_TEXCOORD5);
  half3 tmpvar_19;
  half3 tmpvar_20;
  half4 realtimeDirTex_21;
  half3 tmpvar_22;
  half4 tmpvar_23;
  tmpvar_23 = unity_DynamicLightmap.sample(_mtlsmp_unity_DynamicLightmap, (float2)(tmpvar_18.zw));
  half4 tmpvar_24;
  tmpvar_24 = unity_DynamicDirectionality.sample(_mtlsmp_unity_DynamicDirectionality, (float2)(tmpvar_18.zw));
  realtimeDirTex_21 = tmpvar_24;
  half4 dirTex_25;
  dirTex_25 = realtimeDirTex_21;
  half3 y_26;
  y_26 = (dirTex_25.xyz - (half)0.5);
  half tmpvar_27;
  tmpvar_27 = max ((half)0.0001, dirTex_25.w);
  tmpvar_22 = ((pow (
    ((_mtl_u.unity_DynamicLightmap_HDR.x * tmpvar_23.w) * tmpvar_23.xyz)
  , _mtl_u.unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_9, y_26)
   + (half)0.5)) / tmpvar_27);
  tmpvar_22 = (tmpvar_22 * tmpvar_15);
  tmpvar_19 = (tmpvar_11 * atten_2);
  tmpvar_20 = half3(float3(0.0, 0.0, 0.0));
  half3 specular_28;
  half3 worldRefl_29;
  worldRefl_29 = (tmpvar_10 - ((half)2.0 * (
    dot (tmpvar_9, tmpvar_10)
   * tmpvar_9)));
  float3 worldPos_30;
  worldPos_30 = tmpvar_17;
  if ((_mtl_u.unity_SpecCube0_ProbePosition.w > 0.0)) {
    half3 rbmin_31;
    half3 rbmax_32;
    half3 tmpvar_33;
    tmpvar_33 = normalize(worldRefl_29);
    float3 tmpvar_34;
    tmpvar_34 = ((_mtl_u.unity_SpecCube0_BoxMax.xyz - tmpvar_17) / (float3)tmpvar_33);
    rbmax_32 = half3(tmpvar_34);
    float3 tmpvar_35;
    tmpvar_35 = ((_mtl_u.unity_SpecCube0_BoxMin.xyz - tmpvar_17) / (float3)tmpvar_33);
    rbmin_31 = half3(tmpvar_35);
    bool3 tmpvar_36;
    tmpvar_36 = (tmpvar_33 > (half3)float3(0.0, 0.0, 0.0));
    half tmpvar_37;
    if (tmpvar_36.x) {
      tmpvar_37 = rbmax_32.x;
    } else {
      tmpvar_37 = rbmin_31.x;
    };
    half tmpvar_38;
    if (tmpvar_36.y) {
      tmpvar_38 = rbmax_32.y;
    } else {
      tmpvar_38 = rbmin_31.y;
    };
    half tmpvar_39;
    if (tmpvar_36.z) {
      tmpvar_39 = rbmax_32.z;
    } else {
      tmpvar_39 = rbmin_31.z;
    };
    worldPos_30 = (tmpvar_17 - _mtl_u.unity_SpecCube0_ProbePosition.xyz);
    worldRefl_29 = half3((worldPos_30 + (float3)(tmpvar_33 * min (
      min (tmpvar_37, tmpvar_38)
    , tmpvar_39))));
  };
  specular_28 = _mtl_u.unity_IndirectSpecColor.xyz;
  tmpvar_20 = (specular_28 * tmpvar_15);
  half3 viewDir_40;
  viewDir_40 = -(tmpvar_10);
  half surfaceReduction_41;
  half specularTerm_42;
  half tmpvar_43;
  tmpvar_43 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_44;
  half3 inVec_45;
  inVec_45 = (_mtl_u._WorldSpaceLightPos0.xyz + viewDir_40);
  tmpvar_44 = (inVec_45 * rsqrt(max ((half)0.001, 
    dot (inVec_45, inVec_45)
  )));
  half tmpvar_46;
  tmpvar_46 = max ((half)0.0, dot (tmpvar_9, tmpvar_44));
  half tmpvar_47;
  tmpvar_47 = max ((half)0.0, dot (tmpvar_9, viewDir_40));
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, dot (_mtl_u._WorldSpaceLightPos0.xyz, tmpvar_44));
  half tmpvar_49;
  tmpvar_49 = (tmpvar_43 * tmpvar_43);
  half tmpvar_50;
  tmpvar_50 = (tmpvar_43 * tmpvar_43);
  half tmpvar_51;
  tmpvar_51 = (tmpvar_50 * tmpvar_50);
  half tmpvar_52;
  tmpvar_52 = (((tmpvar_46 * tmpvar_46) * (tmpvar_51 - (half)1.0)) + (half)1.0);
  half x_53;
  x_53 = ((half)1.0 - tmpvar_16);
  half x_54;
  x_54 = ((half)1.0 - tmpvar_47);
  half tmpvar_55;
  tmpvar_55 = ((half)0.5 + (((half)2.0 * tmpvar_48) * (tmpvar_48 * tmpvar_43)));
  half tmpvar_56;
  tmpvar_56 = (((half)1.0 + (
    (tmpvar_55 - (half)1.0)
   * 
    ((x_53 * x_53) * ((x_53 * x_53) * x_53))
  )) * ((half)1.0 + (
    (tmpvar_55 - (half)1.0)
   * 
    ((x_54 * x_54) * ((x_54 * x_54) * x_54))
  )));
  half tmpvar_57;
  tmpvar_57 = ((((half)2.0 / 
    (((tmpvar_16 * (
      (tmpvar_47 * ((half)1.0 - tmpvar_49))
     + tmpvar_49)) + (tmpvar_47 * (
      (tmpvar_16 * ((half)1.0 - tmpvar_49))
     + tmpvar_49))) + (half)1e-05)
  ) * (tmpvar_51 / 
    ((((half)3.141593 * tmpvar_52) * tmpvar_52) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_42 = tmpvar_57;
  bool tmpvar_58;
  tmpvar_58 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_58) {
    specularTerm_42 = sqrt(max ((half)0.0001, tmpvar_57));
  };
  half tmpvar_59;
  tmpvar_59 = max ((half)0.0, (specularTerm_42 * tmpvar_16));
  specularTerm_42 = tmpvar_59;
  half tmpvar_60;
  tmpvar_60 = (tmpvar_56 * tmpvar_16);
  half tmpvar_61;
  tmpvar_61 = (tmpvar_43 * tmpvar_43);
  bool tmpvar_62;
  tmpvar_62 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_62) {
    surfaceReduction_41 = ((half)1.0 - (((half)0.28 * tmpvar_61) * tmpvar_43));
  } else {
    surfaceReduction_41 = ((half)1.0/(((tmpvar_61 * tmpvar_61) + (half)1.0)));
  };
  bool3 tmpvar_63;
  tmpvar_63 = bool3(tmpvar_7);
  bool tmpvar_64;
  tmpvar_64 = any(tmpvar_63);
  float tmpvar_65;
  if (tmpvar_64) {
    tmpvar_65 = 1.0;
  } else {
    tmpvar_65 = 0.0;
  };
  specularTerm_42 = (tmpvar_59 * (half)tmpvar_65);
  half x_66;
  x_66 = ((half)1.0 - tmpvar_48);
  half x_67;
  x_67 = ((half)1.0 - tmpvar_47);
  half3 tmpvar_68;
  tmpvar_68 = (((tmpvar_6 * 
    (tmpvar_22 + (tmpvar_19 * tmpvar_60))
  ) + (
    (specularTerm_42 * tmpvar_19)
   * 
    (tmpvar_7 + (((half)1.0 - tmpvar_7) * ((x_66 * x_66) * (
      (x_66 * x_66)
     * x_66))))
  )) + ((surfaceReduction_41 * tmpvar_20) * mix (tmpvar_7, half3(
    clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_8)), (half)0.0, (half)1.0)
  ), half3(
    ((x_67 * x_67) * ((x_67 * x_67) * x_67))
  ))));
  half4 tmpvar_69;
  tmpvar_69.w = half(1.0);
  tmpvar_69.xyz = tmpvar_68;
  c_1.w = tmpvar_69.w;
  half4 tmpvar_70;
  tmpvar_70 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  c_1.xyz = (tmpvar_68 + (tmpvar_70.xyz * _mtl_u._EmissionColor.xyz));
  half4 xlat_varoutput_71;
  xlat_varoutput_71.xyz = c_1.xyz;
  xlat_varoutput_71.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_71;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 199 math, 7 textures, 15 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_SpecCube0] CUBE 0
SetTexture 1 [unity_SpecCube1] CUBE 1
SetTexture 2 [unity_ProbeVolumeSH] 3D 2
SetTexture 3 [_MainTex] 2D 3
SetTexture 4 [_OcclusionMap] 2D 4
ConstBuffer "$Globals" 310
Matrix 176 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_SHAr] 4
VectorHalf 16 [unity_SHAg] 4
VectorHalf 24 [unity_SHAb] 4
Vector 32 [unity_SpecCube0_BoxMax]
Vector 48 [unity_SpecCube0_BoxMin]
Vector 64 [unity_SpecCube0_ProbePosition]
VectorHalf 80 [unity_SpecCube0_HDR] 4
Vector 96 [unity_SpecCube1_BoxMax]
Vector 112 [unity_SpecCube1_BoxMin]
Vector 128 [unity_SpecCube1_ProbePosition]
VectorHalf 144 [unity_SpecCube1_HDR] 4
Vector 160 [unity_ProbeVolumeParams]
Vector 240 [unity_ProbeVolumeSizeInv] 3
Vector 256 [unity_ProbeVolumeMin] 3
VectorHalf 272 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 280 [unity_ColorSpaceLuminance] 4
VectorHalf 288 [_LightColor0] 4
VectorHalf 296 [_Color] 4
ScalarHalf 304 [_Metallic]
ScalarHalf 306 [_Glossiness]
ScalarHalf 308 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_SpecCube0_BoxMax;
  float4 unity_SpecCube0_BoxMin;
  float4 unity_SpecCube0_ProbePosition;
  half4 unity_SpecCube0_HDR;
  float4 unity_SpecCube1_BoxMax;
  float4 unity_SpecCube1_BoxMin;
  float4 unity_SpecCube1_ProbePosition;
  half4 unity_SpecCube1_HDR;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(0)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(0)]]
  ,   texturecube<half> unity_SpecCube1 [[texture(1)]], sampler _mtlsmp_unity_SpecCube1 [[sampler(1)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(2)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(2)]]
  ,   texture2d<half> _MainTex [[texture(3)]], sampler _mtlsmp__MainTex [[sampler(3)]]
  ,   texture2d<half> _OcclusionMap [[texture(4)]], sampler _mtlsmp__OcclusionMap [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD8);
  half tmpvar_3;
  half4 tmpvar_4;
  tmpvar_4 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_3 = (tmpvar_4.w * _mtl_u._Color.w);
  half3 tmpvar_5;
  tmpvar_5 = (_mtl_u._Color.xyz * tmpvar_4.xyz);
  half3 tmpvar_6;
  tmpvar_6 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, half3(_mtl_u._Metallic));
  half tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 diffColor_10;
  half outModifiedAlpha_11;
  diffColor_10 = ((tmpvar_5 * tmpvar_7) * tmpvar_3);
  outModifiedAlpha_11 = (((half)1.0 - tmpvar_7) + (tmpvar_3 * tmpvar_7));
  half3 tmpvar_12;
  tmpvar_12 = _mtl_u._LightColor0.xyz;
  half occ_13;
  half tmpvar_14;
  tmpvar_14 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_13 = tmpvar_14;
  half tmpvar_15;
  tmpvar_15 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_13 * _mtl_u._OcclusionStrength));
  half tmpvar_16;
  tmpvar_16 = max ((half)0.0, dot (tmpvar_8, _mtl_u._WorldSpaceLightPos0.xyz));
  float3 tmpvar_17;
  float4 tmpvar_18;
  float4 tmpvar_19;
  tmpvar_17 = float3(i_posWorld_2);
  tmpvar_18 = float4(_mtl_u.unity_SpecCube0_HDR);
  tmpvar_19 = float4(_mtl_u.unity_SpecCube1_HDR);
  half tmpvar_20;
  tmpvar_20 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_21;
  tmpvar_21 = (tmpvar_9 - ((half)2.0 * (
    dot (tmpvar_8, tmpvar_9)
   * tmpvar_8)));
  half3 tmpvar_22;
  half3 tmpvar_23;
  tmpvar_23 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_24;
  ambient_24 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_25;
  ambient_contrib_25 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_26;
    tmpvar_26.w = half(1.0);
    tmpvar_26.xyz = tmpvar_8;
    half3 x1_27;
    half4 SHAb_28;
    half4 SHAg_29;
    half4 SHAr_30;
    float3 texCoord_31;
    float3 tmpvar_32;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_33;
      tmpvar_33.w = 1.0;
      tmpvar_33.xyz = tmpvar_17;
      tmpvar_32 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_33).xyz;
    } else {
      tmpvar_32 = tmpvar_17;
    };
    float3 tmpvar_34;
    tmpvar_34 = ((tmpvar_32 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_31.yz = tmpvar_34.yz;
    texCoord_31.x = (tmpvar_34.x * 0.25);
    float tmpvar_35;
    float tmpvar_36;
    tmpvar_36 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_35 = clamp (texCoord_31.x, tmpvar_36, (0.25 - tmpvar_36));
    texCoord_31.x = tmpvar_35;
    half4 tmpvar_37;
    tmpvar_37 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_31));
    SHAr_30 = tmpvar_37;
    texCoord_31.x = (tmpvar_35 + 0.25);
    half4 tmpvar_38;
    tmpvar_38 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_31));
    SHAg_29 = tmpvar_38;
    texCoord_31.x = (tmpvar_35 + 0.5);
    half4 tmpvar_39;
    tmpvar_39 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_31));
    SHAb_28 = tmpvar_39;
    x1_27.x = dot (SHAr_30, tmpvar_26);
    x1_27.y = dot (SHAg_29, tmpvar_26);
    x1_27.z = dot (SHAb_28, tmpvar_26);
    ambient_contrib_25 = x1_27;
  } else {
    half4 tmpvar_40;
    tmpvar_40.w = half(1.0);
    tmpvar_40.xyz = tmpvar_8;
    half3 x_41;
    x_41.x = dot (_mtl_u.unity_SHAr, tmpvar_40);
    x_41.y = dot (_mtl_u.unity_SHAg, tmpvar_40);
    x_41.z = dot (_mtl_u.unity_SHAb, tmpvar_40);
    ambient_contrib_25 = x_41;
  };
  half3 tmpvar_42;
  tmpvar_42 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_25));
  ambient_24 = tmpvar_42;
  bool tmpvar_43;
  tmpvar_43 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_43) {
    ambient_24 = max ((((half)1.055 * 
      pow (max (tmpvar_42, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_23 = (ambient_24 * tmpvar_15);
  tmpvar_22 = half3(float3(0.0, 0.0, 0.0));
  half3 specular_44;
  half3 worldRefl_45;
  worldRefl_45 = tmpvar_21;
  float3 worldPos_46;
  worldPos_46 = tmpvar_17;
  if ((_mtl_u.unity_SpecCube0_ProbePosition.w > 0.0)) {
    half3 rbmin_47;
    half3 rbmax_48;
    half3 tmpvar_49;
    tmpvar_49 = normalize(tmpvar_21);
    float3 tmpvar_50;
    tmpvar_50 = ((_mtl_u.unity_SpecCube0_BoxMax.xyz - tmpvar_17) / (float3)tmpvar_49);
    rbmax_48 = half3(tmpvar_50);
    float3 tmpvar_51;
    tmpvar_51 = ((_mtl_u.unity_SpecCube0_BoxMin.xyz - tmpvar_17) / (float3)tmpvar_49);
    rbmin_47 = half3(tmpvar_51);
    bool3 tmpvar_52;
    tmpvar_52 = (tmpvar_49 > (half3)float3(0.0, 0.0, 0.0));
    half tmpvar_53;
    if (tmpvar_52.x) {
      tmpvar_53 = rbmax_48.x;
    } else {
      tmpvar_53 = rbmin_47.x;
    };
    half tmpvar_54;
    if (tmpvar_52.y) {
      tmpvar_54 = rbmax_48.y;
    } else {
      tmpvar_54 = rbmin_47.y;
    };
    half tmpvar_55;
    if (tmpvar_52.z) {
      tmpvar_55 = rbmax_48.z;
    } else {
      tmpvar_55 = rbmin_47.z;
    };
    worldPos_46 = (tmpvar_17 - _mtl_u.unity_SpecCube0_ProbePosition.xyz);
    worldRefl_45 = half3((worldPos_46 + (float3)(tmpvar_49 * min (
      min (tmpvar_53, tmpvar_54)
    , tmpvar_55))));
  };
  half4 hdr_56;
  hdr_56 = half4(tmpvar_18);
  half4 tmpvar_57;
  tmpvar_57.xyz = worldRefl_45;
  tmpvar_57.w = ((tmpvar_20 * ((half)1.7 - 
    ((half)0.7 * tmpvar_20)
  )) * (half)6.0);
  half4 tmpvar_58;
  tmpvar_58 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(worldRefl_45), level(tmpvar_57.w));
  half4 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  half3 tmpvar_60;
  tmpvar_60 = ((hdr_56.x * pow (tmpvar_59.w, hdr_56.y)) * tmpvar_59.xyz);
  if ((_mtl_u.unity_SpecCube0_BoxMin.w < 0.99999)) {
    half3 worldRefl_61;
    worldRefl_61 = tmpvar_21;
    float3 worldPos_62;
    worldPos_62 = tmpvar_17;
    if ((_mtl_u.unity_SpecCube1_ProbePosition.w > 0.0)) {
      half3 rbmin_63;
      half3 rbmax_64;
      half3 tmpvar_65;
      tmpvar_65 = normalize(tmpvar_21);
      float3 tmpvar_66;
      tmpvar_66 = ((_mtl_u.unity_SpecCube1_BoxMax.xyz - tmpvar_17) / (float3)tmpvar_65);
      rbmax_64 = half3(tmpvar_66);
      float3 tmpvar_67;
      tmpvar_67 = ((_mtl_u.unity_SpecCube1_BoxMin.xyz - tmpvar_17) / (float3)tmpvar_65);
      rbmin_63 = half3(tmpvar_67);
      bool3 tmpvar_68;
      tmpvar_68 = (tmpvar_65 > (half3)float3(0.0, 0.0, 0.0));
      half tmpvar_69;
      if (tmpvar_68.x) {
        tmpvar_69 = rbmax_64.x;
      } else {
        tmpvar_69 = rbmin_63.x;
      };
      half tmpvar_70;
      if (tmpvar_68.y) {
        tmpvar_70 = rbmax_64.y;
      } else {
        tmpvar_70 = rbmin_63.y;
      };
      half tmpvar_71;
      if (tmpvar_68.z) {
        tmpvar_71 = rbmax_64.z;
      } else {
        tmpvar_71 = rbmin_63.z;
      };
      worldPos_62 = (tmpvar_17 - _mtl_u.unity_SpecCube1_ProbePosition.xyz);
      worldRefl_61 = half3((worldPos_62 + (float3)(tmpvar_65 * min (
        min (tmpvar_69, tmpvar_70)
      , tmpvar_71))));
    };
    half4 hdr_72;
    hdr_72 = half4(tmpvar_19);
    half4 tmpvar_73;
    tmpvar_73.xyz = worldRefl_61;
    tmpvar_73.w = ((tmpvar_20 * ((half)1.7 - 
      ((half)0.7 * tmpvar_20)
    )) * (half)6.0);
    half4 tmpvar_74;
    tmpvar_74 = unity_SpecCube1.sample(_mtlsmp_unity_SpecCube1, (float3)(worldRefl_61), level(tmpvar_73.w));
    half4 tmpvar_75;
    tmpvar_75 = tmpvar_74;
    half3 tmpvar_76;
    tmpvar_76 = ((hdr_72.x * pow (tmpvar_75.w, hdr_72.y)) * tmpvar_75.xyz);
    float3 tmpvar_77;
    tmpvar_77 = mix ((float3)tmpvar_76, (float3)tmpvar_60, _mtl_u.unity_SpecCube0_BoxMin.www);
    specular_44 = half3(tmpvar_77);
  } else {
    specular_44 = tmpvar_60;
  };
  tmpvar_22 = (specular_44 * tmpvar_15);
  half3 viewDir_78;
  viewDir_78 = -(tmpvar_9);
  half surfaceReduction_79;
  half specularTerm_80;
  half tmpvar_81;
  tmpvar_81 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_82;
  half3 inVec_83;
  inVec_83 = (_mtl_u._WorldSpaceLightPos0.xyz + viewDir_78);
  tmpvar_82 = (inVec_83 * rsqrt(max ((half)0.001, 
    dot (inVec_83, inVec_83)
  )));
  half tmpvar_84;
  tmpvar_84 = max ((half)0.0, dot (tmpvar_8, tmpvar_82));
  half tmpvar_85;
  tmpvar_85 = max ((half)0.0, dot (tmpvar_8, viewDir_78));
  half tmpvar_86;
  tmpvar_86 = max ((half)0.0, dot (_mtl_u._WorldSpaceLightPos0.xyz, tmpvar_82));
  half tmpvar_87;
  tmpvar_87 = (tmpvar_81 * tmpvar_81);
  half tmpvar_88;
  tmpvar_88 = (tmpvar_81 * tmpvar_81);
  half tmpvar_89;
  tmpvar_89 = (tmpvar_88 * tmpvar_88);
  half tmpvar_90;
  tmpvar_90 = (((tmpvar_84 * tmpvar_84) * (tmpvar_89 - (half)1.0)) + (half)1.0);
  half x_91;
  x_91 = ((half)1.0 - tmpvar_16);
  half x_92;
  x_92 = ((half)1.0 - tmpvar_85);
  half tmpvar_93;
  tmpvar_93 = ((half)0.5 + (((half)2.0 * tmpvar_86) * (tmpvar_86 * tmpvar_81)));
  half tmpvar_94;
  tmpvar_94 = (((half)1.0 + (
    (tmpvar_93 - (half)1.0)
   * 
    ((x_91 * x_91) * ((x_91 * x_91) * x_91))
  )) * ((half)1.0 + (
    (tmpvar_93 - (half)1.0)
   * 
    ((x_92 * x_92) * ((x_92 * x_92) * x_92))
  )));
  half tmpvar_95;
  tmpvar_95 = ((((half)2.0 / 
    (((tmpvar_16 * (
      (tmpvar_85 * ((half)1.0 - tmpvar_87))
     + tmpvar_87)) + (tmpvar_85 * (
      (tmpvar_16 * ((half)1.0 - tmpvar_87))
     + tmpvar_87))) + (half)1e-05)
  ) * (tmpvar_89 / 
    ((((half)3.141593 * tmpvar_90) * tmpvar_90) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_80 = tmpvar_95;
  bool tmpvar_96;
  tmpvar_96 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_96) {
    specularTerm_80 = sqrt(max ((half)0.0001, tmpvar_95));
  };
  half tmpvar_97;
  tmpvar_97 = max ((half)0.0, (specularTerm_80 * tmpvar_16));
  specularTerm_80 = tmpvar_97;
  half tmpvar_98;
  tmpvar_98 = (tmpvar_94 * tmpvar_16);
  half tmpvar_99;
  tmpvar_99 = (tmpvar_81 * tmpvar_81);
  bool tmpvar_100;
  tmpvar_100 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_100) {
    surfaceReduction_79 = ((half)1.0 - (((half)0.28 * tmpvar_99) * tmpvar_81));
  } else {
    surfaceReduction_79 = ((half)1.0/(((tmpvar_99 * tmpvar_99) + (half)1.0)));
  };
  bool3 tmpvar_101;
  tmpvar_101 = bool3(tmpvar_6);
  bool tmpvar_102;
  tmpvar_102 = any(tmpvar_101);
  float tmpvar_103;
  if (tmpvar_102) {
    tmpvar_103 = 1.0;
  } else {
    tmpvar_103 = 0.0;
  };
  specularTerm_80 = (tmpvar_97 * (half)tmpvar_103);
  half x_104;
  x_104 = ((half)1.0 - tmpvar_86);
  half x_105;
  x_105 = ((half)1.0 - tmpvar_85);
  half3 tmpvar_106;
  tmpvar_106 = (((diffColor_10 * 
    (tmpvar_23 + (tmpvar_12 * tmpvar_98))
  ) + (
    (specularTerm_80 * tmpvar_12)
   * 
    (tmpvar_6 + (((half)1.0 - tmpvar_6) * ((x_104 * x_104) * (
      (x_104 * x_104)
     * x_104))))
  )) + ((surfaceReduction_79 * tmpvar_22) * mix (tmpvar_6, half3(
    clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_7)), (half)0.0, (half)1.0)
  ), half3(
    ((x_105 * x_105) * ((x_105 * x_105) * x_105))
  ))));
  half4 tmpvar_107;
  tmpvar_107.w = half(1.0);
  tmpvar_107.xyz = tmpvar_106;
  c_1.w = tmpvar_107.w;
  c_1.xyz = tmpvar_106;
  c_1.xyz = c_1.xyz;
  half4 xlat_varoutput_108;
  xlat_varoutput_108.xyz = c_1.xyz;
  xlat_varoutput_108.w = outModifiedAlpha_11;
  _mtl_o._glesFragData_0 = xlat_varoutput_108;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 178 math, 6 textures, 12 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_DynamicLightmap] 2D 0
SetTexture 1 [unity_DynamicDirectionality] 2D 1
SetTexture 2 [unity_SpecCube0] CUBE 2
SetTexture 3 [unity_SpecCube1] CUBE 3
SetTexture 4 [_MainTex] 2D 4
SetTexture 5 [_OcclusionMap] 2D 5
ConstBuffer "$Globals" 182
VectorHalf 0 [_WorldSpaceLightPos0] 4
Vector 16 [unity_SpecCube0_BoxMax]
Vector 32 [unity_SpecCube0_BoxMin]
Vector 48 [unity_SpecCube0_ProbePosition]
VectorHalf 64 [unity_SpecCube0_HDR] 4
Vector 80 [unity_SpecCube1_BoxMax]
Vector 96 [unity_SpecCube1_BoxMin]
Vector 112 [unity_SpecCube1_ProbePosition]
VectorHalf 128 [unity_SpecCube1_HDR] 4
VectorHalf 136 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 144 [unity_ColorSpaceLuminance] 4
VectorHalf 152 [unity_DynamicLightmap_HDR] 4
VectorHalf 160 [_LightColor0] 4
VectorHalf 168 [_Color] 4
ScalarHalf 176 [_Metallic]
ScalarHalf 178 [_Glossiness]
ScalarHalf 180 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  float4 unity_SpecCube0_BoxMax;
  float4 unity_SpecCube0_BoxMin;
  float4 unity_SpecCube0_ProbePosition;
  half4 unity_SpecCube0_HDR;
  float4 unity_SpecCube1_BoxMax;
  float4 unity_SpecCube1_BoxMin;
  float4 unity_SpecCube1_ProbePosition;
  half4 unity_SpecCube1_HDR;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 unity_DynamicLightmap_HDR;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_DynamicLightmap [[texture(0)]], sampler _mtlsmp_unity_DynamicLightmap [[sampler(0)]]
  ,   texture2d<half> unity_DynamicDirectionality [[texture(1)]], sampler _mtlsmp_unity_DynamicDirectionality [[sampler(1)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(2)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(2)]]
  ,   texturecube<half> unity_SpecCube1 [[texture(3)]], sampler _mtlsmp_unity_SpecCube1 [[sampler(3)]]
  ,   texture2d<half> _MainTex [[texture(4)]], sampler _mtlsmp__MainTex [[sampler(4)]]
  ,   texture2d<half> _OcclusionMap [[texture(5)]], sampler _mtlsmp__OcclusionMap [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD8);
  half tmpvar_3;
  half4 tmpvar_4;
  tmpvar_4 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_3 = (tmpvar_4.w * _mtl_u._Color.w);
  half3 tmpvar_5;
  tmpvar_5 = (_mtl_u._Color.xyz * tmpvar_4.xyz);
  half3 tmpvar_6;
  tmpvar_6 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, half3(_mtl_u._Metallic));
  half tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 diffColor_10;
  half outModifiedAlpha_11;
  diffColor_10 = ((tmpvar_5 * tmpvar_7) * tmpvar_3);
  outModifiedAlpha_11 = (((half)1.0 - tmpvar_7) + (tmpvar_3 * tmpvar_7));
  half3 tmpvar_12;
  tmpvar_12 = _mtl_u._LightColor0.xyz;
  half occ_13;
  half tmpvar_14;
  tmpvar_14 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_13 = tmpvar_14;
  half tmpvar_15;
  tmpvar_15 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_13 * _mtl_u._OcclusionStrength));
  half tmpvar_16;
  tmpvar_16 = max ((half)0.0, dot (tmpvar_8, _mtl_u._WorldSpaceLightPos0.xyz));
  float3 tmpvar_17;
  float4 tmpvar_18;
  float4 tmpvar_19;
  float4 tmpvar_20;
  tmpvar_17 = float3(i_posWorld_2);
  tmpvar_18 = float4(_mtl_i.xlv_TEXCOORD5);
  tmpvar_19 = float4(_mtl_u.unity_SpecCube0_HDR);
  tmpvar_20 = float4(_mtl_u.unity_SpecCube1_HDR);
  half3 tmpvar_21;
  half4 realtimeDirTex_22;
  half3 tmpvar_23;
  half4 tmpvar_24;
  tmpvar_24 = unity_DynamicLightmap.sample(_mtlsmp_unity_DynamicLightmap, (float2)(tmpvar_18.zw));
  half4 tmpvar_25;
  tmpvar_25 = unity_DynamicDirectionality.sample(_mtlsmp_unity_DynamicDirectionality, (float2)(tmpvar_18.zw));
  realtimeDirTex_22 = tmpvar_25;
  half4 dirTex_26;
  dirTex_26 = realtimeDirTex_22;
  half3 y_27;
  y_27 = (dirTex_26.xyz - (half)0.5);
  half tmpvar_28;
  tmpvar_28 = max ((half)0.0001, dirTex_26.w);
  tmpvar_23 = ((pow (
    ((_mtl_u.unity_DynamicLightmap_HDR.x * tmpvar_24.w) * tmpvar_24.xyz)
  , _mtl_u.unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_8, y_27)
   + (half)0.5)) / tmpvar_28);
  tmpvar_23 = (tmpvar_23 * tmpvar_15);
  tmpvar_21 = half3(float3(0.0, 0.0, 0.0));
  half tmpvar_29;
  half3 tmpvar_30;
  tmpvar_29 = ((half)1.0 - _mtl_u._Glossiness);
  tmpvar_30 = (tmpvar_9 - ((half)2.0 * (
    dot (tmpvar_8, tmpvar_9)
   * tmpvar_8)));
  half3 originalReflUVW_31;
  half3 specular_32;
  originalReflUVW_31 = tmpvar_30;
  half3 worldRefl_33;
  worldRefl_33 = tmpvar_30;
  float3 worldPos_34;
  worldPos_34 = tmpvar_17;
  if ((_mtl_u.unity_SpecCube0_ProbePosition.w > 0.0)) {
    half3 rbmin_35;
    half3 rbmax_36;
    half3 tmpvar_37;
    tmpvar_37 = normalize(tmpvar_30);
    float3 tmpvar_38;
    tmpvar_38 = ((_mtl_u.unity_SpecCube0_BoxMax.xyz - tmpvar_17) / (float3)tmpvar_37);
    rbmax_36 = half3(tmpvar_38);
    float3 tmpvar_39;
    tmpvar_39 = ((_mtl_u.unity_SpecCube0_BoxMin.xyz - tmpvar_17) / (float3)tmpvar_37);
    rbmin_35 = half3(tmpvar_39);
    bool3 tmpvar_40;
    tmpvar_40 = (tmpvar_37 > (half3)float3(0.0, 0.0, 0.0));
    half tmpvar_41;
    if (tmpvar_40.x) {
      tmpvar_41 = rbmax_36.x;
    } else {
      tmpvar_41 = rbmin_35.x;
    };
    half tmpvar_42;
    if (tmpvar_40.y) {
      tmpvar_42 = rbmax_36.y;
    } else {
      tmpvar_42 = rbmin_35.y;
    };
    half tmpvar_43;
    if (tmpvar_40.z) {
      tmpvar_43 = rbmax_36.z;
    } else {
      tmpvar_43 = rbmin_35.z;
    };
    worldPos_34 = (tmpvar_17 - _mtl_u.unity_SpecCube0_ProbePosition.xyz);
    worldRefl_33 = half3((worldPos_34 + (float3)(tmpvar_37 * min (
      min (tmpvar_41, tmpvar_42)
    , tmpvar_43))));
  };
  tmpvar_30 = worldRefl_33;
  half4 hdr_44;
  hdr_44 = half4(tmpvar_19);
  half4 tmpvar_45;
  tmpvar_45.xyz = worldRefl_33;
  tmpvar_45.w = ((tmpvar_29 * ((half)1.7 - 
    ((half)0.7 * tmpvar_29)
  )) * (half)6.0);
  half4 tmpvar_46;
  tmpvar_46 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(worldRefl_33), level(tmpvar_45.w));
  half4 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  half3 tmpvar_48;
  tmpvar_48 = ((hdr_44.x * pow (tmpvar_47.w, hdr_44.y)) * tmpvar_47.xyz);
  if ((_mtl_u.unity_SpecCube0_BoxMin.w < 0.99999)) {
    half3 worldRefl_49;
    worldRefl_49 = originalReflUVW_31;
    float3 worldPos_50;
    worldPos_50 = tmpvar_17;
    if ((_mtl_u.unity_SpecCube1_ProbePosition.w > 0.0)) {
      half3 rbmin_51;
      half3 rbmax_52;
      half3 tmpvar_53;
      tmpvar_53 = normalize(originalReflUVW_31);
      float3 tmpvar_54;
      tmpvar_54 = ((_mtl_u.unity_SpecCube1_BoxMax.xyz - tmpvar_17) / (float3)tmpvar_53);
      rbmax_52 = half3(tmpvar_54);
      float3 tmpvar_55;
      tmpvar_55 = ((_mtl_u.unity_SpecCube1_BoxMin.xyz - tmpvar_17) / (float3)tmpvar_53);
      rbmin_51 = half3(tmpvar_55);
      bool3 tmpvar_56;
      tmpvar_56 = (tmpvar_53 > (half3)float3(0.0, 0.0, 0.0));
      half tmpvar_57;
      if (tmpvar_56.x) {
        tmpvar_57 = rbmax_52.x;
      } else {
        tmpvar_57 = rbmin_51.x;
      };
      half tmpvar_58;
      if (tmpvar_56.y) {
        tmpvar_58 = rbmax_52.y;
      } else {
        tmpvar_58 = rbmin_51.y;
      };
      half tmpvar_59;
      if (tmpvar_56.z) {
        tmpvar_59 = rbmax_52.z;
      } else {
        tmpvar_59 = rbmin_51.z;
      };
      worldPos_50 = (tmpvar_17 - _mtl_u.unity_SpecCube1_ProbePosition.xyz);
      worldRefl_49 = half3((worldPos_50 + (float3)(tmpvar_53 * min (
        min (tmpvar_57, tmpvar_58)
      , tmpvar_59))));
    };
    tmpvar_30 = worldRefl_49;
    half4 hdr_60;
    hdr_60 = half4(tmpvar_20);
    half4 tmpvar_61;
    tmpvar_61.xyz = worldRefl_49;
    tmpvar_61.w = ((tmpvar_29 * ((half)1.7 - 
      ((half)0.7 * tmpvar_29)
    )) * (half)6.0);
    half4 tmpvar_62;
    tmpvar_62 = unity_SpecCube1.sample(_mtlsmp_unity_SpecCube1, (float3)(worldRefl_49), level(tmpvar_61.w));
    half4 tmpvar_63;
    tmpvar_63 = tmpvar_62;
    half3 tmpvar_64;
    tmpvar_64 = ((hdr_60.x * pow (tmpvar_63.w, hdr_60.y)) * tmpvar_63.xyz);
    float3 tmpvar_65;
    tmpvar_65 = mix ((float3)tmpvar_64, (float3)tmpvar_48, _mtl_u.unity_SpecCube0_BoxMin.www);
    specular_32 = half3(tmpvar_65);
  } else {
    specular_32 = tmpvar_48;
  };
  tmpvar_21 = (specular_32 * tmpvar_15);
  half3 viewDir_66;
  viewDir_66 = -(tmpvar_9);
  half surfaceReduction_67;
  half specularTerm_68;
  half tmpvar_69;
  tmpvar_69 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_70;
  half3 inVec_71;
  inVec_71 = (_mtl_u._WorldSpaceLightPos0.xyz + viewDir_66);
  tmpvar_70 = (inVec_71 * rsqrt(max ((half)0.001, 
    dot (inVec_71, inVec_71)
  )));
  half tmpvar_72;
  tmpvar_72 = max ((half)0.0, dot (tmpvar_8, tmpvar_70));
  half tmpvar_73;
  tmpvar_73 = max ((half)0.0, dot (tmpvar_8, viewDir_66));
  half tmpvar_74;
  tmpvar_74 = max ((half)0.0, dot (_mtl_u._WorldSpaceLightPos0.xyz, tmpvar_70));
  half tmpvar_75;
  tmpvar_75 = (tmpvar_69 * tmpvar_69);
  half tmpvar_76;
  tmpvar_76 = (tmpvar_69 * tmpvar_69);
  half tmpvar_77;
  tmpvar_77 = (tmpvar_76 * tmpvar_76);
  half tmpvar_78;
  tmpvar_78 = (((tmpvar_72 * tmpvar_72) * (tmpvar_77 - (half)1.0)) + (half)1.0);
  half x_79;
  x_79 = ((half)1.0 - tmpvar_16);
  half x_80;
  x_80 = ((half)1.0 - tmpvar_73);
  half tmpvar_81;
  tmpvar_81 = ((half)0.5 + (((half)2.0 * tmpvar_74) * (tmpvar_74 * tmpvar_69)));
  half tmpvar_82;
  tmpvar_82 = (((half)1.0 + (
    (tmpvar_81 - (half)1.0)
   * 
    ((x_79 * x_79) * ((x_79 * x_79) * x_79))
  )) * ((half)1.0 + (
    (tmpvar_81 - (half)1.0)
   * 
    ((x_80 * x_80) * ((x_80 * x_80) * x_80))
  )));
  half tmpvar_83;
  tmpvar_83 = ((((half)2.0 / 
    (((tmpvar_16 * (
      (tmpvar_73 * ((half)1.0 - tmpvar_75))
     + tmpvar_75)) + (tmpvar_73 * (
      (tmpvar_16 * ((half)1.0 - tmpvar_75))
     + tmpvar_75))) + (half)1e-05)
  ) * (tmpvar_77 / 
    ((((half)3.141593 * tmpvar_78) * tmpvar_78) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_68 = tmpvar_83;
  bool tmpvar_84;
  tmpvar_84 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_84) {
    specularTerm_68 = sqrt(max ((half)0.0001, tmpvar_83));
  };
  half tmpvar_85;
  tmpvar_85 = max ((half)0.0, (specularTerm_68 * tmpvar_16));
  specularTerm_68 = tmpvar_85;
  half tmpvar_86;
  tmpvar_86 = (tmpvar_82 * tmpvar_16);
  half tmpvar_87;
  tmpvar_87 = (tmpvar_69 * tmpvar_69);
  bool tmpvar_88;
  tmpvar_88 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_88) {
    surfaceReduction_67 = ((half)1.0 - (((half)0.28 * tmpvar_87) * tmpvar_69));
  } else {
    surfaceReduction_67 = ((half)1.0/(((tmpvar_87 * tmpvar_87) + (half)1.0)));
  };
  bool3 tmpvar_89;
  tmpvar_89 = bool3(tmpvar_6);
  bool tmpvar_90;
  tmpvar_90 = any(tmpvar_89);
  float tmpvar_91;
  if (tmpvar_90) {
    tmpvar_91 = 1.0;
  } else {
    tmpvar_91 = 0.0;
  };
  specularTerm_68 = (tmpvar_85 * (half)tmpvar_91);
  half x_92;
  x_92 = ((half)1.0 - tmpvar_74);
  half x_93;
  x_93 = ((half)1.0 - tmpvar_73);
  half3 tmpvar_94;
  tmpvar_94 = (((diffColor_10 * 
    (tmpvar_23 + (tmpvar_12 * tmpvar_86))
  ) + (
    (specularTerm_68 * tmpvar_12)
   * 
    (tmpvar_6 + (((half)1.0 - tmpvar_6) * ((x_92 * x_92) * (
      (x_92 * x_92)
     * x_92))))
  )) + ((surfaceReduction_67 * tmpvar_21) * mix (tmpvar_6, half3(
    clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_7)), (half)0.0, (half)1.0)
  ), half3(
    ((x_93 * x_93) * ((x_93 * x_93) * x_93))
  ))));
  half4 tmpvar_95;
  tmpvar_95.w = half(1.0);
  tmpvar_95.xyz = tmpvar_94;
  c_1.w = tmpvar_95.w;
  c_1.xyz = tmpvar_94;
  c_1.xyz = c_1.xyz;
  half4 xlat_varoutput_96;
  xlat_varoutput_96.xyz = c_1.xyz;
  xlat_varoutput_96.w = outModifiedAlpha_11;
  _mtl_o._glesFragData_0 = xlat_varoutput_96;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 200 math, 8 textures, 15 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_SpecCube0] CUBE 0
SetTexture 1 [unity_SpecCube1] CUBE 1
SetTexture 2 [unity_ProbeVolumeSH] 3D 2
SetTexture 3 [_MainTex] 2D 3
SetTexture 4 [_OcclusionMap] 2D 4
SetTexture 5 [_ShadowMapTexture] 2D 5
ConstBuffer "$Globals" 310
Matrix 176 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_SHAr] 4
VectorHalf 16 [unity_SHAg] 4
VectorHalf 24 [unity_SHAb] 4
Vector 32 [unity_SpecCube0_BoxMax]
Vector 48 [unity_SpecCube0_BoxMin]
Vector 64 [unity_SpecCube0_ProbePosition]
VectorHalf 80 [unity_SpecCube0_HDR] 4
Vector 96 [unity_SpecCube1_BoxMax]
Vector 112 [unity_SpecCube1_BoxMin]
Vector 128 [unity_SpecCube1_ProbePosition]
VectorHalf 144 [unity_SpecCube1_HDR] 4
Vector 160 [unity_ProbeVolumeParams]
Vector 240 [unity_ProbeVolumeSizeInv] 3
Vector 256 [unity_ProbeVolumeMin] 3
VectorHalf 272 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 280 [unity_ColorSpaceLuminance] 4
VectorHalf 288 [_LightColor0] 4
VectorHalf 296 [_Color] 4
ScalarHalf 304 [_Metallic]
ScalarHalf 306 [_Glossiness]
ScalarHalf 308 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_SpecCube0_BoxMax;
  float4 unity_SpecCube0_BoxMin;
  float4 unity_SpecCube0_ProbePosition;
  half4 unity_SpecCube0_HDR;
  float4 unity_SpecCube1_BoxMax;
  float4 unity_SpecCube1_BoxMin;
  float4 unity_SpecCube1_ProbePosition;
  half4 unity_SpecCube1_HDR;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(0)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(0)]]
  ,   texturecube<half> unity_SpecCube1 [[texture(1)]], sampler _mtlsmp_unity_SpecCube1 [[sampler(1)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(2)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(2)]]
  ,   texture2d<half> _MainTex [[texture(3)]], sampler _mtlsmp__MainTex [[sampler(3)]]
  ,   texture2d<half> _OcclusionMap [[texture(4)]], sampler _mtlsmp__OcclusionMap [[sampler(4)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(5)]], sampler _mtlsmp__ShadowMapTexture [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half atten_2;
  half3 i_posWorld_3;
  i_posWorld_3 = half3(_mtl_i.xlv_TEXCOORD8);
  half tmpvar_4;
  half4 tmpvar_5;
  tmpvar_5 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_4 = (tmpvar_5.w * _mtl_u._Color.w);
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_5.xyz);
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  half tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 diffColor_11;
  half outModifiedAlpha_12;
  diffColor_11 = ((tmpvar_6 * tmpvar_8) * tmpvar_4);
  outModifiedAlpha_12 = (((half)1.0 - tmpvar_8) + (tmpvar_4 * tmpvar_8));
  half3 tmpvar_13;
  tmpvar_13 = _mtl_u._LightColor0.xyz;
  half tmpvar_14;
  tmpvar_14 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  atten_2 = tmpvar_14;
  half occ_15;
  half tmpvar_16;
  tmpvar_16 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_15 = tmpvar_16;
  half tmpvar_17;
  tmpvar_17 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_15 * _mtl_u._OcclusionStrength));
  half tmpvar_18;
  tmpvar_18 = max ((half)0.0, dot (tmpvar_9, _mtl_u._WorldSpaceLightPos0.xyz));
  float3 tmpvar_19;
  float4 tmpvar_20;
  float4 tmpvar_21;
  tmpvar_19 = float3(i_posWorld_3);
  tmpvar_20 = float4(_mtl_u.unity_SpecCube0_HDR);
  tmpvar_21 = float4(_mtl_u.unity_SpecCube1_HDR);
  half tmpvar_22;
  tmpvar_22 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_23;
  tmpvar_23 = (tmpvar_10 - ((half)2.0 * (
    dot (tmpvar_9, tmpvar_10)
   * tmpvar_9)));
  half3 tmpvar_24;
  half3 tmpvar_25;
  half3 tmpvar_26;
  tmpvar_26 = half3(float3(0.0, 0.0, 0.0));
  tmpvar_25 = (tmpvar_13 * atten_2);
  half3 ambient_27;
  ambient_27 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_28;
  ambient_contrib_28 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_29;
    tmpvar_29.w = half(1.0);
    tmpvar_29.xyz = tmpvar_9;
    half3 x1_30;
    half4 SHAb_31;
    half4 SHAg_32;
    half4 SHAr_33;
    float3 texCoord_34;
    float3 tmpvar_35;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_36;
      tmpvar_36.w = 1.0;
      tmpvar_36.xyz = tmpvar_19;
      tmpvar_35 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_36).xyz;
    } else {
      tmpvar_35 = tmpvar_19;
    };
    float3 tmpvar_37;
    tmpvar_37 = ((tmpvar_35 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_34.yz = tmpvar_37.yz;
    texCoord_34.x = (tmpvar_37.x * 0.25);
    float tmpvar_38;
    float tmpvar_39;
    tmpvar_39 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_38 = clamp (texCoord_34.x, tmpvar_39, (0.25 - tmpvar_39));
    texCoord_34.x = tmpvar_38;
    half4 tmpvar_40;
    tmpvar_40 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_34));
    SHAr_33 = tmpvar_40;
    texCoord_34.x = (tmpvar_38 + 0.25);
    half4 tmpvar_41;
    tmpvar_41 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_34));
    SHAg_32 = tmpvar_41;
    texCoord_34.x = (tmpvar_38 + 0.5);
    half4 tmpvar_42;
    tmpvar_42 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_34));
    SHAb_31 = tmpvar_42;
    x1_30.x = dot (SHAr_33, tmpvar_29);
    x1_30.y = dot (SHAg_32, tmpvar_29);
    x1_30.z = dot (SHAb_31, tmpvar_29);
    ambient_contrib_28 = x1_30;
  } else {
    half4 tmpvar_43;
    tmpvar_43.w = half(1.0);
    tmpvar_43.xyz = tmpvar_9;
    half3 x_44;
    x_44.x = dot (_mtl_u.unity_SHAr, tmpvar_43);
    x_44.y = dot (_mtl_u.unity_SHAg, tmpvar_43);
    x_44.z = dot (_mtl_u.unity_SHAb, tmpvar_43);
    ambient_contrib_28 = x_44;
  };
  half3 tmpvar_45;
  tmpvar_45 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_28));
  ambient_27 = tmpvar_45;
  bool tmpvar_46;
  tmpvar_46 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_46) {
    ambient_27 = max ((((half)1.055 * 
      pow (max (tmpvar_45, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_26 = (ambient_27 * tmpvar_17);
  tmpvar_24 = half3(float3(0.0, 0.0, 0.0));
  half3 specular_47;
  half3 worldRefl_48;
  worldRefl_48 = tmpvar_23;
  float3 worldPos_49;
  worldPos_49 = tmpvar_19;
  if ((_mtl_u.unity_SpecCube0_ProbePosition.w > 0.0)) {
    half3 rbmin_50;
    half3 rbmax_51;
    half3 tmpvar_52;
    tmpvar_52 = normalize(tmpvar_23);
    float3 tmpvar_53;
    tmpvar_53 = ((_mtl_u.unity_SpecCube0_BoxMax.xyz - tmpvar_19) / (float3)tmpvar_52);
    rbmax_51 = half3(tmpvar_53);
    float3 tmpvar_54;
    tmpvar_54 = ((_mtl_u.unity_SpecCube0_BoxMin.xyz - tmpvar_19) / (float3)tmpvar_52);
    rbmin_50 = half3(tmpvar_54);
    bool3 tmpvar_55;
    tmpvar_55 = (tmpvar_52 > (half3)float3(0.0, 0.0, 0.0));
    half tmpvar_56;
    if (tmpvar_55.x) {
      tmpvar_56 = rbmax_51.x;
    } else {
      tmpvar_56 = rbmin_50.x;
    };
    half tmpvar_57;
    if (tmpvar_55.y) {
      tmpvar_57 = rbmax_51.y;
    } else {
      tmpvar_57 = rbmin_50.y;
    };
    half tmpvar_58;
    if (tmpvar_55.z) {
      tmpvar_58 = rbmax_51.z;
    } else {
      tmpvar_58 = rbmin_50.z;
    };
    worldPos_49 = (tmpvar_19 - _mtl_u.unity_SpecCube0_ProbePosition.xyz);
    worldRefl_48 = half3((worldPos_49 + (float3)(tmpvar_52 * min (
      min (tmpvar_56, tmpvar_57)
    , tmpvar_58))));
  };
  half4 hdr_59;
  hdr_59 = half4(tmpvar_20);
  half4 tmpvar_60;
  tmpvar_60.xyz = worldRefl_48;
  tmpvar_60.w = ((tmpvar_22 * ((half)1.7 - 
    ((half)0.7 * tmpvar_22)
  )) * (half)6.0);
  half4 tmpvar_61;
  tmpvar_61 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(worldRefl_48), level(tmpvar_60.w));
  half4 tmpvar_62;
  tmpvar_62 = tmpvar_61;
  half3 tmpvar_63;
  tmpvar_63 = ((hdr_59.x * pow (tmpvar_62.w, hdr_59.y)) * tmpvar_62.xyz);
  if ((_mtl_u.unity_SpecCube0_BoxMin.w < 0.99999)) {
    half3 worldRefl_64;
    worldRefl_64 = tmpvar_23;
    float3 worldPos_65;
    worldPos_65 = tmpvar_19;
    if ((_mtl_u.unity_SpecCube1_ProbePosition.w > 0.0)) {
      half3 rbmin_66;
      half3 rbmax_67;
      half3 tmpvar_68;
      tmpvar_68 = normalize(tmpvar_23);
      float3 tmpvar_69;
      tmpvar_69 = ((_mtl_u.unity_SpecCube1_BoxMax.xyz - tmpvar_19) / (float3)tmpvar_68);
      rbmax_67 = half3(tmpvar_69);
      float3 tmpvar_70;
      tmpvar_70 = ((_mtl_u.unity_SpecCube1_BoxMin.xyz - tmpvar_19) / (float3)tmpvar_68);
      rbmin_66 = half3(tmpvar_70);
      bool3 tmpvar_71;
      tmpvar_71 = (tmpvar_68 > (half3)float3(0.0, 0.0, 0.0));
      half tmpvar_72;
      if (tmpvar_71.x) {
        tmpvar_72 = rbmax_67.x;
      } else {
        tmpvar_72 = rbmin_66.x;
      };
      half tmpvar_73;
      if (tmpvar_71.y) {
        tmpvar_73 = rbmax_67.y;
      } else {
        tmpvar_73 = rbmin_66.y;
      };
      half tmpvar_74;
      if (tmpvar_71.z) {
        tmpvar_74 = rbmax_67.z;
      } else {
        tmpvar_74 = rbmin_66.z;
      };
      worldPos_65 = (tmpvar_19 - _mtl_u.unity_SpecCube1_ProbePosition.xyz);
      worldRefl_64 = half3((worldPos_65 + (float3)(tmpvar_68 * min (
        min (tmpvar_72, tmpvar_73)
      , tmpvar_74))));
    };
    half4 hdr_75;
    hdr_75 = half4(tmpvar_21);
    half4 tmpvar_76;
    tmpvar_76.xyz = worldRefl_64;
    tmpvar_76.w = ((tmpvar_22 * ((half)1.7 - 
      ((half)0.7 * tmpvar_22)
    )) * (half)6.0);
    half4 tmpvar_77;
    tmpvar_77 = unity_SpecCube1.sample(_mtlsmp_unity_SpecCube1, (float3)(worldRefl_64), level(tmpvar_76.w));
    half4 tmpvar_78;
    tmpvar_78 = tmpvar_77;
    half3 tmpvar_79;
    tmpvar_79 = ((hdr_75.x * pow (tmpvar_78.w, hdr_75.y)) * tmpvar_78.xyz);
    float3 tmpvar_80;
    tmpvar_80 = mix ((float3)tmpvar_79, (float3)tmpvar_63, _mtl_u.unity_SpecCube0_BoxMin.www);
    specular_47 = half3(tmpvar_80);
  } else {
    specular_47 = tmpvar_63;
  };
  tmpvar_24 = (specular_47 * tmpvar_17);
  half3 viewDir_81;
  viewDir_81 = -(tmpvar_10);
  half surfaceReduction_82;
  half specularTerm_83;
  half tmpvar_84;
  tmpvar_84 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_85;
  half3 inVec_86;
  inVec_86 = (_mtl_u._WorldSpaceLightPos0.xyz + viewDir_81);
  tmpvar_85 = (inVec_86 * rsqrt(max ((half)0.001, 
    dot (inVec_86, inVec_86)
  )));
  half tmpvar_87;
  tmpvar_87 = max ((half)0.0, dot (tmpvar_9, tmpvar_85));
  half tmpvar_88;
  tmpvar_88 = max ((half)0.0, dot (tmpvar_9, viewDir_81));
  half tmpvar_89;
  tmpvar_89 = max ((half)0.0, dot (_mtl_u._WorldSpaceLightPos0.xyz, tmpvar_85));
  half tmpvar_90;
  tmpvar_90 = (tmpvar_84 * tmpvar_84);
  half tmpvar_91;
  tmpvar_91 = (tmpvar_84 * tmpvar_84);
  half tmpvar_92;
  tmpvar_92 = (tmpvar_91 * tmpvar_91);
  half tmpvar_93;
  tmpvar_93 = (((tmpvar_87 * tmpvar_87) * (tmpvar_92 - (half)1.0)) + (half)1.0);
  half x_94;
  x_94 = ((half)1.0 - tmpvar_18);
  half x_95;
  x_95 = ((half)1.0 - tmpvar_88);
  half tmpvar_96;
  tmpvar_96 = ((half)0.5 + (((half)2.0 * tmpvar_89) * (tmpvar_89 * tmpvar_84)));
  half tmpvar_97;
  tmpvar_97 = (((half)1.0 + (
    (tmpvar_96 - (half)1.0)
   * 
    ((x_94 * x_94) * ((x_94 * x_94) * x_94))
  )) * ((half)1.0 + (
    (tmpvar_96 - (half)1.0)
   * 
    ((x_95 * x_95) * ((x_95 * x_95) * x_95))
  )));
  half tmpvar_98;
  tmpvar_98 = ((((half)2.0 / 
    (((tmpvar_18 * (
      (tmpvar_88 * ((half)1.0 - tmpvar_90))
     + tmpvar_90)) + (tmpvar_88 * (
      (tmpvar_18 * ((half)1.0 - tmpvar_90))
     + tmpvar_90))) + (half)1e-05)
  ) * (tmpvar_92 / 
    ((((half)3.141593 * tmpvar_93) * tmpvar_93) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_83 = tmpvar_98;
  bool tmpvar_99;
  tmpvar_99 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_99) {
    specularTerm_83 = sqrt(max ((half)0.0001, tmpvar_98));
  };
  half tmpvar_100;
  tmpvar_100 = max ((half)0.0, (specularTerm_83 * tmpvar_18));
  specularTerm_83 = tmpvar_100;
  half tmpvar_101;
  tmpvar_101 = (tmpvar_97 * tmpvar_18);
  half tmpvar_102;
  tmpvar_102 = (tmpvar_84 * tmpvar_84);
  bool tmpvar_103;
  tmpvar_103 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_103) {
    surfaceReduction_82 = ((half)1.0 - (((half)0.28 * tmpvar_102) * tmpvar_84));
  } else {
    surfaceReduction_82 = ((half)1.0/(((tmpvar_102 * tmpvar_102) + (half)1.0)));
  };
  bool3 tmpvar_104;
  tmpvar_104 = bool3(tmpvar_7);
  bool tmpvar_105;
  tmpvar_105 = any(tmpvar_104);
  float tmpvar_106;
  if (tmpvar_105) {
    tmpvar_106 = 1.0;
  } else {
    tmpvar_106 = 0.0;
  };
  specularTerm_83 = (tmpvar_100 * (half)tmpvar_106);
  half x_107;
  x_107 = ((half)1.0 - tmpvar_89);
  half x_108;
  x_108 = ((half)1.0 - tmpvar_88);
  half3 tmpvar_109;
  tmpvar_109 = (((diffColor_11 * 
    (tmpvar_26 + (tmpvar_25 * tmpvar_101))
  ) + (
    (specularTerm_83 * tmpvar_25)
   * 
    (tmpvar_7 + (((half)1.0 - tmpvar_7) * ((x_107 * x_107) * (
      (x_107 * x_107)
     * x_107))))
  )) + ((surfaceReduction_82 * tmpvar_24) * mix (tmpvar_7, half3(
    clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_8)), (half)0.0, (half)1.0)
  ), half3(
    ((x_108 * x_108) * ((x_108 * x_108) * x_108))
  ))));
  half4 tmpvar_110;
  tmpvar_110.w = half(1.0);
  tmpvar_110.xyz = tmpvar_109;
  c_1.w = tmpvar_110.w;
  c_1.xyz = tmpvar_109;
  c_1.xyz = c_1.xyz;
  half4 xlat_varoutput_111;
  xlat_varoutput_111.xyz = c_1.xyz;
  xlat_varoutput_111.w = outModifiedAlpha_12;
  _mtl_o._glesFragData_0 = xlat_varoutput_111;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 179 math, 7 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_DynamicLightmap] 2D 0
SetTexture 1 [unity_DynamicDirectionality] 2D 1
SetTexture 2 [unity_SpecCube0] CUBE 2
SetTexture 3 [unity_SpecCube1] CUBE 3
SetTexture 4 [_MainTex] 2D 4
SetTexture 5 [_OcclusionMap] 2D 5
SetTexture 6 [_ShadowMapTexture] 2D 6
ConstBuffer "$Globals" 182
VectorHalf 0 [_WorldSpaceLightPos0] 4
Vector 16 [unity_SpecCube0_BoxMax]
Vector 32 [unity_SpecCube0_BoxMin]
Vector 48 [unity_SpecCube0_ProbePosition]
VectorHalf 64 [unity_SpecCube0_HDR] 4
Vector 80 [unity_SpecCube1_BoxMax]
Vector 96 [unity_SpecCube1_BoxMin]
Vector 112 [unity_SpecCube1_ProbePosition]
VectorHalf 128 [unity_SpecCube1_HDR] 4
VectorHalf 136 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 144 [unity_ColorSpaceLuminance] 4
VectorHalf 152 [unity_DynamicLightmap_HDR] 4
VectorHalf 160 [_LightColor0] 4
VectorHalf 168 [_Color] 4
ScalarHalf 176 [_Metallic]
ScalarHalf 178 [_Glossiness]
ScalarHalf 180 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  float4 unity_SpecCube0_BoxMax;
  float4 unity_SpecCube0_BoxMin;
  float4 unity_SpecCube0_ProbePosition;
  half4 unity_SpecCube0_HDR;
  float4 unity_SpecCube1_BoxMax;
  float4 unity_SpecCube1_BoxMin;
  float4 unity_SpecCube1_ProbePosition;
  half4 unity_SpecCube1_HDR;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 unity_DynamicLightmap_HDR;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_DynamicLightmap [[texture(0)]], sampler _mtlsmp_unity_DynamicLightmap [[sampler(0)]]
  ,   texture2d<half> unity_DynamicDirectionality [[texture(1)]], sampler _mtlsmp_unity_DynamicDirectionality [[sampler(1)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(2)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(2)]]
  ,   texturecube<half> unity_SpecCube1 [[texture(3)]], sampler _mtlsmp_unity_SpecCube1 [[sampler(3)]]
  ,   texture2d<half> _MainTex [[texture(4)]], sampler _mtlsmp__MainTex [[sampler(4)]]
  ,   texture2d<half> _OcclusionMap [[texture(5)]], sampler _mtlsmp__OcclusionMap [[sampler(5)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(6)]], sampler _mtlsmp__ShadowMapTexture [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half atten_2;
  half3 i_posWorld_3;
  i_posWorld_3 = half3(_mtl_i.xlv_TEXCOORD8);
  half tmpvar_4;
  half4 tmpvar_5;
  tmpvar_5 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_4 = (tmpvar_5.w * _mtl_u._Color.w);
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_5.xyz);
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  half tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 diffColor_11;
  half outModifiedAlpha_12;
  diffColor_11 = ((tmpvar_6 * tmpvar_8) * tmpvar_4);
  outModifiedAlpha_12 = (((half)1.0 - tmpvar_8) + (tmpvar_4 * tmpvar_8));
  half3 tmpvar_13;
  tmpvar_13 = _mtl_u._LightColor0.xyz;
  half tmpvar_14;
  tmpvar_14 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  atten_2 = tmpvar_14;
  half occ_15;
  half tmpvar_16;
  tmpvar_16 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_15 = tmpvar_16;
  half tmpvar_17;
  tmpvar_17 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_15 * _mtl_u._OcclusionStrength));
  half tmpvar_18;
  tmpvar_18 = max ((half)0.0, dot (tmpvar_9, _mtl_u._WorldSpaceLightPos0.xyz));
  float3 tmpvar_19;
  float4 tmpvar_20;
  float4 tmpvar_21;
  float4 tmpvar_22;
  tmpvar_19 = float3(i_posWorld_3);
  tmpvar_20 = float4(_mtl_i.xlv_TEXCOORD5);
  tmpvar_21 = float4(_mtl_u.unity_SpecCube0_HDR);
  tmpvar_22 = float4(_mtl_u.unity_SpecCube1_HDR);
  half3 tmpvar_23;
  half3 tmpvar_24;
  half4 realtimeDirTex_25;
  half3 tmpvar_26;
  half4 tmpvar_27;
  tmpvar_27 = unity_DynamicLightmap.sample(_mtlsmp_unity_DynamicLightmap, (float2)(tmpvar_20.zw));
  half4 tmpvar_28;
  tmpvar_28 = unity_DynamicDirectionality.sample(_mtlsmp_unity_DynamicDirectionality, (float2)(tmpvar_20.zw));
  realtimeDirTex_25 = tmpvar_28;
  half4 dirTex_29;
  dirTex_29 = realtimeDirTex_25;
  half3 y_30;
  y_30 = (dirTex_29.xyz - (half)0.5);
  half tmpvar_31;
  tmpvar_31 = max ((half)0.0001, dirTex_29.w);
  tmpvar_26 = ((pow (
    ((_mtl_u.unity_DynamicLightmap_HDR.x * tmpvar_27.w) * tmpvar_27.xyz)
  , _mtl_u.unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_9, y_30)
   + (half)0.5)) / tmpvar_31);
  tmpvar_26 = (tmpvar_26 * tmpvar_17);
  tmpvar_23 = (tmpvar_13 * atten_2);
  tmpvar_24 = half3(float3(0.0, 0.0, 0.0));
  half tmpvar_32;
  half3 tmpvar_33;
  tmpvar_32 = ((half)1.0 - _mtl_u._Glossiness);
  tmpvar_33 = (tmpvar_10 - ((half)2.0 * (
    dot (tmpvar_9, tmpvar_10)
   * tmpvar_9)));
  half3 originalReflUVW_34;
  half3 specular_35;
  originalReflUVW_34 = tmpvar_33;
  half3 worldRefl_36;
  worldRefl_36 = tmpvar_33;
  float3 worldPos_37;
  worldPos_37 = tmpvar_19;
  if ((_mtl_u.unity_SpecCube0_ProbePosition.w > 0.0)) {
    half3 rbmin_38;
    half3 rbmax_39;
    half3 tmpvar_40;
    tmpvar_40 = normalize(tmpvar_33);
    float3 tmpvar_41;
    tmpvar_41 = ((_mtl_u.unity_SpecCube0_BoxMax.xyz - tmpvar_19) / (float3)tmpvar_40);
    rbmax_39 = half3(tmpvar_41);
    float3 tmpvar_42;
    tmpvar_42 = ((_mtl_u.unity_SpecCube0_BoxMin.xyz - tmpvar_19) / (float3)tmpvar_40);
    rbmin_38 = half3(tmpvar_42);
    bool3 tmpvar_43;
    tmpvar_43 = (tmpvar_40 > (half3)float3(0.0, 0.0, 0.0));
    half tmpvar_44;
    if (tmpvar_43.x) {
      tmpvar_44 = rbmax_39.x;
    } else {
      tmpvar_44 = rbmin_38.x;
    };
    half tmpvar_45;
    if (tmpvar_43.y) {
      tmpvar_45 = rbmax_39.y;
    } else {
      tmpvar_45 = rbmin_38.y;
    };
    half tmpvar_46;
    if (tmpvar_43.z) {
      tmpvar_46 = rbmax_39.z;
    } else {
      tmpvar_46 = rbmin_38.z;
    };
    worldPos_37 = (tmpvar_19 - _mtl_u.unity_SpecCube0_ProbePosition.xyz);
    worldRefl_36 = half3((worldPos_37 + (float3)(tmpvar_40 * min (
      min (tmpvar_44, tmpvar_45)
    , tmpvar_46))));
  };
  tmpvar_33 = worldRefl_36;
  half4 hdr_47;
  hdr_47 = half4(tmpvar_21);
  half4 tmpvar_48;
  tmpvar_48.xyz = worldRefl_36;
  tmpvar_48.w = ((tmpvar_32 * ((half)1.7 - 
    ((half)0.7 * tmpvar_32)
  )) * (half)6.0);
  half4 tmpvar_49;
  tmpvar_49 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(worldRefl_36), level(tmpvar_48.w));
  half4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  half3 tmpvar_51;
  tmpvar_51 = ((hdr_47.x * pow (tmpvar_50.w, hdr_47.y)) * tmpvar_50.xyz);
  if ((_mtl_u.unity_SpecCube0_BoxMin.w < 0.99999)) {
    half3 worldRefl_52;
    worldRefl_52 = originalReflUVW_34;
    float3 worldPos_53;
    worldPos_53 = tmpvar_19;
    if ((_mtl_u.unity_SpecCube1_ProbePosition.w > 0.0)) {
      half3 rbmin_54;
      half3 rbmax_55;
      half3 tmpvar_56;
      tmpvar_56 = normalize(originalReflUVW_34);
      float3 tmpvar_57;
      tmpvar_57 = ((_mtl_u.unity_SpecCube1_BoxMax.xyz - tmpvar_19) / (float3)tmpvar_56);
      rbmax_55 = half3(tmpvar_57);
      float3 tmpvar_58;
      tmpvar_58 = ((_mtl_u.unity_SpecCube1_BoxMin.xyz - tmpvar_19) / (float3)tmpvar_56);
      rbmin_54 = half3(tmpvar_58);
      bool3 tmpvar_59;
      tmpvar_59 = (tmpvar_56 > (half3)float3(0.0, 0.0, 0.0));
      half tmpvar_60;
      if (tmpvar_59.x) {
        tmpvar_60 = rbmax_55.x;
      } else {
        tmpvar_60 = rbmin_54.x;
      };
      half tmpvar_61;
      if (tmpvar_59.y) {
        tmpvar_61 = rbmax_55.y;
      } else {
        tmpvar_61 = rbmin_54.y;
      };
      half tmpvar_62;
      if (tmpvar_59.z) {
        tmpvar_62 = rbmax_55.z;
      } else {
        tmpvar_62 = rbmin_54.z;
      };
      worldPos_53 = (tmpvar_19 - _mtl_u.unity_SpecCube1_ProbePosition.xyz);
      worldRefl_52 = half3((worldPos_53 + (float3)(tmpvar_56 * min (
        min (tmpvar_60, tmpvar_61)
      , tmpvar_62))));
    };
    tmpvar_33 = worldRefl_52;
    half4 hdr_63;
    hdr_63 = half4(tmpvar_22);
    half4 tmpvar_64;
    tmpvar_64.xyz = worldRefl_52;
    tmpvar_64.w = ((tmpvar_32 * ((half)1.7 - 
      ((half)0.7 * tmpvar_32)
    )) * (half)6.0);
    half4 tmpvar_65;
    tmpvar_65 = unity_SpecCube1.sample(_mtlsmp_unity_SpecCube1, (float3)(worldRefl_52), level(tmpvar_64.w));
    half4 tmpvar_66;
    tmpvar_66 = tmpvar_65;
    half3 tmpvar_67;
    tmpvar_67 = ((hdr_63.x * pow (tmpvar_66.w, hdr_63.y)) * tmpvar_66.xyz);
    float3 tmpvar_68;
    tmpvar_68 = mix ((float3)tmpvar_67, (float3)tmpvar_51, _mtl_u.unity_SpecCube0_BoxMin.www);
    specular_35 = half3(tmpvar_68);
  } else {
    specular_35 = tmpvar_51;
  };
  tmpvar_24 = (specular_35 * tmpvar_17);
  half3 viewDir_69;
  viewDir_69 = -(tmpvar_10);
  half surfaceReduction_70;
  half specularTerm_71;
  half tmpvar_72;
  tmpvar_72 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_73;
  half3 inVec_74;
  inVec_74 = (_mtl_u._WorldSpaceLightPos0.xyz + viewDir_69);
  tmpvar_73 = (inVec_74 * rsqrt(max ((half)0.001, 
    dot (inVec_74, inVec_74)
  )));
  half tmpvar_75;
  tmpvar_75 = max ((half)0.0, dot (tmpvar_9, tmpvar_73));
  half tmpvar_76;
  tmpvar_76 = max ((half)0.0, dot (tmpvar_9, viewDir_69));
  half tmpvar_77;
  tmpvar_77 = max ((half)0.0, dot (_mtl_u._WorldSpaceLightPos0.xyz, tmpvar_73));
  half tmpvar_78;
  tmpvar_78 = (tmpvar_72 * tmpvar_72);
  half tmpvar_79;
  tmpvar_79 = (tmpvar_72 * tmpvar_72);
  half tmpvar_80;
  tmpvar_80 = (tmpvar_79 * tmpvar_79);
  half tmpvar_81;
  tmpvar_81 = (((tmpvar_75 * tmpvar_75) * (tmpvar_80 - (half)1.0)) + (half)1.0);
  half x_82;
  x_82 = ((half)1.0 - tmpvar_18);
  half x_83;
  x_83 = ((half)1.0 - tmpvar_76);
  half tmpvar_84;
  tmpvar_84 = ((half)0.5 + (((half)2.0 * tmpvar_77) * (tmpvar_77 * tmpvar_72)));
  half tmpvar_85;
  tmpvar_85 = (((half)1.0 + (
    (tmpvar_84 - (half)1.0)
   * 
    ((x_82 * x_82) * ((x_82 * x_82) * x_82))
  )) * ((half)1.0 + (
    (tmpvar_84 - (half)1.0)
   * 
    ((x_83 * x_83) * ((x_83 * x_83) * x_83))
  )));
  half tmpvar_86;
  tmpvar_86 = ((((half)2.0 / 
    (((tmpvar_18 * (
      (tmpvar_76 * ((half)1.0 - tmpvar_78))
     + tmpvar_78)) + (tmpvar_76 * (
      (tmpvar_18 * ((half)1.0 - tmpvar_78))
     + tmpvar_78))) + (half)1e-05)
  ) * (tmpvar_80 / 
    ((((half)3.141593 * tmpvar_81) * tmpvar_81) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_71 = tmpvar_86;
  bool tmpvar_87;
  tmpvar_87 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_87) {
    specularTerm_71 = sqrt(max ((half)0.0001, tmpvar_86));
  };
  half tmpvar_88;
  tmpvar_88 = max ((half)0.0, (specularTerm_71 * tmpvar_18));
  specularTerm_71 = tmpvar_88;
  half tmpvar_89;
  tmpvar_89 = (tmpvar_85 * tmpvar_18);
  half tmpvar_90;
  tmpvar_90 = (tmpvar_72 * tmpvar_72);
  bool tmpvar_91;
  tmpvar_91 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_91) {
    surfaceReduction_70 = ((half)1.0 - (((half)0.28 * tmpvar_90) * tmpvar_72));
  } else {
    surfaceReduction_70 = ((half)1.0/(((tmpvar_90 * tmpvar_90) + (half)1.0)));
  };
  bool3 tmpvar_92;
  tmpvar_92 = bool3(tmpvar_7);
  bool tmpvar_93;
  tmpvar_93 = any(tmpvar_92);
  float tmpvar_94;
  if (tmpvar_93) {
    tmpvar_94 = 1.0;
  } else {
    tmpvar_94 = 0.0;
  };
  specularTerm_71 = (tmpvar_88 * (half)tmpvar_94);
  half x_95;
  x_95 = ((half)1.0 - tmpvar_77);
  half x_96;
  x_96 = ((half)1.0 - tmpvar_76);
  half3 tmpvar_97;
  tmpvar_97 = (((diffColor_11 * 
    (tmpvar_26 + (tmpvar_23 * tmpvar_89))
  ) + (
    (specularTerm_71 * tmpvar_23)
   * 
    (tmpvar_7 + (((half)1.0 - tmpvar_7) * ((x_95 * x_95) * (
      (x_95 * x_95)
     * x_95))))
  )) + ((surfaceReduction_70 * tmpvar_24) * mix (tmpvar_7, half3(
    clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_8)), (half)0.0, (half)1.0)
  ), half3(
    ((x_96 * x_96) * ((x_96 * x_96) * x_96))
  ))));
  half4 tmpvar_98;
  tmpvar_98.w = half(1.0);
  tmpvar_98.xyz = tmpvar_97;
  c_1.w = tmpvar_98.w;
  c_1.xyz = tmpvar_97;
  c_1.xyz = c_1.xyz;
  half4 xlat_varoutput_99;
  xlat_varoutput_99.xyz = c_1.xyz;
  xlat_varoutput_99.w = outModifiedAlpha_12;
  _mtl_o._glesFragData_0 = xlat_varoutput_99;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
}
 }


 // Stats for Vertex shader:
 //       metal : 21 avg math (19..24), 1 branch
 //      opengl : 103 avg math (93..116), 3 avg texture (1..7), 2 avg branch (2..6)
 // Stats for Fragment shader:
 //       metal : 103 avg math (93..116), 3 avg texture (1..7), 2 avg branch (2..6)
 Pass {
  Name "FORWARD_DELTA"
  Tags { "LIGHTMODE"="ForwardAdd" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite Off
  Blend [_SrcBlend] One
  GpuProgramID 70942
Program "vp" {
SubProgram "opengl " {
// Stats: 96 math, 2 textures, 2 branches
Keywords { "POINT" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic));
  tmpvar_2 = (tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_7 = normalize(tmpvar_5);
  float tmpvar_8;
  tmpvar_8 = max (0.0, dot (tmpvar_4, tmpvar_7));
  tmpvar_6 = (_LightColor0.xyz * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w);
  vec3 viewDir_9;
  viewDir_9 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_10;
  float tmpvar_11;
  tmpvar_11 = (1.0 - _Glossiness);
  vec3 tmpvar_12;
  vec3 inVec_13;
  inVec_13 = (tmpvar_7 + viewDir_9);
  tmpvar_12 = (inVec_13 * inversesqrt(max (0.001, 
    dot (inVec_13, inVec_13)
  )));
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_12));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, viewDir_9));
  float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_7, tmpvar_12));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_11 * tmpvar_11);
  float tmpvar_18;
  tmpvar_18 = (tmpvar_11 * tmpvar_11);
  float tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  float tmpvar_20;
  tmpvar_20 = (((tmpvar_14 * tmpvar_14) * (tmpvar_19 - 1.0)) + 1.0);
  float x_21;
  x_21 = (1.0 - tmpvar_8);
  float x_22;
  x_22 = (1.0 - tmpvar_15);
  float tmpvar_23;
  tmpvar_23 = (0.5 + ((2.0 * tmpvar_16) * (tmpvar_16 * tmpvar_11)));
  float tmpvar_24;
  tmpvar_24 = ((1.0 + (
    (tmpvar_23 - 1.0)
   * 
    ((x_21 * x_21) * ((x_21 * x_21) * x_21))
  )) * (1.0 + (
    (tmpvar_23 - 1.0)
   * 
    ((x_22 * x_22) * ((x_22 * x_22) * x_22))
  )));
  float tmpvar_25;
  tmpvar_25 = (((2.0 / 
    (((tmpvar_8 * (
      (tmpvar_15 * (1.0 - tmpvar_17))
     + tmpvar_17)) + (tmpvar_15 * (
      (tmpvar_8 * (1.0 - tmpvar_17))
     + tmpvar_17))) + 1e-05)
  ) * (tmpvar_19 / 
    (((3.141593 * tmpvar_20) * tmpvar_20) + 1e-07)
  )) * 0.7853982);
  specularTerm_10 = tmpvar_25;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_10 = sqrt(max (0.0001, tmpvar_25));
  };
  float tmpvar_26;
  tmpvar_26 = max (0.0, (specularTerm_10 * tmpvar_8));
  specularTerm_10 = tmpvar_26;
  float tmpvar_27;
  tmpvar_27 = (tmpvar_24 * tmpvar_8);
  float tmpvar_28;
  if (any(bvec3(tmpvar_3))) {
    tmpvar_28 = 1.0;
  } else {
    tmpvar_28 = 0.0;
  };
  specularTerm_10 = (tmpvar_26 * tmpvar_28);
  float x_29;
  x_29 = (1.0 - tmpvar_16);
  vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = ((tmpvar_2 * (tmpvar_6 * tmpvar_27)) + ((specularTerm_10 * tmpvar_6) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * ((x_29 * x_29) * ((x_29 * x_29) * x_29)))
  )));
  vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = tmpvar_30.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "metal " {
// Stats: 21 math, 1 branches
Keywords { "POINT" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 336
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 272 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex)).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat7;
float u_xlat12;
float u_xlat13;
bool u_xlatb13;
float u_xlat18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + (-u_xlat0.xyz);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat1.w = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));
    u_xlat0.yz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
    u_xlat18 = u_xlat0.w * u_xlat0.w;
    u_xlat1.x = (-_Glossiness) + 1.0;
    u_xlat7.x = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat13 = u_xlat7.x * u_xlat7.x;
    u_xlat18 = u_xlat13 / u_xlat18;
    u_xlat13 = (-u_xlat1.x) * u_xlat1.x + 1.0;
    u_xlat19 = u_xlat0.x * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.y * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.x * u_xlat7.x;
    u_xlat7.x = u_xlat0.y * u_xlat19 + u_xlat7.x;
    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
    u_xlat7.x = 2.0 / u_xlat7.x;
    u_xlat18 = u_xlat18 * u_xlat7.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat7.x = max(u_xlat18, 9.99999975e-05);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb13) ? u_xlat7.x : u_xlat18;
    u_xlat18 = u_xlat0.y * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat7.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb20 = u_xlat20!=0.0;
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat20 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_3 = texture(_LightTexture0, vec2(u_xlat20));
    u_xlat3.xyz = u_xlat10_3.www * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat0.xw = (-u_xlat0.xz) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat0.z * u_xlat0.z;
    u_xlat12 = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat12 = u_xlat12 + -0.5;
    u_xlat1.x = u_xlat0.w * u_xlat0.w;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat0.w * u_xlat1.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat0.x * u_xlat0.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat18;
    u_xlat0.x = u_xlat12 * u_xlat0.x + 1.0;
    u_xlat18 = (-u_xlat0.y) + 1.0;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat12 = u_xlat12 * u_xlat18 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 93 math, 1 textures, 2 branches
Keywords { "DIRECTIONAL" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic));
  tmpvar_2 = (tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  float tmpvar_6;
  tmpvar_6 = max (0.0, dot (tmpvar_4, tmpvar_5));
  vec3 viewDir_7;
  viewDir_7 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_8;
  float tmpvar_9;
  tmpvar_9 = (1.0 - _Glossiness);
  vec3 tmpvar_10;
  vec3 inVec_11;
  inVec_11 = (tmpvar_5 + viewDir_7);
  tmpvar_10 = (inVec_11 * inversesqrt(max (0.001, 
    dot (inVec_11, inVec_11)
  )));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_10));
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_4, viewDir_7));
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_5, tmpvar_10));
  float tmpvar_15;
  tmpvar_15 = (tmpvar_9 * tmpvar_9);
  float tmpvar_16;
  tmpvar_16 = (tmpvar_9 * tmpvar_9);
  float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  float tmpvar_18;
  tmpvar_18 = (((tmpvar_12 * tmpvar_12) * (tmpvar_17 - 1.0)) + 1.0);
  float x_19;
  x_19 = (1.0 - tmpvar_6);
  float x_20;
  x_20 = (1.0 - tmpvar_13);
  float tmpvar_21;
  tmpvar_21 = (0.5 + ((2.0 * tmpvar_14) * (tmpvar_14 * tmpvar_9)));
  float tmpvar_22;
  tmpvar_22 = ((1.0 + (
    (tmpvar_21 - 1.0)
   * 
    ((x_19 * x_19) * ((x_19 * x_19) * x_19))
  )) * (1.0 + (
    (tmpvar_21 - 1.0)
   * 
    ((x_20 * x_20) * ((x_20 * x_20) * x_20))
  )));
  float tmpvar_23;
  tmpvar_23 = (((2.0 / 
    (((tmpvar_6 * (
      (tmpvar_13 * (1.0 - tmpvar_15))
     + tmpvar_15)) + (tmpvar_13 * (
      (tmpvar_6 * (1.0 - tmpvar_15))
     + tmpvar_15))) + 1e-05)
  ) * (tmpvar_17 / 
    (((3.141593 * tmpvar_18) * tmpvar_18) + 1e-07)
  )) * 0.7853982);
  specularTerm_8 = tmpvar_23;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_8 = sqrt(max (0.0001, tmpvar_23));
  };
  float tmpvar_24;
  tmpvar_24 = max (0.0, (specularTerm_8 * tmpvar_6));
  specularTerm_8 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = (tmpvar_22 * tmpvar_6);
  float tmpvar_26;
  if (any(bvec3(tmpvar_3))) {
    tmpvar_26 = 1.0;
  } else {
    tmpvar_26 = 0.0;
  };
  specularTerm_8 = (tmpvar_24 * tmpvar_26);
  float x_27;
  x_27 = (1.0 - tmpvar_14);
  vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((tmpvar_2 * (_LightColor0.xyz * tmpvar_25)) + ((specularTerm_8 * _LightColor0.xyz) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * ((x_27 * x_27) * ((x_27 * x_27) * x_27)))
  )));
  vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = 1.0;
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "metal " {
// Stats: 19 math, 1 branches
Keywords { "DIRECTIONAL" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 258
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 n_13;
  n_13 = (tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_12 = half3(n_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float3 tmpvar_19;
  tmpvar_19 = ((float3)_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_7.xyz * (float)_mtl_u._WorldSpaceLightPos0.w));
  tmpvar_4.w = half(tmpvar_19.x);
  tmpvar_5.w = half(tmpvar_19.y);
  tmpvar_6.w = half(tmpvar_19.z);
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec2 u_xlat10;
float u_xlat11;
bool u_xlatb11;
float u_xlat15;
float u_xlat16;
float u_xlat17;
bool u_xlatb17;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat15) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
    u_xlat0.w = dot(u_xlat0.xyz, (-u_xlat3.xyz));
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = max(u_xlat16, 0.00100000005);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat10.x = max(u_xlat16, 0.0);
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat1.x = (-_Glossiness) + 1.0;
    u_xlat6.x = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat6.x * u_xlat6.x + -1.0;
    u_xlat10.x = u_xlat10.x * u_xlat11 + 1.0;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * 3.14159274 + 1.00000001e-07;
    u_xlat11 = u_xlat6.x * u_xlat6.x;
    u_xlat10.x = u_xlat11 / u_xlat10.x;
    u_xlat11 = (-u_xlat1.x) * u_xlat1.x + 1.0;
    u_xlat16 = u_xlat0.w * u_xlat11 + u_xlat6.x;
    u_xlat6.x = u_xlat0.x * u_xlat11 + u_xlat6.x;
    u_xlat6.x = u_xlat0.w * u_xlat6.x;
    u_xlat6.x = u_xlat0.x * u_xlat16 + u_xlat6.x;
    u_xlat6.x = u_xlat6.x + 9.99999975e-06;
    u_xlat6.x = 2.0 / u_xlat6.x;
    u_xlat10.x = u_xlat10.x * u_xlat6.x;
    u_xlat10.x = u_xlat10.x * 0.785398185;
    u_xlat6.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlatb11 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat10.x = (u_xlatb11) ? u_xlat6.x : u_xlat10.x;
    u_xlat10.x = u_xlat0.x * u_xlat10.x;
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat6.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat6.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb17 = u_xlat17!=0.0;
    u_xlat17 = u_xlatb17 ? 1.0 : float(0.0);
    u_xlat10.x = u_xlat10.x * u_xlat17;
    u_xlat3.xyz = u_xlat10.xxx * _LightColor0.xyz;
    u_xlat10.xy = (-u_xlat0.yw) + vec2(1.0, 1.0);
    u_xlat5 = dot(u_xlat0.yy, u_xlat0.yy);
    u_xlat5 = u_xlat5 * u_xlat1.x + -0.5;
    u_xlat1.x = u_xlat10.x * u_xlat10.x;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat10.x = u_xlat10.x * u_xlat1.x;
    u_xlat4.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat10.xxx + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
    u_xlat10.x = u_xlat10.y * u_xlat10.y;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = u_xlat10.y * u_xlat10.x;
    u_xlat10.x = u_xlat5 * u_xlat10.x + 1.0;
    u_xlat15 = (-u_xlat0.x) + 1.0;
    u_xlat16 = u_xlat15 * u_xlat15;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat5 = u_xlat5 * u_xlat15 + 1.0;
    u_xlat5 = u_xlat10.x * u_xlat5;
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 102 math, 3 textures, 2 branches
Keywords { "SPOT" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex));
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic));
  tmpvar_2 = (tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_7 = normalize(tmpvar_5);
  float tmpvar_8;
  tmpvar_8 = max (0.0, dot (tmpvar_4, tmpvar_7));
  tmpvar_6 = (_LightColor0.xyz * ((
    float((xlv_TEXCOORD5.z > 0.0))
   * texture2D (_LightTexture0, 
    ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)
  ).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w));
  vec3 viewDir_9;
  viewDir_9 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_10;
  float tmpvar_11;
  tmpvar_11 = (1.0 - _Glossiness);
  vec3 tmpvar_12;
  vec3 inVec_13;
  inVec_13 = (tmpvar_7 + viewDir_9);
  tmpvar_12 = (inVec_13 * inversesqrt(max (0.001, 
    dot (inVec_13, inVec_13)
  )));
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_12));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, viewDir_9));
  float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_7, tmpvar_12));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_11 * tmpvar_11);
  float tmpvar_18;
  tmpvar_18 = (tmpvar_11 * tmpvar_11);
  float tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  float tmpvar_20;
  tmpvar_20 = (((tmpvar_14 * tmpvar_14) * (tmpvar_19 - 1.0)) + 1.0);
  float x_21;
  x_21 = (1.0 - tmpvar_8);
  float x_22;
  x_22 = (1.0 - tmpvar_15);
  float tmpvar_23;
  tmpvar_23 = (0.5 + ((2.0 * tmpvar_16) * (tmpvar_16 * tmpvar_11)));
  float tmpvar_24;
  tmpvar_24 = ((1.0 + (
    (tmpvar_23 - 1.0)
   * 
    ((x_21 * x_21) * ((x_21 * x_21) * x_21))
  )) * (1.0 + (
    (tmpvar_23 - 1.0)
   * 
    ((x_22 * x_22) * ((x_22 * x_22) * x_22))
  )));
  float tmpvar_25;
  tmpvar_25 = (((2.0 / 
    (((tmpvar_8 * (
      (tmpvar_15 * (1.0 - tmpvar_17))
     + tmpvar_17)) + (tmpvar_15 * (
      (tmpvar_8 * (1.0 - tmpvar_17))
     + tmpvar_17))) + 1e-05)
  ) * (tmpvar_19 / 
    (((3.141593 * tmpvar_20) * tmpvar_20) + 1e-07)
  )) * 0.7853982);
  specularTerm_10 = tmpvar_25;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_10 = sqrt(max (0.0001, tmpvar_25));
  };
  float tmpvar_26;
  tmpvar_26 = max (0.0, (specularTerm_10 * tmpvar_8));
  specularTerm_10 = tmpvar_26;
  float tmpvar_27;
  tmpvar_27 = (tmpvar_24 * tmpvar_8);
  float tmpvar_28;
  if (any(bvec3(tmpvar_3))) {
    tmpvar_28 = 1.0;
  } else {
    tmpvar_28 = 0.0;
  };
  specularTerm_10 = (tmpvar_26 * tmpvar_28);
  float x_29;
  x_29 = (1.0 - tmpvar_16);
  vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = ((tmpvar_2 * (tmpvar_6 * tmpvar_27)) + ((specularTerm_10 * tmpvar_6) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * ((x_29 * x_29) * ((x_29 * x_29) * x_29)))
  )));
  vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = tmpvar_30.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "metal " {
// Stats: 21 math, 1 branches
Keywords { "SPOT" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 336
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 272 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD5 = hlslcc_mtx4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bool u_xlatb8;
float u_xlat13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
    u_xlat10_0 = texture(_LightTexture0, u_xlat0.xy);
    u_xlatb0 = 0.0<vs_TEXCOORD5.z;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat10_0.w * u_xlat0.x;
    u_xlat6 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTextureB0, vec2(u_xlat6));
    u_xlat0.x = u_xlat0.x * u_xlat10_1.w;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, (-u_xlat1.xyz));
    u_xlat7 = max(u_xlat2.x, 0.0);
    u_xlat1.xz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat19 = (-_Glossiness) + 1.0;
    u_xlat2.x = u_xlat19 * u_xlat19;
    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat8 = u_xlat2.x * u_xlat2.x;
    u_xlat18 = u_xlat8 / u_xlat18;
    u_xlat8 = (-u_xlat19) * u_xlat19 + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat7 * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat1.x * u_xlat2.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat2.x = u_xlat7 * u_xlat14 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
    u_xlat2.x = 2.0 / u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb20 = u_xlat20!=0.0;
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat1.z) + 1.0;
    u_xlat13 = dot(u_xlat1.zz, u_xlat1.zz);
    u_xlat13 = u_xlat13 * u_xlat19 + -0.5;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat7) + 1.0;
    u_xlat19 = u_xlat1.x * u_xlat1.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat1.x = u_xlat1.x * u_xlat19;
    u_xlat1.x = u_xlat13 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 97 math, 3 textures, 2 branches
Keywords { "POINT_COOKIE" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic));
  tmpvar_2 = (tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_7 = normalize(tmpvar_5);
  float tmpvar_8;
  tmpvar_8 = max (0.0, dot (tmpvar_4, tmpvar_7));
  tmpvar_6 = (_LightColor0.xyz * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w * textureCube (_LightTexture0, xlv_TEXCOORD5).w));
  vec3 viewDir_9;
  viewDir_9 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_10;
  float tmpvar_11;
  tmpvar_11 = (1.0 - _Glossiness);
  vec3 tmpvar_12;
  vec3 inVec_13;
  inVec_13 = (tmpvar_7 + viewDir_9);
  tmpvar_12 = (inVec_13 * inversesqrt(max (0.001, 
    dot (inVec_13, inVec_13)
  )));
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_12));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, viewDir_9));
  float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_7, tmpvar_12));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_11 * tmpvar_11);
  float tmpvar_18;
  tmpvar_18 = (tmpvar_11 * tmpvar_11);
  float tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  float tmpvar_20;
  tmpvar_20 = (((tmpvar_14 * tmpvar_14) * (tmpvar_19 - 1.0)) + 1.0);
  float x_21;
  x_21 = (1.0 - tmpvar_8);
  float x_22;
  x_22 = (1.0 - tmpvar_15);
  float tmpvar_23;
  tmpvar_23 = (0.5 + ((2.0 * tmpvar_16) * (tmpvar_16 * tmpvar_11)));
  float tmpvar_24;
  tmpvar_24 = ((1.0 + (
    (tmpvar_23 - 1.0)
   * 
    ((x_21 * x_21) * ((x_21 * x_21) * x_21))
  )) * (1.0 + (
    (tmpvar_23 - 1.0)
   * 
    ((x_22 * x_22) * ((x_22 * x_22) * x_22))
  )));
  float tmpvar_25;
  tmpvar_25 = (((2.0 / 
    (((tmpvar_8 * (
      (tmpvar_15 * (1.0 - tmpvar_17))
     + tmpvar_17)) + (tmpvar_15 * (
      (tmpvar_8 * (1.0 - tmpvar_17))
     + tmpvar_17))) + 1e-05)
  ) * (tmpvar_19 / 
    (((3.141593 * tmpvar_20) * tmpvar_20) + 1e-07)
  )) * 0.7853982);
  specularTerm_10 = tmpvar_25;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_10 = sqrt(max (0.0001, tmpvar_25));
  };
  float tmpvar_26;
  tmpvar_26 = max (0.0, (specularTerm_10 * tmpvar_8));
  specularTerm_10 = tmpvar_26;
  float tmpvar_27;
  tmpvar_27 = (tmpvar_24 * tmpvar_8);
  float tmpvar_28;
  if (any(bvec3(tmpvar_3))) {
    tmpvar_28 = 1.0;
  } else {
    tmpvar_28 = 0.0;
  };
  specularTerm_10 = (tmpvar_26 * tmpvar_28);
  float x_29;
  x_29 = (1.0 - tmpvar_16);
  vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = ((tmpvar_2 * (tmpvar_6 * tmpvar_27)) + ((specularTerm_10 * tmpvar_6) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * ((x_29 * x_29) * ((x_29 * x_29) * x_29)))
  )));
  vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = tmpvar_30.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "metal " {
// Stats: 21 math, 1 branches
Keywords { "POINT_COOKIE" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 336
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 272 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex)).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat7;
float u_xlat12;
float u_xlat13;
bool u_xlatb13;
float u_xlat18;
float u_xlat19;
float u_xlat20;
mediump float u_xlat16_20;
bool u_xlatb20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + (-u_xlat0.xyz);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat1.w = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));
    u_xlat0.yz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
    u_xlat18 = u_xlat0.w * u_xlat0.w;
    u_xlat1.x = (-_Glossiness) + 1.0;
    u_xlat7.x = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat13 = u_xlat7.x * u_xlat7.x;
    u_xlat18 = u_xlat13 / u_xlat18;
    u_xlat13 = (-u_xlat1.x) * u_xlat1.x + 1.0;
    u_xlat19 = u_xlat0.x * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.y * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.x * u_xlat7.x;
    u_xlat7.x = u_xlat0.y * u_xlat19 + u_xlat7.x;
    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
    u_xlat7.x = 2.0 / u_xlat7.x;
    u_xlat18 = u_xlat18 * u_xlat7.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat7.x = max(u_xlat18, 9.99999975e-05);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb13) ? u_xlat7.x : u_xlat18;
    u_xlat18 = u_xlat0.y * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat7.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb20 = u_xlat20!=0.0;
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat20 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_3 = texture(_LightTextureB0, vec2(u_xlat20));
    u_xlat10_4 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
    u_xlat16_20 = u_xlat10_3.w * u_xlat10_4.w;
    u_xlat3.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat0.xw = (-u_xlat0.xz) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat0.z * u_xlat0.z;
    u_xlat12 = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat12 = u_xlat12 + -0.5;
    u_xlat1.x = u_xlat0.w * u_xlat0.w;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat0.w * u_xlat1.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat0.x * u_xlat0.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat18;
    u_xlat0.x = u_xlat12 * u_xlat0.x + 1.0;
    u_xlat18 = (-u_xlat0.y) + 1.0;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat12 = u_xlat12 * u_xlat18 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 94 math, 2 textures, 2 branches
Keywords { "DIRECTIONAL_COOKIE" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic));
  tmpvar_2 = (tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = max (0.0, dot (tmpvar_4, tmpvar_5));
  tmpvar_6 = (_LightColor0.xyz * texture2D (_LightTexture0, xlv_TEXCOORD5).w);
  vec3 viewDir_8;
  viewDir_8 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_9;
  float tmpvar_10;
  tmpvar_10 = (1.0 - _Glossiness);
  vec3 tmpvar_11;
  vec3 inVec_12;
  inVec_12 = (tmpvar_5 + viewDir_8);
  tmpvar_11 = (inVec_12 * inversesqrt(max (0.001, 
    dot (inVec_12, inVec_12)
  )));
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_11));
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_4, viewDir_8));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_11));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_10 * tmpvar_10);
  float tmpvar_17;
  tmpvar_17 = (tmpvar_10 * tmpvar_10);
  float tmpvar_18;
  tmpvar_18 = (tmpvar_17 * tmpvar_17);
  float tmpvar_19;
  tmpvar_19 = (((tmpvar_13 * tmpvar_13) * (tmpvar_18 - 1.0)) + 1.0);
  float x_20;
  x_20 = (1.0 - tmpvar_7);
  float x_21;
  x_21 = (1.0 - tmpvar_14);
  float tmpvar_22;
  tmpvar_22 = (0.5 + ((2.0 * tmpvar_15) * (tmpvar_15 * tmpvar_10)));
  float tmpvar_23;
  tmpvar_23 = ((1.0 + (
    (tmpvar_22 - 1.0)
   * 
    ((x_20 * x_20) * ((x_20 * x_20) * x_20))
  )) * (1.0 + (
    (tmpvar_22 - 1.0)
   * 
    ((x_21 * x_21) * ((x_21 * x_21) * x_21))
  )));
  float tmpvar_24;
  tmpvar_24 = (((2.0 / 
    (((tmpvar_7 * (
      (tmpvar_14 * (1.0 - tmpvar_16))
     + tmpvar_16)) + (tmpvar_14 * (
      (tmpvar_7 * (1.0 - tmpvar_16))
     + tmpvar_16))) + 1e-05)
  ) * (tmpvar_18 / 
    (((3.141593 * tmpvar_19) * tmpvar_19) + 1e-07)
  )) * 0.7853982);
  specularTerm_9 = tmpvar_24;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_9 = sqrt(max (0.0001, tmpvar_24));
  };
  float tmpvar_25;
  tmpvar_25 = max (0.0, (specularTerm_9 * tmpvar_7));
  specularTerm_9 = tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = (tmpvar_23 * tmpvar_7);
  float tmpvar_27;
  if (any(bvec3(tmpvar_3))) {
    tmpvar_27 = 1.0;
  } else {
    tmpvar_27 = 0.0;
  };
  specularTerm_9 = (tmpvar_25 * tmpvar_27);
  float x_28;
  x_28 = (1.0 - tmpvar_15);
  vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = ((tmpvar_2 * (tmpvar_6 * tmpvar_26)) + ((specularTerm_9 * tmpvar_6) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * ((x_28 * x_28) * ((x_28 * x_28) * x_28)))
  )));
  vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = tmpvar_29.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif
"
}
SubProgram "metal " {
// Stats: 21 math, 1 branches
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 336
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 272 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float2 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 n_13;
  n_13 = (tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_12 = half3(n_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float3 tmpvar_19;
  tmpvar_19 = ((float3)_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_7.xyz * (float)_mtl_u._WorldSpaceLightPos0.w));
  tmpvar_4.w = half(tmpvar_19.x);
  tmpvar_5.w = half(tmpvar_19.y);
  tmpvar_6.w = half(tmpvar_19.z);
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex)).xy;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat0.xy = hlslcc_mtx4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
    vs_TEXCOORD5.xy = hlslcc_mtx4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec2 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
vec2 u_xlat12;
float u_xlat13;
bool u_xlatb13;
float u_xlat18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat0.w = dot(u_xlat0.xyz, (-u_xlat3.xyz));
    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat19 = max(u_xlat19, 0.00100000005);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat12.x = max(u_xlat19, 0.0);
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat1.x = (-_Glossiness) + 1.0;
    u_xlat7.x = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
    u_xlat12.x = u_xlat12.x * u_xlat13 + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * 3.14159274 + 1.00000001e-07;
    u_xlat13 = u_xlat7.x * u_xlat7.x;
    u_xlat12.x = u_xlat13 / u_xlat12.x;
    u_xlat13 = (-u_xlat1.x) * u_xlat1.x + 1.0;
    u_xlat19 = u_xlat0.w * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.w * u_xlat7.x;
    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
    u_xlat7.x = 2.0 / u_xlat7.x;
    u_xlat12.x = u_xlat12.x * u_xlat7.x;
    u_xlat12.x = u_xlat12.x * 0.785398185;
    u_xlat7.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat12.x = (u_xlatb13) ? u_xlat7.x : u_xlat12.x;
    u_xlat12.x = u_xlat0.x * u_xlat12.x;
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat7.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb20 = u_xlat20!=0.0;
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat12.x * u_xlat20;
    u_xlat10_3 = texture(_LightTexture0, vs_TEXCOORD5.xy);
    u_xlat3.xyz = u_xlat10_3.www * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.xy = (-u_xlat0.yw) + vec2(1.0, 1.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = dot(vec2(u_xlat6), u_xlat1.xx);
    u_xlat6 = u_xlat6 + -0.5;
    u_xlat1.x = u_xlat12.x * u_xlat12.x;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat12.xxx + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xyz;
    u_xlat12.x = u_xlat12.y * u_xlat12.y;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.y * u_xlat12.x;
    u_xlat12.x = u_xlat6 * u_xlat12.x + 1.0;
    u_xlat18 = (-u_xlat0.x) + 1.0;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 106 math, 4 textures, 2 branches
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_WorldToShadow[4];

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15);
  xlv_TEXCOORD6 = (unity_WorldToShadow[0] * tmpvar_15);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic));
  tmpvar_2 = (tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_7 = normalize(tmpvar_5);
  float tmpvar_8;
  tmpvar_8 = max (0.0, dot (tmpvar_4, tmpvar_7));
  tmpvar_6 = (_LightColor0.xyz * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w)
   * texture2D (_LightTextureB0, vec2(
    dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz)
  )).w) * (_LightShadowData.x + 
    (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x * (1.0 - _LightShadowData.x))
  )));
  vec3 viewDir_9;
  viewDir_9 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_10;
  float tmpvar_11;
  tmpvar_11 = (1.0 - _Glossiness);
  vec3 tmpvar_12;
  vec3 inVec_13;
  inVec_13 = (tmpvar_7 + viewDir_9);
  tmpvar_12 = (inVec_13 * inversesqrt(max (0.001, 
    dot (inVec_13, inVec_13)
  )));
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_12));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, viewDir_9));
  float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_7, tmpvar_12));
  float tmpvar_17;
  tmpvar_17 = (tmpvar_11 * tmpvar_11);
  float tmpvar_18;
  tmpvar_18 = (tmpvar_11 * tmpvar_11);
  float tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  float tmpvar_20;
  tmpvar_20 = (((tmpvar_14 * tmpvar_14) * (tmpvar_19 - 1.0)) + 1.0);
  float x_21;
  x_21 = (1.0 - tmpvar_8);
  float x_22;
  x_22 = (1.0 - tmpvar_15);
  float tmpvar_23;
  tmpvar_23 = (0.5 + ((2.0 * tmpvar_16) * (tmpvar_16 * tmpvar_11)));
  float tmpvar_24;
  tmpvar_24 = ((1.0 + (
    (tmpvar_23 - 1.0)
   * 
    ((x_21 * x_21) * ((x_21 * x_21) * x_21))
  )) * (1.0 + (
    (tmpvar_23 - 1.0)
   * 
    ((x_22 * x_22) * ((x_22 * x_22) * x_22))
  )));
  float tmpvar_25;
  tmpvar_25 = (((2.0 / 
    (((tmpvar_8 * (
      (tmpvar_15 * (1.0 - tmpvar_17))
     + tmpvar_17)) + (tmpvar_15 * (
      (tmpvar_8 * (1.0 - tmpvar_17))
     + tmpvar_17))) + 1e-05)
  ) * (tmpvar_19 / 
    (((3.141593 * tmpvar_20) * tmpvar_20) + 1e-07)
  )) * 0.7853982);
  specularTerm_10 = tmpvar_25;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_10 = sqrt(max (0.0001, tmpvar_25));
  };
  float tmpvar_26;
  tmpvar_26 = max (0.0, (specularTerm_10 * tmpvar_8));
  specularTerm_10 = tmpvar_26;
  float tmpvar_27;
  tmpvar_27 = (tmpvar_24 * tmpvar_8);
  float tmpvar_28;
  if (any(bvec3(tmpvar_3))) {
    tmpvar_28 = 1.0;
  } else {
    tmpvar_28 = 0.0;
  };
  specularTerm_10 = (tmpvar_26 * tmpvar_28);
  float x_29;
  x_29 = (1.0 - tmpvar_16);
  vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = ((tmpvar_2 * (tmpvar_6 * tmpvar_27)) + ((specularTerm_10 * tmpvar_6) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * ((x_29 * x_29) * ((x_29 * x_29) * x_29)))
  )));
  vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = tmpvar_30.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "metal " {
// Stats: 22 math, 1 branches
Keywords { "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 592
Matrix 32 [unity_WorldToShadow] 4 4
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [unity_ObjectToWorld]
Matrix 416 [unity_WorldToObject]
Matrix 528 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 480 [_MainTex_ST]
Vector 496 [_DetailAlbedoMap_ST]
ScalarHalf 512 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 unity_WorldToShadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22);
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u.unity_WorldToShadow[0] * tmpvar_22);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD5 = hlslcc_mtx4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD6 = hlslcc_mtx4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp float u_xlat10_6;
float u_xlat7;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
    u_xlat10_0 = texture(_LightTexture0, u_xlat0.xy);
    u_xlatb0 = 0.0<vs_TEXCOORD5.z;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat10_0.w * u_xlat0.x;
    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTextureB0, u_xlat6.xx);
    u_xlat0.x = u_xlat0.x * u_xlat10_1.w;
    u_xlat6.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
    u_xlat10_6 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat12 = (-_LightShadowData.x) + 1.0;
    u_xlat6.x = u_xlat10_6 * u_xlat12 + _LightShadowData.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, (-u_xlat1.xyz));
    u_xlat7 = max(u_xlat2.x, 0.0);
    u_xlat1.xz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat19 = (-_Glossiness) + 1.0;
    u_xlat2.x = u_xlat19 * u_xlat19;
    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat8 = u_xlat2.x * u_xlat2.x;
    u_xlat18 = u_xlat8 / u_xlat18;
    u_xlat8 = (-u_xlat19) * u_xlat19 + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat7 * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat1.x * u_xlat2.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat2.x = u_xlat7 * u_xlat14 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
    u_xlat2.x = 2.0 / u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb20 = u_xlat20!=0.0;
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat1.z) + 1.0;
    u_xlat13 = dot(u_xlat1.zz, u_xlat1.zz);
    u_xlat13 = u_xlat13 * u_xlat19 + -0.5;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat7) + 1.0;
    u_xlat19 = u_xlat1.x * u_xlat1.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat1.x = u_xlat1.x * u_xlat19;
    u_xlat1.x = u_xlat13 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 94 math, 2 textures, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec4 o_14;
  vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_7 * 0.5);
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_7.zw;
  vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_17.x;
  tmpvar_4.w = tmpvar_17.y;
  tmpvar_5.w = tmpvar_17.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = o_14;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic));
  tmpvar_2 = (tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = max (0.0, dot (tmpvar_4, tmpvar_5));
  tmpvar_6 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x);
  vec3 viewDir_8;
  viewDir_8 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_9;
  float tmpvar_10;
  tmpvar_10 = (1.0 - _Glossiness);
  vec3 tmpvar_11;
  vec3 inVec_12;
  inVec_12 = (tmpvar_5 + viewDir_8);
  tmpvar_11 = (inVec_12 * inversesqrt(max (0.001, 
    dot (inVec_12, inVec_12)
  )));
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_11));
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_4, viewDir_8));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_11));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_10 * tmpvar_10);
  float tmpvar_17;
  tmpvar_17 = (tmpvar_10 * tmpvar_10);
  float tmpvar_18;
  tmpvar_18 = (tmpvar_17 * tmpvar_17);
  float tmpvar_19;
  tmpvar_19 = (((tmpvar_13 * tmpvar_13) * (tmpvar_18 - 1.0)) + 1.0);
  float x_20;
  x_20 = (1.0 - tmpvar_7);
  float x_21;
  x_21 = (1.0 - tmpvar_14);
  float tmpvar_22;
  tmpvar_22 = (0.5 + ((2.0 * tmpvar_15) * (tmpvar_15 * tmpvar_10)));
  float tmpvar_23;
  tmpvar_23 = ((1.0 + (
    (tmpvar_22 - 1.0)
   * 
    ((x_20 * x_20) * ((x_20 * x_20) * x_20))
  )) * (1.0 + (
    (tmpvar_22 - 1.0)
   * 
    ((x_21 * x_21) * ((x_21 * x_21) * x_21))
  )));
  float tmpvar_24;
  tmpvar_24 = (((2.0 / 
    (((tmpvar_7 * (
      (tmpvar_14 * (1.0 - tmpvar_16))
     + tmpvar_16)) + (tmpvar_14 * (
      (tmpvar_7 * (1.0 - tmpvar_16))
     + tmpvar_16))) + 1e-05)
  ) * (tmpvar_18 / 
    (((3.141593 * tmpvar_19) * tmpvar_19) + 1e-07)
  )) * 0.7853982);
  specularTerm_9 = tmpvar_24;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_9 = sqrt(max (0.0001, tmpvar_24));
  };
  float tmpvar_25;
  tmpvar_25 = max (0.0, (specularTerm_9 * tmpvar_7));
  specularTerm_9 = tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = (tmpvar_23 * tmpvar_7);
  float tmpvar_27;
  if (any(bvec3(tmpvar_3))) {
    tmpvar_27 = 1.0;
  } else {
    tmpvar_27 = 0.0;
  };
  specularTerm_9 = (tmpvar_25 * tmpvar_27);
  float x_28;
  x_28 = (1.0 - tmpvar_15);
  vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = ((tmpvar_2 * (tmpvar_6 * tmpvar_26)) + ((specularTerm_9 * tmpvar_6) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * ((x_28 * x_28) * ((x_28 * x_28) * x_28)))
  )));
  vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = tmpvar_29.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif
"
}
SubProgram "metal " {
// Stats: 22 math, 1 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 274
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
VectorHalf 32 [_WorldSpaceLightPos0] 4
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 n_13;
  n_13 = (tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_12 = half3(n_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float4 o_19;
  float4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  float2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _mtl_u._ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  float3 tmpvar_22;
  tmpvar_22 = ((float3)_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_7.xyz * (float)_mtl_u._WorldSpaceLightPos0.w));
  tmpvar_4.w = half(tmpvar_22.x);
  tmpvar_5.w = half(tmpvar_22.y);
  tmpvar_6.w = half(tmpvar_22.z);
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = o_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
vec2 u_xlat12;
float u_xlat13;
bool u_xlatb13;
float u_xlat18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat0.w = dot(u_xlat0.xyz, (-u_xlat3.xyz));
    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat19 = max(u_xlat19, 0.00100000005);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat12.x = max(u_xlat19, 0.0);
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat1.x = (-_Glossiness) + 1.0;
    u_xlat7.x = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
    u_xlat12.x = u_xlat12.x * u_xlat13 + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * 3.14159274 + 1.00000001e-07;
    u_xlat13 = u_xlat7.x * u_xlat7.x;
    u_xlat12.x = u_xlat13 / u_xlat12.x;
    u_xlat13 = (-u_xlat1.x) * u_xlat1.x + 1.0;
    u_xlat19 = u_xlat0.w * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.w * u_xlat7.x;
    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
    u_xlat7.x = 2.0 / u_xlat7.x;
    u_xlat12.x = u_xlat12.x * u_xlat7.x;
    u_xlat12.x = u_xlat12.x * 0.785398185;
    u_xlat7.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat12.x = (u_xlatb13) ? u_xlat7.x : u_xlat12.x;
    u_xlat12.x = u_xlat0.x * u_xlat12.x;
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat7.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb20 = u_xlat20!=0.0;
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat12.x * u_xlat20;
    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat3.xy);
    u_xlat3.xyz = u_xlat10_3.xxx * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.xy = (-u_xlat0.yw) + vec2(1.0, 1.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = dot(vec2(u_xlat6), u_xlat1.xx);
    u_xlat6 = u_xlat6 + -0.5;
    u_xlat1.x = u_xlat12.x * u_xlat12.x;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat12.xxx + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xyz;
    u_xlat12.x = u_xlat12.y * u_xlat12.y;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.y * u_xlat12.x;
    u_xlat12.x = u_xlat6 * u_xlat12.x + 1.0;
    u_xlat18 = (-u_xlat0.x) + 1.0;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 95 math, 3 textures, 2 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec4 o_14;
  vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_7 * 0.5);
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_7.zw;
  vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_17.x;
  tmpvar_4.w = tmpvar_17.y;
  tmpvar_5.w = tmpvar_17.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex)).xy;
  xlv_TEXCOORD6 = o_14;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic));
  tmpvar_2 = (tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = max (0.0, dot (tmpvar_4, tmpvar_5));
  tmpvar_6 = (_LightColor0.xyz * (texture2D (_LightTexture0, xlv_TEXCOORD5).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x));
  vec3 viewDir_8;
  viewDir_8 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_9;
  float tmpvar_10;
  tmpvar_10 = (1.0 - _Glossiness);
  vec3 tmpvar_11;
  vec3 inVec_12;
  inVec_12 = (tmpvar_5 + viewDir_8);
  tmpvar_11 = (inVec_12 * inversesqrt(max (0.001, 
    dot (inVec_12, inVec_12)
  )));
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_11));
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_4, viewDir_8));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_11));
  float tmpvar_16;
  tmpvar_16 = (tmpvar_10 * tmpvar_10);
  float tmpvar_17;
  tmpvar_17 = (tmpvar_10 * tmpvar_10);
  float tmpvar_18;
  tmpvar_18 = (tmpvar_17 * tmpvar_17);
  float tmpvar_19;
  tmpvar_19 = (((tmpvar_13 * tmpvar_13) * (tmpvar_18 - 1.0)) + 1.0);
  float x_20;
  x_20 = (1.0 - tmpvar_7);
  float x_21;
  x_21 = (1.0 - tmpvar_14);
  float tmpvar_22;
  tmpvar_22 = (0.5 + ((2.0 * tmpvar_15) * (tmpvar_15 * tmpvar_10)));
  float tmpvar_23;
  tmpvar_23 = ((1.0 + (
    (tmpvar_22 - 1.0)
   * 
    ((x_20 * x_20) * ((x_20 * x_20) * x_20))
  )) * (1.0 + (
    (tmpvar_22 - 1.0)
   * 
    ((x_21 * x_21) * ((x_21 * x_21) * x_21))
  )));
  float tmpvar_24;
  tmpvar_24 = (((2.0 / 
    (((tmpvar_7 * (
      (tmpvar_14 * (1.0 - tmpvar_16))
     + tmpvar_16)) + (tmpvar_14 * (
      (tmpvar_7 * (1.0 - tmpvar_16))
     + tmpvar_16))) + 1e-05)
  ) * (tmpvar_18 / 
    (((3.141593 * tmpvar_19) * tmpvar_19) + 1e-07)
  )) * 0.7853982);
  specularTerm_9 = tmpvar_24;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_9 = sqrt(max (0.0001, tmpvar_24));
  };
  float tmpvar_25;
  tmpvar_25 = max (0.0, (specularTerm_9 * tmpvar_7));
  specularTerm_9 = tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = (tmpvar_23 * tmpvar_7);
  float tmpvar_27;
  if (any(bvec3(tmpvar_3))) {
    tmpvar_27 = 1.0;
  } else {
    tmpvar_27 = 0.0;
  };
  specularTerm_9 = (tmpvar_25 * tmpvar_27);
  float x_28;
  x_28 = (1.0 - tmpvar_15);
  vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = ((tmpvar_2 * (tmpvar_6 * tmpvar_26)) + ((specularTerm_9 * tmpvar_6) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * ((x_28 * x_28) * ((x_28 * x_28) * x_28)))
  )));
  vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = tmpvar_29.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif
"
}
SubProgram "metal " {
// Stats: 24 math, 1 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 352
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Matrix 288 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
VectorHalf 32 [_WorldSpaceLightPos0] 4
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float2 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 n_13;
  n_13 = (tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_12 = half3(n_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float4 o_19;
  float4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  float2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _mtl_u._ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  float3 tmpvar_22;
  tmpvar_22 = ((float3)_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_7.xyz * (float)_mtl_u._WorldSpaceLightPos0.w));
  tmpvar_4.w = half(tmpvar_22.x);
  tmpvar_5.w = half(tmpvar_22.y);
  tmpvar_6.w = half(tmpvar_22.z);
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex)).xy;
  _mtl_o.xlv_TEXCOORD6 = o_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat2.xy;
    u_xlat1.xy = hlslcc_mtx4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat1.xy;
    vs_TEXCOORD5.xy = hlslcc_mtx4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat1.xy;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec2 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
vec2 u_xlat12;
float u_xlat13;
bool u_xlatb13;
float u_xlat18;
float u_xlat19;
float u_xlat20;
mediump float u_xlat16_20;
bool u_xlatb20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat0.w = dot(u_xlat0.xyz, (-u_xlat3.xyz));
    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat19 = max(u_xlat19, 0.00100000005);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat12.x = max(u_xlat19, 0.0);
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat1.x = (-_Glossiness) + 1.0;
    u_xlat7.x = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
    u_xlat12.x = u_xlat12.x * u_xlat13 + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * 3.14159274 + 1.00000001e-07;
    u_xlat13 = u_xlat7.x * u_xlat7.x;
    u_xlat12.x = u_xlat13 / u_xlat12.x;
    u_xlat13 = (-u_xlat1.x) * u_xlat1.x + 1.0;
    u_xlat19 = u_xlat0.w * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.w * u_xlat7.x;
    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
    u_xlat7.x = 2.0 / u_xlat7.x;
    u_xlat12.x = u_xlat12.x * u_xlat7.x;
    u_xlat12.x = u_xlat12.x * 0.785398185;
    u_xlat7.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat12.x = (u_xlatb13) ? u_xlat7.x : u_xlat12.x;
    u_xlat12.x = u_xlat0.x * u_xlat12.x;
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat7.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb20 = u_xlat20!=0.0;
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat12.x * u_xlat20;
    u_xlat3.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat3.xy);
    u_xlat10_4 = texture(_LightTexture0, vs_TEXCOORD5.xy);
    u_xlat16_20 = u_xlat10_3.x * u_xlat10_4.w;
    u_xlat3.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.xy = (-u_xlat0.yw) + vec2(1.0, 1.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = dot(vec2(u_xlat6), u_xlat1.xx);
    u_xlat6 = u_xlat6 + -0.5;
    u_xlat1.x = u_xlat12.x * u_xlat12.x;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat12.xxx + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xyz;
    u_xlat12.x = u_xlat12.y * u_xlat12.y;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.y * u_xlat12.x;
    u_xlat12.x = u_xlat6 * u_xlat12.x + 1.0;
    u_xlat18 = (-u_xlat0.x) + 1.0;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 103 math, 3 textures, 3 branches
Keywords { "POINT" "SHADOWS_CUBE" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15).xyz;
  xlv_TEXCOORD6 = (tmpvar_15.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic));
  tmpvar_2 = (tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  float mydist_8;
  mydist_8 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_9;
  tmpvar_9 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_10;
  if ((tmpvar_9.x < mydist_8)) {
    tmpvar_10 = _LightShadowData.x;
  } else {
    tmpvar_10 = 1.0;
  };
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_6);
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_12));
  tmpvar_11 = (_LightColor0.xyz * (tmpvar_7.w * tmpvar_10));
  vec3 viewDir_14;
  viewDir_14 = -(tmpvar_5);
  float specularTerm_15;
  float tmpvar_16;
  tmpvar_16 = (1.0 - _Glossiness);
  vec3 tmpvar_17;
  vec3 inVec_18;
  inVec_18 = (tmpvar_12 + viewDir_14);
  tmpvar_17 = (inVec_18 * inversesqrt(max (0.001, 
    dot (inVec_18, inVec_18)
  )));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_17));
  float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, viewDir_14));
  float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_12, tmpvar_17));
  float tmpvar_22;
  tmpvar_22 = (tmpvar_16 * tmpvar_16);
  float tmpvar_23;
  tmpvar_23 = (tmpvar_16 * tmpvar_16);
  float tmpvar_24;
  tmpvar_24 = (tmpvar_23 * tmpvar_23);
  float tmpvar_25;
  tmpvar_25 = (((tmpvar_19 * tmpvar_19) * (tmpvar_24 - 1.0)) + 1.0);
  float x_26;
  x_26 = (1.0 - tmpvar_13);
  float x_27;
  x_27 = (1.0 - tmpvar_20);
  float tmpvar_28;
  tmpvar_28 = (0.5 + ((2.0 * tmpvar_21) * (tmpvar_21 * tmpvar_16)));
  float tmpvar_29;
  tmpvar_29 = ((1.0 + (
    (tmpvar_28 - 1.0)
   * 
    ((x_26 * x_26) * ((x_26 * x_26) * x_26))
  )) * (1.0 + (
    (tmpvar_28 - 1.0)
   * 
    ((x_27 * x_27) * ((x_27 * x_27) * x_27))
  )));
  float tmpvar_30;
  tmpvar_30 = (((2.0 / 
    (((tmpvar_13 * (
      (tmpvar_20 * (1.0 - tmpvar_22))
     + tmpvar_22)) + (tmpvar_20 * (
      (tmpvar_13 * (1.0 - tmpvar_22))
     + tmpvar_22))) + 1e-05)
  ) * (tmpvar_24 / 
    (((3.141593 * tmpvar_25) * tmpvar_25) + 1e-07)
  )) * 0.7853982);
  specularTerm_15 = tmpvar_30;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_15 = sqrt(max (0.0001, tmpvar_30));
  };
  float tmpvar_31;
  tmpvar_31 = max (0.0, (specularTerm_15 * tmpvar_13));
  specularTerm_15 = tmpvar_31;
  float tmpvar_32;
  tmpvar_32 = (tmpvar_29 * tmpvar_13);
  float tmpvar_33;
  if (any(bvec3(tmpvar_3))) {
    tmpvar_33 = 1.0;
  } else {
    tmpvar_33 = 0.0;
  };
  specularTerm_15 = (tmpvar_31 * tmpvar_33);
  float x_34;
  x_34 = (1.0 - tmpvar_21);
  vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = ((tmpvar_2 * (tmpvar_11 * tmpvar_32)) + ((specularTerm_15 * tmpvar_11) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * ((x_34 * x_34) * ((x_34 * x_34) * x_34)))
  )));
  vec4 xlat_varoutput_36;
  xlat_varoutput_36.xyz = tmpvar_35.xyz;
  xlat_varoutput_36.w = 1.0;
  gl_FragData[0] = xlat_varoutput_36;
}


#endif
"
}
SubProgram "metal " {
// Stats: 22 math, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 352
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Matrix 288 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22).xyz;
  _mtl_o.xlv_TEXCOORD6 = (tmpvar_22.xyz - _mtl_u._LightPositionRange.xyz);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bool u_xlatb8;
float u_xlat13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * 0.970000029;
    u_xlat10_1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    u_xlatb0 = u_xlat10_1.x<u_xlat0.x;
    u_xlat0.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat6 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTexture0, vec2(u_xlat6));
    u_xlat0.x = u_xlat0.x * u_xlat10_1.w;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, (-u_xlat1.xyz));
    u_xlat7 = max(u_xlat2.x, 0.0);
    u_xlat1.xz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat19 = (-_Glossiness) + 1.0;
    u_xlat2.x = u_xlat19 * u_xlat19;
    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat8 = u_xlat2.x * u_xlat2.x;
    u_xlat18 = u_xlat8 / u_xlat18;
    u_xlat8 = (-u_xlat19) * u_xlat19 + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat7 * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat1.x * u_xlat2.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat2.x = u_xlat7 * u_xlat14 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
    u_xlat2.x = 2.0 / u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb20 = u_xlat20!=0.0;
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat1.z) + 1.0;
    u_xlat13 = dot(u_xlat1.zz, u_xlat1.zz);
    u_xlat13 = u_xlat13 * u_xlat19 + -0.5;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat7) + 1.0;
    u_xlat19 = u_xlat1.x * u_xlat1.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat1.x = u_xlat1.x * u_xlat19;
    u_xlat1.x = u_xlat13 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 104 math, 4 textures, 3 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15).xyz;
  xlv_TEXCOORD6 = (tmpvar_15.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic));
  tmpvar_2 = (tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_8;
  tmpvar_8 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  float mydist_9;
  mydist_9 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_10;
  tmpvar_10 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_11;
  if ((tmpvar_10.x < mydist_9)) {
    tmpvar_11 = _LightShadowData.x;
  } else {
    tmpvar_11 = 1.0;
  };
  vec3 tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_6);
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_13));
  tmpvar_12 = (_LightColor0.xyz * ((tmpvar_7.w * tmpvar_8.w) * tmpvar_11));
  vec3 viewDir_15;
  viewDir_15 = -(tmpvar_5);
  float specularTerm_16;
  float tmpvar_17;
  tmpvar_17 = (1.0 - _Glossiness);
  vec3 tmpvar_18;
  vec3 inVec_19;
  inVec_19 = (tmpvar_13 + viewDir_15);
  tmpvar_18 = (inVec_19 * inversesqrt(max (0.001, 
    dot (inVec_19, inVec_19)
  )));
  float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_18));
  float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, viewDir_15));
  float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_13, tmpvar_18));
  float tmpvar_23;
  tmpvar_23 = (tmpvar_17 * tmpvar_17);
  float tmpvar_24;
  tmpvar_24 = (tmpvar_17 * tmpvar_17);
  float tmpvar_25;
  tmpvar_25 = (tmpvar_24 * tmpvar_24);
  float tmpvar_26;
  tmpvar_26 = (((tmpvar_20 * tmpvar_20) * (tmpvar_25 - 1.0)) + 1.0);
  float x_27;
  x_27 = (1.0 - tmpvar_14);
  float x_28;
  x_28 = (1.0 - tmpvar_21);
  float tmpvar_29;
  tmpvar_29 = (0.5 + ((2.0 * tmpvar_22) * (tmpvar_22 * tmpvar_17)));
  float tmpvar_30;
  tmpvar_30 = ((1.0 + (
    (tmpvar_29 - 1.0)
   * 
    ((x_27 * x_27) * ((x_27 * x_27) * x_27))
  )) * (1.0 + (
    (tmpvar_29 - 1.0)
   * 
    ((x_28 * x_28) * ((x_28 * x_28) * x_28))
  )));
  float tmpvar_31;
  tmpvar_31 = (((2.0 / 
    (((tmpvar_14 * (
      (tmpvar_21 * (1.0 - tmpvar_23))
     + tmpvar_23)) + (tmpvar_21 * (
      (tmpvar_14 * (1.0 - tmpvar_23))
     + tmpvar_23))) + 1e-05)
  ) * (tmpvar_25 / 
    (((3.141593 * tmpvar_26) * tmpvar_26) + 1e-07)
  )) * 0.7853982);
  specularTerm_16 = tmpvar_31;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_16 = sqrt(max (0.0001, tmpvar_31));
  };
  float tmpvar_32;
  tmpvar_32 = max (0.0, (specularTerm_16 * tmpvar_14));
  specularTerm_16 = tmpvar_32;
  float tmpvar_33;
  tmpvar_33 = (tmpvar_30 * tmpvar_14);
  float tmpvar_34;
  if (any(bvec3(tmpvar_3))) {
    tmpvar_34 = 1.0;
  } else {
    tmpvar_34 = 0.0;
  };
  specularTerm_16 = (tmpvar_32 * tmpvar_34);
  float x_35;
  x_35 = (1.0 - tmpvar_22);
  vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = ((tmpvar_2 * (tmpvar_12 * tmpvar_33)) + ((specularTerm_16 * tmpvar_12) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * ((x_35 * x_35) * ((x_35 * x_35) * x_35)))
  )));
  vec4 xlat_varoutput_37;
  xlat_varoutput_37.xyz = tmpvar_36.xyz;
  xlat_varoutput_37.w = 1.0;
  gl_FragData[0] = xlat_varoutput_37;
}


#endif
"
}
SubProgram "metal " {
// Stats: 22 math, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 352
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Matrix 288 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22).xyz;
  _mtl_o.xlv_TEXCOORD6 = (tmpvar_22.xyz - _mtl_u._LightPositionRange.xyz);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
float u_xlat8;
bool u_xlatb8;
float u_xlat13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * 0.970000029;
    u_xlat10_1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    u_xlatb0 = u_xlat10_1.x<u_xlat0.x;
    u_xlat0.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat6 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTextureB0, vec2(u_xlat6));
    u_xlat10_2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
    u_xlat16_6 = u_xlat10_1.w * u_xlat10_2.w;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, (-u_xlat1.xyz));
    u_xlat7 = max(u_xlat2.x, 0.0);
    u_xlat1.xz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat19 = (-_Glossiness) + 1.0;
    u_xlat2.x = u_xlat19 * u_xlat19;
    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat8 = u_xlat2.x * u_xlat2.x;
    u_xlat18 = u_xlat8 / u_xlat18;
    u_xlat8 = (-u_xlat19) * u_xlat19 + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat7 * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat1.x * u_xlat2.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat2.x = u_xlat7 * u_xlat14 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
    u_xlat2.x = 2.0 / u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb20 = u_xlat20!=0.0;
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat1.z) + 1.0;
    u_xlat13 = dot(u_xlat1.zz, u_xlat1.zz);
    u_xlat13 = u_xlat13 * u_xlat19 + -0.5;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat7) + 1.0;
    u_xlat19 = u_xlat1.x * u_xlat1.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat1.x = u_xlat1.x * u_xlat19;
    u_xlat1.x = u_xlat13 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 112 math, 7 textures, 2 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_WorldToShadow[4];

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15);
  xlv_TEXCOORD6 = (unity_WorldToShadow[0] * tmpvar_15);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2DShadow _ShadowMapTexture;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic));
  tmpvar_2 = (tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec4 shadows_6;
  vec3 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w);
  shadows_6.x = shadow2D (_ShadowMapTexture, (tmpvar_7 + _ShadowOffsets[0].xyz)).x;
  shadows_6.y = shadow2D (_ShadowMapTexture, (tmpvar_7 + _ShadowOffsets[1].xyz)).x;
  shadows_6.z = shadow2D (_ShadowMapTexture, (tmpvar_7 + _ShadowOffsets[2].xyz)).x;
  shadows_6.w = shadow2D (_ShadowMapTexture, (tmpvar_7 + _ShadowOffsets[3].xyz)).x;
  shadows_6 = (_LightShadowData.xxxx + (shadows_6 * (1.0 - _LightShadowData.xxxx)));
  vec3 tmpvar_8;
  vec3 tmpvar_9;
  tmpvar_9 = normalize(tmpvar_5);
  float tmpvar_10;
  tmpvar_10 = max (0.0, dot (tmpvar_4, tmpvar_9));
  tmpvar_8 = (_LightColor0.xyz * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w)
   * texture2D (_LightTextureB0, vec2(
    dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz)
  )).w) * dot (shadows_6, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_11;
  viewDir_11 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_12;
  float tmpvar_13;
  tmpvar_13 = (1.0 - _Glossiness);
  vec3 tmpvar_14;
  vec3 inVec_15;
  inVec_15 = (tmpvar_9 + viewDir_11);
  tmpvar_14 = (inVec_15 * inversesqrt(max (0.001, 
    dot (inVec_15, inVec_15)
  )));
  float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_14));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_4, viewDir_11));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_9, tmpvar_14));
  float tmpvar_19;
  tmpvar_19 = (tmpvar_13 * tmpvar_13);
  float tmpvar_20;
  tmpvar_20 = (tmpvar_13 * tmpvar_13);
  float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  float tmpvar_22;
  tmpvar_22 = (((tmpvar_16 * tmpvar_16) * (tmpvar_21 - 1.0)) + 1.0);
  float x_23;
  x_23 = (1.0 - tmpvar_10);
  float x_24;
  x_24 = (1.0 - tmpvar_17);
  float tmpvar_25;
  tmpvar_25 = (0.5 + ((2.0 * tmpvar_18) * (tmpvar_18 * tmpvar_13)));
  float tmpvar_26;
  tmpvar_26 = ((1.0 + (
    (tmpvar_25 - 1.0)
   * 
    ((x_23 * x_23) * ((x_23 * x_23) * x_23))
  )) * (1.0 + (
    (tmpvar_25 - 1.0)
   * 
    ((x_24 * x_24) * ((x_24 * x_24) * x_24))
  )));
  float tmpvar_27;
  tmpvar_27 = (((2.0 / 
    (((tmpvar_10 * (
      (tmpvar_17 * (1.0 - tmpvar_19))
     + tmpvar_19)) + (tmpvar_17 * (
      (tmpvar_10 * (1.0 - tmpvar_19))
     + tmpvar_19))) + 1e-05)
  ) * (tmpvar_21 / 
    (((3.141593 * tmpvar_22) * tmpvar_22) + 1e-07)
  )) * 0.7853982);
  specularTerm_12 = tmpvar_27;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_12 = sqrt(max (0.0001, tmpvar_27));
  };
  float tmpvar_28;
  tmpvar_28 = max (0.0, (specularTerm_12 * tmpvar_10));
  specularTerm_12 = tmpvar_28;
  float tmpvar_29;
  tmpvar_29 = (tmpvar_26 * tmpvar_10);
  float tmpvar_30;
  if (any(bvec3(tmpvar_3))) {
    tmpvar_30 = 1.0;
  } else {
    tmpvar_30 = 0.0;
  };
  specularTerm_12 = (tmpvar_28 * tmpvar_30);
  float x_31;
  x_31 = (1.0 - tmpvar_18);
  vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = ((tmpvar_2 * (tmpvar_8 * tmpvar_29)) + ((specularTerm_12 * tmpvar_8) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * ((x_31 * x_31) * ((x_31 * x_31) * x_31)))
  )));
  vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = tmpvar_32.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "metal " {
// Stats: 22 math, 1 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 592
Matrix 32 [unity_WorldToShadow] 4 4
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [unity_ObjectToWorld]
Matrix 416 [unity_WorldToObject]
Matrix 528 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 480 [_MainTex_ST]
Vector 496 [_DetailAlbedoMap_ST]
ScalarHalf 512 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 unity_WorldToShadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22);
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u.unity_WorldToShadow[0] * tmpvar_22);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD5 = hlslcc_mtx4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD6 = hlslcc_mtx4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 _ShadowOffsets[4];
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat7;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat0.x = (-_LightShadowData.x) + 1.0;
    u_xlat6.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    u_xlat1.xyz = u_xlat6.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat2.xyz = u_xlat6.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat2.xyz = u_xlat6.xyz + _ShadowOffsets[2].xyz;
    u_xlat6.xyz = u_xlat6.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec2 = vec3(u_xlat6.xy,u_xlat6.z);
    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0 = u_xlat1 * u_xlat0.xxxx + _LightShadowData.xxxx;
    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat10_1 = texture(_LightTexture0, u_xlat6.xy);
    u_xlatb6 = 0.0<vs_TEXCOORD5.z;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat6.x = u_xlat10_1.w * u_xlat6.x;
    u_xlat12 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTextureB0, vec2(u_xlat12));
    u_xlat6.x = u_xlat6.x * u_xlat10_1.w;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, (-u_xlat1.xyz));
    u_xlat7 = max(u_xlat2.x, 0.0);
    u_xlat1.xz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat19 = (-_Glossiness) + 1.0;
    u_xlat2.x = u_xlat19 * u_xlat19;
    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat8 = u_xlat2.x * u_xlat2.x;
    u_xlat18 = u_xlat8 / u_xlat18;
    u_xlat8 = (-u_xlat19) * u_xlat19 + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat7 * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat1.x * u_xlat2.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat2.x = u_xlat7 * u_xlat14 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
    u_xlat2.x = 2.0 / u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb20 = u_xlat20!=0.0;
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat1.z) + 1.0;
    u_xlat13 = u_xlat1.z * u_xlat1.z;
    u_xlat13 = dot(vec2(u_xlat13), vec2(u_xlat19));
    u_xlat13 = u_xlat13 + -0.5;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat7) + 1.0;
    u_xlat19 = u_xlat1.x * u_xlat1.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat1.x = u_xlat1.x * u_xlat19;
    u_xlat1.x = u_xlat13 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 111 math, 6 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15).xyz;
  xlv_TEXCOORD6 = (tmpvar_15.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic));
  tmpvar_2 = (tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 shadowVals_8;
  shadowVals_8.x = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, 0.0078125, 0.0078125))).x;
  shadowVals_8.y = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, -0.0078125, 0.0078125))).x;
  shadowVals_8.z = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, 0.0078125, -0.0078125))).x;
  shadowVals_8.w = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, -0.0078125, -0.0078125))).x;
  bvec4 tmpvar_9;
  tmpvar_9 = lessThan (shadowVals_8, vec4(((
    sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_10;
  tmpvar_10 = _LightShadowData.xxxx;
  float tmpvar_11;
  if (tmpvar_9.x) {
    tmpvar_11 = tmpvar_10.x;
  } else {
    tmpvar_11 = 1.0;
  };
  float tmpvar_12;
  if (tmpvar_9.y) {
    tmpvar_12 = tmpvar_10.y;
  } else {
    tmpvar_12 = 1.0;
  };
  float tmpvar_13;
  if (tmpvar_9.z) {
    tmpvar_13 = tmpvar_10.z;
  } else {
    tmpvar_13 = 1.0;
  };
  float tmpvar_14;
  if (tmpvar_9.w) {
    tmpvar_14 = tmpvar_10.w;
  } else {
    tmpvar_14 = 1.0;
  };
  vec4 tmpvar_15;
  tmpvar_15.x = tmpvar_11;
  tmpvar_15.y = tmpvar_12;
  tmpvar_15.z = tmpvar_13;
  tmpvar_15.w = tmpvar_14;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_6);
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_17));
  tmpvar_16 = (_LightColor0.xyz * (tmpvar_7.w * dot (tmpvar_15, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_19;
  viewDir_19 = -(tmpvar_5);
  float specularTerm_20;
  float tmpvar_21;
  tmpvar_21 = (1.0 - _Glossiness);
  vec3 tmpvar_22;
  vec3 inVec_23;
  inVec_23 = (tmpvar_17 + viewDir_19);
  tmpvar_22 = (inVec_23 * inversesqrt(max (0.001, 
    dot (inVec_23, inVec_23)
  )));
  float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_22));
  float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, viewDir_19));
  float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_17, tmpvar_22));
  float tmpvar_27;
  tmpvar_27 = (tmpvar_21 * tmpvar_21);
  float tmpvar_28;
  tmpvar_28 = (tmpvar_21 * tmpvar_21);
  float tmpvar_29;
  tmpvar_29 = (tmpvar_28 * tmpvar_28);
  float tmpvar_30;
  tmpvar_30 = (((tmpvar_24 * tmpvar_24) * (tmpvar_29 - 1.0)) + 1.0);
  float x_31;
  x_31 = (1.0 - tmpvar_18);
  float x_32;
  x_32 = (1.0 - tmpvar_25);
  float tmpvar_33;
  tmpvar_33 = (0.5 + ((2.0 * tmpvar_26) * (tmpvar_26 * tmpvar_21)));
  float tmpvar_34;
  tmpvar_34 = ((1.0 + (
    (tmpvar_33 - 1.0)
   * 
    ((x_31 * x_31) * ((x_31 * x_31) * x_31))
  )) * (1.0 + (
    (tmpvar_33 - 1.0)
   * 
    ((x_32 * x_32) * ((x_32 * x_32) * x_32))
  )));
  float tmpvar_35;
  tmpvar_35 = (((2.0 / 
    (((tmpvar_18 * (
      (tmpvar_25 * (1.0 - tmpvar_27))
     + tmpvar_27)) + (tmpvar_25 * (
      (tmpvar_18 * (1.0 - tmpvar_27))
     + tmpvar_27))) + 1e-05)
  ) * (tmpvar_29 / 
    (((3.141593 * tmpvar_30) * tmpvar_30) + 1e-07)
  )) * 0.7853982);
  specularTerm_20 = tmpvar_35;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_20 = sqrt(max (0.0001, tmpvar_35));
  };
  float tmpvar_36;
  tmpvar_36 = max (0.0, (specularTerm_20 * tmpvar_18));
  specularTerm_20 = tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = (tmpvar_34 * tmpvar_18);
  float tmpvar_38;
  if (any(bvec3(tmpvar_3))) {
    tmpvar_38 = 1.0;
  } else {
    tmpvar_38 = 0.0;
  };
  specularTerm_20 = (tmpvar_36 * tmpvar_38);
  float x_39;
  x_39 = (1.0 - tmpvar_26);
  vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = ((tmpvar_2 * (tmpvar_16 * tmpvar_37)) + ((specularTerm_20 * tmpvar_16) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * ((x_39 * x_39) * ((x_39 * x_39) * x_39)))
  )));
  vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = tmpvar_40.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "metal " {
// Stats: 22 math, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 352
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Matrix 288 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22).xyz;
  _mtl_o.xlv_TEXCOORD6 = (tmpvar_22.xyz - _mtl_u._LightPositionRange.xyz);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat8;
bool u_xlatb8;
float u_xlat13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * 0.970000029;
    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlat1.y = u_xlat10_2.x;
    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlat1.z = u_xlat10_2.x;
    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlat1.w = u_xlat10_2.x;
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTexture0, u_xlat6.xx);
    u_xlat0.x = u_xlat0.x * u_xlat10_1.w;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, (-u_xlat1.xyz));
    u_xlat7 = max(u_xlat2.x, 0.0);
    u_xlat1.xz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat19 = (-_Glossiness) + 1.0;
    u_xlat2.x = u_xlat19 * u_xlat19;
    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat8 = u_xlat2.x * u_xlat2.x;
    u_xlat18 = u_xlat8 / u_xlat18;
    u_xlat8 = (-u_xlat19) * u_xlat19 + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat7 * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat1.x * u_xlat2.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat2.x = u_xlat7 * u_xlat14 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
    u_xlat2.x = 2.0 / u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb20 = u_xlat20!=0.0;
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat1.z) + 1.0;
    u_xlat13 = u_xlat1.z * u_xlat1.z;
    u_xlat13 = dot(vec2(u_xlat13), vec2(u_xlat19));
    u_xlat13 = u_xlat13 + -0.5;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat7) + 1.0;
    u_xlat19 = u_xlat1.x * u_xlat1.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat1.x = u_xlat1.x * u_xlat19;
    u_xlat1.x = u_xlat13 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 112 math, 7 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15).xyz;
  xlv_TEXCOORD6 = (tmpvar_15.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic));
  tmpvar_2 = (tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_8;
  tmpvar_8 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  vec4 shadowVals_9;
  shadowVals_9.x = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, 0.0078125, 0.0078125))).x;
  shadowVals_9.y = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, -0.0078125, 0.0078125))).x;
  shadowVals_9.z = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, 0.0078125, -0.0078125))).x;
  shadowVals_9.w = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, -0.0078125, -0.0078125))).x;
  bvec4 tmpvar_10;
  tmpvar_10 = lessThan (shadowVals_9, vec4(((
    sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_11;
  tmpvar_11 = _LightShadowData.xxxx;
  float tmpvar_12;
  if (tmpvar_10.x) {
    tmpvar_12 = tmpvar_11.x;
  } else {
    tmpvar_12 = 1.0;
  };
  float tmpvar_13;
  if (tmpvar_10.y) {
    tmpvar_13 = tmpvar_11.y;
  } else {
    tmpvar_13 = 1.0;
  };
  float tmpvar_14;
  if (tmpvar_10.z) {
    tmpvar_14 = tmpvar_11.z;
  } else {
    tmpvar_14 = 1.0;
  };
  float tmpvar_15;
  if (tmpvar_10.w) {
    tmpvar_15 = tmpvar_11.w;
  } else {
    tmpvar_15 = 1.0;
  };
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_12;
  tmpvar_16.y = tmpvar_13;
  tmpvar_16.z = tmpvar_14;
  tmpvar_16.w = tmpvar_15;
  vec3 tmpvar_17;
  vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_6);
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_18));
  tmpvar_17 = (_LightColor0.xyz * ((tmpvar_7.w * tmpvar_8.w) * dot (tmpvar_16, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_20;
  viewDir_20 = -(tmpvar_5);
  float specularTerm_21;
  float tmpvar_22;
  tmpvar_22 = (1.0 - _Glossiness);
  vec3 tmpvar_23;
  vec3 inVec_24;
  inVec_24 = (tmpvar_18 + viewDir_20);
  tmpvar_23 = (inVec_24 * inversesqrt(max (0.001, 
    dot (inVec_24, inVec_24)
  )));
  float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_23));
  float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_4, viewDir_20));
  float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_18, tmpvar_23));
  float tmpvar_28;
  tmpvar_28 = (tmpvar_22 * tmpvar_22);
  float tmpvar_29;
  tmpvar_29 = (tmpvar_22 * tmpvar_22);
  float tmpvar_30;
  tmpvar_30 = (tmpvar_29 * tmpvar_29);
  float tmpvar_31;
  tmpvar_31 = (((tmpvar_25 * tmpvar_25) * (tmpvar_30 - 1.0)) + 1.0);
  float x_32;
  x_32 = (1.0 - tmpvar_19);
  float x_33;
  x_33 = (1.0 - tmpvar_26);
  float tmpvar_34;
  tmpvar_34 = (0.5 + ((2.0 * tmpvar_27) * (tmpvar_27 * tmpvar_22)));
  float tmpvar_35;
  tmpvar_35 = ((1.0 + (
    (tmpvar_34 - 1.0)
   * 
    ((x_32 * x_32) * ((x_32 * x_32) * x_32))
  )) * (1.0 + (
    (tmpvar_34 - 1.0)
   * 
    ((x_33 * x_33) * ((x_33 * x_33) * x_33))
  )));
  float tmpvar_36;
  tmpvar_36 = (((2.0 / 
    (((tmpvar_19 * (
      (tmpvar_26 * (1.0 - tmpvar_28))
     + tmpvar_28)) + (tmpvar_26 * (
      (tmpvar_19 * (1.0 - tmpvar_28))
     + tmpvar_28))) + 1e-05)
  ) * (tmpvar_30 / 
    (((3.141593 * tmpvar_31) * tmpvar_31) + 1e-07)
  )) * 0.7853982);
  specularTerm_21 = tmpvar_36;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_21 = sqrt(max (0.0001, tmpvar_36));
  };
  float tmpvar_37;
  tmpvar_37 = max (0.0, (specularTerm_21 * tmpvar_19));
  specularTerm_21 = tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = (tmpvar_35 * tmpvar_19);
  float tmpvar_39;
  if (any(bvec3(tmpvar_3))) {
    tmpvar_39 = 1.0;
  } else {
    tmpvar_39 = 0.0;
  };
  specularTerm_21 = (tmpvar_37 * tmpvar_39);
  float x_40;
  x_40 = (1.0 - tmpvar_27);
  vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = ((tmpvar_2 * (tmpvar_17 * tmpvar_38)) + ((specularTerm_21 * tmpvar_17) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * ((x_40 * x_40) * ((x_40 * x_40) * x_40)))
  )));
  vec4 xlat_varoutput_42;
  xlat_varoutput_42.xyz = tmpvar_41.xyz;
  xlat_varoutput_42.w = 1.0;
  gl_FragData[0] = xlat_varoutput_42;
}


#endif
"
}
SubProgram "metal " {
// Stats: 22 math, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 352
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Matrix 288 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22).xyz;
  _mtl_o.xlv_TEXCOORD6 = (tmpvar_22.xyz - _mtl_u._LightPositionRange.xyz);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
float u_xlat8;
bool u_xlatb8;
float u_xlat13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * 0.970000029;
    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlat1.y = u_xlat10_2.x;
    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlat1.z = u_xlat10_2.x;
    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlat1.w = u_xlat10_2.x;
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTextureB0, u_xlat6.xx);
    u_xlat10_2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
    u_xlat16_6 = u_xlat10_1.w * u_xlat10_2.w;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, (-u_xlat1.xyz));
    u_xlat7 = max(u_xlat2.x, 0.0);
    u_xlat1.xz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat19 = (-_Glossiness) + 1.0;
    u_xlat2.x = u_xlat19 * u_xlat19;
    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat8 = u_xlat2.x * u_xlat2.x;
    u_xlat18 = u_xlat8 / u_xlat18;
    u_xlat8 = (-u_xlat19) * u_xlat19 + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat7 * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat1.x * u_xlat2.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat2.x = u_xlat7 * u_xlat14 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
    u_xlat2.x = 2.0 / u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb20 = u_xlat20!=0.0;
    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat1.z) + 1.0;
    u_xlat13 = u_xlat1.z * u_xlat1.z;
    u_xlat13 = dot(vec2(u_xlat13), vec2(u_xlat19));
    u_xlat13 = u_xlat13 + -0.5;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat7) + 1.0;
    u_xlat19 = u_xlat1.x * u_xlat1.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat1.x = u_xlat1.x * u_xlat19;
    u_xlat1.x = u_xlat13 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 100 math, 2 textures, 2 branches
Keywords { "POINT" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_7;
  float outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = ((1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_9);
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_6, tmpvar_11));
  tmpvar_10 = (_LightColor0.xyz * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w);
  vec3 viewDir_13;
  viewDir_13 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_14;
  float tmpvar_15;
  tmpvar_15 = (1.0 - _Glossiness);
  vec3 tmpvar_16;
  vec3 inVec_17;
  inVec_17 = (tmpvar_11 + viewDir_13);
  tmpvar_16 = (inVec_17 * inversesqrt(max (0.001, 
    dot (inVec_17, inVec_17)
  )));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_6, tmpvar_16));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_6, viewDir_13));
  float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_11, tmpvar_16));
  float tmpvar_21;
  tmpvar_21 = (tmpvar_15 * tmpvar_15);
  float tmpvar_22;
  tmpvar_22 = (tmpvar_15 * tmpvar_15);
  float tmpvar_23;
  tmpvar_23 = (tmpvar_22 * tmpvar_22);
  float tmpvar_24;
  tmpvar_24 = (((tmpvar_18 * tmpvar_18) * (tmpvar_23 - 1.0)) + 1.0);
  float x_25;
  x_25 = (1.0 - tmpvar_12);
  float x_26;
  x_26 = (1.0 - tmpvar_19);
  float tmpvar_27;
  tmpvar_27 = (0.5 + ((2.0 * tmpvar_20) * (tmpvar_20 * tmpvar_15)));
  float tmpvar_28;
  tmpvar_28 = ((1.0 + (
    (tmpvar_27 - 1.0)
   * 
    ((x_25 * x_25) * ((x_25 * x_25) * x_25))
  )) * (1.0 + (
    (tmpvar_27 - 1.0)
   * 
    ((x_26 * x_26) * ((x_26 * x_26) * x_26))
  )));
  float tmpvar_29;
  tmpvar_29 = (((2.0 / 
    (((tmpvar_12 * (
      (tmpvar_19 * (1.0 - tmpvar_21))
     + tmpvar_21)) + (tmpvar_19 * (
      (tmpvar_12 * (1.0 - tmpvar_21))
     + tmpvar_21))) + 1e-05)
  ) * (tmpvar_23 / 
    (((3.141593 * tmpvar_24) * tmpvar_24) + 1e-07)
  )) * 0.7853982);
  specularTerm_14 = tmpvar_29;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_14 = sqrt(max (0.0001, tmpvar_29));
  };
  float tmpvar_30;
  tmpvar_30 = max (0.0, (specularTerm_14 * tmpvar_12));
  specularTerm_14 = tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = (tmpvar_28 * tmpvar_12);
  float tmpvar_32;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_32 = 1.0;
  } else {
    tmpvar_32 = 0.0;
  };
  specularTerm_14 = (tmpvar_30 * tmpvar_32);
  float x_33;
  x_33 = (1.0 - tmpvar_20);
  vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = ((diffColor_7 * (tmpvar_10 * tmpvar_31)) + ((specularTerm_14 * tmpvar_10) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * ((x_33 * x_33) * ((x_33 * x_33) * x_33)))
  )));
  vec4 xlat_varoutput_35;
  xlat_varoutput_35.xyz = tmpvar_34.xyz;
  xlat_varoutput_35.w = outModifiedAlpha_8;
  gl_FragData[0] = xlat_varoutput_35;
}


#endif
"
}
SubProgram "metal " {
// Stats: 21 math, 1 branches
Keywords { "POINT" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 336
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 272 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex)).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat7;
float u_xlat12;
float u_xlat13;
bool u_xlatb13;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + (-u_xlat0.xyz);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat1.w = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));
    u_xlat0.yz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
    u_xlat18 = u_xlat0.w * u_xlat0.w;
    u_xlat1.x = (-_Glossiness) + 1.0;
    u_xlat7.x = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat13 = u_xlat7.x * u_xlat7.x;
    u_xlat18 = u_xlat13 / u_xlat18;
    u_xlat13 = (-u_xlat1.x) * u_xlat1.x + 1.0;
    u_xlat19 = u_xlat0.x * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.y * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.x * u_xlat7.x;
    u_xlat7.x = u_xlat0.y * u_xlat19 + u_xlat7.x;
    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
    u_xlat7.x = 2.0 / u_xlat7.x;
    u_xlat18 = u_xlat18 * u_xlat7.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat7.x = max(u_xlat18, 9.99999975e-05);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb13) ? u_xlat7.x : u_xlat18;
    u_xlat18 = u_xlat0.y * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat7.xyz = u_xlat10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2 = u_xlat10_2 * _Color;
    u_xlat7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat3.x;
    u_xlat3.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_3 = texture(_LightTexture0, u_xlat3.xx);
    u_xlat3.xyz = u_xlat10_3.www * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat0.xw = (-u_xlat0.xz) + vec2(1.0, 1.0);
    u_xlat12 = dot(u_xlat0.zz, u_xlat0.zz);
    u_xlat12 = u_xlat12 * u_xlat1.x + -0.5;
    u_xlat1.x = u_xlat0.w * u_xlat0.w;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat0.w * u_xlat1.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat0.x * u_xlat0.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat18;
    u_xlat0.x = u_xlat12 * u_xlat0.x + 1.0;
    u_xlat18 = (-u_xlat0.y) + 1.0;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat12 = u_xlat12 * u_xlat18 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.x = (-u_xlat18) + 1.0;
    SV_Target0.w = u_xlat2.w * u_xlat18 + u_xlat0.x;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 97 math, 1 textures, 2 branches
Keywords { "DIRECTIONAL" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_7;
  float outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = ((1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  float tmpvar_10;
  tmpvar_10 = max (0.0, dot (tmpvar_6, tmpvar_9));
  vec3 viewDir_11;
  viewDir_11 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_12;
  float tmpvar_13;
  tmpvar_13 = (1.0 - _Glossiness);
  vec3 tmpvar_14;
  vec3 inVec_15;
  inVec_15 = (tmpvar_9 + viewDir_11);
  tmpvar_14 = (inVec_15 * inversesqrt(max (0.001, 
    dot (inVec_15, inVec_15)
  )));
  float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_6, tmpvar_14));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_6, viewDir_11));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_9, tmpvar_14));
  float tmpvar_19;
  tmpvar_19 = (tmpvar_13 * tmpvar_13);
  float tmpvar_20;
  tmpvar_20 = (tmpvar_13 * tmpvar_13);
  float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  float tmpvar_22;
  tmpvar_22 = (((tmpvar_16 * tmpvar_16) * (tmpvar_21 - 1.0)) + 1.0);
  float x_23;
  x_23 = (1.0 - tmpvar_10);
  float x_24;
  x_24 = (1.0 - tmpvar_17);
  float tmpvar_25;
  tmpvar_25 = (0.5 + ((2.0 * tmpvar_18) * (tmpvar_18 * tmpvar_13)));
  float tmpvar_26;
  tmpvar_26 = ((1.0 + (
    (tmpvar_25 - 1.0)
   * 
    ((x_23 * x_23) * ((x_23 * x_23) * x_23))
  )) * (1.0 + (
    (tmpvar_25 - 1.0)
   * 
    ((x_24 * x_24) * ((x_24 * x_24) * x_24))
  )));
  float tmpvar_27;
  tmpvar_27 = (((2.0 / 
    (((tmpvar_10 * (
      (tmpvar_17 * (1.0 - tmpvar_19))
     + tmpvar_19)) + (tmpvar_17 * (
      (tmpvar_10 * (1.0 - tmpvar_19))
     + tmpvar_19))) + 1e-05)
  ) * (tmpvar_21 / 
    (((3.141593 * tmpvar_22) * tmpvar_22) + 1e-07)
  )) * 0.7853982);
  specularTerm_12 = tmpvar_27;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_12 = sqrt(max (0.0001, tmpvar_27));
  };
  float tmpvar_28;
  tmpvar_28 = max (0.0, (specularTerm_12 * tmpvar_10));
  specularTerm_12 = tmpvar_28;
  float tmpvar_29;
  tmpvar_29 = (tmpvar_26 * tmpvar_10);
  float tmpvar_30;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_30 = 1.0;
  } else {
    tmpvar_30 = 0.0;
  };
  specularTerm_12 = (tmpvar_28 * tmpvar_30);
  float x_31;
  x_31 = (1.0 - tmpvar_18);
  vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = ((diffColor_7 * (_LightColor0.xyz * tmpvar_29)) + ((specularTerm_12 * _LightColor0.xyz) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * ((x_31 * x_31) * ((x_31 * x_31) * x_31)))
  )));
  vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = tmpvar_32.xyz;
  xlat_varoutput_33.w = outModifiedAlpha_8;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "metal " {
// Stats: 19 math, 1 branches
Keywords { "DIRECTIONAL" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 258
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 n_13;
  n_13 = (tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_12 = half3(n_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float3 tmpvar_19;
  tmpvar_19 = ((float3)_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_7.xyz * (float)_mtl_u._WorldSpaceLightPos0.w));
  tmpvar_4.w = half(tmpvar_19.x);
  tmpvar_5.w = half(tmpvar_19.y);
  tmpvar_6.w = half(tmpvar_19.z);
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec2 u_xlat10;
float u_xlat11;
bool u_xlatb11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat15) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
    u_xlat0.w = dot(u_xlat0.xyz, (-u_xlat3.xyz));
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = max(u_xlat16, 0.00100000005);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat10.x = max(u_xlat16, 0.0);
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat1.x = (-_Glossiness) + 1.0;
    u_xlat6.x = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat6.x * u_xlat6.x + -1.0;
    u_xlat10.x = u_xlat10.x * u_xlat11 + 1.0;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * 3.14159274 + 1.00000001e-07;
    u_xlat11 = u_xlat6.x * u_xlat6.x;
    u_xlat10.x = u_xlat11 / u_xlat10.x;
    u_xlat11 = (-u_xlat1.x) * u_xlat1.x + 1.0;
    u_xlat16 = u_xlat0.w * u_xlat11 + u_xlat6.x;
    u_xlat6.x = u_xlat0.x * u_xlat11 + u_xlat6.x;
    u_xlat6.x = u_xlat0.w * u_xlat6.x;
    u_xlat6.x = u_xlat0.x * u_xlat16 + u_xlat6.x;
    u_xlat6.x = u_xlat6.x + 9.99999975e-06;
    u_xlat6.x = 2.0 / u_xlat6.x;
    u_xlat10.x = u_xlat10.x * u_xlat6.x;
    u_xlat10.x = u_xlat10.x * 0.785398185;
    u_xlat6.x = max(u_xlat10.x, 9.99999975e-05);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlatb11 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat10.x = (u_xlatb11) ? u_xlat6.x : u_xlat10.x;
    u_xlat10.x = u_xlat0.x * u_xlat10.x;
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat6.xyz = u_xlat10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2 = u_xlat10_2 * _Color;
    u_xlat6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat6.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat10.x = u_xlat10.x * u_xlat3.x;
    u_xlat3.xyz = u_xlat10.xxx * _LightColor0.xyz;
    u_xlat10.xy = (-u_xlat0.yw) + vec2(1.0, 1.0);
    u_xlat5 = dot(u_xlat0.yy, u_xlat0.yy);
    u_xlat5 = u_xlat5 * u_xlat1.x + -0.5;
    u_xlat1.x = u_xlat10.x * u_xlat10.x;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat10.x = u_xlat10.x * u_xlat1.x;
    u_xlat4.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat10.xxx + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
    u_xlat10.x = u_xlat10.y * u_xlat10.y;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = u_xlat10.y * u_xlat10.x;
    u_xlat10.x = u_xlat5 * u_xlat10.x + 1.0;
    u_xlat15 = (-u_xlat0.x) + 1.0;
    u_xlat16 = u_xlat15 * u_xlat15;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat5 = u_xlat5 * u_xlat15 + 1.0;
    u_xlat5 = u_xlat10.x * u_xlat5;
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.x = (-u_xlat15) + 1.0;
    SV_Target0.w = u_xlat2.w * u_xlat15 + u_xlat0.x;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 106 math, 3 textures, 2 branches
Keywords { "SPOT" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex));
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_7;
  float outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = ((1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_9);
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_6, tmpvar_11));
  tmpvar_10 = (_LightColor0.xyz * ((
    float((xlv_TEXCOORD5.z > 0.0))
   * texture2D (_LightTexture0, 
    ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)
  ).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w));
  vec3 viewDir_13;
  viewDir_13 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_14;
  float tmpvar_15;
  tmpvar_15 = (1.0 - _Glossiness);
  vec3 tmpvar_16;
  vec3 inVec_17;
  inVec_17 = (tmpvar_11 + viewDir_13);
  tmpvar_16 = (inVec_17 * inversesqrt(max (0.001, 
    dot (inVec_17, inVec_17)
  )));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_6, tmpvar_16));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_6, viewDir_13));
  float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_11, tmpvar_16));
  float tmpvar_21;
  tmpvar_21 = (tmpvar_15 * tmpvar_15);
  float tmpvar_22;
  tmpvar_22 = (tmpvar_15 * tmpvar_15);
  float tmpvar_23;
  tmpvar_23 = (tmpvar_22 * tmpvar_22);
  float tmpvar_24;
  tmpvar_24 = (((tmpvar_18 * tmpvar_18) * (tmpvar_23 - 1.0)) + 1.0);
  float x_25;
  x_25 = (1.0 - tmpvar_12);
  float x_26;
  x_26 = (1.0 - tmpvar_19);
  float tmpvar_27;
  tmpvar_27 = (0.5 + ((2.0 * tmpvar_20) * (tmpvar_20 * tmpvar_15)));
  float tmpvar_28;
  tmpvar_28 = ((1.0 + (
    (tmpvar_27 - 1.0)
   * 
    ((x_25 * x_25) * ((x_25 * x_25) * x_25))
  )) * (1.0 + (
    (tmpvar_27 - 1.0)
   * 
    ((x_26 * x_26) * ((x_26 * x_26) * x_26))
  )));
  float tmpvar_29;
  tmpvar_29 = (((2.0 / 
    (((tmpvar_12 * (
      (tmpvar_19 * (1.0 - tmpvar_21))
     + tmpvar_21)) + (tmpvar_19 * (
      (tmpvar_12 * (1.0 - tmpvar_21))
     + tmpvar_21))) + 1e-05)
  ) * (tmpvar_23 / 
    (((3.141593 * tmpvar_24) * tmpvar_24) + 1e-07)
  )) * 0.7853982);
  specularTerm_14 = tmpvar_29;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_14 = sqrt(max (0.0001, tmpvar_29));
  };
  float tmpvar_30;
  tmpvar_30 = max (0.0, (specularTerm_14 * tmpvar_12));
  specularTerm_14 = tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = (tmpvar_28 * tmpvar_12);
  float tmpvar_32;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_32 = 1.0;
  } else {
    tmpvar_32 = 0.0;
  };
  specularTerm_14 = (tmpvar_30 * tmpvar_32);
  float x_33;
  x_33 = (1.0 - tmpvar_20);
  vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = ((diffColor_7 * (tmpvar_10 * tmpvar_31)) + ((specularTerm_14 * tmpvar_10) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * ((x_33 * x_33) * ((x_33 * x_33) * x_33)))
  )));
  vec4 xlat_varoutput_35;
  xlat_varoutput_35.xyz = tmpvar_34.xyz;
  xlat_varoutput_35.w = outModifiedAlpha_8;
  gl_FragData[0] = xlat_varoutput_35;
}


#endif
"
}
SubProgram "metal " {
// Stats: 21 math, 1 branches
Keywords { "SPOT" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 336
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 272 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD5 = hlslcc_mtx4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bool u_xlatb8;
float u_xlat13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
    u_xlat10_0 = texture(_LightTexture0, u_xlat0.xy);
    u_xlatb0 = 0.0<vs_TEXCOORD5.z;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat10_0.w * u_xlat0.x;
    u_xlat6 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTextureB0, vec2(u_xlat6));
    u_xlat0.x = u_xlat0.x * u_xlat10_1.w;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, (-u_xlat1.xyz));
    u_xlat7 = max(u_xlat2.x, 0.0);
    u_xlat1.xz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat19 = (-_Glossiness) + 1.0;
    u_xlat2.x = u_xlat19 * u_xlat19;
    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat8 = u_xlat2.x * u_xlat2.x;
    u_xlat18 = u_xlat8 / u_xlat18;
    u_xlat8 = (-u_xlat19) * u_xlat19 + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat7 * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat1.x * u_xlat2.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat2.x = u_xlat7 * u_xlat14 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
    u_xlat2.x = 2.0 / u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2 = u_xlat10_2 * _Color;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat21;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat1.z) + 1.0;
    u_xlat13 = dot(u_xlat1.zz, u_xlat1.zz);
    u_xlat13 = u_xlat13 * u_xlat19 + -0.5;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat7) + 1.0;
    u_xlat19 = u_xlat1.x * u_xlat1.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat1.x = u_xlat1.x * u_xlat19;
    u_xlat1.x = u_xlat13 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = (-u_xlat18) + 1.0;
    SV_Target0.w = u_xlat2.w * u_xlat18 + u_xlat0.x;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 101 math, 3 textures, 2 branches
Keywords { "POINT_COOKIE" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_7;
  float outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = ((1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_9);
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_6, tmpvar_11));
  tmpvar_10 = (_LightColor0.xyz * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w * textureCube (_LightTexture0, xlv_TEXCOORD5).w));
  vec3 viewDir_13;
  viewDir_13 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_14;
  float tmpvar_15;
  tmpvar_15 = (1.0 - _Glossiness);
  vec3 tmpvar_16;
  vec3 inVec_17;
  inVec_17 = (tmpvar_11 + viewDir_13);
  tmpvar_16 = (inVec_17 * inversesqrt(max (0.001, 
    dot (inVec_17, inVec_17)
  )));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_6, tmpvar_16));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_6, viewDir_13));
  float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_11, tmpvar_16));
  float tmpvar_21;
  tmpvar_21 = (tmpvar_15 * tmpvar_15);
  float tmpvar_22;
  tmpvar_22 = (tmpvar_15 * tmpvar_15);
  float tmpvar_23;
  tmpvar_23 = (tmpvar_22 * tmpvar_22);
  float tmpvar_24;
  tmpvar_24 = (((tmpvar_18 * tmpvar_18) * (tmpvar_23 - 1.0)) + 1.0);
  float x_25;
  x_25 = (1.0 - tmpvar_12);
  float x_26;
  x_26 = (1.0 - tmpvar_19);
  float tmpvar_27;
  tmpvar_27 = (0.5 + ((2.0 * tmpvar_20) * (tmpvar_20 * tmpvar_15)));
  float tmpvar_28;
  tmpvar_28 = ((1.0 + (
    (tmpvar_27 - 1.0)
   * 
    ((x_25 * x_25) * ((x_25 * x_25) * x_25))
  )) * (1.0 + (
    (tmpvar_27 - 1.0)
   * 
    ((x_26 * x_26) * ((x_26 * x_26) * x_26))
  )));
  float tmpvar_29;
  tmpvar_29 = (((2.0 / 
    (((tmpvar_12 * (
      (tmpvar_19 * (1.0 - tmpvar_21))
     + tmpvar_21)) + (tmpvar_19 * (
      (tmpvar_12 * (1.0 - tmpvar_21))
     + tmpvar_21))) + 1e-05)
  ) * (tmpvar_23 / 
    (((3.141593 * tmpvar_24) * tmpvar_24) + 1e-07)
  )) * 0.7853982);
  specularTerm_14 = tmpvar_29;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_14 = sqrt(max (0.0001, tmpvar_29));
  };
  float tmpvar_30;
  tmpvar_30 = max (0.0, (specularTerm_14 * tmpvar_12));
  specularTerm_14 = tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = (tmpvar_28 * tmpvar_12);
  float tmpvar_32;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_32 = 1.0;
  } else {
    tmpvar_32 = 0.0;
  };
  specularTerm_14 = (tmpvar_30 * tmpvar_32);
  float x_33;
  x_33 = (1.0 - tmpvar_20);
  vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = ((diffColor_7 * (tmpvar_10 * tmpvar_31)) + ((specularTerm_14 * tmpvar_10) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * ((x_33 * x_33) * ((x_33 * x_33) * x_33)))
  )));
  vec4 xlat_varoutput_35;
  xlat_varoutput_35.xyz = tmpvar_34.xyz;
  xlat_varoutput_35.w = outModifiedAlpha_8;
  gl_FragData[0] = xlat_varoutput_35;
}


#endif
"
}
SubProgram "metal " {
// Stats: 21 math, 1 branches
Keywords { "POINT_COOKIE" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 336
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 272 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex)).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat7;
float u_xlat12;
float u_xlat13;
bool u_xlatb13;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + (-u_xlat0.xyz);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat1.w = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));
    u_xlat0.yz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
    u_xlat18 = u_xlat0.w * u_xlat0.w;
    u_xlat1.x = (-_Glossiness) + 1.0;
    u_xlat7.x = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat13 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat13 = u_xlat7.x * u_xlat7.x;
    u_xlat18 = u_xlat13 / u_xlat18;
    u_xlat13 = (-u_xlat1.x) * u_xlat1.x + 1.0;
    u_xlat19 = u_xlat0.x * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.y * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.x * u_xlat7.x;
    u_xlat7.x = u_xlat0.y * u_xlat19 + u_xlat7.x;
    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
    u_xlat7.x = 2.0 / u_xlat7.x;
    u_xlat18 = u_xlat18 * u_xlat7.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat7.x = max(u_xlat18, 9.99999975e-05);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb13) ? u_xlat7.x : u_xlat18;
    u_xlat18 = u_xlat0.y * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat7.xyz = u_xlat10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2 = u_xlat10_2 * _Color;
    u_xlat7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat3.x;
    u_xlat3.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_3 = texture(_LightTextureB0, u_xlat3.xx);
    u_xlat10_4 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
    u_xlat16_3 = u_xlat10_3.w * u_xlat10_4.w;
    u_xlat3.xyz = vec3(u_xlat16_3) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat0.xw = (-u_xlat0.xz) + vec2(1.0, 1.0);
    u_xlat12 = dot(u_xlat0.zz, u_xlat0.zz);
    u_xlat12 = u_xlat12 * u_xlat1.x + -0.5;
    u_xlat1.x = u_xlat0.w * u_xlat0.w;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat0.w * u_xlat1.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat0.x * u_xlat0.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat18;
    u_xlat0.x = u_xlat12 * u_xlat0.x + 1.0;
    u_xlat18 = (-u_xlat0.y) + 1.0;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat12 = u_xlat12 * u_xlat18 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.x = (-u_xlat18) + 1.0;
    SV_Target0.w = u_xlat2.w * u_xlat18 + u_xlat0.x;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 98 math, 2 textures, 2 branches
Keywords { "DIRECTIONAL_COOKIE" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_7;
  float outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = ((1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_10;
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_6, tmpvar_9));
  tmpvar_10 = (_LightColor0.xyz * texture2D (_LightTexture0, xlv_TEXCOORD5).w);
  vec3 viewDir_12;
  viewDir_12 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_13;
  float tmpvar_14;
  tmpvar_14 = (1.0 - _Glossiness);
  vec3 tmpvar_15;
  vec3 inVec_16;
  inVec_16 = (tmpvar_9 + viewDir_12);
  tmpvar_15 = (inVec_16 * inversesqrt(max (0.001, 
    dot (inVec_16, inVec_16)
  )));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_6, tmpvar_15));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_6, viewDir_12));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_9, tmpvar_15));
  float tmpvar_20;
  tmpvar_20 = (tmpvar_14 * tmpvar_14);
  float tmpvar_21;
  tmpvar_21 = (tmpvar_14 * tmpvar_14);
  float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  float tmpvar_23;
  tmpvar_23 = (((tmpvar_17 * tmpvar_17) * (tmpvar_22 - 1.0)) + 1.0);
  float x_24;
  x_24 = (1.0 - tmpvar_11);
  float x_25;
  x_25 = (1.0 - tmpvar_18);
  float tmpvar_26;
  tmpvar_26 = (0.5 + ((2.0 * tmpvar_19) * (tmpvar_19 * tmpvar_14)));
  float tmpvar_27;
  tmpvar_27 = ((1.0 + (
    (tmpvar_26 - 1.0)
   * 
    ((x_24 * x_24) * ((x_24 * x_24) * x_24))
  )) * (1.0 + (
    (tmpvar_26 - 1.0)
   * 
    ((x_25 * x_25) * ((x_25 * x_25) * x_25))
  )));
  float tmpvar_28;
  tmpvar_28 = (((2.0 / 
    (((tmpvar_11 * (
      (tmpvar_18 * (1.0 - tmpvar_20))
     + tmpvar_20)) + (tmpvar_18 * (
      (tmpvar_11 * (1.0 - tmpvar_20))
     + tmpvar_20))) + 1e-05)
  ) * (tmpvar_22 / 
    (((3.141593 * tmpvar_23) * tmpvar_23) + 1e-07)
  )) * 0.7853982);
  specularTerm_13 = tmpvar_28;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_13 = sqrt(max (0.0001, tmpvar_28));
  };
  float tmpvar_29;
  tmpvar_29 = max (0.0, (specularTerm_13 * tmpvar_11));
  specularTerm_13 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = (tmpvar_27 * tmpvar_11);
  float tmpvar_31;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_31 = 1.0;
  } else {
    tmpvar_31 = 0.0;
  };
  specularTerm_13 = (tmpvar_29 * tmpvar_31);
  float x_32;
  x_32 = (1.0 - tmpvar_19);
  vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = ((diffColor_7 * (tmpvar_10 * tmpvar_30)) + ((specularTerm_13 * tmpvar_10) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * ((x_32 * x_32) * ((x_32 * x_32) * x_32)))
  )));
  vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = outModifiedAlpha_8;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "metal " {
// Stats: 21 math, 1 branches
Keywords { "DIRECTIONAL_COOKIE" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 336
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 272 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float2 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 n_13;
  n_13 = (tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_12 = half3(n_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float3 tmpvar_19;
  tmpvar_19 = ((float3)_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_7.xyz * (float)_mtl_u._WorldSpaceLightPos0.w));
  tmpvar_4.w = half(tmpvar_19.x);
  tmpvar_5.w = half(tmpvar_19.y);
  tmpvar_6.w = half(tmpvar_19.z);
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex)).xy;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat0.xy = hlslcc_mtx4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
    vs_TEXCOORD5.xy = hlslcc_mtx4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec2 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
vec2 u_xlat12;
float u_xlat13;
bool u_xlatb13;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat0.w = dot(u_xlat0.xyz, (-u_xlat3.xyz));
    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat19 = max(u_xlat19, 0.00100000005);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat12.x = max(u_xlat19, 0.0);
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat1.x = (-_Glossiness) + 1.0;
    u_xlat7.x = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
    u_xlat12.x = u_xlat12.x * u_xlat13 + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * 3.14159274 + 1.00000001e-07;
    u_xlat13 = u_xlat7.x * u_xlat7.x;
    u_xlat12.x = u_xlat13 / u_xlat12.x;
    u_xlat13 = (-u_xlat1.x) * u_xlat1.x + 1.0;
    u_xlat19 = u_xlat0.w * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.w * u_xlat7.x;
    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
    u_xlat7.x = 2.0 / u_xlat7.x;
    u_xlat12.x = u_xlat12.x * u_xlat7.x;
    u_xlat12.x = u_xlat12.x * 0.785398185;
    u_xlat7.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat12.x = (u_xlatb13) ? u_xlat7.x : u_xlat12.x;
    u_xlat12.x = u_xlat0.x * u_xlat12.x;
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat7.xyz = u_xlat10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2 = u_xlat10_2 * _Color;
    u_xlat7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat12.x * u_xlat3.x;
    u_xlat10_3 = texture(_LightTexture0, vs_TEXCOORD5.xy);
    u_xlat3.xyz = u_xlat10_3.www * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.xy = (-u_xlat0.yw) + vec2(1.0, 1.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = dot(vec2(u_xlat6), u_xlat1.xx);
    u_xlat6 = u_xlat6 + -0.5;
    u_xlat1.x = u_xlat12.x * u_xlat12.x;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat12.xxx + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xyz;
    u_xlat12.x = u_xlat12.y * u_xlat12.y;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.y * u_xlat12.x;
    u_xlat12.x = u_xlat6 * u_xlat12.x + 1.0;
    u_xlat18 = (-u_xlat0.x) + 1.0;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.x = (-u_xlat18) + 1.0;
    SV_Target0.w = u_xlat2.w * u_xlat18 + u_xlat0.x;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 110 math, 4 textures, 2 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_WorldToShadow[4];

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15);
  xlv_TEXCOORD6 = (unity_WorldToShadow[0] * tmpvar_15);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_7;
  float outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = ((1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_9);
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_6, tmpvar_11));
  tmpvar_10 = (_LightColor0.xyz * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w)
   * texture2D (_LightTextureB0, vec2(
    dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz)
  )).w) * (_LightShadowData.x + 
    (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x * (1.0 - _LightShadowData.x))
  )));
  vec3 viewDir_13;
  viewDir_13 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_14;
  float tmpvar_15;
  tmpvar_15 = (1.0 - _Glossiness);
  vec3 tmpvar_16;
  vec3 inVec_17;
  inVec_17 = (tmpvar_11 + viewDir_13);
  tmpvar_16 = (inVec_17 * inversesqrt(max (0.001, 
    dot (inVec_17, inVec_17)
  )));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_6, tmpvar_16));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_6, viewDir_13));
  float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_11, tmpvar_16));
  float tmpvar_21;
  tmpvar_21 = (tmpvar_15 * tmpvar_15);
  float tmpvar_22;
  tmpvar_22 = (tmpvar_15 * tmpvar_15);
  float tmpvar_23;
  tmpvar_23 = (tmpvar_22 * tmpvar_22);
  float tmpvar_24;
  tmpvar_24 = (((tmpvar_18 * tmpvar_18) * (tmpvar_23 - 1.0)) + 1.0);
  float x_25;
  x_25 = (1.0 - tmpvar_12);
  float x_26;
  x_26 = (1.0 - tmpvar_19);
  float tmpvar_27;
  tmpvar_27 = (0.5 + ((2.0 * tmpvar_20) * (tmpvar_20 * tmpvar_15)));
  float tmpvar_28;
  tmpvar_28 = ((1.0 + (
    (tmpvar_27 - 1.0)
   * 
    ((x_25 * x_25) * ((x_25 * x_25) * x_25))
  )) * (1.0 + (
    (tmpvar_27 - 1.0)
   * 
    ((x_26 * x_26) * ((x_26 * x_26) * x_26))
  )));
  float tmpvar_29;
  tmpvar_29 = (((2.0 / 
    (((tmpvar_12 * (
      (tmpvar_19 * (1.0 - tmpvar_21))
     + tmpvar_21)) + (tmpvar_19 * (
      (tmpvar_12 * (1.0 - tmpvar_21))
     + tmpvar_21))) + 1e-05)
  ) * (tmpvar_23 / 
    (((3.141593 * tmpvar_24) * tmpvar_24) + 1e-07)
  )) * 0.7853982);
  specularTerm_14 = tmpvar_29;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_14 = sqrt(max (0.0001, tmpvar_29));
  };
  float tmpvar_30;
  tmpvar_30 = max (0.0, (specularTerm_14 * tmpvar_12));
  specularTerm_14 = tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = (tmpvar_28 * tmpvar_12);
  float tmpvar_32;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_32 = 1.0;
  } else {
    tmpvar_32 = 0.0;
  };
  specularTerm_14 = (tmpvar_30 * tmpvar_32);
  float x_33;
  x_33 = (1.0 - tmpvar_20);
  vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = ((diffColor_7 * (tmpvar_10 * tmpvar_31)) + ((specularTerm_14 * tmpvar_10) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * ((x_33 * x_33) * ((x_33 * x_33) * x_33)))
  )));
  vec4 xlat_varoutput_35;
  xlat_varoutput_35.xyz = tmpvar_34.xyz;
  xlat_varoutput_35.w = outModifiedAlpha_8;
  gl_FragData[0] = xlat_varoutput_35;
}


#endif
"
}
SubProgram "metal " {
// Stats: 22 math, 1 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 592
Matrix 32 [unity_WorldToShadow] 4 4
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [unity_ObjectToWorld]
Matrix 416 [unity_WorldToObject]
Matrix 528 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 480 [_MainTex_ST]
Vector 496 [_DetailAlbedoMap_ST]
ScalarHalf 512 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 unity_WorldToShadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22);
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u.unity_WorldToShadow[0] * tmpvar_22);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD5 = hlslcc_mtx4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD6 = hlslcc_mtx4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp float u_xlat10_6;
float u_xlat7;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
    u_xlat10_0 = texture(_LightTexture0, u_xlat0.xy);
    u_xlatb0 = 0.0<vs_TEXCOORD5.z;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat10_0.w * u_xlat0.x;
    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTextureB0, u_xlat6.xx);
    u_xlat0.x = u_xlat0.x * u_xlat10_1.w;
    u_xlat6.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    vec3 txVec1 = vec3(u_xlat6.xy,u_xlat6.z);
    u_xlat10_6 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat12 = (-_LightShadowData.x) + 1.0;
    u_xlat6.x = u_xlat10_6 * u_xlat12 + _LightShadowData.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, (-u_xlat1.xyz));
    u_xlat7 = max(u_xlat2.x, 0.0);
    u_xlat1.xz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat19 = (-_Glossiness) + 1.0;
    u_xlat2.x = u_xlat19 * u_xlat19;
    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat8 = u_xlat2.x * u_xlat2.x;
    u_xlat18 = u_xlat8 / u_xlat18;
    u_xlat8 = (-u_xlat19) * u_xlat19 + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat7 * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat1.x * u_xlat2.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat2.x = u_xlat7 * u_xlat14 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
    u_xlat2.x = 2.0 / u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2 = u_xlat10_2 * _Color;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat21;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat1.z) + 1.0;
    u_xlat13 = dot(u_xlat1.zz, u_xlat1.zz);
    u_xlat13 = u_xlat13 * u_xlat19 + -0.5;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat7) + 1.0;
    u_xlat19 = u_xlat1.x * u_xlat1.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat1.x = u_xlat1.x * u_xlat19;
    u_xlat1.x = u_xlat13 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = (-u_xlat18) + 1.0;
    SV_Target0.w = u_xlat2.w * u_xlat18 + u_xlat0.x;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 98 math, 2 textures, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec4 o_14;
  vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_7 * 0.5);
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_7.zw;
  vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_17.x;
  tmpvar_4.w = tmpvar_17.y;
  tmpvar_5.w = tmpvar_17.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = o_14;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_7;
  float outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = ((1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_10;
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_6, tmpvar_9));
  tmpvar_10 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x);
  vec3 viewDir_12;
  viewDir_12 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_13;
  float tmpvar_14;
  tmpvar_14 = (1.0 - _Glossiness);
  vec3 tmpvar_15;
  vec3 inVec_16;
  inVec_16 = (tmpvar_9 + viewDir_12);
  tmpvar_15 = (inVec_16 * inversesqrt(max (0.001, 
    dot (inVec_16, inVec_16)
  )));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_6, tmpvar_15));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_6, viewDir_12));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_9, tmpvar_15));
  float tmpvar_20;
  tmpvar_20 = (tmpvar_14 * tmpvar_14);
  float tmpvar_21;
  tmpvar_21 = (tmpvar_14 * tmpvar_14);
  float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  float tmpvar_23;
  tmpvar_23 = (((tmpvar_17 * tmpvar_17) * (tmpvar_22 - 1.0)) + 1.0);
  float x_24;
  x_24 = (1.0 - tmpvar_11);
  float x_25;
  x_25 = (1.0 - tmpvar_18);
  float tmpvar_26;
  tmpvar_26 = (0.5 + ((2.0 * tmpvar_19) * (tmpvar_19 * tmpvar_14)));
  float tmpvar_27;
  tmpvar_27 = ((1.0 + (
    (tmpvar_26 - 1.0)
   * 
    ((x_24 * x_24) * ((x_24 * x_24) * x_24))
  )) * (1.0 + (
    (tmpvar_26 - 1.0)
   * 
    ((x_25 * x_25) * ((x_25 * x_25) * x_25))
  )));
  float tmpvar_28;
  tmpvar_28 = (((2.0 / 
    (((tmpvar_11 * (
      (tmpvar_18 * (1.0 - tmpvar_20))
     + tmpvar_20)) + (tmpvar_18 * (
      (tmpvar_11 * (1.0 - tmpvar_20))
     + tmpvar_20))) + 1e-05)
  ) * (tmpvar_22 / 
    (((3.141593 * tmpvar_23) * tmpvar_23) + 1e-07)
  )) * 0.7853982);
  specularTerm_13 = tmpvar_28;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_13 = sqrt(max (0.0001, tmpvar_28));
  };
  float tmpvar_29;
  tmpvar_29 = max (0.0, (specularTerm_13 * tmpvar_11));
  specularTerm_13 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = (tmpvar_27 * tmpvar_11);
  float tmpvar_31;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_31 = 1.0;
  } else {
    tmpvar_31 = 0.0;
  };
  specularTerm_13 = (tmpvar_29 * tmpvar_31);
  float x_32;
  x_32 = (1.0 - tmpvar_19);
  vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = ((diffColor_7 * (tmpvar_10 * tmpvar_30)) + ((specularTerm_13 * tmpvar_10) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * ((x_32 * x_32) * ((x_32 * x_32) * x_32)))
  )));
  vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = outModifiedAlpha_8;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "metal " {
// Stats: 22 math, 1 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 274
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
VectorHalf 32 [_WorldSpaceLightPos0] 4
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 n_13;
  n_13 = (tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_12 = half3(n_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float4 o_19;
  float4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  float2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _mtl_u._ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  float3 tmpvar_22;
  tmpvar_22 = ((float3)_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_7.xyz * (float)_mtl_u._WorldSpaceLightPos0.w));
  tmpvar_4.w = half(tmpvar_22.x);
  tmpvar_5.w = half(tmpvar_22.y);
  tmpvar_6.w = half(tmpvar_22.z);
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = o_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
vec2 u_xlat12;
float u_xlat13;
bool u_xlatb13;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat0.w = dot(u_xlat0.xyz, (-u_xlat3.xyz));
    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat19 = max(u_xlat19, 0.00100000005);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat12.x = max(u_xlat19, 0.0);
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat1.x = (-_Glossiness) + 1.0;
    u_xlat7.x = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
    u_xlat12.x = u_xlat12.x * u_xlat13 + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * 3.14159274 + 1.00000001e-07;
    u_xlat13 = u_xlat7.x * u_xlat7.x;
    u_xlat12.x = u_xlat13 / u_xlat12.x;
    u_xlat13 = (-u_xlat1.x) * u_xlat1.x + 1.0;
    u_xlat19 = u_xlat0.w * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.w * u_xlat7.x;
    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
    u_xlat7.x = 2.0 / u_xlat7.x;
    u_xlat12.x = u_xlat12.x * u_xlat7.x;
    u_xlat12.x = u_xlat12.x * 0.785398185;
    u_xlat7.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat12.x = (u_xlatb13) ? u_xlat7.x : u_xlat12.x;
    u_xlat12.x = u_xlat0.x * u_xlat12.x;
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat7.xyz = u_xlat10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2 = u_xlat10_2 * _Color;
    u_xlat7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat12.x * u_xlat3.x;
    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat3.xy);
    u_xlat3.xyz = u_xlat10_3.xxx * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.xy = (-u_xlat0.yw) + vec2(1.0, 1.0);
    u_xlat6 = dot(u_xlat0.yy, u_xlat0.yy);
    u_xlat6 = u_xlat6 * u_xlat1.x + -0.5;
    u_xlat1.x = u_xlat12.x * u_xlat12.x;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat12.xxx + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xyz;
    u_xlat12.x = u_xlat12.y * u_xlat12.y;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.y * u_xlat12.x;
    u_xlat12.x = u_xlat6 * u_xlat12.x + 1.0;
    u_xlat18 = (-u_xlat0.x) + 1.0;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.x = (-u_xlat18) + 1.0;
    SV_Target0.w = u_xlat2.w * u_xlat18 + u_xlat0.x;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 99 math, 3 textures, 2 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec4 o_14;
  vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_7 * 0.5);
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_7.zw;
  vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_17.x;
  tmpvar_4.w = tmpvar_17.y;
  tmpvar_5.w = tmpvar_17.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex)).xy;
  xlv_TEXCOORD6 = o_14;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_7;
  float outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = ((1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_10;
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_6, tmpvar_9));
  tmpvar_10 = (_LightColor0.xyz * (texture2D (_LightTexture0, xlv_TEXCOORD5).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x));
  vec3 viewDir_12;
  viewDir_12 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_13;
  float tmpvar_14;
  tmpvar_14 = (1.0 - _Glossiness);
  vec3 tmpvar_15;
  vec3 inVec_16;
  inVec_16 = (tmpvar_9 + viewDir_12);
  tmpvar_15 = (inVec_16 * inversesqrt(max (0.001, 
    dot (inVec_16, inVec_16)
  )));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_6, tmpvar_15));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_6, viewDir_12));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_9, tmpvar_15));
  float tmpvar_20;
  tmpvar_20 = (tmpvar_14 * tmpvar_14);
  float tmpvar_21;
  tmpvar_21 = (tmpvar_14 * tmpvar_14);
  float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  float tmpvar_23;
  tmpvar_23 = (((tmpvar_17 * tmpvar_17) * (tmpvar_22 - 1.0)) + 1.0);
  float x_24;
  x_24 = (1.0 - tmpvar_11);
  float x_25;
  x_25 = (1.0 - tmpvar_18);
  float tmpvar_26;
  tmpvar_26 = (0.5 + ((2.0 * tmpvar_19) * (tmpvar_19 * tmpvar_14)));
  float tmpvar_27;
  tmpvar_27 = ((1.0 + (
    (tmpvar_26 - 1.0)
   * 
    ((x_24 * x_24) * ((x_24 * x_24) * x_24))
  )) * (1.0 + (
    (tmpvar_26 - 1.0)
   * 
    ((x_25 * x_25) * ((x_25 * x_25) * x_25))
  )));
  float tmpvar_28;
  tmpvar_28 = (((2.0 / 
    (((tmpvar_11 * (
      (tmpvar_18 * (1.0 - tmpvar_20))
     + tmpvar_20)) + (tmpvar_18 * (
      (tmpvar_11 * (1.0 - tmpvar_20))
     + tmpvar_20))) + 1e-05)
  ) * (tmpvar_22 / 
    (((3.141593 * tmpvar_23) * tmpvar_23) + 1e-07)
  )) * 0.7853982);
  specularTerm_13 = tmpvar_28;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_13 = sqrt(max (0.0001, tmpvar_28));
  };
  float tmpvar_29;
  tmpvar_29 = max (0.0, (specularTerm_13 * tmpvar_11));
  specularTerm_13 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = (tmpvar_27 * tmpvar_11);
  float tmpvar_31;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_31 = 1.0;
  } else {
    tmpvar_31 = 0.0;
  };
  specularTerm_13 = (tmpvar_29 * tmpvar_31);
  float x_32;
  x_32 = (1.0 - tmpvar_19);
  vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = ((diffColor_7 * (tmpvar_10 * tmpvar_30)) + ((specularTerm_13 * tmpvar_10) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * ((x_32 * x_32) * ((x_32 * x_32) * x_32)))
  )));
  vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = outModifiedAlpha_8;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "metal " {
// Stats: 24 math, 1 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 352
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Matrix 288 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
VectorHalf 32 [_WorldSpaceLightPos0] 4
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float2 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 n_13;
  n_13 = (tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_12 = half3(n_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float4 o_19;
  float4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  float2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _mtl_u._ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  float3 tmpvar_22;
  tmpvar_22 = ((float3)_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_7.xyz * (float)_mtl_u._WorldSpaceLightPos0.w));
  tmpvar_4.w = half(tmpvar_22.x);
  tmpvar_5.w = half(tmpvar_22.y);
  tmpvar_6.w = half(tmpvar_22.z);
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex)).xy;
  _mtl_o.xlv_TEXCOORD6 = o_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat2.xy;
    u_xlat1.xy = hlslcc_mtx4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat1.xy;
    vs_TEXCOORD5.xy = hlslcc_mtx4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat1.xy;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec2 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
vec2 u_xlat12;
float u_xlat13;
bool u_xlatb13;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat0.w = dot(u_xlat0.xyz, (-u_xlat3.xyz));
    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat19 = max(u_xlat19, 0.00100000005);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat12.x = max(u_xlat19, 0.0);
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat1.x = (-_Glossiness) + 1.0;
    u_xlat7.x = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat7.x * u_xlat7.x + -1.0;
    u_xlat12.x = u_xlat12.x * u_xlat13 + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * 3.14159274 + 1.00000001e-07;
    u_xlat13 = u_xlat7.x * u_xlat7.x;
    u_xlat12.x = u_xlat13 / u_xlat12.x;
    u_xlat13 = (-u_xlat1.x) * u_xlat1.x + 1.0;
    u_xlat19 = u_xlat0.w * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.x * u_xlat13 + u_xlat7.x;
    u_xlat7.x = u_xlat0.w * u_xlat7.x;
    u_xlat7.x = u_xlat0.x * u_xlat19 + u_xlat7.x;
    u_xlat7.x = u_xlat7.x + 9.99999975e-06;
    u_xlat7.x = 2.0 / u_xlat7.x;
    u_xlat12.x = u_xlat12.x * u_xlat7.x;
    u_xlat12.x = u_xlat12.x * 0.785398185;
    u_xlat7.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlatb13 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat12.x = (u_xlatb13) ? u_xlat7.x : u_xlat12.x;
    u_xlat12.x = u_xlat0.x * u_xlat12.x;
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat7.xyz = u_xlat10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2 = u_xlat10_2 * _Color;
    u_xlat7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb3 = u_xlat3.x!=0.0;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat12.x * u_xlat3.x;
    u_xlat3.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat3.xy);
    u_xlat10_4 = texture(_LightTexture0, vs_TEXCOORD5.xy);
    u_xlat16_3 = u_xlat10_3.x * u_xlat10_4.w;
    u_xlat3.xyz = vec3(u_xlat16_3) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.xy = (-u_xlat0.yw) + vec2(1.0, 1.0);
    u_xlat6 = dot(u_xlat0.yy, u_xlat0.yy);
    u_xlat6 = u_xlat6 * u_xlat1.x + -0.5;
    u_xlat1.x = u_xlat12.x * u_xlat12.x;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat12.xxx + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xyz;
    u_xlat12.x = u_xlat12.y * u_xlat12.y;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.y * u_xlat12.x;
    u_xlat12.x = u_xlat6 * u_xlat12.x + 1.0;
    u_xlat18 = (-u_xlat0.x) + 1.0;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat6 = u_xlat6 * u_xlat18 + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.x = (-u_xlat18) + 1.0;
    SV_Target0.w = u_xlat2.w * u_xlat18 + u_xlat0.x;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 107 math, 3 textures, 3 branches
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15).xyz;
  xlv_TEXCOORD6 = (tmpvar_15.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_8;
  float outModifiedAlpha_9;
  diffColor_8 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_9 = ((1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  float mydist_12;
  mydist_12 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_13;
  tmpvar_13 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_14;
  if ((tmpvar_13.x < mydist_12)) {
    tmpvar_14 = _LightShadowData.x;
  } else {
    tmpvar_14 = 1.0;
  };
  vec3 tmpvar_15;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_10);
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_6, tmpvar_16));
  tmpvar_15 = (_LightColor0.xyz * (tmpvar_11.w * tmpvar_14));
  vec3 viewDir_18;
  viewDir_18 = -(tmpvar_7);
  float specularTerm_19;
  float tmpvar_20;
  tmpvar_20 = (1.0 - _Glossiness);
  vec3 tmpvar_21;
  vec3 inVec_22;
  inVec_22 = (tmpvar_16 + viewDir_18);
  tmpvar_21 = (inVec_22 * inversesqrt(max (0.001, 
    dot (inVec_22, inVec_22)
  )));
  float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_6, tmpvar_21));
  float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_6, viewDir_18));
  float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_16, tmpvar_21));
  float tmpvar_26;
  tmpvar_26 = (tmpvar_20 * tmpvar_20);
  float tmpvar_27;
  tmpvar_27 = (tmpvar_20 * tmpvar_20);
  float tmpvar_28;
  tmpvar_28 = (tmpvar_27 * tmpvar_27);
  float tmpvar_29;
  tmpvar_29 = (((tmpvar_23 * tmpvar_23) * (tmpvar_28 - 1.0)) + 1.0);
  float x_30;
  x_30 = (1.0 - tmpvar_17);
  float x_31;
  x_31 = (1.0 - tmpvar_24);
  float tmpvar_32;
  tmpvar_32 = (0.5 + ((2.0 * tmpvar_25) * (tmpvar_25 * tmpvar_20)));
  float tmpvar_33;
  tmpvar_33 = ((1.0 + (
    (tmpvar_32 - 1.0)
   * 
    ((x_30 * x_30) * ((x_30 * x_30) * x_30))
  )) * (1.0 + (
    (tmpvar_32 - 1.0)
   * 
    ((x_31 * x_31) * ((x_31 * x_31) * x_31))
  )));
  float tmpvar_34;
  tmpvar_34 = (((2.0 / 
    (((tmpvar_17 * (
      (tmpvar_24 * (1.0 - tmpvar_26))
     + tmpvar_26)) + (tmpvar_24 * (
      (tmpvar_17 * (1.0 - tmpvar_26))
     + tmpvar_26))) + 1e-05)
  ) * (tmpvar_28 / 
    (((3.141593 * tmpvar_29) * tmpvar_29) + 1e-07)
  )) * 0.7853982);
  specularTerm_19 = tmpvar_34;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_19 = sqrt(max (0.0001, tmpvar_34));
  };
  float tmpvar_35;
  tmpvar_35 = max (0.0, (specularTerm_19 * tmpvar_17));
  specularTerm_19 = tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = (tmpvar_33 * tmpvar_17);
  float tmpvar_37;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_37 = 1.0;
  } else {
    tmpvar_37 = 0.0;
  };
  specularTerm_19 = (tmpvar_35 * tmpvar_37);
  float x_38;
  x_38 = (1.0 - tmpvar_25);
  vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = ((diffColor_8 * (tmpvar_15 * tmpvar_36)) + ((specularTerm_19 * tmpvar_15) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * ((x_38 * x_38) * ((x_38 * x_38) * x_38)))
  )));
  vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = tmpvar_39.xyz;
  xlat_varoutput_40.w = outModifiedAlpha_9;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "metal " {
// Stats: 22 math, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 352
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Matrix 288 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22).xyz;
  _mtl_o.xlv_TEXCOORD6 = (tmpvar_22.xyz - _mtl_u._LightPositionRange.xyz);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat8;
bool u_xlatb8;
float u_xlat13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * 0.970000029;
    u_xlat10_1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    u_xlatb0 = u_xlat10_1.x<u_xlat0.x;
    u_xlat0.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat6 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTexture0, vec2(u_xlat6));
    u_xlat0.x = u_xlat0.x * u_xlat10_1.w;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, (-u_xlat1.xyz));
    u_xlat7 = max(u_xlat2.x, 0.0);
    u_xlat1.xz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat19 = (-_Glossiness) + 1.0;
    u_xlat2.x = u_xlat19 * u_xlat19;
    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat8 = u_xlat2.x * u_xlat2.x;
    u_xlat18 = u_xlat8 / u_xlat18;
    u_xlat8 = (-u_xlat19) * u_xlat19 + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat7 * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat1.x * u_xlat2.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat2.x = u_xlat7 * u_xlat14 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
    u_xlat2.x = 2.0 / u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2 = u_xlat10_2 * _Color;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat21;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat1.z) + 1.0;
    u_xlat13 = dot(u_xlat1.zz, u_xlat1.zz);
    u_xlat13 = u_xlat13 * u_xlat19 + -0.5;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat7) + 1.0;
    u_xlat19 = u_xlat1.x * u_xlat1.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat1.x = u_xlat1.x * u_xlat19;
    u_xlat1.x = u_xlat13 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = (-u_xlat18) + 1.0;
    SV_Target0.w = u_xlat2.w * u_xlat18 + u_xlat0.x;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 108 math, 4 textures, 3 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15).xyz;
  xlv_TEXCOORD6 = (tmpvar_15.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_8;
  float outModifiedAlpha_9;
  diffColor_8 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_9 = ((1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_12;
  tmpvar_12 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  float mydist_13;
  mydist_13 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_14;
  tmpvar_14 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_15;
  if ((tmpvar_14.x < mydist_13)) {
    tmpvar_15 = _LightShadowData.x;
  } else {
    tmpvar_15 = 1.0;
  };
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_10);
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_6, tmpvar_17));
  tmpvar_16 = (_LightColor0.xyz * ((tmpvar_11.w * tmpvar_12.w) * tmpvar_15));
  vec3 viewDir_19;
  viewDir_19 = -(tmpvar_7);
  float specularTerm_20;
  float tmpvar_21;
  tmpvar_21 = (1.0 - _Glossiness);
  vec3 tmpvar_22;
  vec3 inVec_23;
  inVec_23 = (tmpvar_17 + viewDir_19);
  tmpvar_22 = (inVec_23 * inversesqrt(max (0.001, 
    dot (inVec_23, inVec_23)
  )));
  float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_6, tmpvar_22));
  float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_6, viewDir_19));
  float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_17, tmpvar_22));
  float tmpvar_27;
  tmpvar_27 = (tmpvar_21 * tmpvar_21);
  float tmpvar_28;
  tmpvar_28 = (tmpvar_21 * tmpvar_21);
  float tmpvar_29;
  tmpvar_29 = (tmpvar_28 * tmpvar_28);
  float tmpvar_30;
  tmpvar_30 = (((tmpvar_24 * tmpvar_24) * (tmpvar_29 - 1.0)) + 1.0);
  float x_31;
  x_31 = (1.0 - tmpvar_18);
  float x_32;
  x_32 = (1.0 - tmpvar_25);
  float tmpvar_33;
  tmpvar_33 = (0.5 + ((2.0 * tmpvar_26) * (tmpvar_26 * tmpvar_21)));
  float tmpvar_34;
  tmpvar_34 = ((1.0 + (
    (tmpvar_33 - 1.0)
   * 
    ((x_31 * x_31) * ((x_31 * x_31) * x_31))
  )) * (1.0 + (
    (tmpvar_33 - 1.0)
   * 
    ((x_32 * x_32) * ((x_32 * x_32) * x_32))
  )));
  float tmpvar_35;
  tmpvar_35 = (((2.0 / 
    (((tmpvar_18 * (
      (tmpvar_25 * (1.0 - tmpvar_27))
     + tmpvar_27)) + (tmpvar_25 * (
      (tmpvar_18 * (1.0 - tmpvar_27))
     + tmpvar_27))) + 1e-05)
  ) * (tmpvar_29 / 
    (((3.141593 * tmpvar_30) * tmpvar_30) + 1e-07)
  )) * 0.7853982);
  specularTerm_20 = tmpvar_35;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_20 = sqrt(max (0.0001, tmpvar_35));
  };
  float tmpvar_36;
  tmpvar_36 = max (0.0, (specularTerm_20 * tmpvar_18));
  specularTerm_20 = tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = (tmpvar_34 * tmpvar_18);
  float tmpvar_38;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_38 = 1.0;
  } else {
    tmpvar_38 = 0.0;
  };
  specularTerm_20 = (tmpvar_36 * tmpvar_38);
  float x_39;
  x_39 = (1.0 - tmpvar_26);
  vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = ((diffColor_8 * (tmpvar_16 * tmpvar_37)) + ((specularTerm_20 * tmpvar_16) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * ((x_39 * x_39) * ((x_39 * x_39) * x_39)))
  )));
  vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = tmpvar_40.xyz;
  xlat_varoutput_41.w = outModifiedAlpha_9;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "metal " {
// Stats: 22 math, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 352
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Matrix 288 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22).xyz;
  _mtl_o.xlv_TEXCOORD6 = (tmpvar_22.xyz - _mtl_u._LightPositionRange.xyz);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
float u_xlat8;
bool u_xlatb8;
float u_xlat13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * 0.970000029;
    u_xlat10_1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    u_xlatb0 = u_xlat10_1.x<u_xlat0.x;
    u_xlat0.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat6 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTextureB0, vec2(u_xlat6));
    u_xlat10_2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
    u_xlat16_6 = u_xlat10_1.w * u_xlat10_2.w;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, (-u_xlat1.xyz));
    u_xlat7 = max(u_xlat2.x, 0.0);
    u_xlat1.xz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat19 = (-_Glossiness) + 1.0;
    u_xlat2.x = u_xlat19 * u_xlat19;
    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat8 = u_xlat2.x * u_xlat2.x;
    u_xlat18 = u_xlat8 / u_xlat18;
    u_xlat8 = (-u_xlat19) * u_xlat19 + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat7 * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat1.x * u_xlat2.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat2.x = u_xlat7 * u_xlat14 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
    u_xlat2.x = 2.0 / u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2 = u_xlat10_2 * _Color;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat21;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat1.z) + 1.0;
    u_xlat13 = dot(u_xlat1.zz, u_xlat1.zz);
    u_xlat13 = u_xlat13 * u_xlat19 + -0.5;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat7) + 1.0;
    u_xlat19 = u_xlat1.x * u_xlat1.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat1.x = u_xlat1.x * u_xlat19;
    u_xlat1.x = u_xlat13 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = (-u_xlat18) + 1.0;
    SV_Target0.w = u_xlat2.w * u_xlat18 + u_xlat0.x;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 116 math, 7 textures, 2 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_WorldToShadow[4];

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15);
  xlv_TEXCOORD6 = (unity_WorldToShadow[0] * tmpvar_15);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2DShadow _ShadowMapTexture;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_7;
  float outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = ((1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  vec4 shadows_10;
  vec3 tmpvar_11;
  tmpvar_11 = (xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w);
  shadows_10.x = shadow2D (_ShadowMapTexture, (tmpvar_11 + _ShadowOffsets[0].xyz)).x;
  shadows_10.y = shadow2D (_ShadowMapTexture, (tmpvar_11 + _ShadowOffsets[1].xyz)).x;
  shadows_10.z = shadow2D (_ShadowMapTexture, (tmpvar_11 + _ShadowOffsets[2].xyz)).x;
  shadows_10.w = shadow2D (_ShadowMapTexture, (tmpvar_11 + _ShadowOffsets[3].xyz)).x;
  shadows_10 = (_LightShadowData.xxxx + (shadows_10 * (1.0 - _LightShadowData.xxxx)));
  vec3 tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_9);
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_6, tmpvar_13));
  tmpvar_12 = (_LightColor0.xyz * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w)
   * texture2D (_LightTextureB0, vec2(
    dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz)
  )).w) * dot (shadows_10, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_15;
  viewDir_15 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_16;
  float tmpvar_17;
  tmpvar_17 = (1.0 - _Glossiness);
  vec3 tmpvar_18;
  vec3 inVec_19;
  inVec_19 = (tmpvar_13 + viewDir_15);
  tmpvar_18 = (inVec_19 * inversesqrt(max (0.001, 
    dot (inVec_19, inVec_19)
  )));
  float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_6, tmpvar_18));
  float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_6, viewDir_15));
  float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_13, tmpvar_18));
  float tmpvar_23;
  tmpvar_23 = (tmpvar_17 * tmpvar_17);
  float tmpvar_24;
  tmpvar_24 = (tmpvar_17 * tmpvar_17);
  float tmpvar_25;
  tmpvar_25 = (tmpvar_24 * tmpvar_24);
  float tmpvar_26;
  tmpvar_26 = (((tmpvar_20 * tmpvar_20) * (tmpvar_25 - 1.0)) + 1.0);
  float x_27;
  x_27 = (1.0 - tmpvar_14);
  float x_28;
  x_28 = (1.0 - tmpvar_21);
  float tmpvar_29;
  tmpvar_29 = (0.5 + ((2.0 * tmpvar_22) * (tmpvar_22 * tmpvar_17)));
  float tmpvar_30;
  tmpvar_30 = ((1.0 + (
    (tmpvar_29 - 1.0)
   * 
    ((x_27 * x_27) * ((x_27 * x_27) * x_27))
  )) * (1.0 + (
    (tmpvar_29 - 1.0)
   * 
    ((x_28 * x_28) * ((x_28 * x_28) * x_28))
  )));
  float tmpvar_31;
  tmpvar_31 = (((2.0 / 
    (((tmpvar_14 * (
      (tmpvar_21 * (1.0 - tmpvar_23))
     + tmpvar_23)) + (tmpvar_21 * (
      (tmpvar_14 * (1.0 - tmpvar_23))
     + tmpvar_23))) + 1e-05)
  ) * (tmpvar_25 / 
    (((3.141593 * tmpvar_26) * tmpvar_26) + 1e-07)
  )) * 0.7853982);
  specularTerm_16 = tmpvar_31;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_16 = sqrt(max (0.0001, tmpvar_31));
  };
  float tmpvar_32;
  tmpvar_32 = max (0.0, (specularTerm_16 * tmpvar_14));
  specularTerm_16 = tmpvar_32;
  float tmpvar_33;
  tmpvar_33 = (tmpvar_30 * tmpvar_14);
  float tmpvar_34;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_34 = 1.0;
  } else {
    tmpvar_34 = 0.0;
  };
  specularTerm_16 = (tmpvar_32 * tmpvar_34);
  float x_35;
  x_35 = (1.0 - tmpvar_22);
  vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = ((diffColor_7 * (tmpvar_12 * tmpvar_33)) + ((specularTerm_16 * tmpvar_12) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * ((x_35 * x_35) * ((x_35 * x_35) * x_35)))
  )));
  vec4 xlat_varoutput_37;
  xlat_varoutput_37.xyz = tmpvar_36.xyz;
  xlat_varoutput_37.w = outModifiedAlpha_8;
  gl_FragData[0] = xlat_varoutput_37;
}


#endif
"
}
SubProgram "metal " {
// Stats: 22 math, 1 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 592
Matrix 32 [unity_WorldToShadow] 4 4
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [unity_ObjectToWorld]
Matrix 416 [unity_WorldToObject]
Matrix 528 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 480 [_MainTex_ST]
Vector 496 [_DetailAlbedoMap_ST]
ScalarHalf 512 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 unity_WorldToShadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22);
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u.unity_WorldToShadow[0] * tmpvar_22);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD5 = hlslcc_mtx4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD6 = hlslcc_mtx4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 _ShadowOffsets[4];
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat7;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.x = (-_LightShadowData.x) + 1.0;
    u_xlat6.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    u_xlat1.xyz = u_xlat6.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat2.xyz = u_xlat6.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat2.xyz = u_xlat6.xyz + _ShadowOffsets[2].xyz;
    u_xlat6.xyz = u_xlat6.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec2 = vec3(u_xlat6.xy,u_xlat6.z);
    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0 = u_xlat1 * u_xlat0.xxxx + _LightShadowData.xxxx;
    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat10_1 = texture(_LightTexture0, u_xlat6.xy);
    u_xlatb6 = 0.0<vs_TEXCOORD5.z;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat6.x = u_xlat10_1.w * u_xlat6.x;
    u_xlat12 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTextureB0, vec2(u_xlat12));
    u_xlat6.x = u_xlat6.x * u_xlat10_1.w;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, (-u_xlat1.xyz));
    u_xlat7 = max(u_xlat2.x, 0.0);
    u_xlat1.xz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat19 = (-_Glossiness) + 1.0;
    u_xlat2.x = u_xlat19 * u_xlat19;
    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat8 = u_xlat2.x * u_xlat2.x;
    u_xlat18 = u_xlat8 / u_xlat18;
    u_xlat8 = (-u_xlat19) * u_xlat19 + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat7 * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat1.x * u_xlat2.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat2.x = u_xlat7 * u_xlat14 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
    u_xlat2.x = 2.0 / u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2 = u_xlat10_2 * _Color;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat21;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat1.z) + 1.0;
    u_xlat13 = u_xlat1.z * u_xlat1.z;
    u_xlat13 = dot(vec2(u_xlat13), vec2(u_xlat19));
    u_xlat13 = u_xlat13 + -0.5;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat7) + 1.0;
    u_xlat19 = u_xlat1.x * u_xlat1.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat1.x = u_xlat1.x * u_xlat19;
    u_xlat1.x = u_xlat13 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = (-u_xlat18) + 1.0;
    SV_Target0.w = u_xlat2.w * u_xlat18 + u_xlat0.x;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 115 math, 6 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15).xyz;
  xlv_TEXCOORD6 = (tmpvar_15.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_8;
  float outModifiedAlpha_9;
  diffColor_8 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_9 = ((1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 shadowVals_12;
  shadowVals_12.x = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, 0.0078125, 0.0078125))).x;
  shadowVals_12.y = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, -0.0078125, 0.0078125))).x;
  shadowVals_12.z = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, 0.0078125, -0.0078125))).x;
  shadowVals_12.w = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, -0.0078125, -0.0078125))).x;
  bvec4 tmpvar_13;
  tmpvar_13 = lessThan (shadowVals_12, vec4(((
    sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_14;
  tmpvar_14 = _LightShadowData.xxxx;
  float tmpvar_15;
  if (tmpvar_13.x) {
    tmpvar_15 = tmpvar_14.x;
  } else {
    tmpvar_15 = 1.0;
  };
  float tmpvar_16;
  if (tmpvar_13.y) {
    tmpvar_16 = tmpvar_14.y;
  } else {
    tmpvar_16 = 1.0;
  };
  float tmpvar_17;
  if (tmpvar_13.z) {
    tmpvar_17 = tmpvar_14.z;
  } else {
    tmpvar_17 = 1.0;
  };
  float tmpvar_18;
  if (tmpvar_13.w) {
    tmpvar_18 = tmpvar_14.w;
  } else {
    tmpvar_18 = 1.0;
  };
  vec4 tmpvar_19;
  tmpvar_19.x = tmpvar_15;
  tmpvar_19.y = tmpvar_16;
  tmpvar_19.z = tmpvar_17;
  tmpvar_19.w = tmpvar_18;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_21 = normalize(tmpvar_10);
  float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_6, tmpvar_21));
  tmpvar_20 = (_LightColor0.xyz * (tmpvar_11.w * dot (tmpvar_19, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_23;
  viewDir_23 = -(tmpvar_7);
  float specularTerm_24;
  float tmpvar_25;
  tmpvar_25 = (1.0 - _Glossiness);
  vec3 tmpvar_26;
  vec3 inVec_27;
  inVec_27 = (tmpvar_21 + viewDir_23);
  tmpvar_26 = (inVec_27 * inversesqrt(max (0.001, 
    dot (inVec_27, inVec_27)
  )));
  float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_26));
  float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, viewDir_23));
  float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_21, tmpvar_26));
  float tmpvar_31;
  tmpvar_31 = (tmpvar_25 * tmpvar_25);
  float tmpvar_32;
  tmpvar_32 = (tmpvar_25 * tmpvar_25);
  float tmpvar_33;
  tmpvar_33 = (tmpvar_32 * tmpvar_32);
  float tmpvar_34;
  tmpvar_34 = (((tmpvar_28 * tmpvar_28) * (tmpvar_33 - 1.0)) + 1.0);
  float x_35;
  x_35 = (1.0 - tmpvar_22);
  float x_36;
  x_36 = (1.0 - tmpvar_29);
  float tmpvar_37;
  tmpvar_37 = (0.5 + ((2.0 * tmpvar_30) * (tmpvar_30 * tmpvar_25)));
  float tmpvar_38;
  tmpvar_38 = ((1.0 + (
    (tmpvar_37 - 1.0)
   * 
    ((x_35 * x_35) * ((x_35 * x_35) * x_35))
  )) * (1.0 + (
    (tmpvar_37 - 1.0)
   * 
    ((x_36 * x_36) * ((x_36 * x_36) * x_36))
  )));
  float tmpvar_39;
  tmpvar_39 = (((2.0 / 
    (((tmpvar_22 * (
      (tmpvar_29 * (1.0 - tmpvar_31))
     + tmpvar_31)) + (tmpvar_29 * (
      (tmpvar_22 * (1.0 - tmpvar_31))
     + tmpvar_31))) + 1e-05)
  ) * (tmpvar_33 / 
    (((3.141593 * tmpvar_34) * tmpvar_34) + 1e-07)
  )) * 0.7853982);
  specularTerm_24 = tmpvar_39;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_24 = sqrt(max (0.0001, tmpvar_39));
  };
  float tmpvar_40;
  tmpvar_40 = max (0.0, (specularTerm_24 * tmpvar_22));
  specularTerm_24 = tmpvar_40;
  float tmpvar_41;
  tmpvar_41 = (tmpvar_38 * tmpvar_22);
  float tmpvar_42;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_42 = 1.0;
  } else {
    tmpvar_42 = 0.0;
  };
  specularTerm_24 = (tmpvar_40 * tmpvar_42);
  float x_43;
  x_43 = (1.0 - tmpvar_30);
  vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = ((diffColor_8 * (tmpvar_20 * tmpvar_41)) + ((specularTerm_24 * tmpvar_20) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * ((x_43 * x_43) * ((x_43 * x_43) * x_43)))
  )));
  vec4 xlat_varoutput_45;
  xlat_varoutput_45.xyz = tmpvar_44.xyz;
  xlat_varoutput_45.w = outModifiedAlpha_9;
  gl_FragData[0] = xlat_varoutput_45;
}


#endif
"
}
SubProgram "metal " {
// Stats: 22 math, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 352
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Matrix 288 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22).xyz;
  _mtl_o.xlv_TEXCOORD6 = (tmpvar_22.xyz - _mtl_u._LightPositionRange.xyz);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat8;
bool u_xlatb8;
float u_xlat13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * 0.970000029;
    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlat1.y = u_xlat10_2.x;
    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlat1.z = u_xlat10_2.x;
    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlat1.w = u_xlat10_2.x;
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTexture0, u_xlat6.xx);
    u_xlat0.x = u_xlat0.x * u_xlat10_1.w;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, (-u_xlat1.xyz));
    u_xlat7 = max(u_xlat2.x, 0.0);
    u_xlat1.xz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat19 = (-_Glossiness) + 1.0;
    u_xlat2.x = u_xlat19 * u_xlat19;
    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat8 = u_xlat2.x * u_xlat2.x;
    u_xlat18 = u_xlat8 / u_xlat18;
    u_xlat8 = (-u_xlat19) * u_xlat19 + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat7 * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat1.x * u_xlat2.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat2.x = u_xlat7 * u_xlat14 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
    u_xlat2.x = 2.0 / u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2 = u_xlat10_2 * _Color;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat21;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat1.z) + 1.0;
    u_xlat13 = u_xlat1.z * u_xlat1.z;
    u_xlat13 = dot(vec2(u_xlat13), vec2(u_xlat19));
    u_xlat13 = u_xlat13 + -0.5;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat7) + 1.0;
    u_xlat19 = u_xlat1.x * u_xlat1.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat1.x = u_xlat1.x * u_xlat19;
    u_xlat1.x = u_xlat13 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = (-u_xlat18) + 1.0;
    SV_Target0.w = u_xlat2.w * u_xlat18 + u_xlat0.x;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 116 math, 7 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15).xyz;
  xlv_TEXCOORD6 = (tmpvar_15.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _LightColor0;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_8;
  float outModifiedAlpha_9;
  diffColor_8 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_9 = ((1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_12;
  tmpvar_12 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  vec4 shadowVals_13;
  shadowVals_13.x = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, 0.0078125, 0.0078125))).x;
  shadowVals_13.y = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, -0.0078125, 0.0078125))).x;
  shadowVals_13.z = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, 0.0078125, -0.0078125))).x;
  shadowVals_13.w = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, -0.0078125, -0.0078125))).x;
  bvec4 tmpvar_14;
  tmpvar_14 = lessThan (shadowVals_13, vec4(((
    sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_15;
  tmpvar_15 = _LightShadowData.xxxx;
  float tmpvar_16;
  if (tmpvar_14.x) {
    tmpvar_16 = tmpvar_15.x;
  } else {
    tmpvar_16 = 1.0;
  };
  float tmpvar_17;
  if (tmpvar_14.y) {
    tmpvar_17 = tmpvar_15.y;
  } else {
    tmpvar_17 = 1.0;
  };
  float tmpvar_18;
  if (tmpvar_14.z) {
    tmpvar_18 = tmpvar_15.z;
  } else {
    tmpvar_18 = 1.0;
  };
  float tmpvar_19;
  if (tmpvar_14.w) {
    tmpvar_19 = tmpvar_15.w;
  } else {
    tmpvar_19 = 1.0;
  };
  vec4 tmpvar_20;
  tmpvar_20.x = tmpvar_16;
  tmpvar_20.y = tmpvar_17;
  tmpvar_20.z = tmpvar_18;
  tmpvar_20.w = tmpvar_19;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_22 = normalize(tmpvar_10);
  float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_6, tmpvar_22));
  tmpvar_21 = (_LightColor0.xyz * ((tmpvar_11.w * tmpvar_12.w) * dot (tmpvar_20, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_24;
  viewDir_24 = -(tmpvar_7);
  float specularTerm_25;
  float tmpvar_26;
  tmpvar_26 = (1.0 - _Glossiness);
  vec3 tmpvar_27;
  vec3 inVec_28;
  inVec_28 = (tmpvar_22 + viewDir_24);
  tmpvar_27 = (inVec_28 * inversesqrt(max (0.001, 
    dot (inVec_28, inVec_28)
  )));
  float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, tmpvar_27));
  float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_6, viewDir_24));
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_22, tmpvar_27));
  float tmpvar_32;
  tmpvar_32 = (tmpvar_26 * tmpvar_26);
  float tmpvar_33;
  tmpvar_33 = (tmpvar_26 * tmpvar_26);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_33 * tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (((tmpvar_29 * tmpvar_29) * (tmpvar_34 - 1.0)) + 1.0);
  float x_36;
  x_36 = (1.0 - tmpvar_23);
  float x_37;
  x_37 = (1.0 - tmpvar_30);
  float tmpvar_38;
  tmpvar_38 = (0.5 + ((2.0 * tmpvar_31) * (tmpvar_31 * tmpvar_26)));
  float tmpvar_39;
  tmpvar_39 = ((1.0 + (
    (tmpvar_38 - 1.0)
   * 
    ((x_36 * x_36) * ((x_36 * x_36) * x_36))
  )) * (1.0 + (
    (tmpvar_38 - 1.0)
   * 
    ((x_37 * x_37) * ((x_37 * x_37) * x_37))
  )));
  float tmpvar_40;
  tmpvar_40 = (((2.0 / 
    (((tmpvar_23 * (
      (tmpvar_30 * (1.0 - tmpvar_32))
     + tmpvar_32)) + (tmpvar_30 * (
      (tmpvar_23 * (1.0 - tmpvar_32))
     + tmpvar_32))) + 1e-05)
  ) * (tmpvar_34 / 
    (((3.141593 * tmpvar_35) * tmpvar_35) + 1e-07)
  )) * 0.7853982);
  specularTerm_25 = tmpvar_40;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_25 = sqrt(max (0.0001, tmpvar_40));
  };
  float tmpvar_41;
  tmpvar_41 = max (0.0, (specularTerm_25 * tmpvar_23));
  specularTerm_25 = tmpvar_41;
  float tmpvar_42;
  tmpvar_42 = (tmpvar_39 * tmpvar_23);
  float tmpvar_43;
  if (any(bvec3(tmpvar_4))) {
    tmpvar_43 = 1.0;
  } else {
    tmpvar_43 = 0.0;
  };
  specularTerm_25 = (tmpvar_41 * tmpvar_43);
  float x_44;
  x_44 = (1.0 - tmpvar_31);
  vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = ((diffColor_8 * (tmpvar_21 * tmpvar_42)) + ((specularTerm_25 * tmpvar_21) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * ((x_44 * x_44) * ((x_44 * x_44) * x_44)))
  )));
  vec4 xlat_varoutput_46;
  xlat_varoutput_46.xyz = tmpvar_45.xyz;
  xlat_varoutput_46.w = outModifiedAlpha_9;
  gl_FragData[0] = xlat_varoutput_46;
}


#endif
"
}
SubProgram "metal " {
// Stats: 22 math, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 352
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Matrix 288 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 n_14;
  n_14 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_13 = half3(n_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  float3 tmpvar_20;
  tmpvar_20 = (_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w));
  half3 tmpvar_21;
  tmpvar_21 = half3(tmpvar_20);
  lightDir_4 = float3(tmpvar_21);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22).xyz;
  _mtl_o.xlv_TEXCOORD6 = (tmpvar_22.xyz - _mtl_u._LightPositionRange.xyz);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
float u_xlat8;
bool u_xlatb8;
float u_xlat13;
float u_xlat14;
float u_xlat18;
float u_xlat19;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * 0.970000029;
    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlat1.y = u_xlat10_2.x;
    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlat1.z = u_xlat10_2.x;
    u_xlat6.xyz = vs_TEXCOORD6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlat1.w = u_xlat10_2.x;
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat6.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTextureB0, u_xlat6.xx);
    u_xlat10_2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
    u_xlat16_6 = u_xlat10_1.w * u_xlat10_2.w;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + (-u_xlat1.xyz);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, (-u_xlat1.xyz));
    u_xlat7 = max(u_xlat2.x, 0.0);
    u_xlat1.xz = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat19 = (-_Glossiness) + 1.0;
    u_xlat2.x = u_xlat19 * u_xlat19;
    u_xlat8 = u_xlat2.x * u_xlat2.x + -1.0;
    u_xlat18 = u_xlat18 * u_xlat8 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274 + 1.00000001e-07;
    u_xlat8 = u_xlat2.x * u_xlat2.x;
    u_xlat18 = u_xlat8 / u_xlat18;
    u_xlat8 = (-u_xlat19) * u_xlat19 + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat7 * u_xlat8 + u_xlat2.x;
    u_xlat2.x = u_xlat1.x * u_xlat2.x;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat2.x = u_xlat7 * u_xlat14 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 9.99999975e-06;
    u_xlat2.x = 2.0 / u_xlat2.x;
    u_xlat18 = u_xlat18 * u_xlat2.x;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat2.x = max(u_xlat18, 9.99999975e-05);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb8) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2 = u_xlat10_2 * _Color;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat21;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
    u_xlat18 = (-u_xlat1.z) + 1.0;
    u_xlat13 = u_xlat1.z * u_xlat1.z;
    u_xlat13 = dot(vec2(u_xlat13), vec2(u_xlat19));
    u_xlat13 = u_xlat13 + -0.5;
    u_xlat19 = u_xlat18 * u_xlat18;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat18 = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18 + 1.0;
    u_xlat1.x = (-u_xlat7) + 1.0;
    u_xlat19 = u_xlat1.x * u_xlat1.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat1.x = u_xlat1.x * u_xlat19;
    u_xlat1.x = u_xlat13 * u_xlat1.x + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat7 * u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = (-u_xlat18) + 1.0;
    SV_Target0.w = u_xlat2.w * u_xlat18 + u_xlat0.x;
    return;
}
#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "POINT" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 96 math, 2 textures, 2 branches
Keywords { "POINT" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_LightTexture0] 2D 1
ConstBuffer "$Globals" 36
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [_LightColor0] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic));
  tmpvar_3 = (tmpvar_2 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_6;
  tmpvar_6.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_6.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_6.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_7;
  tmpvar_7 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_8;
  tmpvar_8 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(float2(tmpvar_7)));
  half atten_9;
  atten_9 = tmpvar_8.w;
  half3 tmpvar_10;
  tmpvar_10 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_6);
  half tmpvar_12;
  tmpvar_12 = max ((half)0.0, dot (tmpvar_5, tmpvar_11));
  tmpvar_10 = (tmpvar_10 * atten_9);
  half3 viewDir_13;
  viewDir_13 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_14;
  half tmpvar_15;
  tmpvar_15 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_16;
  half3 inVec_17;
  inVec_17 = (tmpvar_11 + viewDir_13);
  tmpvar_16 = (inVec_17 * rsqrt(max ((half)0.001, 
    dot (inVec_17, inVec_17)
  )));
  half tmpvar_18;
  tmpvar_18 = max ((half)0.0, dot (tmpvar_5, tmpvar_16));
  half tmpvar_19;
  tmpvar_19 = max ((half)0.0, dot (tmpvar_5, viewDir_13));
  half tmpvar_20;
  tmpvar_20 = max ((half)0.0, dot (tmpvar_11, tmpvar_16));
  half tmpvar_21;
  tmpvar_21 = (tmpvar_15 * tmpvar_15);
  half tmpvar_22;
  tmpvar_22 = (tmpvar_15 * tmpvar_15);
  half tmpvar_23;
  tmpvar_23 = (tmpvar_22 * tmpvar_22);
  half tmpvar_24;
  tmpvar_24 = (((tmpvar_18 * tmpvar_18) * (tmpvar_23 - (half)1.0)) + (half)1.0);
  half x_25;
  x_25 = ((half)1.0 - tmpvar_12);
  half x_26;
  x_26 = ((half)1.0 - tmpvar_19);
  half tmpvar_27;
  tmpvar_27 = ((half)0.5 + (((half)2.0 * tmpvar_20) * (tmpvar_20 * tmpvar_15)));
  half tmpvar_28;
  tmpvar_28 = (((half)1.0 + (
    (tmpvar_27 - (half)1.0)
   * 
    ((x_25 * x_25) * ((x_25 * x_25) * x_25))
  )) * ((half)1.0 + (
    (tmpvar_27 - (half)1.0)
   * 
    ((x_26 * x_26) * ((x_26 * x_26) * x_26))
  )));
  half tmpvar_29;
  tmpvar_29 = ((((half)2.0 / 
    (((tmpvar_12 * (
      (tmpvar_19 * ((half)1.0 - tmpvar_21))
     + tmpvar_21)) + (tmpvar_19 * (
      (tmpvar_12 * ((half)1.0 - tmpvar_21))
     + tmpvar_21))) + (half)1e-05)
  ) * (tmpvar_23 / 
    ((((half)3.141593 * tmpvar_24) * tmpvar_24) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_14 = tmpvar_29;
  bool tmpvar_30;
  tmpvar_30 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_30) {
    specularTerm_14 = sqrt(max ((half)0.0001, tmpvar_29));
  };
  half tmpvar_31;
  tmpvar_31 = max ((half)0.0, (specularTerm_14 * tmpvar_12));
  specularTerm_14 = tmpvar_31;
  half tmpvar_32;
  tmpvar_32 = (tmpvar_28 * tmpvar_12);
  bool3 tmpvar_33;
  tmpvar_33 = bool3(tmpvar_4);
  bool tmpvar_34;
  tmpvar_34 = any(tmpvar_33);
  float tmpvar_35;
  if (tmpvar_34) {
    tmpvar_35 = 1.0;
  } else {
    tmpvar_35 = 0.0;
  };
  specularTerm_14 = (tmpvar_31 * (half)tmpvar_35);
  half x_36;
  x_36 = ((half)1.0 - tmpvar_20);
  half4 tmpvar_37;
  tmpvar_37.w = half(1.0);
  tmpvar_37.xyz = ((tmpvar_3 * (tmpvar_10 * tmpvar_32)) + ((specularTerm_14 * tmpvar_10) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_36 * x_36) * ((x_36 * x_36) * x_36)))
  )));
  half4 xlat_varoutput_38;
  xlat_varoutput_38.xyz = tmpvar_37.xyz;
  xlat_varoutput_38.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_38;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 93 math, 1 textures, 2 branches
Keywords { "DIRECTIONAL" }
SetTexture 0 [_MainTex] 2D 0
ConstBuffer "$Globals" 36
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [_LightColor0] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic));
  tmpvar_3 = (tmpvar_2 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_6;
  tmpvar_6.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_6.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_6.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half3 tmpvar_7;
  tmpvar_7 = _mtl_u._LightColor0.xyz;
  half tmpvar_8;
  tmpvar_8 = max ((half)0.0, dot (tmpvar_5, tmpvar_6));
  half3 viewDir_9;
  viewDir_9 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_10;
  half tmpvar_11;
  tmpvar_11 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_12;
  half3 inVec_13;
  inVec_13 = (tmpvar_6 + viewDir_9);
  tmpvar_12 = (inVec_13 * rsqrt(max ((half)0.001, 
    dot (inVec_13, inVec_13)
  )));
  half tmpvar_14;
  tmpvar_14 = max ((half)0.0, dot (tmpvar_5, tmpvar_12));
  half tmpvar_15;
  tmpvar_15 = max ((half)0.0, dot (tmpvar_5, viewDir_9));
  half tmpvar_16;
  tmpvar_16 = max ((half)0.0, dot (tmpvar_6, tmpvar_12));
  half tmpvar_17;
  tmpvar_17 = (tmpvar_11 * tmpvar_11);
  half tmpvar_18;
  tmpvar_18 = (tmpvar_11 * tmpvar_11);
  half tmpvar_19;
  tmpvar_19 = (tmpvar_18 * tmpvar_18);
  half tmpvar_20;
  tmpvar_20 = (((tmpvar_14 * tmpvar_14) * (tmpvar_19 - (half)1.0)) + (half)1.0);
  half x_21;
  x_21 = ((half)1.0 - tmpvar_8);
  half x_22;
  x_22 = ((half)1.0 - tmpvar_15);
  half tmpvar_23;
  tmpvar_23 = ((half)0.5 + (((half)2.0 * tmpvar_16) * (tmpvar_16 * tmpvar_11)));
  half tmpvar_24;
  tmpvar_24 = (((half)1.0 + (
    (tmpvar_23 - (half)1.0)
   * 
    ((x_21 * x_21) * ((x_21 * x_21) * x_21))
  )) * ((half)1.0 + (
    (tmpvar_23 - (half)1.0)
   * 
    ((x_22 * x_22) * ((x_22 * x_22) * x_22))
  )));
  half tmpvar_25;
  tmpvar_25 = ((((half)2.0 / 
    (((tmpvar_8 * (
      (tmpvar_15 * ((half)1.0 - tmpvar_17))
     + tmpvar_17)) + (tmpvar_15 * (
      (tmpvar_8 * ((half)1.0 - tmpvar_17))
     + tmpvar_17))) + (half)1e-05)
  ) * (tmpvar_19 / 
    ((((half)3.141593 * tmpvar_20) * tmpvar_20) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_10 = tmpvar_25;
  bool tmpvar_26;
  tmpvar_26 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_26) {
    specularTerm_10 = sqrt(max ((half)0.0001, tmpvar_25));
  };
  half tmpvar_27;
  tmpvar_27 = max ((half)0.0, (specularTerm_10 * tmpvar_8));
  specularTerm_10 = tmpvar_27;
  half tmpvar_28;
  tmpvar_28 = (tmpvar_24 * tmpvar_8);
  bool3 tmpvar_29;
  tmpvar_29 = bool3(tmpvar_4);
  bool tmpvar_30;
  tmpvar_30 = any(tmpvar_29);
  float tmpvar_31;
  if (tmpvar_30) {
    tmpvar_31 = 1.0;
  } else {
    tmpvar_31 = 0.0;
  };
  specularTerm_10 = (tmpvar_27 * (half)tmpvar_31);
  half x_32;
  x_32 = ((half)1.0 - tmpvar_16);
  half4 tmpvar_33;
  tmpvar_33.w = half(1.0);
  tmpvar_33.xyz = ((tmpvar_3 * (tmpvar_7 * tmpvar_28)) + ((specularTerm_10 * tmpvar_7) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_32 * x_32) * ((x_32 * x_32) * x_32)))
  )));
  half4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_34;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "SPOT" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 102 math, 3 textures, 2 branches
Keywords { "SPOT" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_LightTexture0] 2D 1
SetTexture 2 [_LightTextureB0] 2D 2
ConstBuffer "$Globals" 36
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [_LightColor0] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _LightTextureB0 [[texture(2)]], sampler _mtlsmp__LightTextureB0 [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic));
  tmpvar_3 = (tmpvar_2 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_6;
  tmpvar_6.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_6.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_6.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_7;
  float2 P_8;
  P_8 = ((_mtl_i.xlv_TEXCOORD5.xy / _mtl_i.xlv_TEXCOORD5.w) + 0.5);
  tmpvar_7 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(P_8));
  float tmpvar_9;
  tmpvar_9 = dot (_mtl_i.xlv_TEXCOORD5.xyz, _mtl_i.xlv_TEXCOORD5.xyz);
  half4 tmpvar_10;
  tmpvar_10 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_9)));
  half atten_11;
  atten_11 = half(((float(
    (_mtl_i.xlv_TEXCOORD5.z > 0.0)
  ) * (float)tmpvar_7.w) * (float)tmpvar_10.w));
  half3 tmpvar_12;
  tmpvar_12 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_6);
  half tmpvar_14;
  tmpvar_14 = max ((half)0.0, dot (tmpvar_5, tmpvar_13));
  tmpvar_12 = (tmpvar_12 * atten_11);
  half3 viewDir_15;
  viewDir_15 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_16;
  half tmpvar_17;
  tmpvar_17 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_18;
  half3 inVec_19;
  inVec_19 = (tmpvar_13 + viewDir_15);
  tmpvar_18 = (inVec_19 * rsqrt(max ((half)0.001, 
    dot (inVec_19, inVec_19)
  )));
  half tmpvar_20;
  tmpvar_20 = max ((half)0.0, dot (tmpvar_5, tmpvar_18));
  half tmpvar_21;
  tmpvar_21 = max ((half)0.0, dot (tmpvar_5, viewDir_15));
  half tmpvar_22;
  tmpvar_22 = max ((half)0.0, dot (tmpvar_13, tmpvar_18));
  half tmpvar_23;
  tmpvar_23 = (tmpvar_17 * tmpvar_17);
  half tmpvar_24;
  tmpvar_24 = (tmpvar_17 * tmpvar_17);
  half tmpvar_25;
  tmpvar_25 = (tmpvar_24 * tmpvar_24);
  half tmpvar_26;
  tmpvar_26 = (((tmpvar_20 * tmpvar_20) * (tmpvar_25 - (half)1.0)) + (half)1.0);
  half x_27;
  x_27 = ((half)1.0 - tmpvar_14);
  half x_28;
  x_28 = ((half)1.0 - tmpvar_21);
  half tmpvar_29;
  tmpvar_29 = ((half)0.5 + (((half)2.0 * tmpvar_22) * (tmpvar_22 * tmpvar_17)));
  half tmpvar_30;
  tmpvar_30 = (((half)1.0 + (
    (tmpvar_29 - (half)1.0)
   * 
    ((x_27 * x_27) * ((x_27 * x_27) * x_27))
  )) * ((half)1.0 + (
    (tmpvar_29 - (half)1.0)
   * 
    ((x_28 * x_28) * ((x_28 * x_28) * x_28))
  )));
  half tmpvar_31;
  tmpvar_31 = ((((half)2.0 / 
    (((tmpvar_14 * (
      (tmpvar_21 * ((half)1.0 - tmpvar_23))
     + tmpvar_23)) + (tmpvar_21 * (
      (tmpvar_14 * ((half)1.0 - tmpvar_23))
     + tmpvar_23))) + (half)1e-05)
  ) * (tmpvar_25 / 
    ((((half)3.141593 * tmpvar_26) * tmpvar_26) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_16 = tmpvar_31;
  bool tmpvar_32;
  tmpvar_32 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_32) {
    specularTerm_16 = sqrt(max ((half)0.0001, tmpvar_31));
  };
  half tmpvar_33;
  tmpvar_33 = max ((half)0.0, (specularTerm_16 * tmpvar_14));
  specularTerm_16 = tmpvar_33;
  half tmpvar_34;
  tmpvar_34 = (tmpvar_30 * tmpvar_14);
  bool3 tmpvar_35;
  tmpvar_35 = bool3(tmpvar_4);
  bool tmpvar_36;
  tmpvar_36 = any(tmpvar_35);
  float tmpvar_37;
  if (tmpvar_36) {
    tmpvar_37 = 1.0;
  } else {
    tmpvar_37 = 0.0;
  };
  specularTerm_16 = (tmpvar_33 * (half)tmpvar_37);
  half x_38;
  x_38 = ((half)1.0 - tmpvar_22);
  half4 tmpvar_39;
  tmpvar_39.w = half(1.0);
  tmpvar_39.xyz = ((tmpvar_3 * (tmpvar_12 * tmpvar_34)) + ((specularTerm_16 * tmpvar_12) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_38 * x_38) * ((x_38 * x_38) * x_38)))
  )));
  half4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = tmpvar_39.xyz;
  xlat_varoutput_40.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_40;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 97 math, 3 textures, 2 branches
Keywords { "POINT_COOKIE" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_LightTexture0] CUBE 1
SetTexture 2 [_LightTextureB0] 2D 2
ConstBuffer "$Globals" 36
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [_LightColor0] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texturecube<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _LightTextureB0 [[texture(2)]], sampler _mtlsmp__LightTextureB0 [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic));
  tmpvar_3 = (tmpvar_2 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_6;
  tmpvar_6.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_6.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_6.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_7;
  tmpvar_7 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_8;
  tmpvar_8 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_7)));
  half4 tmpvar_9;
  tmpvar_9 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float3)(_mtl_i.xlv_TEXCOORD5));
  half atten_10;
  atten_10 = (tmpvar_8.w * tmpvar_9.w);
  half3 tmpvar_11;
  tmpvar_11 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_6);
  half tmpvar_13;
  tmpvar_13 = max ((half)0.0, dot (tmpvar_5, tmpvar_12));
  tmpvar_11 = (tmpvar_11 * atten_10);
  half3 viewDir_14;
  viewDir_14 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_15;
  half tmpvar_16;
  tmpvar_16 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_17;
  half3 inVec_18;
  inVec_18 = (tmpvar_12 + viewDir_14);
  tmpvar_17 = (inVec_18 * rsqrt(max ((half)0.001, 
    dot (inVec_18, inVec_18)
  )));
  half tmpvar_19;
  tmpvar_19 = max ((half)0.0, dot (tmpvar_5, tmpvar_17));
  half tmpvar_20;
  tmpvar_20 = max ((half)0.0, dot (tmpvar_5, viewDir_14));
  half tmpvar_21;
  tmpvar_21 = max ((half)0.0, dot (tmpvar_12, tmpvar_17));
  half tmpvar_22;
  tmpvar_22 = (tmpvar_16 * tmpvar_16);
  half tmpvar_23;
  tmpvar_23 = (tmpvar_16 * tmpvar_16);
  half tmpvar_24;
  tmpvar_24 = (tmpvar_23 * tmpvar_23);
  half tmpvar_25;
  tmpvar_25 = (((tmpvar_19 * tmpvar_19) * (tmpvar_24 - (half)1.0)) + (half)1.0);
  half x_26;
  x_26 = ((half)1.0 - tmpvar_13);
  half x_27;
  x_27 = ((half)1.0 - tmpvar_20);
  half tmpvar_28;
  tmpvar_28 = ((half)0.5 + (((half)2.0 * tmpvar_21) * (tmpvar_21 * tmpvar_16)));
  half tmpvar_29;
  tmpvar_29 = (((half)1.0 + (
    (tmpvar_28 - (half)1.0)
   * 
    ((x_26 * x_26) * ((x_26 * x_26) * x_26))
  )) * ((half)1.0 + (
    (tmpvar_28 - (half)1.0)
   * 
    ((x_27 * x_27) * ((x_27 * x_27) * x_27))
  )));
  half tmpvar_30;
  tmpvar_30 = ((((half)2.0 / 
    (((tmpvar_13 * (
      (tmpvar_20 * ((half)1.0 - tmpvar_22))
     + tmpvar_22)) + (tmpvar_20 * (
      (tmpvar_13 * ((half)1.0 - tmpvar_22))
     + tmpvar_22))) + (half)1e-05)
  ) * (tmpvar_24 / 
    ((((half)3.141593 * tmpvar_25) * tmpvar_25) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_15 = tmpvar_30;
  bool tmpvar_31;
  tmpvar_31 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_31) {
    specularTerm_15 = sqrt(max ((half)0.0001, tmpvar_30));
  };
  half tmpvar_32;
  tmpvar_32 = max ((half)0.0, (specularTerm_15 * tmpvar_13));
  specularTerm_15 = tmpvar_32;
  half tmpvar_33;
  tmpvar_33 = (tmpvar_29 * tmpvar_13);
  bool3 tmpvar_34;
  tmpvar_34 = bool3(tmpvar_4);
  bool tmpvar_35;
  tmpvar_35 = any(tmpvar_34);
  float tmpvar_36;
  if (tmpvar_35) {
    tmpvar_36 = 1.0;
  } else {
    tmpvar_36 = 0.0;
  };
  specularTerm_15 = (tmpvar_32 * (half)tmpvar_36);
  half x_37;
  x_37 = ((half)1.0 - tmpvar_21);
  half4 tmpvar_38;
  tmpvar_38.w = half(1.0);
  tmpvar_38.xyz = ((tmpvar_3 * (tmpvar_11 * tmpvar_33)) + ((specularTerm_15 * tmpvar_11) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_37 * x_37) * ((x_37 * x_37) * x_37)))
  )));
  half4 xlat_varoutput_39;
  xlat_varoutput_39.xyz = tmpvar_38.xyz;
  xlat_varoutput_39.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_39;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 94 math, 2 textures, 2 branches
Keywords { "DIRECTIONAL_COOKIE" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_LightTexture0] 2D 1
ConstBuffer "$Globals" 36
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [_LightColor0] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float2 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic));
  tmpvar_3 = (tmpvar_2 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_6;
  tmpvar_6.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_6.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_6.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_7;
  tmpvar_7 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(_mtl_i.xlv_TEXCOORD5));
  half atten_8;
  atten_8 = tmpvar_7.w;
  half3 tmpvar_9;
  tmpvar_9 = _mtl_u._LightColor0.xyz;
  half tmpvar_10;
  tmpvar_10 = max ((half)0.0, dot (tmpvar_5, tmpvar_6));
  tmpvar_9 = (tmpvar_9 * atten_8);
  half3 viewDir_11;
  viewDir_11 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_12;
  half tmpvar_13;
  tmpvar_13 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_14;
  half3 inVec_15;
  inVec_15 = (tmpvar_6 + viewDir_11);
  tmpvar_14 = (inVec_15 * rsqrt(max ((half)0.001, 
    dot (inVec_15, inVec_15)
  )));
  half tmpvar_16;
  tmpvar_16 = max ((half)0.0, dot (tmpvar_5, tmpvar_14));
  half tmpvar_17;
  tmpvar_17 = max ((half)0.0, dot (tmpvar_5, viewDir_11));
  half tmpvar_18;
  tmpvar_18 = max ((half)0.0, dot (tmpvar_6, tmpvar_14));
  half tmpvar_19;
  tmpvar_19 = (tmpvar_13 * tmpvar_13);
  half tmpvar_20;
  tmpvar_20 = (tmpvar_13 * tmpvar_13);
  half tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  half tmpvar_22;
  tmpvar_22 = (((tmpvar_16 * tmpvar_16) * (tmpvar_21 - (half)1.0)) + (half)1.0);
  half x_23;
  x_23 = ((half)1.0 - tmpvar_10);
  half x_24;
  x_24 = ((half)1.0 - tmpvar_17);
  half tmpvar_25;
  tmpvar_25 = ((half)0.5 + (((half)2.0 * tmpvar_18) * (tmpvar_18 * tmpvar_13)));
  half tmpvar_26;
  tmpvar_26 = (((half)1.0 + (
    (tmpvar_25 - (half)1.0)
   * 
    ((x_23 * x_23) * ((x_23 * x_23) * x_23))
  )) * ((half)1.0 + (
    (tmpvar_25 - (half)1.0)
   * 
    ((x_24 * x_24) * ((x_24 * x_24) * x_24))
  )));
  half tmpvar_27;
  tmpvar_27 = ((((half)2.0 / 
    (((tmpvar_10 * (
      (tmpvar_17 * ((half)1.0 - tmpvar_19))
     + tmpvar_19)) + (tmpvar_17 * (
      (tmpvar_10 * ((half)1.0 - tmpvar_19))
     + tmpvar_19))) + (half)1e-05)
  ) * (tmpvar_21 / 
    ((((half)3.141593 * tmpvar_22) * tmpvar_22) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_12 = tmpvar_27;
  bool tmpvar_28;
  tmpvar_28 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_28) {
    specularTerm_12 = sqrt(max ((half)0.0001, tmpvar_27));
  };
  half tmpvar_29;
  tmpvar_29 = max ((half)0.0, (specularTerm_12 * tmpvar_10));
  specularTerm_12 = tmpvar_29;
  half tmpvar_30;
  tmpvar_30 = (tmpvar_26 * tmpvar_10);
  bool3 tmpvar_31;
  tmpvar_31 = bool3(tmpvar_4);
  bool tmpvar_32;
  tmpvar_32 = any(tmpvar_31);
  float tmpvar_33;
  if (tmpvar_32) {
    tmpvar_33 = 1.0;
  } else {
    tmpvar_33 = 0.0;
  };
  specularTerm_12 = (tmpvar_29 * (half)tmpvar_33);
  half x_34;
  x_34 = ((half)1.0 - tmpvar_18);
  half4 tmpvar_35;
  tmpvar_35.w = half(1.0);
  tmpvar_35.xyz = ((tmpvar_3 * (tmpvar_9 * tmpvar_30)) + ((specularTerm_12 * tmpvar_9) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_34 * x_34) * ((x_34 * x_34) * x_34)))
  )));
  half4 xlat_varoutput_36;
  xlat_varoutput_36.xyz = tmpvar_35.xyz;
  xlat_varoutput_36.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_36;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 106 math, 4 textures, 2 branches
Keywords { "SPOT" "SHADOWS_DEPTH" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_ShadowMapTexture] 2D 1
SetTexture 2 [_LightTexture0] 2D 2
SetTexture 3 [_LightTextureB0] 2D 3
ConstBuffer "$Globals" 44
VectorHalf 0 [_LightShadowData] 4
VectorHalf 8 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 16 [unity_ColorSpaceLuminance] 4
VectorHalf 24 [_LightColor0] 4
VectorHalf 32 [_Color] 4
ScalarHalf 40 [_Metallic]
ScalarHalf 42 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::less);
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   depth2d<float> _ShadowMapTexture [[texture(1)]], sampler _mtlsmp__ShadowMapTexture [[sampler(1)]]
  ,   texture2d<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]]
  ,   texture2d<half> _LightTextureB0 [[texture(3)]], sampler _mtlsmp__LightTextureB0 [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic));
  tmpvar_3 = (tmpvar_2 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_6;
  tmpvar_6.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_6.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_6.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_7;
  float2 P_8;
  P_8 = ((_mtl_i.xlv_TEXCOORD5.xy / _mtl_i.xlv_TEXCOORD5.w) + 0.5);
  tmpvar_7 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(P_8));
  float tmpvar_9;
  tmpvar_9 = dot (_mtl_i.xlv_TEXCOORD5.xyz, _mtl_i.xlv_TEXCOORD5.xyz);
  half4 tmpvar_10;
  tmpvar_10 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_9)));
  half tmpvar_11;
  half shadow_12;
  half tmpvar_13;
  tmpvar_13 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w, (float)(_mtl_i.xlv_TEXCOORD6).z / (float)(_mtl_i.xlv_TEXCOORD6).w);
  shadow_12 = (_mtl_u._LightShadowData.x + (tmpvar_13 * ((half)1.0 - _mtl_u._LightShadowData.x)));
  tmpvar_11 = shadow_12;
  half atten_14;
  atten_14 = half((((
    float((_mtl_i.xlv_TEXCOORD5.z > 0.0))
   * (float)tmpvar_7.w) * (float)tmpvar_10.w) * (float)tmpvar_11));
  half3 tmpvar_15;
  tmpvar_15 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_6);
  half tmpvar_17;
  tmpvar_17 = max ((half)0.0, dot (tmpvar_5, tmpvar_16));
  tmpvar_15 = (tmpvar_15 * atten_14);
  half3 viewDir_18;
  viewDir_18 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_19;
  half tmpvar_20;
  tmpvar_20 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_21;
  half3 inVec_22;
  inVec_22 = (tmpvar_16 + viewDir_18);
  tmpvar_21 = (inVec_22 * rsqrt(max ((half)0.001, 
    dot (inVec_22, inVec_22)
  )));
  half tmpvar_23;
  tmpvar_23 = max ((half)0.0, dot (tmpvar_5, tmpvar_21));
  half tmpvar_24;
  tmpvar_24 = max ((half)0.0, dot (tmpvar_5, viewDir_18));
  half tmpvar_25;
  tmpvar_25 = max ((half)0.0, dot (tmpvar_16, tmpvar_21));
  half tmpvar_26;
  tmpvar_26 = (tmpvar_20 * tmpvar_20);
  half tmpvar_27;
  tmpvar_27 = (tmpvar_20 * tmpvar_20);
  half tmpvar_28;
  tmpvar_28 = (tmpvar_27 * tmpvar_27);
  half tmpvar_29;
  tmpvar_29 = (((tmpvar_23 * tmpvar_23) * (tmpvar_28 - (half)1.0)) + (half)1.0);
  half x_30;
  x_30 = ((half)1.0 - tmpvar_17);
  half x_31;
  x_31 = ((half)1.0 - tmpvar_24);
  half tmpvar_32;
  tmpvar_32 = ((half)0.5 + (((half)2.0 * tmpvar_25) * (tmpvar_25 * tmpvar_20)));
  half tmpvar_33;
  tmpvar_33 = (((half)1.0 + (
    (tmpvar_32 - (half)1.0)
   * 
    ((x_30 * x_30) * ((x_30 * x_30) * x_30))
  )) * ((half)1.0 + (
    (tmpvar_32 - (half)1.0)
   * 
    ((x_31 * x_31) * ((x_31 * x_31) * x_31))
  )));
  half tmpvar_34;
  tmpvar_34 = ((((half)2.0 / 
    (((tmpvar_17 * (
      (tmpvar_24 * ((half)1.0 - tmpvar_26))
     + tmpvar_26)) + (tmpvar_24 * (
      (tmpvar_17 * ((half)1.0 - tmpvar_26))
     + tmpvar_26))) + (half)1e-05)
  ) * (tmpvar_28 / 
    ((((half)3.141593 * tmpvar_29) * tmpvar_29) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_19 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    specularTerm_19 = sqrt(max ((half)0.0001, tmpvar_34));
  };
  half tmpvar_36;
  tmpvar_36 = max ((half)0.0, (specularTerm_19 * tmpvar_17));
  specularTerm_19 = tmpvar_36;
  half tmpvar_37;
  tmpvar_37 = (tmpvar_33 * tmpvar_17);
  bool3 tmpvar_38;
  tmpvar_38 = bool3(tmpvar_4);
  bool tmpvar_39;
  tmpvar_39 = any(tmpvar_38);
  float tmpvar_40;
  if (tmpvar_39) {
    tmpvar_40 = 1.0;
  } else {
    tmpvar_40 = 0.0;
  };
  specularTerm_19 = (tmpvar_36 * (half)tmpvar_40);
  half x_41;
  x_41 = ((half)1.0 - tmpvar_25);
  half4 tmpvar_42;
  tmpvar_42.w = half(1.0);
  tmpvar_42.xyz = ((tmpvar_3 * (tmpvar_15 * tmpvar_37)) + ((specularTerm_19 * tmpvar_15) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_41 * x_41) * ((x_41 * x_41) * x_41)))
  )));
  half4 xlat_varoutput_43;
  xlat_varoutput_43.xyz = tmpvar_42.xyz;
  xlat_varoutput_43.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_43;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 94 math, 2 textures, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_ShadowMapTexture] 2D 1
ConstBuffer "$Globals" 36
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [_LightColor0] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(1)]], sampler _mtlsmp__ShadowMapTexture [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic));
  tmpvar_3 = (tmpvar_2 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_6;
  tmpvar_6.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_6.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_6.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half tmpvar_7;
  tmpvar_7 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD5).xy / (float)(_mtl_i.xlv_TEXCOORD5).w)).x;
  half atten_8;
  atten_8 = tmpvar_7;
  half3 tmpvar_9;
  tmpvar_9 = _mtl_u._LightColor0.xyz;
  half tmpvar_10;
  tmpvar_10 = max ((half)0.0, dot (tmpvar_5, tmpvar_6));
  tmpvar_9 = (tmpvar_9 * atten_8);
  half3 viewDir_11;
  viewDir_11 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_12;
  half tmpvar_13;
  tmpvar_13 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_14;
  half3 inVec_15;
  inVec_15 = (tmpvar_6 + viewDir_11);
  tmpvar_14 = (inVec_15 * rsqrt(max ((half)0.001, 
    dot (inVec_15, inVec_15)
  )));
  half tmpvar_16;
  tmpvar_16 = max ((half)0.0, dot (tmpvar_5, tmpvar_14));
  half tmpvar_17;
  tmpvar_17 = max ((half)0.0, dot (tmpvar_5, viewDir_11));
  half tmpvar_18;
  tmpvar_18 = max ((half)0.0, dot (tmpvar_6, tmpvar_14));
  half tmpvar_19;
  tmpvar_19 = (tmpvar_13 * tmpvar_13);
  half tmpvar_20;
  tmpvar_20 = (tmpvar_13 * tmpvar_13);
  half tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  half tmpvar_22;
  tmpvar_22 = (((tmpvar_16 * tmpvar_16) * (tmpvar_21 - (half)1.0)) + (half)1.0);
  half x_23;
  x_23 = ((half)1.0 - tmpvar_10);
  half x_24;
  x_24 = ((half)1.0 - tmpvar_17);
  half tmpvar_25;
  tmpvar_25 = ((half)0.5 + (((half)2.0 * tmpvar_18) * (tmpvar_18 * tmpvar_13)));
  half tmpvar_26;
  tmpvar_26 = (((half)1.0 + (
    (tmpvar_25 - (half)1.0)
   * 
    ((x_23 * x_23) * ((x_23 * x_23) * x_23))
  )) * ((half)1.0 + (
    (tmpvar_25 - (half)1.0)
   * 
    ((x_24 * x_24) * ((x_24 * x_24) * x_24))
  )));
  half tmpvar_27;
  tmpvar_27 = ((((half)2.0 / 
    (((tmpvar_10 * (
      (tmpvar_17 * ((half)1.0 - tmpvar_19))
     + tmpvar_19)) + (tmpvar_17 * (
      (tmpvar_10 * ((half)1.0 - tmpvar_19))
     + tmpvar_19))) + (half)1e-05)
  ) * (tmpvar_21 / 
    ((((half)3.141593 * tmpvar_22) * tmpvar_22) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_12 = tmpvar_27;
  bool tmpvar_28;
  tmpvar_28 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_28) {
    specularTerm_12 = sqrt(max ((half)0.0001, tmpvar_27));
  };
  half tmpvar_29;
  tmpvar_29 = max ((half)0.0, (specularTerm_12 * tmpvar_10));
  specularTerm_12 = tmpvar_29;
  half tmpvar_30;
  tmpvar_30 = (tmpvar_26 * tmpvar_10);
  bool3 tmpvar_31;
  tmpvar_31 = bool3(tmpvar_4);
  bool tmpvar_32;
  tmpvar_32 = any(tmpvar_31);
  float tmpvar_33;
  if (tmpvar_32) {
    tmpvar_33 = 1.0;
  } else {
    tmpvar_33 = 0.0;
  };
  specularTerm_12 = (tmpvar_29 * (half)tmpvar_33);
  half x_34;
  x_34 = ((half)1.0 - tmpvar_18);
  half4 tmpvar_35;
  tmpvar_35.w = half(1.0);
  tmpvar_35.xyz = ((tmpvar_3 * (tmpvar_9 * tmpvar_30)) + ((specularTerm_12 * tmpvar_9) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_34 * x_34) * ((x_34 * x_34) * x_34)))
  )));
  half4 xlat_varoutput_36;
  xlat_varoutput_36.xyz = tmpvar_35.xyz;
  xlat_varoutput_36.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_36;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 95 math, 3 textures, 2 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_ShadowMapTexture] 2D 1
SetTexture 2 [_LightTexture0] 2D 2
ConstBuffer "$Globals" 36
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [_LightColor0] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float2 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(1)]], sampler _mtlsmp__ShadowMapTexture [[sampler(1)]]
  ,   texture2d<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic));
  tmpvar_3 = (tmpvar_2 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_6;
  tmpvar_6.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_6.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_6.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_7;
  tmpvar_7 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(_mtl_i.xlv_TEXCOORD5));
  half4 tmpvar_8;
  tmpvar_8 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w));
  half atten_9;
  atten_9 = (tmpvar_7.w * tmpvar_8.x);
  half3 tmpvar_10;
  tmpvar_10 = _mtl_u._LightColor0.xyz;
  half tmpvar_11;
  tmpvar_11 = max ((half)0.0, dot (tmpvar_5, tmpvar_6));
  tmpvar_10 = (tmpvar_10 * atten_9);
  half3 viewDir_12;
  viewDir_12 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_13;
  half tmpvar_14;
  tmpvar_14 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_15;
  half3 inVec_16;
  inVec_16 = (tmpvar_6 + viewDir_12);
  tmpvar_15 = (inVec_16 * rsqrt(max ((half)0.001, 
    dot (inVec_16, inVec_16)
  )));
  half tmpvar_17;
  tmpvar_17 = max ((half)0.0, dot (tmpvar_5, tmpvar_15));
  half tmpvar_18;
  tmpvar_18 = max ((half)0.0, dot (tmpvar_5, viewDir_12));
  half tmpvar_19;
  tmpvar_19 = max ((half)0.0, dot (tmpvar_6, tmpvar_15));
  half tmpvar_20;
  tmpvar_20 = (tmpvar_14 * tmpvar_14);
  half tmpvar_21;
  tmpvar_21 = (tmpvar_14 * tmpvar_14);
  half tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  half tmpvar_23;
  tmpvar_23 = (((tmpvar_17 * tmpvar_17) * (tmpvar_22 - (half)1.0)) + (half)1.0);
  half x_24;
  x_24 = ((half)1.0 - tmpvar_11);
  half x_25;
  x_25 = ((half)1.0 - tmpvar_18);
  half tmpvar_26;
  tmpvar_26 = ((half)0.5 + (((half)2.0 * tmpvar_19) * (tmpvar_19 * tmpvar_14)));
  half tmpvar_27;
  tmpvar_27 = (((half)1.0 + (
    (tmpvar_26 - (half)1.0)
   * 
    ((x_24 * x_24) * ((x_24 * x_24) * x_24))
  )) * ((half)1.0 + (
    (tmpvar_26 - (half)1.0)
   * 
    ((x_25 * x_25) * ((x_25 * x_25) * x_25))
  )));
  half tmpvar_28;
  tmpvar_28 = ((((half)2.0 / 
    (((tmpvar_11 * (
      (tmpvar_18 * ((half)1.0 - tmpvar_20))
     + tmpvar_20)) + (tmpvar_18 * (
      (tmpvar_11 * ((half)1.0 - tmpvar_20))
     + tmpvar_20))) + (half)1e-05)
  ) * (tmpvar_22 / 
    ((((half)3.141593 * tmpvar_23) * tmpvar_23) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_13 = tmpvar_28;
  bool tmpvar_29;
  tmpvar_29 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_29) {
    specularTerm_13 = sqrt(max ((half)0.0001, tmpvar_28));
  };
  half tmpvar_30;
  tmpvar_30 = max ((half)0.0, (specularTerm_13 * tmpvar_11));
  specularTerm_13 = tmpvar_30;
  half tmpvar_31;
  tmpvar_31 = (tmpvar_27 * tmpvar_11);
  bool3 tmpvar_32;
  tmpvar_32 = bool3(tmpvar_4);
  bool tmpvar_33;
  tmpvar_33 = any(tmpvar_32);
  float tmpvar_34;
  if (tmpvar_33) {
    tmpvar_34 = 1.0;
  } else {
    tmpvar_34 = 0.0;
  };
  specularTerm_13 = (tmpvar_30 * (half)tmpvar_34);
  half x_35;
  x_35 = ((half)1.0 - tmpvar_19);
  half4 tmpvar_36;
  tmpvar_36.w = half(1.0);
  tmpvar_36.xyz = ((tmpvar_3 * (tmpvar_10 * tmpvar_31)) + ((specularTerm_13 * tmpvar_10) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_35 * x_35) * ((x_35 * x_35) * x_35)))
  )));
  half4 xlat_varoutput_37;
  xlat_varoutput_37.xyz = tmpvar_36.xyz;
  xlat_varoutput_37.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_37;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 103 math, 3 textures, 3 branches
Keywords { "POINT" "SHADOWS_CUBE" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_ShadowMapTexture] CUBE 1
SetTexture 2 [_LightTexture0] 2D 2
ConstBuffer "$Globals" 60
Vector 0 [_LightPositionRange]
VectorHalf 16 [_LightShadowData] 4
VectorHalf 24 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 32 [unity_ColorSpaceLuminance] 4
VectorHalf 40 [_LightColor0] 4
VectorHalf 48 [_Color] 4
ScalarHalf 56 [_Metallic]
ScalarHalf 58 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texturecube<float> _ShadowMapTexture [[texture(1)]], sampler _mtlsmp__ShadowMapTexture [[sampler(1)]]
  ,   texture2d<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic));
  tmpvar_3 = (tmpvar_2 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 tmpvar_7;
  tmpvar_7.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_7.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_7.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_8;
  tmpvar_8 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_9;
  tmpvar_9 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(float2(tmpvar_8)));
  float mydist_10;
  mydist_10 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  float4 tmpvar_11;
  tmpvar_11 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(_mtl_i.xlv_TEXCOORD6));
  half tmpvar_12;
  if ((tmpvar_11.x < mydist_10)) {
    tmpvar_12 = _mtl_u._LightShadowData.x;
  } else {
    tmpvar_12 = half(1.0);
  };
  half3 tmpvar_13;
  tmpvar_13 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_7);
  half tmpvar_15;
  tmpvar_15 = max ((half)0.0, dot (tmpvar_5, tmpvar_14));
  tmpvar_13 = (tmpvar_13 * (tmpvar_9.w * tmpvar_12));
  half3 viewDir_16;
  viewDir_16 = -(tmpvar_6);
  half specularTerm_17;
  half tmpvar_18;
  tmpvar_18 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_19;
  half3 inVec_20;
  inVec_20 = (tmpvar_14 + viewDir_16);
  tmpvar_19 = (inVec_20 * rsqrt(max ((half)0.001, 
    dot (inVec_20, inVec_20)
  )));
  half tmpvar_21;
  tmpvar_21 = max ((half)0.0, dot (tmpvar_5, tmpvar_19));
  half tmpvar_22;
  tmpvar_22 = max ((half)0.0, dot (tmpvar_5, viewDir_16));
  half tmpvar_23;
  tmpvar_23 = max ((half)0.0, dot (tmpvar_14, tmpvar_19));
  half tmpvar_24;
  tmpvar_24 = (tmpvar_18 * tmpvar_18);
  half tmpvar_25;
  tmpvar_25 = (tmpvar_18 * tmpvar_18);
  half tmpvar_26;
  tmpvar_26 = (tmpvar_25 * tmpvar_25);
  half tmpvar_27;
  tmpvar_27 = (((tmpvar_21 * tmpvar_21) * (tmpvar_26 - (half)1.0)) + (half)1.0);
  half x_28;
  x_28 = ((half)1.0 - tmpvar_15);
  half x_29;
  x_29 = ((half)1.0 - tmpvar_22);
  half tmpvar_30;
  tmpvar_30 = ((half)0.5 + (((half)2.0 * tmpvar_23) * (tmpvar_23 * tmpvar_18)));
  half tmpvar_31;
  tmpvar_31 = (((half)1.0 + (
    (tmpvar_30 - (half)1.0)
   * 
    ((x_28 * x_28) * ((x_28 * x_28) * x_28))
  )) * ((half)1.0 + (
    (tmpvar_30 - (half)1.0)
   * 
    ((x_29 * x_29) * ((x_29 * x_29) * x_29))
  )));
  half tmpvar_32;
  tmpvar_32 = ((((half)2.0 / 
    (((tmpvar_15 * (
      (tmpvar_22 * ((half)1.0 - tmpvar_24))
     + tmpvar_24)) + (tmpvar_22 * (
      (tmpvar_15 * ((half)1.0 - tmpvar_24))
     + tmpvar_24))) + (half)1e-05)
  ) * (tmpvar_26 / 
    ((((half)3.141593 * tmpvar_27) * tmpvar_27) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_17 = tmpvar_32;
  bool tmpvar_33;
  tmpvar_33 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_33) {
    specularTerm_17 = sqrt(max ((half)0.0001, tmpvar_32));
  };
  half tmpvar_34;
  tmpvar_34 = max ((half)0.0, (specularTerm_17 * tmpvar_15));
  specularTerm_17 = tmpvar_34;
  half tmpvar_35;
  tmpvar_35 = (tmpvar_31 * tmpvar_15);
  bool3 tmpvar_36;
  tmpvar_36 = bool3(tmpvar_4);
  bool tmpvar_37;
  tmpvar_37 = any(tmpvar_36);
  float tmpvar_38;
  if (tmpvar_37) {
    tmpvar_38 = 1.0;
  } else {
    tmpvar_38 = 0.0;
  };
  specularTerm_17 = (tmpvar_34 * (half)tmpvar_38);
  half x_39;
  x_39 = ((half)1.0 - tmpvar_23);
  half4 tmpvar_40;
  tmpvar_40.w = half(1.0);
  tmpvar_40.xyz = ((tmpvar_3 * (tmpvar_13 * tmpvar_35)) + ((specularTerm_17 * tmpvar_13) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_39 * x_39) * ((x_39 * x_39) * x_39)))
  )));
  half4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = tmpvar_40.xyz;
  xlat_varoutput_41.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_41;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 104 math, 4 textures, 3 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_ShadowMapTexture] CUBE 1
SetTexture 2 [_LightTexture0] CUBE 2
SetTexture 3 [_LightTextureB0] 2D 3
ConstBuffer "$Globals" 60
Vector 0 [_LightPositionRange]
VectorHalf 16 [_LightShadowData] 4
VectorHalf 24 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 32 [unity_ColorSpaceLuminance] 4
VectorHalf 40 [_LightColor0] 4
VectorHalf 48 [_Color] 4
ScalarHalf 56 [_Metallic]
ScalarHalf 58 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texturecube<float> _ShadowMapTexture [[texture(1)]], sampler _mtlsmp__ShadowMapTexture [[sampler(1)]]
  ,   texturecube<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]]
  ,   texture2d<half> _LightTextureB0 [[texture(3)]], sampler _mtlsmp__LightTextureB0 [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic));
  tmpvar_3 = (tmpvar_2 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 tmpvar_7;
  tmpvar_7.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_7.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_7.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_8;
  tmpvar_8 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_9;
  tmpvar_9 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_8)));
  half4 tmpvar_10;
  tmpvar_10 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float3)(_mtl_i.xlv_TEXCOORD5));
  float mydist_11;
  mydist_11 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  float4 tmpvar_12;
  tmpvar_12 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(_mtl_i.xlv_TEXCOORD6));
  half tmpvar_13;
  if ((tmpvar_12.x < mydist_11)) {
    tmpvar_13 = _mtl_u._LightShadowData.x;
  } else {
    tmpvar_13 = half(1.0);
  };
  half3 tmpvar_14;
  tmpvar_14 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_7);
  half tmpvar_16;
  tmpvar_16 = max ((half)0.0, dot (tmpvar_5, tmpvar_15));
  tmpvar_14 = (tmpvar_14 * ((tmpvar_9.w * tmpvar_10.w) * tmpvar_13));
  half3 viewDir_17;
  viewDir_17 = -(tmpvar_6);
  half specularTerm_18;
  half tmpvar_19;
  tmpvar_19 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_20;
  half3 inVec_21;
  inVec_21 = (tmpvar_15 + viewDir_17);
  tmpvar_20 = (inVec_21 * rsqrt(max ((half)0.001, 
    dot (inVec_21, inVec_21)
  )));
  half tmpvar_22;
  tmpvar_22 = max ((half)0.0, dot (tmpvar_5, tmpvar_20));
  half tmpvar_23;
  tmpvar_23 = max ((half)0.0, dot (tmpvar_5, viewDir_17));
  half tmpvar_24;
  tmpvar_24 = max ((half)0.0, dot (tmpvar_15, tmpvar_20));
  half tmpvar_25;
  tmpvar_25 = (tmpvar_19 * tmpvar_19);
  half tmpvar_26;
  tmpvar_26 = (tmpvar_19 * tmpvar_19);
  half tmpvar_27;
  tmpvar_27 = (tmpvar_26 * tmpvar_26);
  half tmpvar_28;
  tmpvar_28 = (((tmpvar_22 * tmpvar_22) * (tmpvar_27 - (half)1.0)) + (half)1.0);
  half x_29;
  x_29 = ((half)1.0 - tmpvar_16);
  half x_30;
  x_30 = ((half)1.0 - tmpvar_23);
  half tmpvar_31;
  tmpvar_31 = ((half)0.5 + (((half)2.0 * tmpvar_24) * (tmpvar_24 * tmpvar_19)));
  half tmpvar_32;
  tmpvar_32 = (((half)1.0 + (
    (tmpvar_31 - (half)1.0)
   * 
    ((x_29 * x_29) * ((x_29 * x_29) * x_29))
  )) * ((half)1.0 + (
    (tmpvar_31 - (half)1.0)
   * 
    ((x_30 * x_30) * ((x_30 * x_30) * x_30))
  )));
  half tmpvar_33;
  tmpvar_33 = ((((half)2.0 / 
    (((tmpvar_16 * (
      (tmpvar_23 * ((half)1.0 - tmpvar_25))
     + tmpvar_25)) + (tmpvar_23 * (
      (tmpvar_16 * ((half)1.0 - tmpvar_25))
     + tmpvar_25))) + (half)1e-05)
  ) * (tmpvar_27 / 
    ((((half)3.141593 * tmpvar_28) * tmpvar_28) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_18 = tmpvar_33;
  bool tmpvar_34;
  tmpvar_34 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_34) {
    specularTerm_18 = sqrt(max ((half)0.0001, tmpvar_33));
  };
  half tmpvar_35;
  tmpvar_35 = max ((half)0.0, (specularTerm_18 * tmpvar_16));
  specularTerm_18 = tmpvar_35;
  half tmpvar_36;
  tmpvar_36 = (tmpvar_32 * tmpvar_16);
  bool3 tmpvar_37;
  tmpvar_37 = bool3(tmpvar_4);
  bool tmpvar_38;
  tmpvar_38 = any(tmpvar_37);
  float tmpvar_39;
  if (tmpvar_38) {
    tmpvar_39 = 1.0;
  } else {
    tmpvar_39 = 0.0;
  };
  specularTerm_18 = (tmpvar_35 * (half)tmpvar_39);
  half x_40;
  x_40 = ((half)1.0 - tmpvar_24);
  half4 tmpvar_41;
  tmpvar_41.w = half(1.0);
  tmpvar_41.xyz = ((tmpvar_3 * (tmpvar_14 * tmpvar_36)) + ((specularTerm_18 * tmpvar_14) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_40 * x_40) * ((x_40 * x_40) * x_40)))
  )));
  half4 xlat_varoutput_42;
  xlat_varoutput_42.xyz = tmpvar_41.xyz;
  xlat_varoutput_42.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_42;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 112 math, 7 textures, 2 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_ShadowMapTexture] 2D 1
SetTexture 2 [_LightTexture0] 2D 2
SetTexture 3 [_LightTextureB0] 2D 3
ConstBuffer "$Globals" 112
VectorHalf 0 [_LightShadowData] 4
VectorHalf 8 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 16 [unity_ColorSpaceLuminance] 4
VectorHalf 24 [_LightColor0] 4
VectorHalf 32 [_Color] 4
ScalarHalf 40 [_Metallic]
ScalarHalf 42 [_Glossiness]
Vector 48 [_ShadowOffsets] 4 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::less);
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  float4 _ShadowOffsets[4];
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   depth2d<float> _ShadowMapTexture [[texture(1)]], sampler _mtlsmp__ShadowMapTexture [[sampler(1)]]
  ,   texture2d<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]]
  ,   texture2d<half> _LightTextureB0 [[texture(3)]], sampler _mtlsmp__LightTextureB0 [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic));
  tmpvar_3 = (tmpvar_2 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_6;
  tmpvar_6.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_6.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_6.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_7;
  float2 P_8;
  P_8 = ((_mtl_i.xlv_TEXCOORD5.xy / _mtl_i.xlv_TEXCOORD5.w) + 0.5);
  tmpvar_7 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(P_8));
  float tmpvar_9;
  tmpvar_9 = dot (_mtl_i.xlv_TEXCOORD5.xyz, _mtl_i.xlv_TEXCOORD5.xyz);
  half4 tmpvar_10;
  tmpvar_10 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_9)));
  half tmpvar_11;
  half4 shadows_12;
  float3 tmpvar_13;
  tmpvar_13 = (_mtl_i.xlv_TEXCOORD6.xyz / _mtl_i.xlv_TEXCOORD6.w);
  float3 coord_14;
  coord_14 = (tmpvar_13 + _mtl_u._ShadowOffsets[0].xyz);
  half tmpvar_15;
  tmpvar_15 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(coord_14).xy, (float)(coord_14).z);
  shadows_12.x = tmpvar_15;
  float3 coord_16;
  coord_16 = (tmpvar_13 + _mtl_u._ShadowOffsets[1].xyz);
  half tmpvar_17;
  tmpvar_17 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(coord_16).xy, (float)(coord_16).z);
  shadows_12.y = tmpvar_17;
  float3 coord_18;
  coord_18 = (tmpvar_13 + _mtl_u._ShadowOffsets[2].xyz);
  half tmpvar_19;
  tmpvar_19 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(coord_18).xy, (float)(coord_18).z);
  shadows_12.z = tmpvar_19;
  float3 coord_20;
  coord_20 = (tmpvar_13 + _mtl_u._ShadowOffsets[3].xyz);
  half tmpvar_21;
  tmpvar_21 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(coord_20).xy, (float)(coord_20).z);
  shadows_12.w = tmpvar_21;
  shadows_12 = (_mtl_u._LightShadowData.xxxx + (shadows_12 * ((half)1.0 - _mtl_u._LightShadowData.xxxx)));
  half tmpvar_22;
  tmpvar_22 = dot (shadows_12, (half4)float4(0.25, 0.25, 0.25, 0.25));
  tmpvar_11 = tmpvar_22;
  half atten_23;
  atten_23 = half((((
    float((_mtl_i.xlv_TEXCOORD5.z > 0.0))
   * (float)tmpvar_7.w) * (float)tmpvar_10.w) * (float)tmpvar_11));
  half3 tmpvar_24;
  tmpvar_24 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_25;
  tmpvar_25 = normalize(tmpvar_6);
  half tmpvar_26;
  tmpvar_26 = max ((half)0.0, dot (tmpvar_5, tmpvar_25));
  tmpvar_24 = (tmpvar_24 * atten_23);
  half3 viewDir_27;
  viewDir_27 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_28;
  half tmpvar_29;
  tmpvar_29 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_30;
  half3 inVec_31;
  inVec_31 = (tmpvar_25 + viewDir_27);
  tmpvar_30 = (inVec_31 * rsqrt(max ((half)0.001, 
    dot (inVec_31, inVec_31)
  )));
  half tmpvar_32;
  tmpvar_32 = max ((half)0.0, dot (tmpvar_5, tmpvar_30));
  half tmpvar_33;
  tmpvar_33 = max ((half)0.0, dot (tmpvar_5, viewDir_27));
  half tmpvar_34;
  tmpvar_34 = max ((half)0.0, dot (tmpvar_25, tmpvar_30));
  half tmpvar_35;
  tmpvar_35 = (tmpvar_29 * tmpvar_29);
  half tmpvar_36;
  tmpvar_36 = (tmpvar_29 * tmpvar_29);
  half tmpvar_37;
  tmpvar_37 = (tmpvar_36 * tmpvar_36);
  half tmpvar_38;
  tmpvar_38 = (((tmpvar_32 * tmpvar_32) * (tmpvar_37 - (half)1.0)) + (half)1.0);
  half x_39;
  x_39 = ((half)1.0 - tmpvar_26);
  half x_40;
  x_40 = ((half)1.0 - tmpvar_33);
  half tmpvar_41;
  tmpvar_41 = ((half)0.5 + (((half)2.0 * tmpvar_34) * (tmpvar_34 * tmpvar_29)));
  half tmpvar_42;
  tmpvar_42 = (((half)1.0 + (
    (tmpvar_41 - (half)1.0)
   * 
    ((x_39 * x_39) * ((x_39 * x_39) * x_39))
  )) * ((half)1.0 + (
    (tmpvar_41 - (half)1.0)
   * 
    ((x_40 * x_40) * ((x_40 * x_40) * x_40))
  )));
  half tmpvar_43;
  tmpvar_43 = ((((half)2.0 / 
    (((tmpvar_26 * (
      (tmpvar_33 * ((half)1.0 - tmpvar_35))
     + tmpvar_35)) + (tmpvar_33 * (
      (tmpvar_26 * ((half)1.0 - tmpvar_35))
     + tmpvar_35))) + (half)1e-05)
  ) * (tmpvar_37 / 
    ((((half)3.141593 * tmpvar_38) * tmpvar_38) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_28 = tmpvar_43;
  bool tmpvar_44;
  tmpvar_44 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_44) {
    specularTerm_28 = sqrt(max ((half)0.0001, tmpvar_43));
  };
  half tmpvar_45;
  tmpvar_45 = max ((half)0.0, (specularTerm_28 * tmpvar_26));
  specularTerm_28 = tmpvar_45;
  half tmpvar_46;
  tmpvar_46 = (tmpvar_42 * tmpvar_26);
  bool3 tmpvar_47;
  tmpvar_47 = bool3(tmpvar_4);
  bool tmpvar_48;
  tmpvar_48 = any(tmpvar_47);
  float tmpvar_49;
  if (tmpvar_48) {
    tmpvar_49 = 1.0;
  } else {
    tmpvar_49 = 0.0;
  };
  specularTerm_28 = (tmpvar_45 * (half)tmpvar_49);
  half x_50;
  x_50 = ((half)1.0 - tmpvar_34);
  half4 tmpvar_51;
  tmpvar_51.w = half(1.0);
  tmpvar_51.xyz = ((tmpvar_3 * (tmpvar_24 * tmpvar_46)) + ((specularTerm_28 * tmpvar_24) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_50 * x_50) * ((x_50 * x_50) * x_50)))
  )));
  half4 xlat_varoutput_52;
  xlat_varoutput_52.xyz = tmpvar_51.xyz;
  xlat_varoutput_52.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_52;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 111 math, 6 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_ShadowMapTexture] CUBE 1
SetTexture 2 [_LightTexture0] 2D 2
ConstBuffer "$Globals" 60
Vector 0 [_LightPositionRange]
VectorHalf 16 [_LightShadowData] 4
VectorHalf 24 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 32 [unity_ColorSpaceLuminance] 4
VectorHalf 40 [_LightColor0] 4
VectorHalf 48 [_Color] 4
ScalarHalf 56 [_Metallic]
ScalarHalf 58 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texturecube<float> _ShadowMapTexture [[texture(1)]], sampler _mtlsmp__ShadowMapTexture [[sampler(1)]]
  ,   texture2d<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic));
  tmpvar_3 = (tmpvar_2 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 tmpvar_7;
  tmpvar_7.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_7.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_7.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_8;
  tmpvar_8 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_9;
  tmpvar_9 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(float2(tmpvar_8)));
  float4 shadowVals_10;
  float mydist_11;
  mydist_11 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  shadowVals_10.x = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)((_mtl_i.xlv_TEXCOORD6 + float3(0.0078125, 0.0078125, 0.0078125)))).x;
  shadowVals_10.y = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)((_mtl_i.xlv_TEXCOORD6 + float3(-0.0078125, -0.0078125, 0.0078125)))).x;
  shadowVals_10.z = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)((_mtl_i.xlv_TEXCOORD6 + float3(-0.0078125, 0.0078125, -0.0078125)))).x;
  shadowVals_10.w = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)((_mtl_i.xlv_TEXCOORD6 + float3(0.0078125, -0.0078125, -0.0078125)))).x;
  bool4 tmpvar_12;
  tmpvar_12 = bool4((shadowVals_10 < float4(mydist_11)));
  half4 tmpvar_13;
  tmpvar_13 = _mtl_u._LightShadowData.xxxx;
  half tmpvar_14;
  if (tmpvar_12.x) {
    tmpvar_14 = tmpvar_13.x;
  } else {
    tmpvar_14 = half(1.0);
  };
  half tmpvar_15;
  if (tmpvar_12.y) {
    tmpvar_15 = tmpvar_13.y;
  } else {
    tmpvar_15 = half(1.0);
  };
  half tmpvar_16;
  if (tmpvar_12.z) {
    tmpvar_16 = tmpvar_13.z;
  } else {
    tmpvar_16 = half(1.0);
  };
  half tmpvar_17;
  if (tmpvar_12.w) {
    tmpvar_17 = tmpvar_13.w;
  } else {
    tmpvar_17 = half(1.0);
  };
  half4 tmpvar_18;
  tmpvar_18.x = tmpvar_14;
  tmpvar_18.y = tmpvar_15;
  tmpvar_18.z = tmpvar_16;
  tmpvar_18.w = tmpvar_17;
  half3 tmpvar_19;
  tmpvar_19 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_20;
  tmpvar_20 = normalize(tmpvar_7);
  half tmpvar_21;
  tmpvar_21 = max ((half)0.0, dot (tmpvar_5, tmpvar_20));
  tmpvar_19 = (tmpvar_19 * (tmpvar_9.w * dot (tmpvar_18, (half4)float4(0.25, 0.25, 0.25, 0.25))));
  half3 viewDir_22;
  viewDir_22 = -(tmpvar_6);
  half specularTerm_23;
  half tmpvar_24;
  tmpvar_24 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_25;
  half3 inVec_26;
  inVec_26 = (tmpvar_20 + viewDir_22);
  tmpvar_25 = (inVec_26 * rsqrt(max ((half)0.001, 
    dot (inVec_26, inVec_26)
  )));
  half tmpvar_27;
  tmpvar_27 = max ((half)0.0, dot (tmpvar_5, tmpvar_25));
  half tmpvar_28;
  tmpvar_28 = max ((half)0.0, dot (tmpvar_5, viewDir_22));
  half tmpvar_29;
  tmpvar_29 = max ((half)0.0, dot (tmpvar_20, tmpvar_25));
  half tmpvar_30;
  tmpvar_30 = (tmpvar_24 * tmpvar_24);
  half tmpvar_31;
  tmpvar_31 = (tmpvar_24 * tmpvar_24);
  half tmpvar_32;
  tmpvar_32 = (tmpvar_31 * tmpvar_31);
  half tmpvar_33;
  tmpvar_33 = (((tmpvar_27 * tmpvar_27) * (tmpvar_32 - (half)1.0)) + (half)1.0);
  half x_34;
  x_34 = ((half)1.0 - tmpvar_21);
  half x_35;
  x_35 = ((half)1.0 - tmpvar_28);
  half tmpvar_36;
  tmpvar_36 = ((half)0.5 + (((half)2.0 * tmpvar_29) * (tmpvar_29 * tmpvar_24)));
  half tmpvar_37;
  tmpvar_37 = (((half)1.0 + (
    (tmpvar_36 - (half)1.0)
   * 
    ((x_34 * x_34) * ((x_34 * x_34) * x_34))
  )) * ((half)1.0 + (
    (tmpvar_36 - (half)1.0)
   * 
    ((x_35 * x_35) * ((x_35 * x_35) * x_35))
  )));
  half tmpvar_38;
  tmpvar_38 = ((((half)2.0 / 
    (((tmpvar_21 * (
      (tmpvar_28 * ((half)1.0 - tmpvar_30))
     + tmpvar_30)) + (tmpvar_28 * (
      (tmpvar_21 * ((half)1.0 - tmpvar_30))
     + tmpvar_30))) + (half)1e-05)
  ) * (tmpvar_32 / 
    ((((half)3.141593 * tmpvar_33) * tmpvar_33) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_23 = tmpvar_38;
  bool tmpvar_39;
  tmpvar_39 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_39) {
    specularTerm_23 = sqrt(max ((half)0.0001, tmpvar_38));
  };
  half tmpvar_40;
  tmpvar_40 = max ((half)0.0, (specularTerm_23 * tmpvar_21));
  specularTerm_23 = tmpvar_40;
  half tmpvar_41;
  tmpvar_41 = (tmpvar_37 * tmpvar_21);
  bool3 tmpvar_42;
  tmpvar_42 = bool3(tmpvar_4);
  bool tmpvar_43;
  tmpvar_43 = any(tmpvar_42);
  float tmpvar_44;
  if (tmpvar_43) {
    tmpvar_44 = 1.0;
  } else {
    tmpvar_44 = 0.0;
  };
  specularTerm_23 = (tmpvar_40 * (half)tmpvar_44);
  half x_45;
  x_45 = ((half)1.0 - tmpvar_29);
  half4 tmpvar_46;
  tmpvar_46.w = half(1.0);
  tmpvar_46.xyz = ((tmpvar_3 * (tmpvar_19 * tmpvar_41)) + ((specularTerm_23 * tmpvar_19) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_45 * x_45) * ((x_45 * x_45) * x_45)))
  )));
  half4 xlat_varoutput_47;
  xlat_varoutput_47.xyz = tmpvar_46.xyz;
  xlat_varoutput_47.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_47;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 112 math, 7 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_ShadowMapTexture] CUBE 1
SetTexture 2 [_LightTexture0] CUBE 2
SetTexture 3 [_LightTextureB0] 2D 3
ConstBuffer "$Globals" 60
Vector 0 [_LightPositionRange]
VectorHalf 16 [_LightShadowData] 4
VectorHalf 24 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 32 [unity_ColorSpaceLuminance] 4
VectorHalf 40 [_LightColor0] 4
VectorHalf 48 [_Color] 4
ScalarHalf 56 [_Metallic]
ScalarHalf 58 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texturecube<float> _ShadowMapTexture [[texture(1)]], sampler _mtlsmp__ShadowMapTexture [[sampler(1)]]
  ,   texturecube<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]]
  ,   texture2d<half> _LightTextureB0 [[texture(3)]], sampler _mtlsmp__LightTextureB0 [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic));
  tmpvar_3 = (tmpvar_2 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 tmpvar_7;
  tmpvar_7.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_7.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_7.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_8;
  tmpvar_8 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_9;
  tmpvar_9 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_8)));
  half4 tmpvar_10;
  tmpvar_10 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float3)(_mtl_i.xlv_TEXCOORD5));
  float4 shadowVals_11;
  float mydist_12;
  mydist_12 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  shadowVals_11.x = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)((_mtl_i.xlv_TEXCOORD6 + float3(0.0078125, 0.0078125, 0.0078125)))).x;
  shadowVals_11.y = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)((_mtl_i.xlv_TEXCOORD6 + float3(-0.0078125, -0.0078125, 0.0078125)))).x;
  shadowVals_11.z = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)((_mtl_i.xlv_TEXCOORD6 + float3(-0.0078125, 0.0078125, -0.0078125)))).x;
  shadowVals_11.w = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)((_mtl_i.xlv_TEXCOORD6 + float3(0.0078125, -0.0078125, -0.0078125)))).x;
  bool4 tmpvar_13;
  tmpvar_13 = bool4((shadowVals_11 < float4(mydist_12)));
  half4 tmpvar_14;
  tmpvar_14 = _mtl_u._LightShadowData.xxxx;
  half tmpvar_15;
  if (tmpvar_13.x) {
    tmpvar_15 = tmpvar_14.x;
  } else {
    tmpvar_15 = half(1.0);
  };
  half tmpvar_16;
  if (tmpvar_13.y) {
    tmpvar_16 = tmpvar_14.y;
  } else {
    tmpvar_16 = half(1.0);
  };
  half tmpvar_17;
  if (tmpvar_13.z) {
    tmpvar_17 = tmpvar_14.z;
  } else {
    tmpvar_17 = half(1.0);
  };
  half tmpvar_18;
  if (tmpvar_13.w) {
    tmpvar_18 = tmpvar_14.w;
  } else {
    tmpvar_18 = half(1.0);
  };
  half4 tmpvar_19;
  tmpvar_19.x = tmpvar_15;
  tmpvar_19.y = tmpvar_16;
  tmpvar_19.z = tmpvar_17;
  tmpvar_19.w = tmpvar_18;
  half3 tmpvar_20;
  tmpvar_20 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_21;
  tmpvar_21 = normalize(tmpvar_7);
  half tmpvar_22;
  tmpvar_22 = max ((half)0.0, dot (tmpvar_5, tmpvar_21));
  tmpvar_20 = (tmpvar_20 * ((tmpvar_9.w * tmpvar_10.w) * dot (tmpvar_19, (half4)float4(0.25, 0.25, 0.25, 0.25))));
  half3 viewDir_23;
  viewDir_23 = -(tmpvar_6);
  half specularTerm_24;
  half tmpvar_25;
  tmpvar_25 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_26;
  half3 inVec_27;
  inVec_27 = (tmpvar_21 + viewDir_23);
  tmpvar_26 = (inVec_27 * rsqrt(max ((half)0.001, 
    dot (inVec_27, inVec_27)
  )));
  half tmpvar_28;
  tmpvar_28 = max ((half)0.0, dot (tmpvar_5, tmpvar_26));
  half tmpvar_29;
  tmpvar_29 = max ((half)0.0, dot (tmpvar_5, viewDir_23));
  half tmpvar_30;
  tmpvar_30 = max ((half)0.0, dot (tmpvar_21, tmpvar_26));
  half tmpvar_31;
  tmpvar_31 = (tmpvar_25 * tmpvar_25);
  half tmpvar_32;
  tmpvar_32 = (tmpvar_25 * tmpvar_25);
  half tmpvar_33;
  tmpvar_33 = (tmpvar_32 * tmpvar_32);
  half tmpvar_34;
  tmpvar_34 = (((tmpvar_28 * tmpvar_28) * (tmpvar_33 - (half)1.0)) + (half)1.0);
  half x_35;
  x_35 = ((half)1.0 - tmpvar_22);
  half x_36;
  x_36 = ((half)1.0 - tmpvar_29);
  half tmpvar_37;
  tmpvar_37 = ((half)0.5 + (((half)2.0 * tmpvar_30) * (tmpvar_30 * tmpvar_25)));
  half tmpvar_38;
  tmpvar_38 = (((half)1.0 + (
    (tmpvar_37 - (half)1.0)
   * 
    ((x_35 * x_35) * ((x_35 * x_35) * x_35))
  )) * ((half)1.0 + (
    (tmpvar_37 - (half)1.0)
   * 
    ((x_36 * x_36) * ((x_36 * x_36) * x_36))
  )));
  half tmpvar_39;
  tmpvar_39 = ((((half)2.0 / 
    (((tmpvar_22 * (
      (tmpvar_29 * ((half)1.0 - tmpvar_31))
     + tmpvar_31)) + (tmpvar_29 * (
      (tmpvar_22 * ((half)1.0 - tmpvar_31))
     + tmpvar_31))) + (half)1e-05)
  ) * (tmpvar_33 / 
    ((((half)3.141593 * tmpvar_34) * tmpvar_34) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_24 = tmpvar_39;
  bool tmpvar_40;
  tmpvar_40 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_40) {
    specularTerm_24 = sqrt(max ((half)0.0001, tmpvar_39));
  };
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, (specularTerm_24 * tmpvar_22));
  specularTerm_24 = tmpvar_41;
  half tmpvar_42;
  tmpvar_42 = (tmpvar_38 * tmpvar_22);
  bool3 tmpvar_43;
  tmpvar_43 = bool3(tmpvar_4);
  bool tmpvar_44;
  tmpvar_44 = any(tmpvar_43);
  float tmpvar_45;
  if (tmpvar_44) {
    tmpvar_45 = 1.0;
  } else {
    tmpvar_45 = 0.0;
  };
  specularTerm_24 = (tmpvar_41 * (half)tmpvar_45);
  half x_46;
  x_46 = ((half)1.0 - tmpvar_30);
  half4 tmpvar_47;
  tmpvar_47.w = half(1.0);
  tmpvar_47.xyz = ((tmpvar_3 * (tmpvar_20 * tmpvar_42)) + ((specularTerm_24 * tmpvar_20) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_46 * x_46) * ((x_46 * x_46) * x_46)))
  )));
  half4 xlat_varoutput_48;
  xlat_varoutput_48.xyz = tmpvar_47.xyz;
  xlat_varoutput_48.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_48;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 100 math, 2 textures, 2 branches
Keywords { "POINT" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_LightTexture0] 2D 1
ConstBuffer "$Globals" 36
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [_LightColor0] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half tmpvar_5;
  tmpvar_5 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 diffColor_7;
  half outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = (((half)1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  half3 tmpvar_9;
  tmpvar_9.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_9.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_9.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_10;
  tmpvar_10 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_11;
  tmpvar_11 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(float2(tmpvar_10)));
  half atten_12;
  atten_12 = tmpvar_11.w;
  half3 tmpvar_13;
  tmpvar_13 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_9);
  half tmpvar_15;
  tmpvar_15 = max ((half)0.0, dot (tmpvar_6, tmpvar_14));
  tmpvar_13 = (tmpvar_13 * atten_12);
  half3 viewDir_16;
  viewDir_16 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_17;
  half tmpvar_18;
  tmpvar_18 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_19;
  half3 inVec_20;
  inVec_20 = (tmpvar_14 + viewDir_16);
  tmpvar_19 = (inVec_20 * rsqrt(max ((half)0.001, 
    dot (inVec_20, inVec_20)
  )));
  half tmpvar_21;
  tmpvar_21 = max ((half)0.0, dot (tmpvar_6, tmpvar_19));
  half tmpvar_22;
  tmpvar_22 = max ((half)0.0, dot (tmpvar_6, viewDir_16));
  half tmpvar_23;
  tmpvar_23 = max ((half)0.0, dot (tmpvar_14, tmpvar_19));
  half tmpvar_24;
  tmpvar_24 = (tmpvar_18 * tmpvar_18);
  half tmpvar_25;
  tmpvar_25 = (tmpvar_18 * tmpvar_18);
  half tmpvar_26;
  tmpvar_26 = (tmpvar_25 * tmpvar_25);
  half tmpvar_27;
  tmpvar_27 = (((tmpvar_21 * tmpvar_21) * (tmpvar_26 - (half)1.0)) + (half)1.0);
  half x_28;
  x_28 = ((half)1.0 - tmpvar_15);
  half x_29;
  x_29 = ((half)1.0 - tmpvar_22);
  half tmpvar_30;
  tmpvar_30 = ((half)0.5 + (((half)2.0 * tmpvar_23) * (tmpvar_23 * tmpvar_18)));
  half tmpvar_31;
  tmpvar_31 = (((half)1.0 + (
    (tmpvar_30 - (half)1.0)
   * 
    ((x_28 * x_28) * ((x_28 * x_28) * x_28))
  )) * ((half)1.0 + (
    (tmpvar_30 - (half)1.0)
   * 
    ((x_29 * x_29) * ((x_29 * x_29) * x_29))
  )));
  half tmpvar_32;
  tmpvar_32 = ((((half)2.0 / 
    (((tmpvar_15 * (
      (tmpvar_22 * ((half)1.0 - tmpvar_24))
     + tmpvar_24)) + (tmpvar_22 * (
      (tmpvar_15 * ((half)1.0 - tmpvar_24))
     + tmpvar_24))) + (half)1e-05)
  ) * (tmpvar_26 / 
    ((((half)3.141593 * tmpvar_27) * tmpvar_27) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_17 = tmpvar_32;
  bool tmpvar_33;
  tmpvar_33 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_33) {
    specularTerm_17 = sqrt(max ((half)0.0001, tmpvar_32));
  };
  half tmpvar_34;
  tmpvar_34 = max ((half)0.0, (specularTerm_17 * tmpvar_15));
  specularTerm_17 = tmpvar_34;
  half tmpvar_35;
  tmpvar_35 = (tmpvar_31 * tmpvar_15);
  bool3 tmpvar_36;
  tmpvar_36 = bool3(tmpvar_4);
  bool tmpvar_37;
  tmpvar_37 = any(tmpvar_36);
  float tmpvar_38;
  if (tmpvar_37) {
    tmpvar_38 = 1.0;
  } else {
    tmpvar_38 = 0.0;
  };
  specularTerm_17 = (tmpvar_34 * (half)tmpvar_38);
  half x_39;
  x_39 = ((half)1.0 - tmpvar_23);
  half4 tmpvar_40;
  tmpvar_40.w = half(1.0);
  tmpvar_40.xyz = ((diffColor_7 * (tmpvar_13 * tmpvar_35)) + ((specularTerm_17 * tmpvar_13) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_39 * x_39) * ((x_39 * x_39) * x_39)))
  )));
  half4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = tmpvar_40.xyz;
  xlat_varoutput_41.w = outModifiedAlpha_8;
  _mtl_o._glesFragData_0 = xlat_varoutput_41;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 97 math, 1 textures, 2 branches
Keywords { "DIRECTIONAL" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
ConstBuffer "$Globals" 36
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [_LightColor0] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half tmpvar_5;
  tmpvar_5 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 diffColor_7;
  half outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = (((half)1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  half3 tmpvar_9;
  tmpvar_9.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_9.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_9.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half3 tmpvar_10;
  tmpvar_10 = _mtl_u._LightColor0.xyz;
  half tmpvar_11;
  tmpvar_11 = max ((half)0.0, dot (tmpvar_6, tmpvar_9));
  half3 viewDir_12;
  viewDir_12 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_13;
  half tmpvar_14;
  tmpvar_14 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_15;
  half3 inVec_16;
  inVec_16 = (tmpvar_9 + viewDir_12);
  tmpvar_15 = (inVec_16 * rsqrt(max ((half)0.001, 
    dot (inVec_16, inVec_16)
  )));
  half tmpvar_17;
  tmpvar_17 = max ((half)0.0, dot (tmpvar_6, tmpvar_15));
  half tmpvar_18;
  tmpvar_18 = max ((half)0.0, dot (tmpvar_6, viewDir_12));
  half tmpvar_19;
  tmpvar_19 = max ((half)0.0, dot (tmpvar_9, tmpvar_15));
  half tmpvar_20;
  tmpvar_20 = (tmpvar_14 * tmpvar_14);
  half tmpvar_21;
  tmpvar_21 = (tmpvar_14 * tmpvar_14);
  half tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  half tmpvar_23;
  tmpvar_23 = (((tmpvar_17 * tmpvar_17) * (tmpvar_22 - (half)1.0)) + (half)1.0);
  half x_24;
  x_24 = ((half)1.0 - tmpvar_11);
  half x_25;
  x_25 = ((half)1.0 - tmpvar_18);
  half tmpvar_26;
  tmpvar_26 = ((half)0.5 + (((half)2.0 * tmpvar_19) * (tmpvar_19 * tmpvar_14)));
  half tmpvar_27;
  tmpvar_27 = (((half)1.0 + (
    (tmpvar_26 - (half)1.0)
   * 
    ((x_24 * x_24) * ((x_24 * x_24) * x_24))
  )) * ((half)1.0 + (
    (tmpvar_26 - (half)1.0)
   * 
    ((x_25 * x_25) * ((x_25 * x_25) * x_25))
  )));
  half tmpvar_28;
  tmpvar_28 = ((((half)2.0 / 
    (((tmpvar_11 * (
      (tmpvar_18 * ((half)1.0 - tmpvar_20))
     + tmpvar_20)) + (tmpvar_18 * (
      (tmpvar_11 * ((half)1.0 - tmpvar_20))
     + tmpvar_20))) + (half)1e-05)
  ) * (tmpvar_22 / 
    ((((half)3.141593 * tmpvar_23) * tmpvar_23) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_13 = tmpvar_28;
  bool tmpvar_29;
  tmpvar_29 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_29) {
    specularTerm_13 = sqrt(max ((half)0.0001, tmpvar_28));
  };
  half tmpvar_30;
  tmpvar_30 = max ((half)0.0, (specularTerm_13 * tmpvar_11));
  specularTerm_13 = tmpvar_30;
  half tmpvar_31;
  tmpvar_31 = (tmpvar_27 * tmpvar_11);
  bool3 tmpvar_32;
  tmpvar_32 = bool3(tmpvar_4);
  bool tmpvar_33;
  tmpvar_33 = any(tmpvar_32);
  float tmpvar_34;
  if (tmpvar_33) {
    tmpvar_34 = 1.0;
  } else {
    tmpvar_34 = 0.0;
  };
  specularTerm_13 = (tmpvar_30 * (half)tmpvar_34);
  half x_35;
  x_35 = ((half)1.0 - tmpvar_19);
  half4 tmpvar_36;
  tmpvar_36.w = half(1.0);
  tmpvar_36.xyz = ((diffColor_7 * (tmpvar_10 * tmpvar_31)) + ((specularTerm_13 * tmpvar_10) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_35 * x_35) * ((x_35 * x_35) * x_35)))
  )));
  half4 xlat_varoutput_37;
  xlat_varoutput_37.xyz = tmpvar_36.xyz;
  xlat_varoutput_37.w = outModifiedAlpha_8;
  _mtl_o._glesFragData_0 = xlat_varoutput_37;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "SPOT" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 106 math, 3 textures, 2 branches
Keywords { "SPOT" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_LightTexture0] 2D 1
SetTexture 2 [_LightTextureB0] 2D 2
ConstBuffer "$Globals" 36
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [_LightColor0] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _LightTextureB0 [[texture(2)]], sampler _mtlsmp__LightTextureB0 [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half tmpvar_5;
  tmpvar_5 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 diffColor_7;
  half outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = (((half)1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  half3 tmpvar_9;
  tmpvar_9.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_9.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_9.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_10;
  float2 P_11;
  P_11 = ((_mtl_i.xlv_TEXCOORD5.xy / _mtl_i.xlv_TEXCOORD5.w) + 0.5);
  tmpvar_10 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(P_11));
  float tmpvar_12;
  tmpvar_12 = dot (_mtl_i.xlv_TEXCOORD5.xyz, _mtl_i.xlv_TEXCOORD5.xyz);
  half4 tmpvar_13;
  tmpvar_13 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_12)));
  half atten_14;
  atten_14 = half(((float(
    (_mtl_i.xlv_TEXCOORD5.z > 0.0)
  ) * (float)tmpvar_10.w) * (float)tmpvar_13.w));
  half3 tmpvar_15;
  tmpvar_15 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_9);
  half tmpvar_17;
  tmpvar_17 = max ((half)0.0, dot (tmpvar_6, tmpvar_16));
  tmpvar_15 = (tmpvar_15 * atten_14);
  half3 viewDir_18;
  viewDir_18 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_19;
  half tmpvar_20;
  tmpvar_20 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_21;
  half3 inVec_22;
  inVec_22 = (tmpvar_16 + viewDir_18);
  tmpvar_21 = (inVec_22 * rsqrt(max ((half)0.001, 
    dot (inVec_22, inVec_22)
  )));
  half tmpvar_23;
  tmpvar_23 = max ((half)0.0, dot (tmpvar_6, tmpvar_21));
  half tmpvar_24;
  tmpvar_24 = max ((half)0.0, dot (tmpvar_6, viewDir_18));
  half tmpvar_25;
  tmpvar_25 = max ((half)0.0, dot (tmpvar_16, tmpvar_21));
  half tmpvar_26;
  tmpvar_26 = (tmpvar_20 * tmpvar_20);
  half tmpvar_27;
  tmpvar_27 = (tmpvar_20 * tmpvar_20);
  half tmpvar_28;
  tmpvar_28 = (tmpvar_27 * tmpvar_27);
  half tmpvar_29;
  tmpvar_29 = (((tmpvar_23 * tmpvar_23) * (tmpvar_28 - (half)1.0)) + (half)1.0);
  half x_30;
  x_30 = ((half)1.0 - tmpvar_17);
  half x_31;
  x_31 = ((half)1.0 - tmpvar_24);
  half tmpvar_32;
  tmpvar_32 = ((half)0.5 + (((half)2.0 * tmpvar_25) * (tmpvar_25 * tmpvar_20)));
  half tmpvar_33;
  tmpvar_33 = (((half)1.0 + (
    (tmpvar_32 - (half)1.0)
   * 
    ((x_30 * x_30) * ((x_30 * x_30) * x_30))
  )) * ((half)1.0 + (
    (tmpvar_32 - (half)1.0)
   * 
    ((x_31 * x_31) * ((x_31 * x_31) * x_31))
  )));
  half tmpvar_34;
  tmpvar_34 = ((((half)2.0 / 
    (((tmpvar_17 * (
      (tmpvar_24 * ((half)1.0 - tmpvar_26))
     + tmpvar_26)) + (tmpvar_24 * (
      (tmpvar_17 * ((half)1.0 - tmpvar_26))
     + tmpvar_26))) + (half)1e-05)
  ) * (tmpvar_28 / 
    ((((half)3.141593 * tmpvar_29) * tmpvar_29) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_19 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    specularTerm_19 = sqrt(max ((half)0.0001, tmpvar_34));
  };
  half tmpvar_36;
  tmpvar_36 = max ((half)0.0, (specularTerm_19 * tmpvar_17));
  specularTerm_19 = tmpvar_36;
  half tmpvar_37;
  tmpvar_37 = (tmpvar_33 * tmpvar_17);
  bool3 tmpvar_38;
  tmpvar_38 = bool3(tmpvar_4);
  bool tmpvar_39;
  tmpvar_39 = any(tmpvar_38);
  float tmpvar_40;
  if (tmpvar_39) {
    tmpvar_40 = 1.0;
  } else {
    tmpvar_40 = 0.0;
  };
  specularTerm_19 = (tmpvar_36 * (half)tmpvar_40);
  half x_41;
  x_41 = ((half)1.0 - tmpvar_25);
  half4 tmpvar_42;
  tmpvar_42.w = half(1.0);
  tmpvar_42.xyz = ((diffColor_7 * (tmpvar_15 * tmpvar_37)) + ((specularTerm_19 * tmpvar_15) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_41 * x_41) * ((x_41 * x_41) * x_41)))
  )));
  half4 xlat_varoutput_43;
  xlat_varoutput_43.xyz = tmpvar_42.xyz;
  xlat_varoutput_43.w = outModifiedAlpha_8;
  _mtl_o._glesFragData_0 = xlat_varoutput_43;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 101 math, 3 textures, 2 branches
Keywords { "POINT_COOKIE" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_LightTexture0] CUBE 1
SetTexture 2 [_LightTextureB0] 2D 2
ConstBuffer "$Globals" 36
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [_LightColor0] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texturecube<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _LightTextureB0 [[texture(2)]], sampler _mtlsmp__LightTextureB0 [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half tmpvar_5;
  tmpvar_5 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 diffColor_7;
  half outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = (((half)1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  half3 tmpvar_9;
  tmpvar_9.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_9.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_9.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_10;
  tmpvar_10 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_11;
  tmpvar_11 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_10)));
  half4 tmpvar_12;
  tmpvar_12 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float3)(_mtl_i.xlv_TEXCOORD5));
  half atten_13;
  atten_13 = (tmpvar_11.w * tmpvar_12.w);
  half3 tmpvar_14;
  tmpvar_14 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_9);
  half tmpvar_16;
  tmpvar_16 = max ((half)0.0, dot (tmpvar_6, tmpvar_15));
  tmpvar_14 = (tmpvar_14 * atten_13);
  half3 viewDir_17;
  viewDir_17 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_18;
  half tmpvar_19;
  tmpvar_19 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_20;
  half3 inVec_21;
  inVec_21 = (tmpvar_15 + viewDir_17);
  tmpvar_20 = (inVec_21 * rsqrt(max ((half)0.001, 
    dot (inVec_21, inVec_21)
  )));
  half tmpvar_22;
  tmpvar_22 = max ((half)0.0, dot (tmpvar_6, tmpvar_20));
  half tmpvar_23;
  tmpvar_23 = max ((half)0.0, dot (tmpvar_6, viewDir_17));
  half tmpvar_24;
  tmpvar_24 = max ((half)0.0, dot (tmpvar_15, tmpvar_20));
  half tmpvar_25;
  tmpvar_25 = (tmpvar_19 * tmpvar_19);
  half tmpvar_26;
  tmpvar_26 = (tmpvar_19 * tmpvar_19);
  half tmpvar_27;
  tmpvar_27 = (tmpvar_26 * tmpvar_26);
  half tmpvar_28;
  tmpvar_28 = (((tmpvar_22 * tmpvar_22) * (tmpvar_27 - (half)1.0)) + (half)1.0);
  half x_29;
  x_29 = ((half)1.0 - tmpvar_16);
  half x_30;
  x_30 = ((half)1.0 - tmpvar_23);
  half tmpvar_31;
  tmpvar_31 = ((half)0.5 + (((half)2.0 * tmpvar_24) * (tmpvar_24 * tmpvar_19)));
  half tmpvar_32;
  tmpvar_32 = (((half)1.0 + (
    (tmpvar_31 - (half)1.0)
   * 
    ((x_29 * x_29) * ((x_29 * x_29) * x_29))
  )) * ((half)1.0 + (
    (tmpvar_31 - (half)1.0)
   * 
    ((x_30 * x_30) * ((x_30 * x_30) * x_30))
  )));
  half tmpvar_33;
  tmpvar_33 = ((((half)2.0 / 
    (((tmpvar_16 * (
      (tmpvar_23 * ((half)1.0 - tmpvar_25))
     + tmpvar_25)) + (tmpvar_23 * (
      (tmpvar_16 * ((half)1.0 - tmpvar_25))
     + tmpvar_25))) + (half)1e-05)
  ) * (tmpvar_27 / 
    ((((half)3.141593 * tmpvar_28) * tmpvar_28) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_18 = tmpvar_33;
  bool tmpvar_34;
  tmpvar_34 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_34) {
    specularTerm_18 = sqrt(max ((half)0.0001, tmpvar_33));
  };
  half tmpvar_35;
  tmpvar_35 = max ((half)0.0, (specularTerm_18 * tmpvar_16));
  specularTerm_18 = tmpvar_35;
  half tmpvar_36;
  tmpvar_36 = (tmpvar_32 * tmpvar_16);
  bool3 tmpvar_37;
  tmpvar_37 = bool3(tmpvar_4);
  bool tmpvar_38;
  tmpvar_38 = any(tmpvar_37);
  float tmpvar_39;
  if (tmpvar_38) {
    tmpvar_39 = 1.0;
  } else {
    tmpvar_39 = 0.0;
  };
  specularTerm_18 = (tmpvar_35 * (half)tmpvar_39);
  half x_40;
  x_40 = ((half)1.0 - tmpvar_24);
  half4 tmpvar_41;
  tmpvar_41.w = half(1.0);
  tmpvar_41.xyz = ((diffColor_7 * (tmpvar_14 * tmpvar_36)) + ((specularTerm_18 * tmpvar_14) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_40 * x_40) * ((x_40 * x_40) * x_40)))
  )));
  half4 xlat_varoutput_42;
  xlat_varoutput_42.xyz = tmpvar_41.xyz;
  xlat_varoutput_42.w = outModifiedAlpha_8;
  _mtl_o._glesFragData_0 = xlat_varoutput_42;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 98 math, 2 textures, 2 branches
Keywords { "DIRECTIONAL_COOKIE" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_LightTexture0] 2D 1
ConstBuffer "$Globals" 36
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [_LightColor0] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float2 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half tmpvar_5;
  tmpvar_5 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 diffColor_7;
  half outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = (((half)1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  half3 tmpvar_9;
  tmpvar_9.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_9.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_9.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_10;
  tmpvar_10 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(_mtl_i.xlv_TEXCOORD5));
  half atten_11;
  atten_11 = tmpvar_10.w;
  half3 tmpvar_12;
  tmpvar_12 = _mtl_u._LightColor0.xyz;
  half tmpvar_13;
  tmpvar_13 = max ((half)0.0, dot (tmpvar_6, tmpvar_9));
  tmpvar_12 = (tmpvar_12 * atten_11);
  half3 viewDir_14;
  viewDir_14 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_15;
  half tmpvar_16;
  tmpvar_16 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_17;
  half3 inVec_18;
  inVec_18 = (tmpvar_9 + viewDir_14);
  tmpvar_17 = (inVec_18 * rsqrt(max ((half)0.001, 
    dot (inVec_18, inVec_18)
  )));
  half tmpvar_19;
  tmpvar_19 = max ((half)0.0, dot (tmpvar_6, tmpvar_17));
  half tmpvar_20;
  tmpvar_20 = max ((half)0.0, dot (tmpvar_6, viewDir_14));
  half tmpvar_21;
  tmpvar_21 = max ((half)0.0, dot (tmpvar_9, tmpvar_17));
  half tmpvar_22;
  tmpvar_22 = (tmpvar_16 * tmpvar_16);
  half tmpvar_23;
  tmpvar_23 = (tmpvar_16 * tmpvar_16);
  half tmpvar_24;
  tmpvar_24 = (tmpvar_23 * tmpvar_23);
  half tmpvar_25;
  tmpvar_25 = (((tmpvar_19 * tmpvar_19) * (tmpvar_24 - (half)1.0)) + (half)1.0);
  half x_26;
  x_26 = ((half)1.0 - tmpvar_13);
  half x_27;
  x_27 = ((half)1.0 - tmpvar_20);
  half tmpvar_28;
  tmpvar_28 = ((half)0.5 + (((half)2.0 * tmpvar_21) * (tmpvar_21 * tmpvar_16)));
  half tmpvar_29;
  tmpvar_29 = (((half)1.0 + (
    (tmpvar_28 - (half)1.0)
   * 
    ((x_26 * x_26) * ((x_26 * x_26) * x_26))
  )) * ((half)1.0 + (
    (tmpvar_28 - (half)1.0)
   * 
    ((x_27 * x_27) * ((x_27 * x_27) * x_27))
  )));
  half tmpvar_30;
  tmpvar_30 = ((((half)2.0 / 
    (((tmpvar_13 * (
      (tmpvar_20 * ((half)1.0 - tmpvar_22))
     + tmpvar_22)) + (tmpvar_20 * (
      (tmpvar_13 * ((half)1.0 - tmpvar_22))
     + tmpvar_22))) + (half)1e-05)
  ) * (tmpvar_24 / 
    ((((half)3.141593 * tmpvar_25) * tmpvar_25) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_15 = tmpvar_30;
  bool tmpvar_31;
  tmpvar_31 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_31) {
    specularTerm_15 = sqrt(max ((half)0.0001, tmpvar_30));
  };
  half tmpvar_32;
  tmpvar_32 = max ((half)0.0, (specularTerm_15 * tmpvar_13));
  specularTerm_15 = tmpvar_32;
  half tmpvar_33;
  tmpvar_33 = (tmpvar_29 * tmpvar_13);
  bool3 tmpvar_34;
  tmpvar_34 = bool3(tmpvar_4);
  bool tmpvar_35;
  tmpvar_35 = any(tmpvar_34);
  float tmpvar_36;
  if (tmpvar_35) {
    tmpvar_36 = 1.0;
  } else {
    tmpvar_36 = 0.0;
  };
  specularTerm_15 = (tmpvar_32 * (half)tmpvar_36);
  half x_37;
  x_37 = ((half)1.0 - tmpvar_21);
  half4 tmpvar_38;
  tmpvar_38.w = half(1.0);
  tmpvar_38.xyz = ((diffColor_7 * (tmpvar_12 * tmpvar_33)) + ((specularTerm_15 * tmpvar_12) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_37 * x_37) * ((x_37 * x_37) * x_37)))
  )));
  half4 xlat_varoutput_39;
  xlat_varoutput_39.xyz = tmpvar_38.xyz;
  xlat_varoutput_39.w = outModifiedAlpha_8;
  _mtl_o._glesFragData_0 = xlat_varoutput_39;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 110 math, 4 textures, 2 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_ShadowMapTexture] 2D 1
SetTexture 2 [_LightTexture0] 2D 2
SetTexture 3 [_LightTextureB0] 2D 3
ConstBuffer "$Globals" 44
VectorHalf 0 [_LightShadowData] 4
VectorHalf 8 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 16 [unity_ColorSpaceLuminance] 4
VectorHalf 24 [_LightColor0] 4
VectorHalf 32 [_Color] 4
ScalarHalf 40 [_Metallic]
ScalarHalf 42 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::less);
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   depth2d<float> _ShadowMapTexture [[texture(1)]], sampler _mtlsmp__ShadowMapTexture [[sampler(1)]]
  ,   texture2d<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]]
  ,   texture2d<half> _LightTextureB0 [[texture(3)]], sampler _mtlsmp__LightTextureB0 [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half tmpvar_5;
  tmpvar_5 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 diffColor_7;
  half outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = (((half)1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  half3 tmpvar_9;
  tmpvar_9.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_9.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_9.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_10;
  float2 P_11;
  P_11 = ((_mtl_i.xlv_TEXCOORD5.xy / _mtl_i.xlv_TEXCOORD5.w) + 0.5);
  tmpvar_10 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(P_11));
  float tmpvar_12;
  tmpvar_12 = dot (_mtl_i.xlv_TEXCOORD5.xyz, _mtl_i.xlv_TEXCOORD5.xyz);
  half4 tmpvar_13;
  tmpvar_13 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_12)));
  half tmpvar_14;
  half shadow_15;
  half tmpvar_16;
  tmpvar_16 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w, (float)(_mtl_i.xlv_TEXCOORD6).z / (float)(_mtl_i.xlv_TEXCOORD6).w);
  shadow_15 = (_mtl_u._LightShadowData.x + (tmpvar_16 * ((half)1.0 - _mtl_u._LightShadowData.x)));
  tmpvar_14 = shadow_15;
  half atten_17;
  atten_17 = half((((
    float((_mtl_i.xlv_TEXCOORD5.z > 0.0))
   * (float)tmpvar_10.w) * (float)tmpvar_13.w) * (float)tmpvar_14));
  half3 tmpvar_18;
  tmpvar_18 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_19;
  tmpvar_19 = normalize(tmpvar_9);
  half tmpvar_20;
  tmpvar_20 = max ((half)0.0, dot (tmpvar_6, tmpvar_19));
  tmpvar_18 = (tmpvar_18 * atten_17);
  half3 viewDir_21;
  viewDir_21 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_22;
  half tmpvar_23;
  tmpvar_23 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_24;
  half3 inVec_25;
  inVec_25 = (tmpvar_19 + viewDir_21);
  tmpvar_24 = (inVec_25 * rsqrt(max ((half)0.001, 
    dot (inVec_25, inVec_25)
  )));
  half tmpvar_26;
  tmpvar_26 = max ((half)0.0, dot (tmpvar_6, tmpvar_24));
  half tmpvar_27;
  tmpvar_27 = max ((half)0.0, dot (tmpvar_6, viewDir_21));
  half tmpvar_28;
  tmpvar_28 = max ((half)0.0, dot (tmpvar_19, tmpvar_24));
  half tmpvar_29;
  tmpvar_29 = (tmpvar_23 * tmpvar_23);
  half tmpvar_30;
  tmpvar_30 = (tmpvar_23 * tmpvar_23);
  half tmpvar_31;
  tmpvar_31 = (tmpvar_30 * tmpvar_30);
  half tmpvar_32;
  tmpvar_32 = (((tmpvar_26 * tmpvar_26) * (tmpvar_31 - (half)1.0)) + (half)1.0);
  half x_33;
  x_33 = ((half)1.0 - tmpvar_20);
  half x_34;
  x_34 = ((half)1.0 - tmpvar_27);
  half tmpvar_35;
  tmpvar_35 = ((half)0.5 + (((half)2.0 * tmpvar_28) * (tmpvar_28 * tmpvar_23)));
  half tmpvar_36;
  tmpvar_36 = (((half)1.0 + (
    (tmpvar_35 - (half)1.0)
   * 
    ((x_33 * x_33) * ((x_33 * x_33) * x_33))
  )) * ((half)1.0 + (
    (tmpvar_35 - (half)1.0)
   * 
    ((x_34 * x_34) * ((x_34 * x_34) * x_34))
  )));
  half tmpvar_37;
  tmpvar_37 = ((((half)2.0 / 
    (((tmpvar_20 * (
      (tmpvar_27 * ((half)1.0 - tmpvar_29))
     + tmpvar_29)) + (tmpvar_27 * (
      (tmpvar_20 * ((half)1.0 - tmpvar_29))
     + tmpvar_29))) + (half)1e-05)
  ) * (tmpvar_31 / 
    ((((half)3.141593 * tmpvar_32) * tmpvar_32) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_22 = tmpvar_37;
  bool tmpvar_38;
  tmpvar_38 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_38) {
    specularTerm_22 = sqrt(max ((half)0.0001, tmpvar_37));
  };
  half tmpvar_39;
  tmpvar_39 = max ((half)0.0, (specularTerm_22 * tmpvar_20));
  specularTerm_22 = tmpvar_39;
  half tmpvar_40;
  tmpvar_40 = (tmpvar_36 * tmpvar_20);
  bool3 tmpvar_41;
  tmpvar_41 = bool3(tmpvar_4);
  bool tmpvar_42;
  tmpvar_42 = any(tmpvar_41);
  float tmpvar_43;
  if (tmpvar_42) {
    tmpvar_43 = 1.0;
  } else {
    tmpvar_43 = 0.0;
  };
  specularTerm_22 = (tmpvar_39 * (half)tmpvar_43);
  half x_44;
  x_44 = ((half)1.0 - tmpvar_28);
  half4 tmpvar_45;
  tmpvar_45.w = half(1.0);
  tmpvar_45.xyz = ((diffColor_7 * (tmpvar_18 * tmpvar_40)) + ((specularTerm_22 * tmpvar_18) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_44 * x_44) * ((x_44 * x_44) * x_44)))
  )));
  half4 xlat_varoutput_46;
  xlat_varoutput_46.xyz = tmpvar_45.xyz;
  xlat_varoutput_46.w = outModifiedAlpha_8;
  _mtl_o._glesFragData_0 = xlat_varoutput_46;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 98 math, 2 textures, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_ShadowMapTexture] 2D 1
ConstBuffer "$Globals" 36
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [_LightColor0] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(1)]], sampler _mtlsmp__ShadowMapTexture [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half tmpvar_5;
  tmpvar_5 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 diffColor_7;
  half outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = (((half)1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  half3 tmpvar_9;
  tmpvar_9.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_9.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_9.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half tmpvar_10;
  tmpvar_10 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD5).xy / (float)(_mtl_i.xlv_TEXCOORD5).w)).x;
  half atten_11;
  atten_11 = tmpvar_10;
  half3 tmpvar_12;
  tmpvar_12 = _mtl_u._LightColor0.xyz;
  half tmpvar_13;
  tmpvar_13 = max ((half)0.0, dot (tmpvar_6, tmpvar_9));
  tmpvar_12 = (tmpvar_12 * atten_11);
  half3 viewDir_14;
  viewDir_14 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_15;
  half tmpvar_16;
  tmpvar_16 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_17;
  half3 inVec_18;
  inVec_18 = (tmpvar_9 + viewDir_14);
  tmpvar_17 = (inVec_18 * rsqrt(max ((half)0.001, 
    dot (inVec_18, inVec_18)
  )));
  half tmpvar_19;
  tmpvar_19 = max ((half)0.0, dot (tmpvar_6, tmpvar_17));
  half tmpvar_20;
  tmpvar_20 = max ((half)0.0, dot (tmpvar_6, viewDir_14));
  half tmpvar_21;
  tmpvar_21 = max ((half)0.0, dot (tmpvar_9, tmpvar_17));
  half tmpvar_22;
  tmpvar_22 = (tmpvar_16 * tmpvar_16);
  half tmpvar_23;
  tmpvar_23 = (tmpvar_16 * tmpvar_16);
  half tmpvar_24;
  tmpvar_24 = (tmpvar_23 * tmpvar_23);
  half tmpvar_25;
  tmpvar_25 = (((tmpvar_19 * tmpvar_19) * (tmpvar_24 - (half)1.0)) + (half)1.0);
  half x_26;
  x_26 = ((half)1.0 - tmpvar_13);
  half x_27;
  x_27 = ((half)1.0 - tmpvar_20);
  half tmpvar_28;
  tmpvar_28 = ((half)0.5 + (((half)2.0 * tmpvar_21) * (tmpvar_21 * tmpvar_16)));
  half tmpvar_29;
  tmpvar_29 = (((half)1.0 + (
    (tmpvar_28 - (half)1.0)
   * 
    ((x_26 * x_26) * ((x_26 * x_26) * x_26))
  )) * ((half)1.0 + (
    (tmpvar_28 - (half)1.0)
   * 
    ((x_27 * x_27) * ((x_27 * x_27) * x_27))
  )));
  half tmpvar_30;
  tmpvar_30 = ((((half)2.0 / 
    (((tmpvar_13 * (
      (tmpvar_20 * ((half)1.0 - tmpvar_22))
     + tmpvar_22)) + (tmpvar_20 * (
      (tmpvar_13 * ((half)1.0 - tmpvar_22))
     + tmpvar_22))) + (half)1e-05)
  ) * (tmpvar_24 / 
    ((((half)3.141593 * tmpvar_25) * tmpvar_25) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_15 = tmpvar_30;
  bool tmpvar_31;
  tmpvar_31 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_31) {
    specularTerm_15 = sqrt(max ((half)0.0001, tmpvar_30));
  };
  half tmpvar_32;
  tmpvar_32 = max ((half)0.0, (specularTerm_15 * tmpvar_13));
  specularTerm_15 = tmpvar_32;
  half tmpvar_33;
  tmpvar_33 = (tmpvar_29 * tmpvar_13);
  bool3 tmpvar_34;
  tmpvar_34 = bool3(tmpvar_4);
  bool tmpvar_35;
  tmpvar_35 = any(tmpvar_34);
  float tmpvar_36;
  if (tmpvar_35) {
    tmpvar_36 = 1.0;
  } else {
    tmpvar_36 = 0.0;
  };
  specularTerm_15 = (tmpvar_32 * (half)tmpvar_36);
  half x_37;
  x_37 = ((half)1.0 - tmpvar_21);
  half4 tmpvar_38;
  tmpvar_38.w = half(1.0);
  tmpvar_38.xyz = ((diffColor_7 * (tmpvar_12 * tmpvar_33)) + ((specularTerm_15 * tmpvar_12) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_37 * x_37) * ((x_37 * x_37) * x_37)))
  )));
  half4 xlat_varoutput_39;
  xlat_varoutput_39.xyz = tmpvar_38.xyz;
  xlat_varoutput_39.w = outModifiedAlpha_8;
  _mtl_o._glesFragData_0 = xlat_varoutput_39;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 99 math, 3 textures, 2 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_ShadowMapTexture] 2D 1
SetTexture 2 [_LightTexture0] 2D 2
ConstBuffer "$Globals" 36
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [_LightColor0] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float2 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(1)]], sampler _mtlsmp__ShadowMapTexture [[sampler(1)]]
  ,   texture2d<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half tmpvar_5;
  tmpvar_5 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 diffColor_7;
  half outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = (((half)1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  half3 tmpvar_9;
  tmpvar_9.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_9.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_9.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_10;
  tmpvar_10 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(_mtl_i.xlv_TEXCOORD5));
  half4 tmpvar_11;
  tmpvar_11 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w));
  half atten_12;
  atten_12 = (tmpvar_10.w * tmpvar_11.x);
  half3 tmpvar_13;
  tmpvar_13 = _mtl_u._LightColor0.xyz;
  half tmpvar_14;
  tmpvar_14 = max ((half)0.0, dot (tmpvar_6, tmpvar_9));
  tmpvar_13 = (tmpvar_13 * atten_12);
  half3 viewDir_15;
  viewDir_15 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_16;
  half tmpvar_17;
  tmpvar_17 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_18;
  half3 inVec_19;
  inVec_19 = (tmpvar_9 + viewDir_15);
  tmpvar_18 = (inVec_19 * rsqrt(max ((half)0.001, 
    dot (inVec_19, inVec_19)
  )));
  half tmpvar_20;
  tmpvar_20 = max ((half)0.0, dot (tmpvar_6, tmpvar_18));
  half tmpvar_21;
  tmpvar_21 = max ((half)0.0, dot (tmpvar_6, viewDir_15));
  half tmpvar_22;
  tmpvar_22 = max ((half)0.0, dot (tmpvar_9, tmpvar_18));
  half tmpvar_23;
  tmpvar_23 = (tmpvar_17 * tmpvar_17);
  half tmpvar_24;
  tmpvar_24 = (tmpvar_17 * tmpvar_17);
  half tmpvar_25;
  tmpvar_25 = (tmpvar_24 * tmpvar_24);
  half tmpvar_26;
  tmpvar_26 = (((tmpvar_20 * tmpvar_20) * (tmpvar_25 - (half)1.0)) + (half)1.0);
  half x_27;
  x_27 = ((half)1.0 - tmpvar_14);
  half x_28;
  x_28 = ((half)1.0 - tmpvar_21);
  half tmpvar_29;
  tmpvar_29 = ((half)0.5 + (((half)2.0 * tmpvar_22) * (tmpvar_22 * tmpvar_17)));
  half tmpvar_30;
  tmpvar_30 = (((half)1.0 + (
    (tmpvar_29 - (half)1.0)
   * 
    ((x_27 * x_27) * ((x_27 * x_27) * x_27))
  )) * ((half)1.0 + (
    (tmpvar_29 - (half)1.0)
   * 
    ((x_28 * x_28) * ((x_28 * x_28) * x_28))
  )));
  half tmpvar_31;
  tmpvar_31 = ((((half)2.0 / 
    (((tmpvar_14 * (
      (tmpvar_21 * ((half)1.0 - tmpvar_23))
     + tmpvar_23)) + (tmpvar_21 * (
      (tmpvar_14 * ((half)1.0 - tmpvar_23))
     + tmpvar_23))) + (half)1e-05)
  ) * (tmpvar_25 / 
    ((((half)3.141593 * tmpvar_26) * tmpvar_26) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_16 = tmpvar_31;
  bool tmpvar_32;
  tmpvar_32 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_32) {
    specularTerm_16 = sqrt(max ((half)0.0001, tmpvar_31));
  };
  half tmpvar_33;
  tmpvar_33 = max ((half)0.0, (specularTerm_16 * tmpvar_14));
  specularTerm_16 = tmpvar_33;
  half tmpvar_34;
  tmpvar_34 = (tmpvar_30 * tmpvar_14);
  bool3 tmpvar_35;
  tmpvar_35 = bool3(tmpvar_4);
  bool tmpvar_36;
  tmpvar_36 = any(tmpvar_35);
  float tmpvar_37;
  if (tmpvar_36) {
    tmpvar_37 = 1.0;
  } else {
    tmpvar_37 = 0.0;
  };
  specularTerm_16 = (tmpvar_33 * (half)tmpvar_37);
  half x_38;
  x_38 = ((half)1.0 - tmpvar_22);
  half4 tmpvar_39;
  tmpvar_39.w = half(1.0);
  tmpvar_39.xyz = ((diffColor_7 * (tmpvar_13 * tmpvar_34)) + ((specularTerm_16 * tmpvar_13) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_38 * x_38) * ((x_38 * x_38) * x_38)))
  )));
  half4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = tmpvar_39.xyz;
  xlat_varoutput_40.w = outModifiedAlpha_8;
  _mtl_o._glesFragData_0 = xlat_varoutput_40;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 107 math, 3 textures, 3 branches
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_ShadowMapTexture] CUBE 1
SetTexture 2 [_LightTexture0] 2D 2
ConstBuffer "$Globals" 60
Vector 0 [_LightPositionRange]
VectorHalf 16 [_LightShadowData] 4
VectorHalf 24 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 32 [unity_ColorSpaceLuminance] 4
VectorHalf 40 [_LightColor0] 4
VectorHalf 48 [_Color] 4
ScalarHalf 56 [_Metallic]
ScalarHalf 58 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texturecube<float> _ShadowMapTexture [[texture(1)]], sampler _mtlsmp__ShadowMapTexture [[sampler(1)]]
  ,   texture2d<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half tmpvar_5;
  tmpvar_5 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 diffColor_8;
  half outModifiedAlpha_9;
  diffColor_8 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_9 = (((half)1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  half3 tmpvar_10;
  tmpvar_10.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_10.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_10.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_11;
  tmpvar_11 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_12;
  tmpvar_12 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(float2(tmpvar_11)));
  float mydist_13;
  mydist_13 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  float4 tmpvar_14;
  tmpvar_14 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(_mtl_i.xlv_TEXCOORD6));
  half tmpvar_15;
  if ((tmpvar_14.x < mydist_13)) {
    tmpvar_15 = _mtl_u._LightShadowData.x;
  } else {
    tmpvar_15 = half(1.0);
  };
  half3 tmpvar_16;
  tmpvar_16 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_10);
  half tmpvar_18;
  tmpvar_18 = max ((half)0.0, dot (tmpvar_6, tmpvar_17));
  tmpvar_16 = (tmpvar_16 * (tmpvar_12.w * tmpvar_15));
  half3 viewDir_19;
  viewDir_19 = -(tmpvar_7);
  half specularTerm_20;
  half tmpvar_21;
  tmpvar_21 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_22;
  half3 inVec_23;
  inVec_23 = (tmpvar_17 + viewDir_19);
  tmpvar_22 = (inVec_23 * rsqrt(max ((half)0.001, 
    dot (inVec_23, inVec_23)
  )));
  half tmpvar_24;
  tmpvar_24 = max ((half)0.0, dot (tmpvar_6, tmpvar_22));
  half tmpvar_25;
  tmpvar_25 = max ((half)0.0, dot (tmpvar_6, viewDir_19));
  half tmpvar_26;
  tmpvar_26 = max ((half)0.0, dot (tmpvar_17, tmpvar_22));
  half tmpvar_27;
  tmpvar_27 = (tmpvar_21 * tmpvar_21);
  half tmpvar_28;
  tmpvar_28 = (tmpvar_21 * tmpvar_21);
  half tmpvar_29;
  tmpvar_29 = (tmpvar_28 * tmpvar_28);
  half tmpvar_30;
  tmpvar_30 = (((tmpvar_24 * tmpvar_24) * (tmpvar_29 - (half)1.0)) + (half)1.0);
  half x_31;
  x_31 = ((half)1.0 - tmpvar_18);
  half x_32;
  x_32 = ((half)1.0 - tmpvar_25);
  half tmpvar_33;
  tmpvar_33 = ((half)0.5 + (((half)2.0 * tmpvar_26) * (tmpvar_26 * tmpvar_21)));
  half tmpvar_34;
  tmpvar_34 = (((half)1.0 + (
    (tmpvar_33 - (half)1.0)
   * 
    ((x_31 * x_31) * ((x_31 * x_31) * x_31))
  )) * ((half)1.0 + (
    (tmpvar_33 - (half)1.0)
   * 
    ((x_32 * x_32) * ((x_32 * x_32) * x_32))
  )));
  half tmpvar_35;
  tmpvar_35 = ((((half)2.0 / 
    (((tmpvar_18 * (
      (tmpvar_25 * ((half)1.0 - tmpvar_27))
     + tmpvar_27)) + (tmpvar_25 * (
      (tmpvar_18 * ((half)1.0 - tmpvar_27))
     + tmpvar_27))) + (half)1e-05)
  ) * (tmpvar_29 / 
    ((((half)3.141593 * tmpvar_30) * tmpvar_30) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_20 = tmpvar_35;
  bool tmpvar_36;
  tmpvar_36 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_36) {
    specularTerm_20 = sqrt(max ((half)0.0001, tmpvar_35));
  };
  half tmpvar_37;
  tmpvar_37 = max ((half)0.0, (specularTerm_20 * tmpvar_18));
  specularTerm_20 = tmpvar_37;
  half tmpvar_38;
  tmpvar_38 = (tmpvar_34 * tmpvar_18);
  bool3 tmpvar_39;
  tmpvar_39 = bool3(tmpvar_4);
  bool tmpvar_40;
  tmpvar_40 = any(tmpvar_39);
  float tmpvar_41;
  if (tmpvar_40) {
    tmpvar_41 = 1.0;
  } else {
    tmpvar_41 = 0.0;
  };
  specularTerm_20 = (tmpvar_37 * (half)tmpvar_41);
  half x_42;
  x_42 = ((half)1.0 - tmpvar_26);
  half4 tmpvar_43;
  tmpvar_43.w = half(1.0);
  tmpvar_43.xyz = ((diffColor_8 * (tmpvar_16 * tmpvar_38)) + ((specularTerm_20 * tmpvar_16) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_42 * x_42) * ((x_42 * x_42) * x_42)))
  )));
  half4 xlat_varoutput_44;
  xlat_varoutput_44.xyz = tmpvar_43.xyz;
  xlat_varoutput_44.w = outModifiedAlpha_9;
  _mtl_o._glesFragData_0 = xlat_varoutput_44;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 108 math, 4 textures, 3 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_ShadowMapTexture] CUBE 1
SetTexture 2 [_LightTexture0] CUBE 2
SetTexture 3 [_LightTextureB0] 2D 3
ConstBuffer "$Globals" 60
Vector 0 [_LightPositionRange]
VectorHalf 16 [_LightShadowData] 4
VectorHalf 24 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 32 [unity_ColorSpaceLuminance] 4
VectorHalf 40 [_LightColor0] 4
VectorHalf 48 [_Color] 4
ScalarHalf 56 [_Metallic]
ScalarHalf 58 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texturecube<float> _ShadowMapTexture [[texture(1)]], sampler _mtlsmp__ShadowMapTexture [[sampler(1)]]
  ,   texturecube<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]]
  ,   texture2d<half> _LightTextureB0 [[texture(3)]], sampler _mtlsmp__LightTextureB0 [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half tmpvar_5;
  tmpvar_5 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 diffColor_8;
  half outModifiedAlpha_9;
  diffColor_8 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_9 = (((half)1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  half3 tmpvar_10;
  tmpvar_10.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_10.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_10.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_11;
  tmpvar_11 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_12;
  tmpvar_12 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_11)));
  half4 tmpvar_13;
  tmpvar_13 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float3)(_mtl_i.xlv_TEXCOORD5));
  float mydist_14;
  mydist_14 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  float4 tmpvar_15;
  tmpvar_15 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(_mtl_i.xlv_TEXCOORD6));
  half tmpvar_16;
  if ((tmpvar_15.x < mydist_14)) {
    tmpvar_16 = _mtl_u._LightShadowData.x;
  } else {
    tmpvar_16 = half(1.0);
  };
  half3 tmpvar_17;
  tmpvar_17 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_10);
  half tmpvar_19;
  tmpvar_19 = max ((half)0.0, dot (tmpvar_6, tmpvar_18));
  tmpvar_17 = (tmpvar_17 * ((tmpvar_12.w * tmpvar_13.w) * tmpvar_16));
  half3 viewDir_20;
  viewDir_20 = -(tmpvar_7);
  half specularTerm_21;
  half tmpvar_22;
  tmpvar_22 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_23;
  half3 inVec_24;
  inVec_24 = (tmpvar_18 + viewDir_20);
  tmpvar_23 = (inVec_24 * rsqrt(max ((half)0.001, 
    dot (inVec_24, inVec_24)
  )));
  half tmpvar_25;
  tmpvar_25 = max ((half)0.0, dot (tmpvar_6, tmpvar_23));
  half tmpvar_26;
  tmpvar_26 = max ((half)0.0, dot (tmpvar_6, viewDir_20));
  half tmpvar_27;
  tmpvar_27 = max ((half)0.0, dot (tmpvar_18, tmpvar_23));
  half tmpvar_28;
  tmpvar_28 = (tmpvar_22 * tmpvar_22);
  half tmpvar_29;
  tmpvar_29 = (tmpvar_22 * tmpvar_22);
  half tmpvar_30;
  tmpvar_30 = (tmpvar_29 * tmpvar_29);
  half tmpvar_31;
  tmpvar_31 = (((tmpvar_25 * tmpvar_25) * (tmpvar_30 - (half)1.0)) + (half)1.0);
  half x_32;
  x_32 = ((half)1.0 - tmpvar_19);
  half x_33;
  x_33 = ((half)1.0 - tmpvar_26);
  half tmpvar_34;
  tmpvar_34 = ((half)0.5 + (((half)2.0 * tmpvar_27) * (tmpvar_27 * tmpvar_22)));
  half tmpvar_35;
  tmpvar_35 = (((half)1.0 + (
    (tmpvar_34 - (half)1.0)
   * 
    ((x_32 * x_32) * ((x_32 * x_32) * x_32))
  )) * ((half)1.0 + (
    (tmpvar_34 - (half)1.0)
   * 
    ((x_33 * x_33) * ((x_33 * x_33) * x_33))
  )));
  half tmpvar_36;
  tmpvar_36 = ((((half)2.0 / 
    (((tmpvar_19 * (
      (tmpvar_26 * ((half)1.0 - tmpvar_28))
     + tmpvar_28)) + (tmpvar_26 * (
      (tmpvar_19 * ((half)1.0 - tmpvar_28))
     + tmpvar_28))) + (half)1e-05)
  ) * (tmpvar_30 / 
    ((((half)3.141593 * tmpvar_31) * tmpvar_31) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_21 = tmpvar_36;
  bool tmpvar_37;
  tmpvar_37 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_37) {
    specularTerm_21 = sqrt(max ((half)0.0001, tmpvar_36));
  };
  half tmpvar_38;
  tmpvar_38 = max ((half)0.0, (specularTerm_21 * tmpvar_19));
  specularTerm_21 = tmpvar_38;
  half tmpvar_39;
  tmpvar_39 = (tmpvar_35 * tmpvar_19);
  bool3 tmpvar_40;
  tmpvar_40 = bool3(tmpvar_4);
  bool tmpvar_41;
  tmpvar_41 = any(tmpvar_40);
  float tmpvar_42;
  if (tmpvar_41) {
    tmpvar_42 = 1.0;
  } else {
    tmpvar_42 = 0.0;
  };
  specularTerm_21 = (tmpvar_38 * (half)tmpvar_42);
  half x_43;
  x_43 = ((half)1.0 - tmpvar_27);
  half4 tmpvar_44;
  tmpvar_44.w = half(1.0);
  tmpvar_44.xyz = ((diffColor_8 * (tmpvar_17 * tmpvar_39)) + ((specularTerm_21 * tmpvar_17) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_43 * x_43) * ((x_43 * x_43) * x_43)))
  )));
  half4 xlat_varoutput_45;
  xlat_varoutput_45.xyz = tmpvar_44.xyz;
  xlat_varoutput_45.w = outModifiedAlpha_9;
  _mtl_o._glesFragData_0 = xlat_varoutput_45;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 116 math, 7 textures, 2 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_ShadowMapTexture] 2D 1
SetTexture 2 [_LightTexture0] 2D 2
SetTexture 3 [_LightTextureB0] 2D 3
ConstBuffer "$Globals" 112
VectorHalf 0 [_LightShadowData] 4
VectorHalf 8 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 16 [unity_ColorSpaceLuminance] 4
VectorHalf 24 [_LightColor0] 4
VectorHalf 32 [_Color] 4
ScalarHalf 40 [_Metallic]
ScalarHalf 42 [_Glossiness]
Vector 48 [_ShadowOffsets] 4 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::less);
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  float4 _ShadowOffsets[4];
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   depth2d<float> _ShadowMapTexture [[texture(1)]], sampler _mtlsmp__ShadowMapTexture [[sampler(1)]]
  ,   texture2d<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]]
  ,   texture2d<half> _LightTextureB0 [[texture(3)]], sampler _mtlsmp__LightTextureB0 [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half tmpvar_5;
  tmpvar_5 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 diffColor_7;
  half outModifiedAlpha_8;
  diffColor_7 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_8 = (((half)1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  half3 tmpvar_9;
  tmpvar_9.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_9.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_9.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_10;
  float2 P_11;
  P_11 = ((_mtl_i.xlv_TEXCOORD5.xy / _mtl_i.xlv_TEXCOORD5.w) + 0.5);
  tmpvar_10 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(P_11));
  float tmpvar_12;
  tmpvar_12 = dot (_mtl_i.xlv_TEXCOORD5.xyz, _mtl_i.xlv_TEXCOORD5.xyz);
  half4 tmpvar_13;
  tmpvar_13 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_12)));
  half tmpvar_14;
  half4 shadows_15;
  float3 tmpvar_16;
  tmpvar_16 = (_mtl_i.xlv_TEXCOORD6.xyz / _mtl_i.xlv_TEXCOORD6.w);
  float3 coord_17;
  coord_17 = (tmpvar_16 + _mtl_u._ShadowOffsets[0].xyz);
  half tmpvar_18;
  tmpvar_18 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(coord_17).xy, (float)(coord_17).z);
  shadows_15.x = tmpvar_18;
  float3 coord_19;
  coord_19 = (tmpvar_16 + _mtl_u._ShadowOffsets[1].xyz);
  half tmpvar_20;
  tmpvar_20 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(coord_19).xy, (float)(coord_19).z);
  shadows_15.y = tmpvar_20;
  float3 coord_21;
  coord_21 = (tmpvar_16 + _mtl_u._ShadowOffsets[2].xyz);
  half tmpvar_22;
  tmpvar_22 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(coord_21).xy, (float)(coord_21).z);
  shadows_15.z = tmpvar_22;
  float3 coord_23;
  coord_23 = (tmpvar_16 + _mtl_u._ShadowOffsets[3].xyz);
  half tmpvar_24;
  tmpvar_24 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(coord_23).xy, (float)(coord_23).z);
  shadows_15.w = tmpvar_24;
  shadows_15 = (_mtl_u._LightShadowData.xxxx + (shadows_15 * ((half)1.0 - _mtl_u._LightShadowData.xxxx)));
  half tmpvar_25;
  tmpvar_25 = dot (shadows_15, (half4)float4(0.25, 0.25, 0.25, 0.25));
  tmpvar_14 = tmpvar_25;
  half atten_26;
  atten_26 = half((((
    float((_mtl_i.xlv_TEXCOORD5.z > 0.0))
   * (float)tmpvar_10.w) * (float)tmpvar_13.w) * (float)tmpvar_14));
  half3 tmpvar_27;
  tmpvar_27 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_28;
  tmpvar_28 = normalize(tmpvar_9);
  half tmpvar_29;
  tmpvar_29 = max ((half)0.0, dot (tmpvar_6, tmpvar_28));
  tmpvar_27 = (tmpvar_27 * atten_26);
  half3 viewDir_30;
  viewDir_30 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_31;
  half tmpvar_32;
  tmpvar_32 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_33;
  half3 inVec_34;
  inVec_34 = (tmpvar_28 + viewDir_30);
  tmpvar_33 = (inVec_34 * rsqrt(max ((half)0.001, 
    dot (inVec_34, inVec_34)
  )));
  half tmpvar_35;
  tmpvar_35 = max ((half)0.0, dot (tmpvar_6, tmpvar_33));
  half tmpvar_36;
  tmpvar_36 = max ((half)0.0, dot (tmpvar_6, viewDir_30));
  half tmpvar_37;
  tmpvar_37 = max ((half)0.0, dot (tmpvar_28, tmpvar_33));
  half tmpvar_38;
  tmpvar_38 = (tmpvar_32 * tmpvar_32);
  half tmpvar_39;
  tmpvar_39 = (tmpvar_32 * tmpvar_32);
  half tmpvar_40;
  tmpvar_40 = (tmpvar_39 * tmpvar_39);
  half tmpvar_41;
  tmpvar_41 = (((tmpvar_35 * tmpvar_35) * (tmpvar_40 - (half)1.0)) + (half)1.0);
  half x_42;
  x_42 = ((half)1.0 - tmpvar_29);
  half x_43;
  x_43 = ((half)1.0 - tmpvar_36);
  half tmpvar_44;
  tmpvar_44 = ((half)0.5 + (((half)2.0 * tmpvar_37) * (tmpvar_37 * tmpvar_32)));
  half tmpvar_45;
  tmpvar_45 = (((half)1.0 + (
    (tmpvar_44 - (half)1.0)
   * 
    ((x_42 * x_42) * ((x_42 * x_42) * x_42))
  )) * ((half)1.0 + (
    (tmpvar_44 - (half)1.0)
   * 
    ((x_43 * x_43) * ((x_43 * x_43) * x_43))
  )));
  half tmpvar_46;
  tmpvar_46 = ((((half)2.0 / 
    (((tmpvar_29 * (
      (tmpvar_36 * ((half)1.0 - tmpvar_38))
     + tmpvar_38)) + (tmpvar_36 * (
      (tmpvar_29 * ((half)1.0 - tmpvar_38))
     + tmpvar_38))) + (half)1e-05)
  ) * (tmpvar_40 / 
    ((((half)3.141593 * tmpvar_41) * tmpvar_41) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_31 = tmpvar_46;
  bool tmpvar_47;
  tmpvar_47 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_47) {
    specularTerm_31 = sqrt(max ((half)0.0001, tmpvar_46));
  };
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, (specularTerm_31 * tmpvar_29));
  specularTerm_31 = tmpvar_48;
  half tmpvar_49;
  tmpvar_49 = (tmpvar_45 * tmpvar_29);
  bool3 tmpvar_50;
  tmpvar_50 = bool3(tmpvar_4);
  bool tmpvar_51;
  tmpvar_51 = any(tmpvar_50);
  float tmpvar_52;
  if (tmpvar_51) {
    tmpvar_52 = 1.0;
  } else {
    tmpvar_52 = 0.0;
  };
  specularTerm_31 = (tmpvar_48 * (half)tmpvar_52);
  half x_53;
  x_53 = ((half)1.0 - tmpvar_37);
  half4 tmpvar_54;
  tmpvar_54.w = half(1.0);
  tmpvar_54.xyz = ((diffColor_7 * (tmpvar_27 * tmpvar_49)) + ((specularTerm_31 * tmpvar_27) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_53 * x_53) * ((x_53 * x_53) * x_53)))
  )));
  half4 xlat_varoutput_55;
  xlat_varoutput_55.xyz = tmpvar_54.xyz;
  xlat_varoutput_55.w = outModifiedAlpha_8;
  _mtl_o._glesFragData_0 = xlat_varoutput_55;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 115 math, 6 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_ShadowMapTexture] CUBE 1
SetTexture 2 [_LightTexture0] 2D 2
ConstBuffer "$Globals" 60
Vector 0 [_LightPositionRange]
VectorHalf 16 [_LightShadowData] 4
VectorHalf 24 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 32 [unity_ColorSpaceLuminance] 4
VectorHalf 40 [_LightColor0] 4
VectorHalf 48 [_Color] 4
ScalarHalf 56 [_Metallic]
ScalarHalf 58 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texturecube<float> _ShadowMapTexture [[texture(1)]], sampler _mtlsmp__ShadowMapTexture [[sampler(1)]]
  ,   texture2d<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half tmpvar_5;
  tmpvar_5 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 diffColor_8;
  half outModifiedAlpha_9;
  diffColor_8 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_9 = (((half)1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  half3 tmpvar_10;
  tmpvar_10.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_10.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_10.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_11;
  tmpvar_11 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_12;
  tmpvar_12 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(float2(tmpvar_11)));
  float4 shadowVals_13;
  float mydist_14;
  mydist_14 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  shadowVals_13.x = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)((_mtl_i.xlv_TEXCOORD6 + float3(0.0078125, 0.0078125, 0.0078125)))).x;
  shadowVals_13.y = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)((_mtl_i.xlv_TEXCOORD6 + float3(-0.0078125, -0.0078125, 0.0078125)))).x;
  shadowVals_13.z = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)((_mtl_i.xlv_TEXCOORD6 + float3(-0.0078125, 0.0078125, -0.0078125)))).x;
  shadowVals_13.w = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)((_mtl_i.xlv_TEXCOORD6 + float3(0.0078125, -0.0078125, -0.0078125)))).x;
  bool4 tmpvar_15;
  tmpvar_15 = bool4((shadowVals_13 < float4(mydist_14)));
  half4 tmpvar_16;
  tmpvar_16 = _mtl_u._LightShadowData.xxxx;
  half tmpvar_17;
  if (tmpvar_15.x) {
    tmpvar_17 = tmpvar_16.x;
  } else {
    tmpvar_17 = half(1.0);
  };
  half tmpvar_18;
  if (tmpvar_15.y) {
    tmpvar_18 = tmpvar_16.y;
  } else {
    tmpvar_18 = half(1.0);
  };
  half tmpvar_19;
  if (tmpvar_15.z) {
    tmpvar_19 = tmpvar_16.z;
  } else {
    tmpvar_19 = half(1.0);
  };
  half tmpvar_20;
  if (tmpvar_15.w) {
    tmpvar_20 = tmpvar_16.w;
  } else {
    tmpvar_20 = half(1.0);
  };
  half4 tmpvar_21;
  tmpvar_21.x = tmpvar_17;
  tmpvar_21.y = tmpvar_18;
  tmpvar_21.z = tmpvar_19;
  tmpvar_21.w = tmpvar_20;
  half3 tmpvar_22;
  tmpvar_22 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  half tmpvar_24;
  tmpvar_24 = max ((half)0.0, dot (tmpvar_6, tmpvar_23));
  tmpvar_22 = (tmpvar_22 * (tmpvar_12.w * dot (tmpvar_21, (half4)float4(0.25, 0.25, 0.25, 0.25))));
  half3 viewDir_25;
  viewDir_25 = -(tmpvar_7);
  half specularTerm_26;
  half tmpvar_27;
  tmpvar_27 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_28;
  half3 inVec_29;
  inVec_29 = (tmpvar_23 + viewDir_25);
  tmpvar_28 = (inVec_29 * rsqrt(max ((half)0.001, 
    dot (inVec_29, inVec_29)
  )));
  half tmpvar_30;
  tmpvar_30 = max ((half)0.0, dot (tmpvar_6, tmpvar_28));
  half tmpvar_31;
  tmpvar_31 = max ((half)0.0, dot (tmpvar_6, viewDir_25));
  half tmpvar_32;
  tmpvar_32 = max ((half)0.0, dot (tmpvar_23, tmpvar_28));
  half tmpvar_33;
  tmpvar_33 = (tmpvar_27 * tmpvar_27);
  half tmpvar_34;
  tmpvar_34 = (tmpvar_27 * tmpvar_27);
  half tmpvar_35;
  tmpvar_35 = (tmpvar_34 * tmpvar_34);
  half tmpvar_36;
  tmpvar_36 = (((tmpvar_30 * tmpvar_30) * (tmpvar_35 - (half)1.0)) + (half)1.0);
  half x_37;
  x_37 = ((half)1.0 - tmpvar_24);
  half x_38;
  x_38 = ((half)1.0 - tmpvar_31);
  half tmpvar_39;
  tmpvar_39 = ((half)0.5 + (((half)2.0 * tmpvar_32) * (tmpvar_32 * tmpvar_27)));
  half tmpvar_40;
  tmpvar_40 = (((half)1.0 + (
    (tmpvar_39 - (half)1.0)
   * 
    ((x_37 * x_37) * ((x_37 * x_37) * x_37))
  )) * ((half)1.0 + (
    (tmpvar_39 - (half)1.0)
   * 
    ((x_38 * x_38) * ((x_38 * x_38) * x_38))
  )));
  half tmpvar_41;
  tmpvar_41 = ((((half)2.0 / 
    (((tmpvar_24 * (
      (tmpvar_31 * ((half)1.0 - tmpvar_33))
     + tmpvar_33)) + (tmpvar_31 * (
      (tmpvar_24 * ((half)1.0 - tmpvar_33))
     + tmpvar_33))) + (half)1e-05)
  ) * (tmpvar_35 / 
    ((((half)3.141593 * tmpvar_36) * tmpvar_36) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_26 = tmpvar_41;
  bool tmpvar_42;
  tmpvar_42 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_42) {
    specularTerm_26 = sqrt(max ((half)0.0001, tmpvar_41));
  };
  half tmpvar_43;
  tmpvar_43 = max ((half)0.0, (specularTerm_26 * tmpvar_24));
  specularTerm_26 = tmpvar_43;
  half tmpvar_44;
  tmpvar_44 = (tmpvar_40 * tmpvar_24);
  bool3 tmpvar_45;
  tmpvar_45 = bool3(tmpvar_4);
  bool tmpvar_46;
  tmpvar_46 = any(tmpvar_45);
  float tmpvar_47;
  if (tmpvar_46) {
    tmpvar_47 = 1.0;
  } else {
    tmpvar_47 = 0.0;
  };
  specularTerm_26 = (tmpvar_43 * (half)tmpvar_47);
  half x_48;
  x_48 = ((half)1.0 - tmpvar_32);
  half4 tmpvar_49;
  tmpvar_49.w = half(1.0);
  tmpvar_49.xyz = ((diffColor_8 * (tmpvar_22 * tmpvar_44)) + ((specularTerm_26 * tmpvar_22) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_48 * x_48) * ((x_48 * x_48) * x_48)))
  )));
  half4 xlat_varoutput_50;
  xlat_varoutput_50.xyz = tmpvar_49.xyz;
  xlat_varoutput_50.w = outModifiedAlpha_9;
  _mtl_o._glesFragData_0 = xlat_varoutput_50;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 116 math, 7 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_ShadowMapTexture] CUBE 1
SetTexture 2 [_LightTexture0] CUBE 2
SetTexture 3 [_LightTextureB0] 2D 3
ConstBuffer "$Globals" 60
Vector 0 [_LightPositionRange]
VectorHalf 16 [_LightShadowData] 4
VectorHalf 24 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 32 [unity_ColorSpaceLuminance] 4
VectorHalf 40 [_LightColor0] 4
VectorHalf 48 [_Color] 4
ScalarHalf 56 [_Metallic]
ScalarHalf 58 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texturecube<float> _ShadowMapTexture [[texture(1)]], sampler _mtlsmp__ShadowMapTexture [[sampler(1)]]
  ,   texturecube<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]]
  ,   texture2d<half> _LightTextureB0 [[texture(3)]], sampler _mtlsmp__LightTextureB0 [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half tmpvar_5;
  tmpvar_5 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 diffColor_8;
  half outModifiedAlpha_9;
  diffColor_8 = ((tmpvar_3 * tmpvar_5) * tmpvar_1);
  outModifiedAlpha_9 = (((half)1.0 - tmpvar_5) + (tmpvar_1 * tmpvar_5));
  half3 tmpvar_10;
  tmpvar_10.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_10.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_10.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_11;
  tmpvar_11 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_12;
  tmpvar_12 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_11)));
  half4 tmpvar_13;
  tmpvar_13 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float3)(_mtl_i.xlv_TEXCOORD5));
  float4 shadowVals_14;
  float mydist_15;
  mydist_15 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  shadowVals_14.x = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)((_mtl_i.xlv_TEXCOORD6 + float3(0.0078125, 0.0078125, 0.0078125)))).x;
  shadowVals_14.y = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)((_mtl_i.xlv_TEXCOORD6 + float3(-0.0078125, -0.0078125, 0.0078125)))).x;
  shadowVals_14.z = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)((_mtl_i.xlv_TEXCOORD6 + float3(-0.0078125, 0.0078125, -0.0078125)))).x;
  shadowVals_14.w = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)((_mtl_i.xlv_TEXCOORD6 + float3(0.0078125, -0.0078125, -0.0078125)))).x;
  bool4 tmpvar_16;
  tmpvar_16 = bool4((shadowVals_14 < float4(mydist_15)));
  half4 tmpvar_17;
  tmpvar_17 = _mtl_u._LightShadowData.xxxx;
  half tmpvar_18;
  if (tmpvar_16.x) {
    tmpvar_18 = tmpvar_17.x;
  } else {
    tmpvar_18 = half(1.0);
  };
  half tmpvar_19;
  if (tmpvar_16.y) {
    tmpvar_19 = tmpvar_17.y;
  } else {
    tmpvar_19 = half(1.0);
  };
  half tmpvar_20;
  if (tmpvar_16.z) {
    tmpvar_20 = tmpvar_17.z;
  } else {
    tmpvar_20 = half(1.0);
  };
  half tmpvar_21;
  if (tmpvar_16.w) {
    tmpvar_21 = tmpvar_17.w;
  } else {
    tmpvar_21 = half(1.0);
  };
  half4 tmpvar_22;
  tmpvar_22.x = tmpvar_18;
  tmpvar_22.y = tmpvar_19;
  tmpvar_22.z = tmpvar_20;
  tmpvar_22.w = tmpvar_21;
  half3 tmpvar_23;
  tmpvar_23 = _mtl_u._LightColor0.xyz;
  half3 tmpvar_24;
  tmpvar_24 = normalize(tmpvar_10);
  half tmpvar_25;
  tmpvar_25 = max ((half)0.0, dot (tmpvar_6, tmpvar_24));
  tmpvar_23 = (tmpvar_23 * ((tmpvar_12.w * tmpvar_13.w) * dot (tmpvar_22, (half4)float4(0.25, 0.25, 0.25, 0.25))));
  half3 viewDir_26;
  viewDir_26 = -(tmpvar_7);
  half specularTerm_27;
  half tmpvar_28;
  tmpvar_28 = ((half)1.0 - _mtl_u._Glossiness);
  half3 tmpvar_29;
  half3 inVec_30;
  inVec_30 = (tmpvar_24 + viewDir_26);
  tmpvar_29 = (inVec_30 * rsqrt(max ((half)0.001, 
    dot (inVec_30, inVec_30)
  )));
  half tmpvar_31;
  tmpvar_31 = max ((half)0.0, dot (tmpvar_6, tmpvar_29));
  half tmpvar_32;
  tmpvar_32 = max ((half)0.0, dot (tmpvar_6, viewDir_26));
  half tmpvar_33;
  tmpvar_33 = max ((half)0.0, dot (tmpvar_24, tmpvar_29));
  half tmpvar_34;
  tmpvar_34 = (tmpvar_28 * tmpvar_28);
  half tmpvar_35;
  tmpvar_35 = (tmpvar_28 * tmpvar_28);
  half tmpvar_36;
  tmpvar_36 = (tmpvar_35 * tmpvar_35);
  half tmpvar_37;
  tmpvar_37 = (((tmpvar_31 * tmpvar_31) * (tmpvar_36 - (half)1.0)) + (half)1.0);
  half x_38;
  x_38 = ((half)1.0 - tmpvar_25);
  half x_39;
  x_39 = ((half)1.0 - tmpvar_32);
  half tmpvar_40;
  tmpvar_40 = ((half)0.5 + (((half)2.0 * tmpvar_33) * (tmpvar_33 * tmpvar_28)));
  half tmpvar_41;
  tmpvar_41 = (((half)1.0 + (
    (tmpvar_40 - (half)1.0)
   * 
    ((x_38 * x_38) * ((x_38 * x_38) * x_38))
  )) * ((half)1.0 + (
    (tmpvar_40 - (half)1.0)
   * 
    ((x_39 * x_39) * ((x_39 * x_39) * x_39))
  )));
  half tmpvar_42;
  tmpvar_42 = ((((half)2.0 / 
    (((tmpvar_25 * (
      (tmpvar_32 * ((half)1.0 - tmpvar_34))
     + tmpvar_34)) + (tmpvar_32 * (
      (tmpvar_25 * ((half)1.0 - tmpvar_34))
     + tmpvar_34))) + (half)1e-05)
  ) * (tmpvar_36 / 
    ((((half)3.141593 * tmpvar_37) * tmpvar_37) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_27 = tmpvar_42;
  bool tmpvar_43;
  tmpvar_43 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_43) {
    specularTerm_27 = sqrt(max ((half)0.0001, tmpvar_42));
  };
  half tmpvar_44;
  tmpvar_44 = max ((half)0.0, (specularTerm_27 * tmpvar_25));
  specularTerm_27 = tmpvar_44;
  half tmpvar_45;
  tmpvar_45 = (tmpvar_41 * tmpvar_25);
  bool3 tmpvar_46;
  tmpvar_46 = bool3(tmpvar_4);
  bool tmpvar_47;
  tmpvar_47 = any(tmpvar_46);
  float tmpvar_48;
  if (tmpvar_47) {
    tmpvar_48 = 1.0;
  } else {
    tmpvar_48 = 0.0;
  };
  specularTerm_27 = (tmpvar_44 * (half)tmpvar_48);
  half x_49;
  x_49 = ((half)1.0 - tmpvar_33);
  half4 tmpvar_50;
  tmpvar_50.w = half(1.0);
  tmpvar_50.xyz = ((diffColor_8 * (tmpvar_23 * tmpvar_45)) + ((specularTerm_27 * tmpvar_23) * (tmpvar_4 + 
    (((half)1.0 - tmpvar_4) * ((x_49 * x_49) * ((x_49 * x_49) * x_49)))
  )));
  half4 xlat_varoutput_51;
  xlat_varoutput_51.xyz = tmpvar_50.xyz;
  xlat_varoutput_51.w = outModifiedAlpha_9;
  _mtl_o._glesFragData_0 = xlat_varoutput_51;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
}
 }


 // Stats for Vertex shader:
 //       metal : 17 avg math (4..30), 0 avg branch (0..1)
 //      opengl : 5 avg math (1..9), 1 avg texture (0..3), 0 avg branch (0..1)
 // Stats for Fragment shader:
 //       metal : 5 avg math (1..9), 1 avg texture (0..3), 0 avg branch (0..1)
 Pass {
  Name "SHADOWCASTER"
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 144189
Program "vp" {
SubProgram "opengl " {
// Stats: 1 math
Keywords { "SHADOWS_DEPTH" }
"#version 120

#ifdef VERTEX
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_LightShadowBias;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform mat4 unity_MatrixVP;
void main ()
{
  vec3 vertex_1;
  vertex_1 = gl_Vertex.xyz;
  vec4 clipPos_2;
  if ((unity_LightShadowBias.z != 0.0)) {
    vec4 tmpvar_3;
    tmpvar_3.w = 1.0;
    tmpvar_3.xyz = vertex_1;
    vec3 tmpvar_4;
    tmpvar_4 = (unity_ObjectToWorld * tmpvar_3).xyz;
    vec4 v_5;
    v_5.x = unity_WorldToObject[0].x;
    v_5.y = unity_WorldToObject[1].x;
    v_5.z = unity_WorldToObject[2].x;
    v_5.w = unity_WorldToObject[3].x;
    vec4 v_6;
    v_6.x = unity_WorldToObject[0].y;
    v_6.y = unity_WorldToObject[1].y;
    v_6.z = unity_WorldToObject[2].y;
    v_6.w = unity_WorldToObject[3].y;
    vec4 v_7;
    v_7.x = unity_WorldToObject[0].z;
    v_7.y = unity_WorldToObject[1].z;
    v_7.z = unity_WorldToObject[2].z;
    v_7.w = unity_WorldToObject[3].z;
    vec3 tmpvar_8;
    tmpvar_8 = normalize(((
      (v_5.xyz * gl_Normal.x)
     + 
      (v_6.xyz * gl_Normal.y)
    ) + (v_7.xyz * gl_Normal.z)));
    float tmpvar_9;
    tmpvar_9 = dot (tmpvar_8, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_4 * _WorldSpaceLightPos0.w)
    )));
    vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = (tmpvar_4 - (tmpvar_8 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_9 * tmpvar_9)))
    )));
    clipPos_2 = (unity_MatrixVP * tmpvar_10);
  } else {
    vec4 tmpvar_11;
    tmpvar_11.w = 1.0;
    tmpvar_11.xyz = vertex_1;
    clipPos_2 = (gl_ModelViewProjectionMatrix * tmpvar_11);
  };
  vec4 clipPos_12;
  clipPos_12.xyw = clipPos_2.xyw;
  clipPos_12.z = (clipPos_2.z + clamp ((unity_LightShadowBias.x / clipPos_2.w), 0.0, 1.0));
  clipPos_12.z = mix (clipPos_12.z, max (clipPos_12.z, -(clipPos_2.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_12;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "metal " {
// Stats: 28 math, 1 branches
Keywords { "SHADOWS_DEPTH" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
ConstBuffer "$Globals" 288
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 224 [unity_MatrixVP]
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [unity_LightShadowBias]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  float4 unity_LightShadowBias;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4x4 unity_MatrixVP;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 vertex_1;
  vertex_1 = _mtl_i._glesVertex.xyz;
  float4 clipPos_2;
  if ((_mtl_u.unity_LightShadowBias.z != 0.0)) {
    float4 tmpvar_3;
    tmpvar_3.w = 1.0;
    tmpvar_3.xyz = vertex_1;
    float3 tmpvar_4;
    tmpvar_4 = (_mtl_u.unity_ObjectToWorld * tmpvar_3).xyz;
    float4 v_5;
    v_5.x = _mtl_u.unity_WorldToObject[0].x;
    v_5.y = _mtl_u.unity_WorldToObject[1].x;
    v_5.z = _mtl_u.unity_WorldToObject[2].x;
    v_5.w = _mtl_u.unity_WorldToObject[3].x;
    float4 v_6;
    v_6.x = _mtl_u.unity_WorldToObject[0].y;
    v_6.y = _mtl_u.unity_WorldToObject[1].y;
    v_6.z = _mtl_u.unity_WorldToObject[2].y;
    v_6.w = _mtl_u.unity_WorldToObject[3].y;
    float4 v_7;
    v_7.x = _mtl_u.unity_WorldToObject[0].z;
    v_7.y = _mtl_u.unity_WorldToObject[1].z;
    v_7.z = _mtl_u.unity_WorldToObject[2].z;
    v_7.w = _mtl_u.unity_WorldToObject[3].z;
    float3 tmpvar_8;
    tmpvar_8 = normalize(((
      (v_5.xyz * _mtl_i._glesNormal.x)
     + 
      (v_6.xyz * _mtl_i._glesNormal.y)
    ) + (v_7.xyz * _mtl_i._glesNormal.z)));
    float tmpvar_9;
    tmpvar_9 = dot (tmpvar_8, normalize((_mtl_u._WorldSpaceLightPos0.xyz - 
      (tmpvar_4 * _mtl_u._WorldSpaceLightPos0.w)
    )));
    float4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = (tmpvar_4 - (tmpvar_8 * (_mtl_u.unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_9 * tmpvar_9)))
    )));
    clipPos_2 = (_mtl_u.unity_MatrixVP * tmpvar_10);
  } else {
    float4 tmpvar_11;
    tmpvar_11.w = 1.0;
    tmpvar_11.xyz = vertex_1;
    clipPos_2 = (_mtl_u.glstate_matrix_mvp * tmpvar_11);
  };
  float4 clipPos_12;
  clipPos_12.xyw = clipPos_2.xyw;
  clipPos_12.z = (clipPos_2.z + clamp ((_mtl_u.unity_LightShadowBias.x / clipPos_2.w), 0.0, 1.0));
  clipPos_12.z = mix (clipPos_12.z, max (clipPos_12.z, 0.0), _mtl_u.unity_LightShadowBias.y);
  _mtl_o.gl_Position = clipPos_12;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
bool u_xlatb2;
float u_xlat6;
float u_xlat9;
void main()
{
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4unity_ObjectToWorld[3].xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4unity_MatrixVP[3];
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat1 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb2 = unity_LightShadowBias.z!=0.0;
    u_xlat0 = (bool(u_xlatb2)) ? u_xlat0 : u_xlat1;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
layout(location = 0) out vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 4 math
Keywords { "SHADOWS_CUBE" }
"#version 120

#ifdef VERTEX
uniform vec4 _LightPositionRange;

uniform mat4 unity_ObjectToWorld;
varying vec3 xlv_TEXCOORD0;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = gl_Vertex.xyz;
  xlv_TEXCOORD0 = ((unity_ObjectToWorld * gl_Vertex).xyz - _LightPositionRange.xyz);
  gl_Position = (gl_ModelViewProjectionMatrix * tmpvar_1);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 unity_LightShadowBias;
varying vec3 xlv_TEXCOORD0;
void main ()
{
  gl_FragData[0] = vec4(((sqrt(
    dot (xlv_TEXCOORD0, xlv_TEXCOORD0)
  ) + unity_LightShadowBias.x) * _LightPositionRange.w));
}


#endif
"
}
SubProgram "metal " {
// Stats: 4 math
Keywords { "SHADOWS_CUBE" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 144
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Vector 0 [_LightPositionRange]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _mtl_i._glesVertex.xyz;
  _mtl_o.xlv_TEXCOORD0 = ((_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex).xyz - _mtl_u._LightPositionRange.xyz);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * tmpvar_1);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
in  vec4 in_POSITION0;
out vec3 vs_TEXCOORD0;
vec4 u_xlat0;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_LightShadowBias;
in  vec3 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
void main()
{
    u_xlat0 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0 = sqrt(u_xlat0);
    u_xlat0 = u_xlat0 + unity_LightShadowBias.x;
    SV_Target0 = vec4(u_xlat0) * _LightPositionRange.wwww;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 6 math, 3 textures, 1 branches
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_LightShadowBias;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform mat4 unity_MatrixVP;
uniform vec4 _MainTex_ST;
varying vec2 xlv_TEXCOORD1;
void main ()
{
  vec3 vertex_1;
  vertex_1 = gl_Vertex.xyz;
  vec4 clipPos_2;
  if ((unity_LightShadowBias.z != 0.0)) {
    vec4 tmpvar_3;
    tmpvar_3.w = 1.0;
    tmpvar_3.xyz = vertex_1;
    vec3 tmpvar_4;
    tmpvar_4 = (unity_ObjectToWorld * tmpvar_3).xyz;
    vec4 v_5;
    v_5.x = unity_WorldToObject[0].x;
    v_5.y = unity_WorldToObject[1].x;
    v_5.z = unity_WorldToObject[2].x;
    v_5.w = unity_WorldToObject[3].x;
    vec4 v_6;
    v_6.x = unity_WorldToObject[0].y;
    v_6.y = unity_WorldToObject[1].y;
    v_6.z = unity_WorldToObject[2].y;
    v_6.w = unity_WorldToObject[3].y;
    vec4 v_7;
    v_7.x = unity_WorldToObject[0].z;
    v_7.y = unity_WorldToObject[1].z;
    v_7.z = unity_WorldToObject[2].z;
    v_7.w = unity_WorldToObject[3].z;
    vec3 tmpvar_8;
    tmpvar_8 = normalize(((
      (v_5.xyz * gl_Normal.x)
     + 
      (v_6.xyz * gl_Normal.y)
    ) + (v_7.xyz * gl_Normal.z)));
    float tmpvar_9;
    tmpvar_9 = dot (tmpvar_8, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_4 * _WorldSpaceLightPos0.w)
    )));
    vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = (tmpvar_4 - (tmpvar_8 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_9 * tmpvar_9)))
    )));
    clipPos_2 = (unity_MatrixVP * tmpvar_10);
  } else {
    vec4 tmpvar_11;
    tmpvar_11.w = 1.0;
    tmpvar_11.xyz = vertex_1;
    clipPos_2 = (gl_ModelViewProjectionMatrix * tmpvar_11);
  };
  vec4 clipPos_12;
  clipPos_12.xyw = clipPos_2.xyw;
  clipPos_12.z = (clipPos_2.z + clamp ((unity_LightShadowBias.x / clipPos_2.w), 0.0, 1.0));
  clipPos_12.z = mix (clipPos_12.z, max (clipPos_12.z, -(clipPos_2.w)), unity_LightShadowBias.y);
  xlv_TEXCOORD1 = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  gl_Position = clipPos_12;
}


#endif
#ifdef FRAGMENT
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler3D _DitherMaskLOD;
varying vec2 xlv_TEXCOORD1;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1.xy = (gl_FragCoord.xy * 0.25);
  tmpvar_1.z = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) * 0.9375);
  float x_2;
  x_2 = (texture3D (_DitherMaskLOD, tmpvar_1).w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "metal " {
// Stats: 30 math, 1 branches
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
ConstBuffer "$Globals" 304
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 224 [unity_MatrixVP]
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [unity_LightShadowBias]
Vector 288 [_MainTex_ST]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float2 xlv_TEXCOORD1;
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  float4 unity_LightShadowBias;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4x4 unity_MatrixVP;
  float4 _MainTex_ST;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 vertex_1;
  vertex_1 = _mtl_i._glesVertex.xyz;
  float4 clipPos_2;
  if ((_mtl_u.unity_LightShadowBias.z != 0.0)) {
    float4 tmpvar_3;
    tmpvar_3.w = 1.0;
    tmpvar_3.xyz = vertex_1;
    float3 tmpvar_4;
    tmpvar_4 = (_mtl_u.unity_ObjectToWorld * tmpvar_3).xyz;
    float4 v_5;
    v_5.x = _mtl_u.unity_WorldToObject[0].x;
    v_5.y = _mtl_u.unity_WorldToObject[1].x;
    v_5.z = _mtl_u.unity_WorldToObject[2].x;
    v_5.w = _mtl_u.unity_WorldToObject[3].x;
    float4 v_6;
    v_6.x = _mtl_u.unity_WorldToObject[0].y;
    v_6.y = _mtl_u.unity_WorldToObject[1].y;
    v_6.z = _mtl_u.unity_WorldToObject[2].y;
    v_6.w = _mtl_u.unity_WorldToObject[3].y;
    float4 v_7;
    v_7.x = _mtl_u.unity_WorldToObject[0].z;
    v_7.y = _mtl_u.unity_WorldToObject[1].z;
    v_7.z = _mtl_u.unity_WorldToObject[2].z;
    v_7.w = _mtl_u.unity_WorldToObject[3].z;
    float3 tmpvar_8;
    tmpvar_8 = normalize(((
      (v_5.xyz * _mtl_i._glesNormal.x)
     + 
      (v_6.xyz * _mtl_i._glesNormal.y)
    ) + (v_7.xyz * _mtl_i._glesNormal.z)));
    float tmpvar_9;
    tmpvar_9 = dot (tmpvar_8, normalize((_mtl_u._WorldSpaceLightPos0.xyz - 
      (tmpvar_4 * _mtl_u._WorldSpaceLightPos0.w)
    )));
    float4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = (tmpvar_4 - (tmpvar_8 * (_mtl_u.unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_9 * tmpvar_9)))
    )));
    clipPos_2 = (_mtl_u.unity_MatrixVP * tmpvar_10);
  } else {
    float4 tmpvar_11;
    tmpvar_11.w = 1.0;
    tmpvar_11.xyz = vertex_1;
    clipPos_2 = (_mtl_u.glstate_matrix_mvp * tmpvar_11);
  };
  float4 clipPos_12;
  clipPos_12.xyw = clipPos_2.xyw;
  clipPos_12.z = (clipPos_2.z + clamp ((_mtl_u.unity_LightShadowBias.x / clipPos_2.w), 0.0, 1.0));
  clipPos_12.z = mix (clipPos_12.z, max (clipPos_12.z, 0.0), _mtl_u.unity_LightShadowBias.y);
  _mtl_o.xlv_TEXCOORD1 = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  _mtl_o.gl_Position = clipPos_12;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
bool u_xlatb2;
float u_xlat6;
float u_xlat9;
void main()
{
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4unity_ObjectToWorld[3].xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4unity_MatrixVP[3];
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat1 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb2 = unity_LightShadowBias.z!=0.0;
    u_xlat0 = (bool(u_xlatb2)) ? u_xlat0 : u_xlat1;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler3D _DitherMaskLOD;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0.x = u_xlat10_0.w * _Color.w;
    u_xlat0.z = u_xlat0.x * 0.9375;
    u_xlat0.xy = gl_FragCoord.xy * vec2(0.25, 0.25);
    u_xlat10_0 = texture(_DitherMaskLOD, u_xlat0.xyz);
    u_xlat0.x = u_xlat10_0.w + -0.00999999978;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 9 math, 3 textures, 1 branches
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec4 _LightPositionRange;

uniform mat4 unity_ObjectToWorld;
uniform vec4 _MainTex_ST;
varying vec3 xlv_TEXCOORD0;
varying vec2 xlv_TEXCOORD1;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = gl_Vertex.xyz;
  xlv_TEXCOORD0 = ((unity_ObjectToWorld * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD1 = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  gl_Position = (gl_ModelViewProjectionMatrix * tmpvar_1);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 unity_LightShadowBias;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler3D _DitherMaskLOD;
varying vec3 xlv_TEXCOORD0;
varying vec2 xlv_TEXCOORD1;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1.xy = (gl_FragCoord.xy * 0.25);
  tmpvar_1.z = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) * 0.9375);
  float x_2;
  x_2 = (texture3D (_DitherMaskLOD, tmpvar_1).w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(((sqrt(
    dot (xlv_TEXCOORD0, xlv_TEXCOORD0)
  ) + unity_LightShadowBias.x) * _LightPositionRange.w));
}


#endif
"
}
SubProgram "metal " {
// Stats: 6 math
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "texcoord" ATTR1
ConstBuffer "$Globals" 160
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Vector 0 [_LightPositionRange]
Vector 144 [_MainTex_ST]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesMultiTexCoord0 [[attribute(1)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float2 xlv_TEXCOORD1;
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4 _MainTex_ST;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _mtl_i._glesVertex.xyz;
  _mtl_o.xlv_TEXCOORD0 = ((_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex).xyz - _mtl_u._LightPositionRange.xyz);
  _mtl_o.xlv_TEXCOORD1 = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * tmpvar_1);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec3 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec4 u_xlat0;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler3D _DitherMaskLOD;
in  vec3 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0.x = u_xlat10_0.w * _Color.w;
    u_xlat0.z = u_xlat0.x * 0.9375;
    u_xlat0.xy = gl_FragCoord.xy * vec2(0.25, 0.25);
    u_xlat10_0 = texture(_DitherMaskLOD, u_xlat0.xyz);
    u_xlat0.x = u_xlat10_0.w + -0.00999999978;
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
    SV_Target0 = u_xlat0.xxxx * _LightPositionRange.wwww;
    return;
}
#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "SHADOWS_DEPTH" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 1 math
Keywords { "SHADOWS_DEPTH" }
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  _mtl_o._glesFragData_0 = half4(float4(0.0, 0.0, 0.0, 0.0));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "SHADOWS_CUBE" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 4 math
Keywords { "SHADOWS_CUBE" }
ConstBuffer "$Globals" 32
Vector 0 [_LightPositionRange]
Vector 16 [unity_LightShadowBias]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  float4 unity_LightShadowBias;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = float4(((sqrt(
    dot (_mtl_i.xlv_TEXCOORD0, _mtl_i.xlv_TEXCOORD0)
  ) + _mtl_u.unity_LightShadowBias.x) * _mtl_u._LightPositionRange.w));
  tmpvar_1 = half4(tmpvar_2);
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SHADOWS_CUBE" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 6 math, 3 textures, 1 branches
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DitherMaskLOD] 3D 1
ConstBuffer "$Globals" 8
VectorHalf 0 [_Color] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 gl_FragCoord [[position]];
  float2 xlv_TEXCOORD1;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _Color;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture3d<half> _DitherMaskLOD [[texture(1)]], sampler _mtlsmp__DitherMaskLOD [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half alphaRef_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD1));
  half tmpvar_3;
  tmpvar_3 = (tmpvar_2.w * _mtl_u._Color.w);
  float3 tmpvar_4;
  tmpvar_4.xy = (_mtl_i.gl_FragCoord.xy * 0.25);
  tmpvar_4.z = float((tmpvar_3 * (half)0.9375));
  half tmpvar_5;
  tmpvar_5 = _DitherMaskLOD.sample(_mtlsmp__DitherMaskLOD, (float3)(tmpvar_4)).w;
  alphaRef_1 = tmpvar_5;
  half x_6;
  x_6 = (alphaRef_1 - (half)0.01);
  if ((x_6 < (half)0.0)) {
    discard_fragment();
  };
  _mtl_o._glesFragData_0 = half4(float4(0.0, 0.0, 0.0, 0.0));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 9 math, 3 textures, 1 branches
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DitherMaskLOD] 3D 1
ConstBuffer "$Globals" 40
Vector 0 [_LightPositionRange]
Vector 16 [unity_LightShadowBias]
VectorHalf 32 [_Color] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 gl_FragCoord [[position]];
  float3 xlv_TEXCOORD0;
  float2 xlv_TEXCOORD1;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  float4 unity_LightShadowBias;
  half4 _Color;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture3d<half> _DitherMaskLOD [[texture(1)]], sampler _mtlsmp__DitherMaskLOD [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half alphaRef_2;
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD1));
  half tmpvar_4;
  tmpvar_4 = (tmpvar_3.w * _mtl_u._Color.w);
  float3 tmpvar_5;
  tmpvar_5.xy = (_mtl_i.gl_FragCoord.xy * 0.25);
  tmpvar_5.z = float((tmpvar_4 * (half)0.9375));
  half tmpvar_6;
  tmpvar_6 = _DitherMaskLOD.sample(_mtlsmp__DitherMaskLOD, (float3)(tmpvar_5)).w;
  alphaRef_2 = tmpvar_6;
  half x_7;
  x_7 = (alphaRef_2 - (half)0.01);
  if ((x_7 < (half)0.0)) {
    discard_fragment();
  };
  float4 tmpvar_8;
  tmpvar_8 = float4(((sqrt(
    dot (_mtl_i.xlv_TEXCOORD0, _mtl_i.xlv_TEXCOORD0)
  ) + _mtl_u.unity_LightShadowBias.x) * _mtl_u._LightPositionRange.w));
  tmpvar_1 = half4(tmpvar_8);
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
}
 }


 // Stats for Vertex shader:
 //       metal : 32 avg math (25..36), 1 avg branch (1..2)
 //      opengl : 90 avg math (72..97), 5 avg texture (4..6), 4 avg branch (2..5)
 // Stats for Fragment shader:
 //       metal : 90 avg math (72..97), 5 avg texture (4..6), 4 avg branch (2..5)
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="Deferred" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 203724
Program "vp" {
SubProgram "opengl " {
// Stats: 95 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_17;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_18;
  ambient_18 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_18 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_19.x = dot (unity_SHBr, tmpvar_20);
  x1_19.y = dot (unity_SHBg, tmpvar_20);
  x1_19.z = dot (unity_SHBb, tmpvar_20);
  ambient_18 = (ambient_18 + (x1_19 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_18;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  float tmpvar_3;
  tmpvar_3 = mg_2.y;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_10;
  tmpvar_10 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_11;
  ambient_11 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_12;
  ambient_contrib_12 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_13;
    tmpvar_13.w = 1.0;
    tmpvar_13.xyz = tmpvar_7;
    vec3 x1_14;
    vec3 texCoord_15;
    vec3 tmpvar_16;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_17;
      tmpvar_17.w = 1.0;
      tmpvar_17.xyz = xlv_TEXCOORD6;
      tmpvar_16 = (unity_ProbeVolumeWorldToObject * tmpvar_17).xyz;
    } else {
      tmpvar_16 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_18;
    tmpvar_18 = ((tmpvar_16 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_15.yz = tmpvar_18.yz;
    texCoord_15.x = (tmpvar_18.x * 0.25);
    float tmpvar_19;
    float tmpvar_20;
    tmpvar_20 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_19 = clamp (texCoord_15.x, tmpvar_20, (0.25 - tmpvar_20));
    texCoord_15.x = tmpvar_19;
    vec4 tmpvar_21;
    tmpvar_21 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.25);
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.5);
    x1_14.x = dot (tmpvar_21, tmpvar_13);
    x1_14.y = dot (tmpvar_22, tmpvar_13);
    x1_14.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_15), tmpvar_13);
    ambient_contrib_12 = x1_14;
  } else {
    vec4 tmpvar_23;
    tmpvar_23.w = 1.0;
    tmpvar_23.xyz = tmpvar_7;
    vec3 x_24;
    x_24.x = dot (unity_SHAr, tmpvar_23);
    x_24.y = dot (unity_SHAg, tmpvar_23);
    x_24.z = dot (unity_SHAb, tmpvar_23);
    ambient_contrib_12 = x_24;
  };
  vec3 tmpvar_25;
  tmpvar_25 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_12));
  ambient_11 = tmpvar_25;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_11 = max (((1.055 * 
      pow (max (tmpvar_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_10 = (ambient_11 * tmpvar_9);
  vec3 viewDir_26;
  viewDir_26 = -(tmpvar_8);
  float specularTerm_27;
  float tmpvar_28;
  tmpvar_28 = (1.0 - _Glossiness);
  vec3 inVec_29;
  inVec_29 = (vec3(0.0, 1.0, 0.0) + viewDir_26);
  float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_7, (inVec_29 * 
    inversesqrt(max (0.001, dot (inVec_29, inVec_29)))
  )));
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, viewDir_26));
  float tmpvar_32;
  tmpvar_32 = (tmpvar_28 * tmpvar_28);
  float tmpvar_33;
  tmpvar_33 = (tmpvar_28 * tmpvar_28);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_33 * tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (((tmpvar_30 * tmpvar_30) * (tmpvar_34 - 1.0)) + 1.0);
  float tmpvar_36;
  tmpvar_36 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_31 * (1.0 - tmpvar_32))
     + tmpvar_32)) + (tmpvar_31 * (
      (tmpvar_1 * (1.0 - tmpvar_32))
     + tmpvar_32))) + 1e-05)
  ) * (tmpvar_34 / 
    (((3.141593 * tmpvar_35) * tmpvar_35) + 1e-07)
  )) * 0.7853982);
  specularTerm_27 = tmpvar_36;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_27 = sqrt(max (0.0001, tmpvar_36));
  };
  float tmpvar_37;
  tmpvar_37 = max (0.0, (specularTerm_27 * tmpvar_1));
  specularTerm_27 = tmpvar_37;
  float tmpvar_38;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_38 = 1.0;
  } else {
    tmpvar_38 = 0.0;
  };
  specularTerm_27 = (tmpvar_37 * tmpvar_38);
  vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = (tmpvar_5 * tmpvar_10);
  vec4 tmpvar_40;
  tmpvar_40.xyz = tmpvar_5;
  tmpvar_40.w = tmpvar_9;
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_6;
  tmpvar_41.w = tmpvar_3;
  vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = exp2(-(tmpvar_39.xyz));
  gl_FragData[0] = tmpvar_40;
  gl_FragData[1] = tmpvar_41;
  gl_FragData[2] = tmpvar_42;
  gl_FragData[3] = tmpvar_43;
}


#endif
"
}
SubProgram "metal " {
// Stats: 31 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 290
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
VectorHalf 240 [unity_ColorSpaceLuminance] 4
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_9;
  tmpvar_9 = tmpvar_8.xyz;
  float4 tmpvar_10;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_10 = (_mtl_u.glstate_matrix_mvp * tmpvar_11);
  float4 texcoord_12;
  texcoord_12.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_13;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_14;
  float3 n_15;
  n_15 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_14 = half3(n_15);
  float3 norm_16;
  norm_16 = float3(tmpvar_1);
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].x;
  v_17.y = _mtl_u.unity_WorldToObject[1].x;
  v_17.z = _mtl_u.unity_WorldToObject[2].x;
  v_17.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].y;
  v_18.y = _mtl_u.unity_WorldToObject[1].y;
  v_18.z = _mtl_u.unity_WorldToObject[2].y;
  v_18.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].z;
  v_19.y = _mtl_u.unity_WorldToObject[1].z;
  v_19.z = _mtl_u.unity_WorldToObject[2].z;
  v_19.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_20);
  tmpvar_7 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_21;
  normal_21 = half3(tmpvar_20);
  half3 ambient_22;
  ambient_22 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_23;
  tmpvar_23 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_23) {
    ambient_22 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_24;
  half4 tmpvar_25;
  tmpvar_25 = (normal_21.xyzz * normal_21.yzzx);
  x1_24.x = dot (_mtl_u.unity_SHBr, tmpvar_25);
  x1_24.y = dot (_mtl_u.unity_SHBg, tmpvar_25);
  x1_24.z = dot (_mtl_u.unity_SHBb, tmpvar_25);
  ambient_22 = (ambient_22 + (x1_24 + (_mtl_u.unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )));
  tmpvar_7.xyz = ambient_22;
  _mtl_o.gl_Position = tmpvar_10;
  _mtl_o.xlv_TEXCOORD0 = texcoord_12;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_14;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat7;
float u_xlat8;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat10_2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_2.y * _OcclusionStrength + u_xlat2.x;
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : vs_TEXCOORD6.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
        u_xlat2.x = min(u_xlat8, u_xlat7.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat1);
        u_xlat3.y = dot(u_xlat10_4, u_xlat1);
        u_xlat3.z = dot(u_xlat10_2, u_xlat1);
    } else {
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat1);
        u_xlat3.y = dot(unity_SHAg, u_xlat1);
        u_xlat3.z = dot(unity_SHAb, u_xlat1);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat2.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    SV_Target3.xyz = exp2((-u_xlat2.xyz));
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 97 math, 6 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_17;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_18;
  ambient_18 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_18 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_19.x = dot (unity_SHBr, tmpvar_20);
  x1_19.y = dot (unity_SHBg, tmpvar_20);
  x1_19.z = dot (unity_SHBb, tmpvar_20);
  ambient_18 = (ambient_18 + (x1_19 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_18;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 color_1;
  float tmpvar_2;
  vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  float tmpvar_4;
  tmpvar_4 = mg_3.y;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  tmpvar_6 = (tmpvar_5 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  tmpvar_2 = max (0.0, tmpvar_8.y);
  float tmpvar_10;
  tmpvar_10 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_12;
  ambient_12 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_13;
  ambient_contrib_13 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_14;
    tmpvar_14.w = 1.0;
    tmpvar_14.xyz = tmpvar_8;
    vec3 x1_15;
    vec3 texCoord_16;
    vec3 tmpvar_17;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_18;
      tmpvar_18.w = 1.0;
      tmpvar_18.xyz = xlv_TEXCOORD6;
      tmpvar_17 = (unity_ProbeVolumeWorldToObject * tmpvar_18).xyz;
    } else {
      tmpvar_17 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_19;
    tmpvar_19 = ((tmpvar_17 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_16.yz = tmpvar_19.yz;
    texCoord_16.x = (tmpvar_19.x * 0.25);
    float tmpvar_20;
    float tmpvar_21;
    tmpvar_21 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_20 = clamp (texCoord_16.x, tmpvar_21, (0.25 - tmpvar_21));
    texCoord_16.x = tmpvar_20;
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.25);
    vec4 tmpvar_23;
    tmpvar_23 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.5);
    x1_15.x = dot (tmpvar_22, tmpvar_14);
    x1_15.y = dot (tmpvar_23, tmpvar_14);
    x1_15.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_16), tmpvar_14);
    ambient_contrib_13 = x1_15;
  } else {
    vec4 tmpvar_24;
    tmpvar_24.w = 1.0;
    tmpvar_24.xyz = tmpvar_8;
    vec3 x_25;
    x_25.x = dot (unity_SHAr, tmpvar_24);
    x_25.y = dot (unity_SHAg, tmpvar_24);
    x_25.z = dot (unity_SHAb, tmpvar_24);
    ambient_contrib_13 = x_25;
  };
  vec3 tmpvar_26;
  tmpvar_26 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_13));
  ambient_12 = tmpvar_26;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_12 = max (((1.055 * 
      pow (max (tmpvar_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_11 = (ambient_12 * tmpvar_10);
  vec3 viewDir_27;
  viewDir_27 = -(tmpvar_9);
  float specularTerm_28;
  float tmpvar_29;
  tmpvar_29 = (1.0 - _Glossiness);
  vec3 inVec_30;
  inVec_30 = (vec3(0.0, 1.0, 0.0) + viewDir_27);
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_8, (inVec_30 * 
    inversesqrt(max (0.001, dot (inVec_30, inVec_30)))
  )));
  float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_8, viewDir_27));
  float tmpvar_33;
  tmpvar_33 = (tmpvar_29 * tmpvar_29);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_29 * tmpvar_29);
  float tmpvar_35;
  tmpvar_35 = (tmpvar_34 * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (((tmpvar_31 * tmpvar_31) * (tmpvar_35 - 1.0)) + 1.0);
  float tmpvar_37;
  tmpvar_37 = (((2.0 / 
    (((tmpvar_2 * (
      (tmpvar_32 * (1.0 - tmpvar_33))
     + tmpvar_33)) + (tmpvar_32 * (
      (tmpvar_2 * (1.0 - tmpvar_33))
     + tmpvar_33))) + 1e-05)
  ) * (tmpvar_35 / 
    (((3.141593 * tmpvar_36) * tmpvar_36) + 1e-07)
  )) * 0.7853982);
  specularTerm_28 = tmpvar_37;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_28 = sqrt(max (0.0001, tmpvar_37));
  };
  float tmpvar_38;
  tmpvar_38 = max (0.0, (specularTerm_28 * tmpvar_2));
  specularTerm_28 = tmpvar_38;
  float tmpvar_39;
  if (any(bvec3(tmpvar_7))) {
    tmpvar_39 = 1.0;
  } else {
    tmpvar_39 = 0.0;
  };
  specularTerm_28 = (tmpvar_38 * tmpvar_39);
  vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = (tmpvar_6 * tmpvar_11);
  color_1 = (tmpvar_40.xyz + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  color_1 = exp2(-(color_1));
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_6;
  tmpvar_41.w = tmpvar_10;
  vec4 tmpvar_42;
  tmpvar_42.xyz = tmpvar_7;
  tmpvar_42.w = tmpvar_4;
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = ((tmpvar_8 * 0.5) + 0.5);
  vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = color_1;
  gl_FragData[0] = tmpvar_41;
  gl_FragData[1] = tmpvar_42;
  gl_FragData[2] = tmpvar_43;
  gl_FragData[3] = tmpvar_44;
}


#endif
"
}
SubProgram "metal " {
// Stats: 31 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 290
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
VectorHalf 240 [unity_ColorSpaceLuminance] 4
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_9;
  tmpvar_9 = tmpvar_8.xyz;
  float4 tmpvar_10;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_10 = (_mtl_u.glstate_matrix_mvp * tmpvar_11);
  float4 texcoord_12;
  texcoord_12.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_13;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_14;
  float3 n_15;
  n_15 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_14 = half3(n_15);
  float3 norm_16;
  norm_16 = float3(tmpvar_1);
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].x;
  v_17.y = _mtl_u.unity_WorldToObject[1].x;
  v_17.z = _mtl_u.unity_WorldToObject[2].x;
  v_17.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].y;
  v_18.y = _mtl_u.unity_WorldToObject[1].y;
  v_18.z = _mtl_u.unity_WorldToObject[2].y;
  v_18.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].z;
  v_19.y = _mtl_u.unity_WorldToObject[1].z;
  v_19.z = _mtl_u.unity_WorldToObject[2].z;
  v_19.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_20);
  tmpvar_7 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_21;
  normal_21 = half3(tmpvar_20);
  half3 ambient_22;
  ambient_22 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_23;
  tmpvar_23 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_23) {
    ambient_22 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_24;
  half4 tmpvar_25;
  tmpvar_25 = (normal_21.xyzz * normal_21.yzzx);
  x1_24.x = dot (_mtl_u.unity_SHBr, tmpvar_25);
  x1_24.y = dot (_mtl_u.unity_SHBg, tmpvar_25);
  x1_24.z = dot (_mtl_u.unity_SHBb, tmpvar_25);
  ambient_22 = (ambient_22 + (x1_24 + (_mtl_u.unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )));
  tmpvar_7.xyz = ambient_22;
  _mtl_o.gl_Position = tmpvar_10;
  _mtl_o.xlv_TEXCOORD0 = texcoord_12;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_14;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat7;
float u_xlat8;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat10_2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_2.y * _OcclusionStrength + u_xlat2.x;
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : vs_TEXCOORD6.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
        u_xlat2.x = min(u_xlat8, u_xlat7.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat1);
        u_xlat3.y = dot(u_xlat10_4, u_xlat1);
        u_xlat3.z = dot(u_xlat10_2, u_xlat1);
    } else {
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat1);
        u_xlat3.y = dot(unity_SHAg, u_xlat1);
        u_xlat3.z = dot(unity_SHAb, u_xlat1);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat2.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
    u_xlat10_3 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
    SV_Target3.xyz = exp2((-u_xlat2.xyz));
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 97 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_17;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_18;
  ambient_18 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_18 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_19.x = dot (unity_SHBr, tmpvar_20);
  x1_19.y = dot (unity_SHBg, tmpvar_20);
  x1_19.z = dot (unity_SHBb, tmpvar_20);
  ambient_18 = (ambient_18 + (x1_19 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_18;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  float tmpvar_4;
  tmpvar_4 = mg_3.y;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_9;
  diffColor_9 = ((tmpvar_5 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) * (tmpvar_2.w * _Color.w));
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_10;
  tmpvar_10 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_12;
  ambient_12 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_13;
  ambient_contrib_13 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_14;
    tmpvar_14.w = 1.0;
    tmpvar_14.xyz = tmpvar_7;
    vec3 x1_15;
    vec3 texCoord_16;
    vec3 tmpvar_17;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_18;
      tmpvar_18.w = 1.0;
      tmpvar_18.xyz = xlv_TEXCOORD6;
      tmpvar_17 = (unity_ProbeVolumeWorldToObject * tmpvar_18).xyz;
    } else {
      tmpvar_17 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_19;
    tmpvar_19 = ((tmpvar_17 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_16.yz = tmpvar_19.yz;
    texCoord_16.x = (tmpvar_19.x * 0.25);
    float tmpvar_20;
    float tmpvar_21;
    tmpvar_21 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_20 = clamp (texCoord_16.x, tmpvar_21, (0.25 - tmpvar_21));
    texCoord_16.x = tmpvar_20;
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.25);
    vec4 tmpvar_23;
    tmpvar_23 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.5);
    x1_15.x = dot (tmpvar_22, tmpvar_14);
    x1_15.y = dot (tmpvar_23, tmpvar_14);
    x1_15.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_16), tmpvar_14);
    ambient_contrib_13 = x1_15;
  } else {
    vec4 tmpvar_24;
    tmpvar_24.w = 1.0;
    tmpvar_24.xyz = tmpvar_7;
    vec3 x_25;
    x_25.x = dot (unity_SHAr, tmpvar_24);
    x_25.y = dot (unity_SHAg, tmpvar_24);
    x_25.z = dot (unity_SHAb, tmpvar_24);
    ambient_contrib_13 = x_25;
  };
  vec3 tmpvar_26;
  tmpvar_26 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_13));
  ambient_12 = tmpvar_26;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_12 = max (((1.055 * 
      pow (max (tmpvar_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_11 = (ambient_12 * tmpvar_10);
  vec3 viewDir_27;
  viewDir_27 = -(tmpvar_8);
  float specularTerm_28;
  float tmpvar_29;
  tmpvar_29 = (1.0 - _Glossiness);
  vec3 inVec_30;
  inVec_30 = (vec3(0.0, 1.0, 0.0) + viewDir_27);
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, (inVec_30 * 
    inversesqrt(max (0.001, dot (inVec_30, inVec_30)))
  )));
  float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_7, viewDir_27));
  float tmpvar_33;
  tmpvar_33 = (tmpvar_29 * tmpvar_29);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_29 * tmpvar_29);
  float tmpvar_35;
  tmpvar_35 = (tmpvar_34 * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (((tmpvar_31 * tmpvar_31) * (tmpvar_35 - 1.0)) + 1.0);
  float tmpvar_37;
  tmpvar_37 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_32 * (1.0 - tmpvar_33))
     + tmpvar_33)) + (tmpvar_32 * (
      (tmpvar_1 * (1.0 - tmpvar_33))
     + tmpvar_33))) + 1e-05)
  ) * (tmpvar_35 / 
    (((3.141593 * tmpvar_36) * tmpvar_36) + 1e-07)
  )) * 0.7853982);
  specularTerm_28 = tmpvar_37;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_28 = sqrt(max (0.0001, tmpvar_37));
  };
  float tmpvar_38;
  tmpvar_38 = max (0.0, (specularTerm_28 * tmpvar_1));
  specularTerm_28 = tmpvar_38;
  float tmpvar_39;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_39 = 1.0;
  } else {
    tmpvar_39 = 0.0;
  };
  specularTerm_28 = (tmpvar_38 * tmpvar_39);
  vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = (diffColor_9 * tmpvar_11);
  vec4 tmpvar_41;
  tmpvar_41.xyz = diffColor_9;
  tmpvar_41.w = tmpvar_10;
  vec4 tmpvar_42;
  tmpvar_42.xyz = tmpvar_6;
  tmpvar_42.w = tmpvar_4;
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = exp2(-(tmpvar_40.xyz));
  gl_FragData[0] = tmpvar_41;
  gl_FragData[1] = tmpvar_42;
  gl_FragData[2] = tmpvar_43;
  gl_FragData[3] = tmpvar_44;
}


#endif
"
}
SubProgram "metal " {
// Stats: 31 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 290
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
VectorHalf 240 [unity_ColorSpaceLuminance] 4
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_9;
  tmpvar_9 = tmpvar_8.xyz;
  float4 tmpvar_10;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_10 = (_mtl_u.glstate_matrix_mvp * tmpvar_11);
  float4 texcoord_12;
  texcoord_12.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_13;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_14;
  float3 n_15;
  n_15 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_14 = half3(n_15);
  float3 norm_16;
  norm_16 = float3(tmpvar_1);
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].x;
  v_17.y = _mtl_u.unity_WorldToObject[1].x;
  v_17.z = _mtl_u.unity_WorldToObject[2].x;
  v_17.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].y;
  v_18.y = _mtl_u.unity_WorldToObject[1].y;
  v_18.z = _mtl_u.unity_WorldToObject[2].y;
  v_18.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].z;
  v_19.y = _mtl_u.unity_WorldToObject[1].z;
  v_19.z = _mtl_u.unity_WorldToObject[2].z;
  v_19.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_20);
  tmpvar_7 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_21;
  normal_21 = half3(tmpvar_20);
  half3 ambient_22;
  ambient_22 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_23;
  tmpvar_23 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_23) {
    ambient_22 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_24;
  half4 tmpvar_25;
  tmpvar_25 = (normal_21.xyzz * normal_21.yzzx);
  x1_24.x = dot (_mtl_u.unity_SHBr, tmpvar_25);
  x1_24.y = dot (_mtl_u.unity_SHBg, tmpvar_25);
  x1_24.z = dot (_mtl_u.unity_SHBb, tmpvar_25);
  ambient_22 = (ambient_22 + (x1_24 + (_mtl_u.unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )));
  tmpvar_7.xyz = ambient_22;
  _mtl_o.gl_Position = tmpvar_10;
  _mtl_o.xlv_TEXCOORD0 = texcoord_12;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_14;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat6;
float u_xlat8;
float u_xlat15;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.yzw;
    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    u_xlat10_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat1.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_1.y * _OcclusionStrength + u_xlat1.x;
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat6.xyz : vs_TEXCOORD6.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat1.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat6.x = max(u_xlat6.x, u_xlat3.x);
        u_xlat1.x = min(u_xlat8, u_xlat6.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
        u_xlat4.xyz = u_xlat1.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat1.xyz = u_xlat1.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_1 = texture(unity_ProbeVolumeSH, u_xlat1.xyz);
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat2);
        u_xlat3.y = dot(u_xlat10_4, u_xlat2);
        u_xlat3.z = dot(u_xlat10_1, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat2);
        u_xlat3.y = dot(unity_SHAg, u_xlat2);
        u_xlat3.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat1.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat1.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target3.xyz = exp2((-u_xlat1.xyz));
    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 95 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  mat3 tmpvar_18;
  tmpvar_18[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_18[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_18[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_19;
  tmpvar_19.xyz = normalize((tmpvar_18 * TANGENT.xyz));
  tmpvar_19.w = TANGENT.w;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_20 = tmpvar_19.xyz;
  tmpvar_21 = (((tmpvar_17.yzx * tmpvar_19.zxy) - (tmpvar_17.zxy * tmpvar_19.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_22.x = tmpvar_20.x;
  tmpvar_22.y = tmpvar_21.x;
  tmpvar_22.z = tmpvar_17.x;
  tmpvar_23.x = tmpvar_20.y;
  tmpvar_23.y = tmpvar_21.y;
  tmpvar_23.z = tmpvar_17.y;
  tmpvar_24.x = tmpvar_20.z;
  tmpvar_24.y = tmpvar_21.z;
  tmpvar_24.z = tmpvar_17.z;
  vec3 v_25;
  v_25.x = tmpvar_22.x;
  v_25.y = tmpvar_23.x;
  v_25.z = tmpvar_24.x;
  tmpvar_3.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_22.y;
  v_26.y = tmpvar_23.y;
  v_26.z = tmpvar_24.y;
  tmpvar_4.xyz = v_26;
  vec3 v_27;
  v_27.x = tmpvar_22.z;
  v_27.y = tmpvar_23.z;
  v_27.z = tmpvar_24.z;
  tmpvar_5.xyz = v_27;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_28;
  ambient_28 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_28 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  ambient_28 = (ambient_28 + (x1_29 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_28;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  float tmpvar_3;
  tmpvar_3 = mg_2.y;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_10;
  tmpvar_10 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_11;
  ambient_11 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_12;
  ambient_contrib_12 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_13;
    tmpvar_13.w = 1.0;
    tmpvar_13.xyz = tmpvar_7;
    vec3 x1_14;
    vec3 texCoord_15;
    vec3 tmpvar_16;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_17;
      tmpvar_17.w = 1.0;
      tmpvar_17.xyz = xlv_TEXCOORD6;
      tmpvar_16 = (unity_ProbeVolumeWorldToObject * tmpvar_17).xyz;
    } else {
      tmpvar_16 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_18;
    tmpvar_18 = ((tmpvar_16 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_15.yz = tmpvar_18.yz;
    texCoord_15.x = (tmpvar_18.x * 0.25);
    float tmpvar_19;
    float tmpvar_20;
    tmpvar_20 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_19 = clamp (texCoord_15.x, tmpvar_20, (0.25 - tmpvar_20));
    texCoord_15.x = tmpvar_19;
    vec4 tmpvar_21;
    tmpvar_21 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.25);
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.5);
    x1_14.x = dot (tmpvar_21, tmpvar_13);
    x1_14.y = dot (tmpvar_22, tmpvar_13);
    x1_14.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_15), tmpvar_13);
    ambient_contrib_12 = x1_14;
  } else {
    vec4 tmpvar_23;
    tmpvar_23.w = 1.0;
    tmpvar_23.xyz = tmpvar_7;
    vec3 x_24;
    x_24.x = dot (unity_SHAr, tmpvar_23);
    x_24.y = dot (unity_SHAg, tmpvar_23);
    x_24.z = dot (unity_SHAb, tmpvar_23);
    ambient_contrib_12 = x_24;
  };
  vec3 tmpvar_25;
  tmpvar_25 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_12));
  ambient_11 = tmpvar_25;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_11 = max (((1.055 * 
      pow (max (tmpvar_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_10 = (ambient_11 * tmpvar_9);
  vec3 viewDir_26;
  viewDir_26 = -(tmpvar_8);
  float specularTerm_27;
  float tmpvar_28;
  tmpvar_28 = (1.0 - _Glossiness);
  vec3 inVec_29;
  inVec_29 = (vec3(0.0, 1.0, 0.0) + viewDir_26);
  float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_7, (inVec_29 * 
    inversesqrt(max (0.001, dot (inVec_29, inVec_29)))
  )));
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, viewDir_26));
  float tmpvar_32;
  tmpvar_32 = (tmpvar_28 * tmpvar_28);
  float tmpvar_33;
  tmpvar_33 = (tmpvar_28 * tmpvar_28);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_33 * tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (((tmpvar_30 * tmpvar_30) * (tmpvar_34 - 1.0)) + 1.0);
  float tmpvar_36;
  tmpvar_36 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_31 * (1.0 - tmpvar_32))
     + tmpvar_32)) + (tmpvar_31 * (
      (tmpvar_1 * (1.0 - tmpvar_32))
     + tmpvar_32))) + 1e-05)
  ) * (tmpvar_34 / 
    (((3.141593 * tmpvar_35) * tmpvar_35) + 1e-07)
  )) * 0.7853982);
  specularTerm_27 = tmpvar_36;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_27 = sqrt(max (0.0001, tmpvar_36));
  };
  float tmpvar_37;
  tmpvar_37 = max (0.0, (specularTerm_27 * tmpvar_1));
  specularTerm_27 = tmpvar_37;
  float tmpvar_38;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_38 = 1.0;
  } else {
    tmpvar_38 = 0.0;
  };
  specularTerm_27 = (tmpvar_37 * tmpvar_38);
  vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = (tmpvar_5 * tmpvar_10);
  vec4 tmpvar_40;
  tmpvar_40.xyz = tmpvar_5;
  tmpvar_40.w = tmpvar_9;
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_6;
  tmpvar_41.w = tmpvar_3;
  vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = exp2(-(tmpvar_39.xyz));
  gl_FragData[0] = tmpvar_40;
  gl_FragData[1] = tmpvar_41;
  gl_FragData[2] = tmpvar_42;
  gl_FragData[3] = tmpvar_43;
}


#endif
"
}
SubProgram "metal " {
// Stats: 36 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 306
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
Vector 240 [unity_WorldTransformParams]
VectorHalf 256 [unity_ColorSpaceLuminance] 4
Vector 272 [_MainTex_ST]
Vector 288 [_DetailAlbedoMap_ST]
ScalarHalf 304 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_36;
  normal_36 = half3(tmpvar_22);
  half3 ambient_37;
  ambient_37 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_38;
  tmpvar_38 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_38) {
    ambient_37 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_39;
  half4 tmpvar_40;
  tmpvar_40 = (normal_36.xyzz * normal_36.yzzx);
  x1_39.x = dot (_mtl_u.unity_SHBr, tmpvar_40);
  x1_39.y = dot (_mtl_u.unity_SHBg, tmpvar_40);
  x1_39.z = dot (_mtl_u.unity_SHBb, tmpvar_40);
  ambient_37 = (ambient_37 + (x1_39 + (_mtl_u.unity_SHC.xyz * 
    ((normal_36.x * normal_36.x) - (normal_36.y * normal_36.y))
  )));
  tmpvar_9.xyz = ambient_37;
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat7;
float u_xlat8;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat10_2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_2.y * _OcclusionStrength + u_xlat2.x;
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : vs_TEXCOORD6.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
        u_xlat2.x = min(u_xlat8, u_xlat7.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat1);
        u_xlat3.y = dot(u_xlat10_4, u_xlat1);
        u_xlat3.z = dot(u_xlat10_2, u_xlat1);
    } else {
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat1);
        u_xlat3.y = dot(unity_SHAg, u_xlat1);
        u_xlat3.z = dot(unity_SHAb, u_xlat1);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat2.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    SV_Target3.xyz = exp2((-u_xlat2.xyz));
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 97 math, 6 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  mat3 tmpvar_18;
  tmpvar_18[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_18[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_18[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_19;
  tmpvar_19.xyz = normalize((tmpvar_18 * TANGENT.xyz));
  tmpvar_19.w = TANGENT.w;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_20 = tmpvar_19.xyz;
  tmpvar_21 = (((tmpvar_17.yzx * tmpvar_19.zxy) - (tmpvar_17.zxy * tmpvar_19.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_22.x = tmpvar_20.x;
  tmpvar_22.y = tmpvar_21.x;
  tmpvar_22.z = tmpvar_17.x;
  tmpvar_23.x = tmpvar_20.y;
  tmpvar_23.y = tmpvar_21.y;
  tmpvar_23.z = tmpvar_17.y;
  tmpvar_24.x = tmpvar_20.z;
  tmpvar_24.y = tmpvar_21.z;
  tmpvar_24.z = tmpvar_17.z;
  vec3 v_25;
  v_25.x = tmpvar_22.x;
  v_25.y = tmpvar_23.x;
  v_25.z = tmpvar_24.x;
  tmpvar_3.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_22.y;
  v_26.y = tmpvar_23.y;
  v_26.z = tmpvar_24.y;
  tmpvar_4.xyz = v_26;
  vec3 v_27;
  v_27.x = tmpvar_22.z;
  v_27.y = tmpvar_23.z;
  v_27.z = tmpvar_24.z;
  tmpvar_5.xyz = v_27;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_28;
  ambient_28 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_28 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  ambient_28 = (ambient_28 + (x1_29 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_28;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 color_1;
  float tmpvar_2;
  vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  float tmpvar_4;
  tmpvar_4 = mg_3.y;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  tmpvar_6 = (tmpvar_5 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  tmpvar_2 = max (0.0, tmpvar_8.y);
  float tmpvar_10;
  tmpvar_10 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_12;
  ambient_12 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_13;
  ambient_contrib_13 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_14;
    tmpvar_14.w = 1.0;
    tmpvar_14.xyz = tmpvar_8;
    vec3 x1_15;
    vec3 texCoord_16;
    vec3 tmpvar_17;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_18;
      tmpvar_18.w = 1.0;
      tmpvar_18.xyz = xlv_TEXCOORD6;
      tmpvar_17 = (unity_ProbeVolumeWorldToObject * tmpvar_18).xyz;
    } else {
      tmpvar_17 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_19;
    tmpvar_19 = ((tmpvar_17 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_16.yz = tmpvar_19.yz;
    texCoord_16.x = (tmpvar_19.x * 0.25);
    float tmpvar_20;
    float tmpvar_21;
    tmpvar_21 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_20 = clamp (texCoord_16.x, tmpvar_21, (0.25 - tmpvar_21));
    texCoord_16.x = tmpvar_20;
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.25);
    vec4 tmpvar_23;
    tmpvar_23 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.5);
    x1_15.x = dot (tmpvar_22, tmpvar_14);
    x1_15.y = dot (tmpvar_23, tmpvar_14);
    x1_15.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_16), tmpvar_14);
    ambient_contrib_13 = x1_15;
  } else {
    vec4 tmpvar_24;
    tmpvar_24.w = 1.0;
    tmpvar_24.xyz = tmpvar_8;
    vec3 x_25;
    x_25.x = dot (unity_SHAr, tmpvar_24);
    x_25.y = dot (unity_SHAg, tmpvar_24);
    x_25.z = dot (unity_SHAb, tmpvar_24);
    ambient_contrib_13 = x_25;
  };
  vec3 tmpvar_26;
  tmpvar_26 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_13));
  ambient_12 = tmpvar_26;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_12 = max (((1.055 * 
      pow (max (tmpvar_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_11 = (ambient_12 * tmpvar_10);
  vec3 viewDir_27;
  viewDir_27 = -(tmpvar_9);
  float specularTerm_28;
  float tmpvar_29;
  tmpvar_29 = (1.0 - _Glossiness);
  vec3 inVec_30;
  inVec_30 = (vec3(0.0, 1.0, 0.0) + viewDir_27);
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_8, (inVec_30 * 
    inversesqrt(max (0.001, dot (inVec_30, inVec_30)))
  )));
  float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_8, viewDir_27));
  float tmpvar_33;
  tmpvar_33 = (tmpvar_29 * tmpvar_29);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_29 * tmpvar_29);
  float tmpvar_35;
  tmpvar_35 = (tmpvar_34 * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (((tmpvar_31 * tmpvar_31) * (tmpvar_35 - 1.0)) + 1.0);
  float tmpvar_37;
  tmpvar_37 = (((2.0 / 
    (((tmpvar_2 * (
      (tmpvar_32 * (1.0 - tmpvar_33))
     + tmpvar_33)) + (tmpvar_32 * (
      (tmpvar_2 * (1.0 - tmpvar_33))
     + tmpvar_33))) + 1e-05)
  ) * (tmpvar_35 / 
    (((3.141593 * tmpvar_36) * tmpvar_36) + 1e-07)
  )) * 0.7853982);
  specularTerm_28 = tmpvar_37;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_28 = sqrt(max (0.0001, tmpvar_37));
  };
  float tmpvar_38;
  tmpvar_38 = max (0.0, (specularTerm_28 * tmpvar_2));
  specularTerm_28 = tmpvar_38;
  float tmpvar_39;
  if (any(bvec3(tmpvar_7))) {
    tmpvar_39 = 1.0;
  } else {
    tmpvar_39 = 0.0;
  };
  specularTerm_28 = (tmpvar_38 * tmpvar_39);
  vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = (tmpvar_6 * tmpvar_11);
  color_1 = (tmpvar_40.xyz + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  color_1 = exp2(-(color_1));
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_6;
  tmpvar_41.w = tmpvar_10;
  vec4 tmpvar_42;
  tmpvar_42.xyz = tmpvar_7;
  tmpvar_42.w = tmpvar_4;
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = ((tmpvar_8 * 0.5) + 0.5);
  vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = color_1;
  gl_FragData[0] = tmpvar_41;
  gl_FragData[1] = tmpvar_42;
  gl_FragData[2] = tmpvar_43;
  gl_FragData[3] = tmpvar_44;
}


#endif
"
}
SubProgram "metal " {
// Stats: 36 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 306
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
Vector 240 [unity_WorldTransformParams]
VectorHalf 256 [unity_ColorSpaceLuminance] 4
Vector 272 [_MainTex_ST]
Vector 288 [_DetailAlbedoMap_ST]
ScalarHalf 304 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_36;
  normal_36 = half3(tmpvar_22);
  half3 ambient_37;
  ambient_37 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_38;
  tmpvar_38 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_38) {
    ambient_37 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_39;
  half4 tmpvar_40;
  tmpvar_40 = (normal_36.xyzz * normal_36.yzzx);
  x1_39.x = dot (_mtl_u.unity_SHBr, tmpvar_40);
  x1_39.y = dot (_mtl_u.unity_SHBg, tmpvar_40);
  x1_39.z = dot (_mtl_u.unity_SHBb, tmpvar_40);
  ambient_37 = (ambient_37 + (x1_39 + (_mtl_u.unity_SHC.xyz * 
    ((normal_36.x * normal_36.x) - (normal_36.y * normal_36.y))
  )));
  tmpvar_9.xyz = ambient_37;
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat7;
float u_xlat8;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat10_2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_2.y * _OcclusionStrength + u_xlat2.x;
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : vs_TEXCOORD6.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
        u_xlat2.x = min(u_xlat8, u_xlat7.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat1);
        u_xlat3.y = dot(u_xlat10_4, u_xlat1);
        u_xlat3.z = dot(u_xlat10_2, u_xlat1);
    } else {
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat1);
        u_xlat3.y = dot(unity_SHAg, u_xlat1);
        u_xlat3.z = dot(unity_SHAb, u_xlat1);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat2.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
    u_xlat10_3 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
    SV_Target3.xyz = exp2((-u_xlat2.xyz));
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 97 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  mat3 tmpvar_18;
  tmpvar_18[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_18[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_18[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_19;
  tmpvar_19.xyz = normalize((tmpvar_18 * TANGENT.xyz));
  tmpvar_19.w = TANGENT.w;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_20 = tmpvar_19.xyz;
  tmpvar_21 = (((tmpvar_17.yzx * tmpvar_19.zxy) - (tmpvar_17.zxy * tmpvar_19.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_22.x = tmpvar_20.x;
  tmpvar_22.y = tmpvar_21.x;
  tmpvar_22.z = tmpvar_17.x;
  tmpvar_23.x = tmpvar_20.y;
  tmpvar_23.y = tmpvar_21.y;
  tmpvar_23.z = tmpvar_17.y;
  tmpvar_24.x = tmpvar_20.z;
  tmpvar_24.y = tmpvar_21.z;
  tmpvar_24.z = tmpvar_17.z;
  vec3 v_25;
  v_25.x = tmpvar_22.x;
  v_25.y = tmpvar_23.x;
  v_25.z = tmpvar_24.x;
  tmpvar_3.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_22.y;
  v_26.y = tmpvar_23.y;
  v_26.z = tmpvar_24.y;
  tmpvar_4.xyz = v_26;
  vec3 v_27;
  v_27.x = tmpvar_22.z;
  v_27.y = tmpvar_23.z;
  v_27.z = tmpvar_24.z;
  tmpvar_5.xyz = v_27;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_28;
  ambient_28 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_28 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  ambient_28 = (ambient_28 + (x1_29 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_28;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  float tmpvar_4;
  tmpvar_4 = mg_3.y;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_9;
  diffColor_9 = ((tmpvar_5 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) * (tmpvar_2.w * _Color.w));
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_10;
  tmpvar_10 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_12;
  ambient_12 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_13;
  ambient_contrib_13 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_14;
    tmpvar_14.w = 1.0;
    tmpvar_14.xyz = tmpvar_7;
    vec3 x1_15;
    vec3 texCoord_16;
    vec3 tmpvar_17;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_18;
      tmpvar_18.w = 1.0;
      tmpvar_18.xyz = xlv_TEXCOORD6;
      tmpvar_17 = (unity_ProbeVolumeWorldToObject * tmpvar_18).xyz;
    } else {
      tmpvar_17 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_19;
    tmpvar_19 = ((tmpvar_17 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_16.yz = tmpvar_19.yz;
    texCoord_16.x = (tmpvar_19.x * 0.25);
    float tmpvar_20;
    float tmpvar_21;
    tmpvar_21 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_20 = clamp (texCoord_16.x, tmpvar_21, (0.25 - tmpvar_21));
    texCoord_16.x = tmpvar_20;
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.25);
    vec4 tmpvar_23;
    tmpvar_23 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.5);
    x1_15.x = dot (tmpvar_22, tmpvar_14);
    x1_15.y = dot (tmpvar_23, tmpvar_14);
    x1_15.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_16), tmpvar_14);
    ambient_contrib_13 = x1_15;
  } else {
    vec4 tmpvar_24;
    tmpvar_24.w = 1.0;
    tmpvar_24.xyz = tmpvar_7;
    vec3 x_25;
    x_25.x = dot (unity_SHAr, tmpvar_24);
    x_25.y = dot (unity_SHAg, tmpvar_24);
    x_25.z = dot (unity_SHAb, tmpvar_24);
    ambient_contrib_13 = x_25;
  };
  vec3 tmpvar_26;
  tmpvar_26 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_13));
  ambient_12 = tmpvar_26;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_12 = max (((1.055 * 
      pow (max (tmpvar_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_11 = (ambient_12 * tmpvar_10);
  vec3 viewDir_27;
  viewDir_27 = -(tmpvar_8);
  float specularTerm_28;
  float tmpvar_29;
  tmpvar_29 = (1.0 - _Glossiness);
  vec3 inVec_30;
  inVec_30 = (vec3(0.0, 1.0, 0.0) + viewDir_27);
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, (inVec_30 * 
    inversesqrt(max (0.001, dot (inVec_30, inVec_30)))
  )));
  float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_7, viewDir_27));
  float tmpvar_33;
  tmpvar_33 = (tmpvar_29 * tmpvar_29);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_29 * tmpvar_29);
  float tmpvar_35;
  tmpvar_35 = (tmpvar_34 * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (((tmpvar_31 * tmpvar_31) * (tmpvar_35 - 1.0)) + 1.0);
  float tmpvar_37;
  tmpvar_37 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_32 * (1.0 - tmpvar_33))
     + tmpvar_33)) + (tmpvar_32 * (
      (tmpvar_1 * (1.0 - tmpvar_33))
     + tmpvar_33))) + 1e-05)
  ) * (tmpvar_35 / 
    (((3.141593 * tmpvar_36) * tmpvar_36) + 1e-07)
  )) * 0.7853982);
  specularTerm_28 = tmpvar_37;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_28 = sqrt(max (0.0001, tmpvar_37));
  };
  float tmpvar_38;
  tmpvar_38 = max (0.0, (specularTerm_28 * tmpvar_1));
  specularTerm_28 = tmpvar_38;
  float tmpvar_39;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_39 = 1.0;
  } else {
    tmpvar_39 = 0.0;
  };
  specularTerm_28 = (tmpvar_38 * tmpvar_39);
  vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = (diffColor_9 * tmpvar_11);
  vec4 tmpvar_41;
  tmpvar_41.xyz = diffColor_9;
  tmpvar_41.w = tmpvar_10;
  vec4 tmpvar_42;
  tmpvar_42.xyz = tmpvar_6;
  tmpvar_42.w = tmpvar_4;
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = exp2(-(tmpvar_40.xyz));
  gl_FragData[0] = tmpvar_41;
  gl_FragData[1] = tmpvar_42;
  gl_FragData[2] = tmpvar_43;
  gl_FragData[3] = tmpvar_44;
}


#endif
"
}
SubProgram "metal " {
// Stats: 36 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 306
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
Vector 240 [unity_WorldTransformParams]
VectorHalf 256 [unity_ColorSpaceLuminance] 4
Vector 272 [_MainTex_ST]
Vector 288 [_DetailAlbedoMap_ST]
ScalarHalf 304 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_36;
  normal_36 = half3(tmpvar_22);
  half3 ambient_37;
  ambient_37 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_38;
  tmpvar_38 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_38) {
    ambient_37 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_39;
  half4 tmpvar_40;
  tmpvar_40 = (normal_36.xyzz * normal_36.yzzx);
  x1_39.x = dot (_mtl_u.unity_SHBr, tmpvar_40);
  x1_39.y = dot (_mtl_u.unity_SHBg, tmpvar_40);
  x1_39.z = dot (_mtl_u.unity_SHBb, tmpvar_40);
  ambient_37 = (ambient_37 + (x1_39 + (_mtl_u.unity_SHC.xyz * 
    ((normal_36.x * normal_36.x) - (normal_36.y * normal_36.y))
  )));
  tmpvar_9.xyz = ambient_37;
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat6;
float u_xlat8;
float u_xlat15;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.yzw;
    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    u_xlat10_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat1.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_1.y * _OcclusionStrength + u_xlat1.x;
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat6.xyz : vs_TEXCOORD6.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat1.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat6.x = max(u_xlat6.x, u_xlat3.x);
        u_xlat1.x = min(u_xlat8, u_xlat6.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
        u_xlat4.xyz = u_xlat1.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat1.xyz = u_xlat1.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_1 = texture(unity_ProbeVolumeSH, u_xlat1.xyz);
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat2);
        u_xlat3.y = dot(u_xlat10_4, u_xlat2);
        u_xlat3.z = dot(u_xlat10_1, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat2);
        u_xlat3.y = dot(unity_SHAg, u_xlat2);
        u_xlat3.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat1.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat1.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target3.xyz = exp2((-u_xlat1.xyz));
    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 74 math, 4 textures, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_18;
  tmpvar_18.xyz = normalize((tmpvar_17 * TANGENT.xyz));
  tmpvar_18.w = TANGENT.w;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_19 = tmpvar_18.xyz;
  tmpvar_20 = (((tmpvar_16.yzx * tmpvar_18.zxy) - (tmpvar_16.zxy * tmpvar_18.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_16.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_16.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_16.z;
  vec3 v_24;
  v_24.x = tmpvar_21.x;
  v_24.y = tmpvar_22.x;
  v_24.z = tmpvar_23.x;
  tmpvar_3.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_21.y;
  v_25.y = tmpvar_22.y;
  v_25.z = tmpvar_23.y;
  tmpvar_4.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_21.z;
  v_26.y = tmpvar_22.z;
  v_26.z = tmpvar_23.z;
  tmpvar_5.xyz = v_26;
  tmpvar_6.xy = vec2(0.0, 0.0);
  tmpvar_6.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  float tmpvar_1;
  vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  float tmpvar_3;
  tmpvar_3 = mg_2.y;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_9 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_10.w) * tmpvar_10.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_7, (tmpvar_11.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_11.w));
  tmpvar_9 = (tmpvar_9 * tmpvar_8);
  vec3 viewDir_12;
  viewDir_12 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_13;
  float tmpvar_14;
  tmpvar_14 = (1.0 - _Glossiness);
  vec3 inVec_15;
  inVec_15 = (vec3(0.0, 1.0, 0.0) + viewDir_12);
  float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_7, (inVec_15 * 
    inversesqrt(max (0.001, dot (inVec_15, inVec_15)))
  )));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_7, viewDir_12));
  float tmpvar_18;
  tmpvar_18 = (tmpvar_14 * tmpvar_14);
  float tmpvar_19;
  tmpvar_19 = (tmpvar_14 * tmpvar_14);
  float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = (((tmpvar_16 * tmpvar_16) * (tmpvar_20 - 1.0)) + 1.0);
  float tmpvar_22;
  tmpvar_22 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_17 * (1.0 - tmpvar_18))
     + tmpvar_18)) + (tmpvar_17 * (
      (tmpvar_1 * (1.0 - tmpvar_18))
     + tmpvar_18))) + 1e-05)
  ) * (tmpvar_20 / 
    (((3.141593 * tmpvar_21) * tmpvar_21) + 1e-07)
  )) * 0.7853982);
  specularTerm_13 = tmpvar_22;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_13 = sqrt(max (0.0001, tmpvar_22));
  };
  float tmpvar_23;
  tmpvar_23 = max (0.0, (specularTerm_13 * tmpvar_1));
  specularTerm_13 = tmpvar_23;
  float tmpvar_24;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_24 = 1.0;
  } else {
    tmpvar_24 = 0.0;
  };
  specularTerm_13 = (tmpvar_23 * tmpvar_24);
  vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = (tmpvar_5 * tmpvar_9);
  vec4 tmpvar_26;
  tmpvar_26.xyz = tmpvar_5;
  tmpvar_26.w = tmpvar_8;
  vec4 tmpvar_27;
  tmpvar_27.xyz = tmpvar_6;
  tmpvar_27.w = tmpvar_3;
  vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = exp2(-(tmpvar_25.xyz));
  gl_FragData[0] = tmpvar_26;
  gl_FragData[1] = tmpvar_27;
  gl_FragData[2] = tmpvar_28;
  gl_FragData[3] = tmpvar_29;
}


#endif
"
}
SubProgram "metal " {
// Stats: 25 math, 1 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 274
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Matrix 144 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [unity_WorldTransformParams]
Vector 224 [unity_DynamicLightmapST]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9.xy = half2(float2(0.0, 0.0));
  tmpvar_9.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat4;
mediump float u_xlat16_10;
void main()
{
    u_xlat10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat0.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_0.y * _OcclusionStrength + u_xlat0.x;
    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat2.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    u_xlat10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_2.xyz = u_xlat10_2.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_10 = max(u_xlat10_2.w, 9.99999975e-05);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat4.x = u_xlat10_2.w * unity_DynamicLightmap_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat4.xxx;
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_10);
    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target3.xyz = exp2((-u_xlat0.xyz));
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 76 math, 5 textures, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_18;
  tmpvar_18.xyz = normalize((tmpvar_17 * TANGENT.xyz));
  tmpvar_18.w = TANGENT.w;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_19 = tmpvar_18.xyz;
  tmpvar_20 = (((tmpvar_16.yzx * tmpvar_18.zxy) - (tmpvar_16.zxy * tmpvar_18.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_16.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_16.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_16.z;
  vec3 v_24;
  v_24.x = tmpvar_21.x;
  v_24.y = tmpvar_22.x;
  v_24.z = tmpvar_23.x;
  tmpvar_3.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_21.y;
  v_25.y = tmpvar_22.y;
  v_25.z = tmpvar_23.y;
  tmpvar_4.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_21.z;
  v_26.y = tmpvar_22.z;
  v_26.z = tmpvar_23.z;
  tmpvar_5.xyz = v_26;
  tmpvar_6.xy = vec2(0.0, 0.0);
  tmpvar_6.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 color_1;
  float tmpvar_2;
  vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  float tmpvar_4;
  tmpvar_4 = mg_3.y;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  tmpvar_6 = (tmpvar_5 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  tmpvar_2 = max (0.0, tmpvar_8.y);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_10;
  vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_10 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_11.w) * tmpvar_11.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_8, (tmpvar_12.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_12.w));
  tmpvar_10 = (tmpvar_10 * tmpvar_9);
  vec3 viewDir_13;
  viewDir_13 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_14;
  float tmpvar_15;
  tmpvar_15 = (1.0 - _Glossiness);
  vec3 inVec_16;
  inVec_16 = (vec3(0.0, 1.0, 0.0) + viewDir_13);
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_8, (inVec_16 * 
    inversesqrt(max (0.001, dot (inVec_16, inVec_16)))
  )));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_8, viewDir_13));
  float tmpvar_19;
  tmpvar_19 = (tmpvar_15 * tmpvar_15);
  float tmpvar_20;
  tmpvar_20 = (tmpvar_15 * tmpvar_15);
  float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  float tmpvar_22;
  tmpvar_22 = (((tmpvar_17 * tmpvar_17) * (tmpvar_21 - 1.0)) + 1.0);
  float tmpvar_23;
  tmpvar_23 = (((2.0 / 
    (((tmpvar_2 * (
      (tmpvar_18 * (1.0 - tmpvar_19))
     + tmpvar_19)) + (tmpvar_18 * (
      (tmpvar_2 * (1.0 - tmpvar_19))
     + tmpvar_19))) + 1e-05)
  ) * (tmpvar_21 / 
    (((3.141593 * tmpvar_22) * tmpvar_22) + 1e-07)
  )) * 0.7853982);
  specularTerm_14 = tmpvar_23;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_14 = sqrt(max (0.0001, tmpvar_23));
  };
  float tmpvar_24;
  tmpvar_24 = max (0.0, (specularTerm_14 * tmpvar_2));
  specularTerm_14 = tmpvar_24;
  float tmpvar_25;
  if (any(bvec3(tmpvar_7))) {
    tmpvar_25 = 1.0;
  } else {
    tmpvar_25 = 0.0;
  };
  specularTerm_14 = (tmpvar_24 * tmpvar_25);
  vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (tmpvar_6 * tmpvar_10);
  color_1 = (tmpvar_26.xyz + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  color_1 = exp2(-(color_1));
  vec4 tmpvar_27;
  tmpvar_27.xyz = tmpvar_6;
  tmpvar_27.w = tmpvar_9;
  vec4 tmpvar_28;
  tmpvar_28.xyz = tmpvar_7;
  tmpvar_28.w = tmpvar_4;
  vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = ((tmpvar_8 * 0.5) + 0.5);
  vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = color_1;
  gl_FragData[0] = tmpvar_27;
  gl_FragData[1] = tmpvar_28;
  gl_FragData[2] = tmpvar_29;
  gl_FragData[3] = tmpvar_30;
}


#endif
"
}
SubProgram "metal " {
// Stats: 25 math, 1 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 274
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Matrix 144 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [unity_WorldTransformParams]
Vector 224 [unity_DynamicLightmapST]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9.xy = half2(float2(0.0, 0.0));
  tmpvar_9.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat4;
mediump float u_xlat16_10;
void main()
{
    u_xlat10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat0.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_0.y * _OcclusionStrength + u_xlat0.x;
    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat2.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    u_xlat10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_2.xyz = u_xlat10_2.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_10 = max(u_xlat10_2.w, 9.99999975e-05);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat4.x = u_xlat10_2.w * unity_DynamicLightmap_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat4.xxx;
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_10);
    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
    u_xlat10_2 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
    SV_Target3.xyz = exp2((-u_xlat0.xyz));
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 76 math, 4 textures, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_18;
  tmpvar_18.xyz = normalize((tmpvar_17 * TANGENT.xyz));
  tmpvar_18.w = TANGENT.w;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_19 = tmpvar_18.xyz;
  tmpvar_20 = (((tmpvar_16.yzx * tmpvar_18.zxy) - (tmpvar_16.zxy * tmpvar_18.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_16.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_16.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_16.z;
  vec3 v_24;
  v_24.x = tmpvar_21.x;
  v_24.y = tmpvar_22.x;
  v_24.z = tmpvar_23.x;
  tmpvar_3.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_21.y;
  v_25.y = tmpvar_22.y;
  v_25.z = tmpvar_23.y;
  tmpvar_4.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_21.z;
  v_26.y = tmpvar_22.z;
  v_26.z = tmpvar_23.z;
  tmpvar_5.xyz = v_26;
  tmpvar_6.xy = vec2(0.0, 0.0);
  tmpvar_6.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  float tmpvar_4;
  tmpvar_4 = mg_3.y;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_8;
  diffColor_8 = ((tmpvar_5 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) * (tmpvar_2.w * _Color.w));
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_10;
  vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_10 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_11.w) * tmpvar_11.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_7, (tmpvar_12.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_12.w));
  tmpvar_10 = (tmpvar_10 * tmpvar_9);
  vec3 viewDir_13;
  viewDir_13 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_14;
  float tmpvar_15;
  tmpvar_15 = (1.0 - _Glossiness);
  vec3 inVec_16;
  inVec_16 = (vec3(0.0, 1.0, 0.0) + viewDir_13);
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_7, (inVec_16 * 
    inversesqrt(max (0.001, dot (inVec_16, inVec_16)))
  )));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_7, viewDir_13));
  float tmpvar_19;
  tmpvar_19 = (tmpvar_15 * tmpvar_15);
  float tmpvar_20;
  tmpvar_20 = (tmpvar_15 * tmpvar_15);
  float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  float tmpvar_22;
  tmpvar_22 = (((tmpvar_17 * tmpvar_17) * (tmpvar_21 - 1.0)) + 1.0);
  float tmpvar_23;
  tmpvar_23 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_18 * (1.0 - tmpvar_19))
     + tmpvar_19)) + (tmpvar_18 * (
      (tmpvar_1 * (1.0 - tmpvar_19))
     + tmpvar_19))) + 1e-05)
  ) * (tmpvar_21 / 
    (((3.141593 * tmpvar_22) * tmpvar_22) + 1e-07)
  )) * 0.7853982);
  specularTerm_14 = tmpvar_23;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_14 = sqrt(max (0.0001, tmpvar_23));
  };
  float tmpvar_24;
  tmpvar_24 = max (0.0, (specularTerm_14 * tmpvar_1));
  specularTerm_14 = tmpvar_24;
  float tmpvar_25;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_25 = 1.0;
  } else {
    tmpvar_25 = 0.0;
  };
  specularTerm_14 = (tmpvar_24 * tmpvar_25);
  vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (diffColor_8 * tmpvar_10);
  vec4 tmpvar_27;
  tmpvar_27.xyz = diffColor_8;
  tmpvar_27.w = tmpvar_9;
  vec4 tmpvar_28;
  tmpvar_28.xyz = tmpvar_6;
  tmpvar_28.w = tmpvar_4;
  vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = exp2(-(tmpvar_26.xyz));
  gl_FragData[0] = tmpvar_27;
  gl_FragData[1] = tmpvar_28;
  gl_FragData[2] = tmpvar_29;
  gl_FragData[3] = tmpvar_30;
}


#endif
"
}
SubProgram "metal " {
// Stats: 25 math, 1 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 274
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Matrix 144 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [unity_WorldTransformParams]
Vector 224 [unity_DynamicLightmapST]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9.xy = half2(float2(0.0, 0.0));
  tmpvar_9.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
float u_xlat4;
mediump float u_xlat16_10;
void main()
{
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = u_xlat10_1.wxyz * _Color.wxyz;
    u_xlat3.xyz = u_xlat10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.yzw;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;
    u_xlat10_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat1.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_1.y * _OcclusionStrength + u_xlat1.x;
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    u_xlat10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_2.xyz = u_xlat10_2.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_10 = max(u_xlat10_2.w, 9.99999975e-05);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat4 = u_xlat10_2.w * unity_DynamicLightmap_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat4);
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_10);
    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target3.xyz = exp2((-u_xlat0.xyz));
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 95 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  mat3 tmpvar_18;
  tmpvar_18[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_18[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_18[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_19;
  tmpvar_19.xyz = normalize((tmpvar_18 * TANGENT.xyz));
  tmpvar_19.w = TANGENT.w;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_20 = tmpvar_19.xyz;
  tmpvar_21 = (((tmpvar_17.yzx * tmpvar_19.zxy) - (tmpvar_17.zxy * tmpvar_19.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_22.x = tmpvar_20.x;
  tmpvar_22.y = tmpvar_21.x;
  tmpvar_22.z = tmpvar_17.x;
  tmpvar_23.x = tmpvar_20.y;
  tmpvar_23.y = tmpvar_21.y;
  tmpvar_23.z = tmpvar_17.y;
  tmpvar_24.x = tmpvar_20.z;
  tmpvar_24.y = tmpvar_21.z;
  tmpvar_24.z = tmpvar_17.z;
  vec3 v_25;
  v_25.x = tmpvar_22.x;
  v_25.y = tmpvar_23.x;
  v_25.z = tmpvar_24.x;
  tmpvar_3.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_22.y;
  v_26.y = tmpvar_23.y;
  v_26.z = tmpvar_24.y;
  tmpvar_4.xyz = v_26;
  vec3 v_27;
  v_27.x = tmpvar_22.z;
  v_27.y = tmpvar_23.z;
  v_27.z = tmpvar_24.z;
  tmpvar_5.xyz = v_27;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_28;
  ambient_28 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_28 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  ambient_28 = (ambient_28 + (x1_29 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_28;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  float tmpvar_3;
  tmpvar_3 = mg_2.y;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_10;
  tmpvar_10 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_11;
  ambient_11 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_12;
  ambient_contrib_12 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_13;
    tmpvar_13.w = 1.0;
    tmpvar_13.xyz = tmpvar_7;
    vec3 x1_14;
    vec3 texCoord_15;
    vec3 tmpvar_16;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_17;
      tmpvar_17.w = 1.0;
      tmpvar_17.xyz = xlv_TEXCOORD6;
      tmpvar_16 = (unity_ProbeVolumeWorldToObject * tmpvar_17).xyz;
    } else {
      tmpvar_16 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_18;
    tmpvar_18 = ((tmpvar_16 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_15.yz = tmpvar_18.yz;
    texCoord_15.x = (tmpvar_18.x * 0.25);
    float tmpvar_19;
    float tmpvar_20;
    tmpvar_20 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_19 = clamp (texCoord_15.x, tmpvar_20, (0.25 - tmpvar_20));
    texCoord_15.x = tmpvar_19;
    vec4 tmpvar_21;
    tmpvar_21 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.25);
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.5);
    x1_14.x = dot (tmpvar_21, tmpvar_13);
    x1_14.y = dot (tmpvar_22, tmpvar_13);
    x1_14.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_15), tmpvar_13);
    ambient_contrib_12 = x1_14;
  } else {
    vec4 tmpvar_23;
    tmpvar_23.w = 1.0;
    tmpvar_23.xyz = tmpvar_7;
    vec3 x_24;
    x_24.x = dot (unity_SHAr, tmpvar_23);
    x_24.y = dot (unity_SHAg, tmpvar_23);
    x_24.z = dot (unity_SHAb, tmpvar_23);
    ambient_contrib_12 = x_24;
  };
  vec3 tmpvar_25;
  tmpvar_25 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_12));
  ambient_11 = tmpvar_25;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_11 = max (((1.055 * 
      pow (max (tmpvar_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_10 = (ambient_11 * tmpvar_9);
  vec3 viewDir_26;
  viewDir_26 = -(tmpvar_8);
  float specularTerm_27;
  float tmpvar_28;
  tmpvar_28 = (1.0 - _Glossiness);
  vec3 inVec_29;
  inVec_29 = (vec3(0.0, 1.0, 0.0) + viewDir_26);
  float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_7, (inVec_29 * 
    inversesqrt(max (0.001, dot (inVec_29, inVec_29)))
  )));
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, viewDir_26));
  float tmpvar_32;
  tmpvar_32 = (tmpvar_28 * tmpvar_28);
  float tmpvar_33;
  tmpvar_33 = (tmpvar_28 * tmpvar_28);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_33 * tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (((tmpvar_30 * tmpvar_30) * (tmpvar_34 - 1.0)) + 1.0);
  float tmpvar_36;
  tmpvar_36 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_31 * (1.0 - tmpvar_32))
     + tmpvar_32)) + (tmpvar_31 * (
      (tmpvar_1 * (1.0 - tmpvar_32))
     + tmpvar_32))) + 1e-05)
  ) * (tmpvar_34 / 
    (((3.141593 * tmpvar_35) * tmpvar_35) + 1e-07)
  )) * 0.7853982);
  specularTerm_27 = tmpvar_36;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_27 = sqrt(max (0.0001, tmpvar_36));
  };
  float tmpvar_37;
  tmpvar_37 = max (0.0, (specularTerm_27 * tmpvar_1));
  specularTerm_27 = tmpvar_37;
  float tmpvar_38;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_38 = 1.0;
  } else {
    tmpvar_38 = 0.0;
  };
  specularTerm_27 = (tmpvar_37 * tmpvar_38);
  vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = (tmpvar_5 * tmpvar_10);
  vec4 tmpvar_40;
  tmpvar_40.xyz = tmpvar_5;
  tmpvar_40.w = tmpvar_9;
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_6;
  tmpvar_41.w = tmpvar_3;
  vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = exp2(-(tmpvar_39.xyz));
  gl_FragData[0] = tmpvar_40;
  gl_FragData[1] = tmpvar_41;
  gl_FragData[2] = tmpvar_42;
  gl_FragData[3] = tmpvar_43;
}


#endif
"
}
SubProgram "metal " {
// Stats: 36 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 306
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
Vector 240 [unity_WorldTransformParams]
VectorHalf 256 [unity_ColorSpaceLuminance] 4
Vector 272 [_MainTex_ST]
Vector 288 [_DetailAlbedoMap_ST]
ScalarHalf 304 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_36;
  normal_36 = half3(tmpvar_22);
  half3 ambient_37;
  ambient_37 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_38;
  tmpvar_38 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_38) {
    ambient_37 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_39;
  half4 tmpvar_40;
  tmpvar_40 = (normal_36.xyzz * normal_36.yzzx);
  x1_39.x = dot (_mtl_u.unity_SHBr, tmpvar_40);
  x1_39.y = dot (_mtl_u.unity_SHBg, tmpvar_40);
  x1_39.z = dot (_mtl_u.unity_SHBb, tmpvar_40);
  ambient_37 = (ambient_37 + (x1_39 + (_mtl_u.unity_SHC.xyz * 
    ((normal_36.x * normal_36.x) - (normal_36.y * normal_36.y))
  )));
  tmpvar_9.xyz = ambient_37;
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat7;
float u_xlat8;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat10_2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_2.y * _OcclusionStrength + u_xlat2.x;
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : vs_TEXCOORD6.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
        u_xlat2.x = min(u_xlat8, u_xlat7.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat1);
        u_xlat3.y = dot(u_xlat10_4, u_xlat1);
        u_xlat3.z = dot(u_xlat10_2, u_xlat1);
    } else {
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat1);
        u_xlat3.y = dot(unity_SHAg, u_xlat1);
        u_xlat3.z = dot(unity_SHAb, u_xlat1);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat2.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    SV_Target3.xyz = exp2((-u_xlat2.xyz));
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 97 math, 6 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  mat3 tmpvar_18;
  tmpvar_18[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_18[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_18[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_19;
  tmpvar_19.xyz = normalize((tmpvar_18 * TANGENT.xyz));
  tmpvar_19.w = TANGENT.w;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_20 = tmpvar_19.xyz;
  tmpvar_21 = (((tmpvar_17.yzx * tmpvar_19.zxy) - (tmpvar_17.zxy * tmpvar_19.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_22.x = tmpvar_20.x;
  tmpvar_22.y = tmpvar_21.x;
  tmpvar_22.z = tmpvar_17.x;
  tmpvar_23.x = tmpvar_20.y;
  tmpvar_23.y = tmpvar_21.y;
  tmpvar_23.z = tmpvar_17.y;
  tmpvar_24.x = tmpvar_20.z;
  tmpvar_24.y = tmpvar_21.z;
  tmpvar_24.z = tmpvar_17.z;
  vec3 v_25;
  v_25.x = tmpvar_22.x;
  v_25.y = tmpvar_23.x;
  v_25.z = tmpvar_24.x;
  tmpvar_3.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_22.y;
  v_26.y = tmpvar_23.y;
  v_26.z = tmpvar_24.y;
  tmpvar_4.xyz = v_26;
  vec3 v_27;
  v_27.x = tmpvar_22.z;
  v_27.y = tmpvar_23.z;
  v_27.z = tmpvar_24.z;
  tmpvar_5.xyz = v_27;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_28;
  ambient_28 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_28 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  ambient_28 = (ambient_28 + (x1_29 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_28;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 color_1;
  float tmpvar_2;
  vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  float tmpvar_4;
  tmpvar_4 = mg_3.y;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  tmpvar_6 = (tmpvar_5 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  tmpvar_2 = max (0.0, tmpvar_8.y);
  float tmpvar_10;
  tmpvar_10 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_12;
  ambient_12 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_13;
  ambient_contrib_13 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_14;
    tmpvar_14.w = 1.0;
    tmpvar_14.xyz = tmpvar_8;
    vec3 x1_15;
    vec3 texCoord_16;
    vec3 tmpvar_17;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_18;
      tmpvar_18.w = 1.0;
      tmpvar_18.xyz = xlv_TEXCOORD6;
      tmpvar_17 = (unity_ProbeVolumeWorldToObject * tmpvar_18).xyz;
    } else {
      tmpvar_17 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_19;
    tmpvar_19 = ((tmpvar_17 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_16.yz = tmpvar_19.yz;
    texCoord_16.x = (tmpvar_19.x * 0.25);
    float tmpvar_20;
    float tmpvar_21;
    tmpvar_21 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_20 = clamp (texCoord_16.x, tmpvar_21, (0.25 - tmpvar_21));
    texCoord_16.x = tmpvar_20;
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.25);
    vec4 tmpvar_23;
    tmpvar_23 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.5);
    x1_15.x = dot (tmpvar_22, tmpvar_14);
    x1_15.y = dot (tmpvar_23, tmpvar_14);
    x1_15.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_16), tmpvar_14);
    ambient_contrib_13 = x1_15;
  } else {
    vec4 tmpvar_24;
    tmpvar_24.w = 1.0;
    tmpvar_24.xyz = tmpvar_8;
    vec3 x_25;
    x_25.x = dot (unity_SHAr, tmpvar_24);
    x_25.y = dot (unity_SHAg, tmpvar_24);
    x_25.z = dot (unity_SHAb, tmpvar_24);
    ambient_contrib_13 = x_25;
  };
  vec3 tmpvar_26;
  tmpvar_26 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_13));
  ambient_12 = tmpvar_26;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_12 = max (((1.055 * 
      pow (max (tmpvar_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_11 = (ambient_12 * tmpvar_10);
  vec3 viewDir_27;
  viewDir_27 = -(tmpvar_9);
  float specularTerm_28;
  float tmpvar_29;
  tmpvar_29 = (1.0 - _Glossiness);
  vec3 inVec_30;
  inVec_30 = (vec3(0.0, 1.0, 0.0) + viewDir_27);
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_8, (inVec_30 * 
    inversesqrt(max (0.001, dot (inVec_30, inVec_30)))
  )));
  float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_8, viewDir_27));
  float tmpvar_33;
  tmpvar_33 = (tmpvar_29 * tmpvar_29);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_29 * tmpvar_29);
  float tmpvar_35;
  tmpvar_35 = (tmpvar_34 * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (((tmpvar_31 * tmpvar_31) * (tmpvar_35 - 1.0)) + 1.0);
  float tmpvar_37;
  tmpvar_37 = (((2.0 / 
    (((tmpvar_2 * (
      (tmpvar_32 * (1.0 - tmpvar_33))
     + tmpvar_33)) + (tmpvar_32 * (
      (tmpvar_2 * (1.0 - tmpvar_33))
     + tmpvar_33))) + 1e-05)
  ) * (tmpvar_35 / 
    (((3.141593 * tmpvar_36) * tmpvar_36) + 1e-07)
  )) * 0.7853982);
  specularTerm_28 = tmpvar_37;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_28 = sqrt(max (0.0001, tmpvar_37));
  };
  float tmpvar_38;
  tmpvar_38 = max (0.0, (specularTerm_28 * tmpvar_2));
  specularTerm_28 = tmpvar_38;
  float tmpvar_39;
  if (any(bvec3(tmpvar_7))) {
    tmpvar_39 = 1.0;
  } else {
    tmpvar_39 = 0.0;
  };
  specularTerm_28 = (tmpvar_38 * tmpvar_39);
  vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = (tmpvar_6 * tmpvar_11);
  color_1 = (tmpvar_40.xyz + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  color_1 = exp2(-(color_1));
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_6;
  tmpvar_41.w = tmpvar_10;
  vec4 tmpvar_42;
  tmpvar_42.xyz = tmpvar_7;
  tmpvar_42.w = tmpvar_4;
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = ((tmpvar_8 * 0.5) + 0.5);
  vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = color_1;
  gl_FragData[0] = tmpvar_41;
  gl_FragData[1] = tmpvar_42;
  gl_FragData[2] = tmpvar_43;
  gl_FragData[3] = tmpvar_44;
}


#endif
"
}
SubProgram "metal " {
// Stats: 36 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 306
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
Vector 240 [unity_WorldTransformParams]
VectorHalf 256 [unity_ColorSpaceLuminance] 4
Vector 272 [_MainTex_ST]
Vector 288 [_DetailAlbedoMap_ST]
ScalarHalf 304 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_36;
  normal_36 = half3(tmpvar_22);
  half3 ambient_37;
  ambient_37 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_38;
  tmpvar_38 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_38) {
    ambient_37 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_39;
  half4 tmpvar_40;
  tmpvar_40 = (normal_36.xyzz * normal_36.yzzx);
  x1_39.x = dot (_mtl_u.unity_SHBr, tmpvar_40);
  x1_39.y = dot (_mtl_u.unity_SHBg, tmpvar_40);
  x1_39.z = dot (_mtl_u.unity_SHBb, tmpvar_40);
  ambient_37 = (ambient_37 + (x1_39 + (_mtl_u.unity_SHC.xyz * 
    ((normal_36.x * normal_36.x) - (normal_36.y * normal_36.y))
  )));
  tmpvar_9.xyz = ambient_37;
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat7;
float u_xlat8;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat10_2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_2.y * _OcclusionStrength + u_xlat2.x;
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : vs_TEXCOORD6.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
        u_xlat2.x = min(u_xlat8, u_xlat7.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat1);
        u_xlat3.y = dot(u_xlat10_4, u_xlat1);
        u_xlat3.z = dot(u_xlat10_2, u_xlat1);
    } else {
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat1);
        u_xlat3.y = dot(unity_SHAg, u_xlat1);
        u_xlat3.z = dot(unity_SHAb, u_xlat1);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat2.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
    u_xlat10_3 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
    SV_Target3.xyz = exp2((-u_xlat2.xyz));
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 97 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  mat3 tmpvar_18;
  tmpvar_18[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_18[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_18[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_19;
  tmpvar_19.xyz = normalize((tmpvar_18 * TANGENT.xyz));
  tmpvar_19.w = TANGENT.w;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_20 = tmpvar_19.xyz;
  tmpvar_21 = (((tmpvar_17.yzx * tmpvar_19.zxy) - (tmpvar_17.zxy * tmpvar_19.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_22.x = tmpvar_20.x;
  tmpvar_22.y = tmpvar_21.x;
  tmpvar_22.z = tmpvar_17.x;
  tmpvar_23.x = tmpvar_20.y;
  tmpvar_23.y = tmpvar_21.y;
  tmpvar_23.z = tmpvar_17.y;
  tmpvar_24.x = tmpvar_20.z;
  tmpvar_24.y = tmpvar_21.z;
  tmpvar_24.z = tmpvar_17.z;
  vec3 v_25;
  v_25.x = tmpvar_22.x;
  v_25.y = tmpvar_23.x;
  v_25.z = tmpvar_24.x;
  tmpvar_3.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_22.y;
  v_26.y = tmpvar_23.y;
  v_26.z = tmpvar_24.y;
  tmpvar_4.xyz = v_26;
  vec3 v_27;
  v_27.x = tmpvar_22.z;
  v_27.y = tmpvar_23.z;
  v_27.z = tmpvar_24.z;
  tmpvar_5.xyz = v_27;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_28;
  ambient_28 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_28 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  ambient_28 = (ambient_28 + (x1_29 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_28;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  float tmpvar_4;
  tmpvar_4 = mg_3.y;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_9;
  diffColor_9 = ((tmpvar_5 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) * (tmpvar_2.w * _Color.w));
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_10;
  tmpvar_10 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_12;
  ambient_12 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_13;
  ambient_contrib_13 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_14;
    tmpvar_14.w = 1.0;
    tmpvar_14.xyz = tmpvar_7;
    vec3 x1_15;
    vec3 texCoord_16;
    vec3 tmpvar_17;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_18;
      tmpvar_18.w = 1.0;
      tmpvar_18.xyz = xlv_TEXCOORD6;
      tmpvar_17 = (unity_ProbeVolumeWorldToObject * tmpvar_18).xyz;
    } else {
      tmpvar_17 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_19;
    tmpvar_19 = ((tmpvar_17 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_16.yz = tmpvar_19.yz;
    texCoord_16.x = (tmpvar_19.x * 0.25);
    float tmpvar_20;
    float tmpvar_21;
    tmpvar_21 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_20 = clamp (texCoord_16.x, tmpvar_21, (0.25 - tmpvar_21));
    texCoord_16.x = tmpvar_20;
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.25);
    vec4 tmpvar_23;
    tmpvar_23 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.5);
    x1_15.x = dot (tmpvar_22, tmpvar_14);
    x1_15.y = dot (tmpvar_23, tmpvar_14);
    x1_15.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_16), tmpvar_14);
    ambient_contrib_13 = x1_15;
  } else {
    vec4 tmpvar_24;
    tmpvar_24.w = 1.0;
    tmpvar_24.xyz = tmpvar_7;
    vec3 x_25;
    x_25.x = dot (unity_SHAr, tmpvar_24);
    x_25.y = dot (unity_SHAg, tmpvar_24);
    x_25.z = dot (unity_SHAb, tmpvar_24);
    ambient_contrib_13 = x_25;
  };
  vec3 tmpvar_26;
  tmpvar_26 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_13));
  ambient_12 = tmpvar_26;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_12 = max (((1.055 * 
      pow (max (tmpvar_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_11 = (ambient_12 * tmpvar_10);
  vec3 viewDir_27;
  viewDir_27 = -(tmpvar_8);
  float specularTerm_28;
  float tmpvar_29;
  tmpvar_29 = (1.0 - _Glossiness);
  vec3 inVec_30;
  inVec_30 = (vec3(0.0, 1.0, 0.0) + viewDir_27);
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, (inVec_30 * 
    inversesqrt(max (0.001, dot (inVec_30, inVec_30)))
  )));
  float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_7, viewDir_27));
  float tmpvar_33;
  tmpvar_33 = (tmpvar_29 * tmpvar_29);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_29 * tmpvar_29);
  float tmpvar_35;
  tmpvar_35 = (tmpvar_34 * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (((tmpvar_31 * tmpvar_31) * (tmpvar_35 - 1.0)) + 1.0);
  float tmpvar_37;
  tmpvar_37 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_32 * (1.0 - tmpvar_33))
     + tmpvar_33)) + (tmpvar_32 * (
      (tmpvar_1 * (1.0 - tmpvar_33))
     + tmpvar_33))) + 1e-05)
  ) * (tmpvar_35 / 
    (((3.141593 * tmpvar_36) * tmpvar_36) + 1e-07)
  )) * 0.7853982);
  specularTerm_28 = tmpvar_37;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_28 = sqrt(max (0.0001, tmpvar_37));
  };
  float tmpvar_38;
  tmpvar_38 = max (0.0, (specularTerm_28 * tmpvar_1));
  specularTerm_28 = tmpvar_38;
  float tmpvar_39;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_39 = 1.0;
  } else {
    tmpvar_39 = 0.0;
  };
  specularTerm_28 = (tmpvar_38 * tmpvar_39);
  vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = (diffColor_9 * tmpvar_11);
  vec4 tmpvar_41;
  tmpvar_41.xyz = diffColor_9;
  tmpvar_41.w = tmpvar_10;
  vec4 tmpvar_42;
  tmpvar_42.xyz = tmpvar_6;
  tmpvar_42.w = tmpvar_4;
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = exp2(-(tmpvar_40.xyz));
  gl_FragData[0] = tmpvar_41;
  gl_FragData[1] = tmpvar_42;
  gl_FragData[2] = tmpvar_43;
  gl_FragData[3] = tmpvar_44;
}


#endif
"
}
SubProgram "metal " {
// Stats: 36 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 306
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
Vector 240 [unity_WorldTransformParams]
VectorHalf 256 [unity_ColorSpaceLuminance] 4
Vector 272 [_MainTex_ST]
Vector 288 [_DetailAlbedoMap_ST]
ScalarHalf 304 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_36;
  normal_36 = half3(tmpvar_22);
  half3 ambient_37;
  ambient_37 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_38;
  tmpvar_38 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_38) {
    ambient_37 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_39;
  half4 tmpvar_40;
  tmpvar_40 = (normal_36.xyzz * normal_36.yzzx);
  x1_39.x = dot (_mtl_u.unity_SHBr, tmpvar_40);
  x1_39.y = dot (_mtl_u.unity_SHBg, tmpvar_40);
  x1_39.z = dot (_mtl_u.unity_SHBb, tmpvar_40);
  ambient_37 = (ambient_37 + (x1_39 + (_mtl_u.unity_SHC.xyz * 
    ((normal_36.x * normal_36.x) - (normal_36.y * normal_36.y))
  )));
  tmpvar_9.xyz = ambient_37;
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat6;
float u_xlat8;
float u_xlat15;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.yzw;
    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    u_xlat10_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat1.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_1.y * _OcclusionStrength + u_xlat1.x;
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat6.xyz : vs_TEXCOORD6.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat1.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat6.x = max(u_xlat6.x, u_xlat3.x);
        u_xlat1.x = min(u_xlat8, u_xlat6.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
        u_xlat4.xyz = u_xlat1.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat1.xyz = u_xlat1.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_1 = texture(unity_ProbeVolumeSH, u_xlat1.xyz);
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat2);
        u_xlat3.y = dot(u_xlat10_4, u_xlat2);
        u_xlat3.z = dot(u_xlat10_1, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat2);
        u_xlat3.y = dot(unity_SHAg, u_xlat2);
        u_xlat3.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat1.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat1.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target3.xyz = exp2((-u_xlat1.xyz));
    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 93 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_17;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_18;
  ambient_18 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_18 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_19.x = dot (unity_SHBr, tmpvar_20);
  x1_19.y = dot (unity_SHBg, tmpvar_20);
  x1_19.z = dot (unity_SHBb, tmpvar_20);
  ambient_18 = (ambient_18 + (x1_19 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_18;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  float tmpvar_3;
  tmpvar_3 = mg_2.y;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_10;
  tmpvar_10 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_11;
  ambient_11 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_12;
  ambient_contrib_12 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_13;
    tmpvar_13.w = 1.0;
    tmpvar_13.xyz = tmpvar_7;
    vec3 x1_14;
    vec3 texCoord_15;
    vec3 tmpvar_16;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_17;
      tmpvar_17.w = 1.0;
      tmpvar_17.xyz = xlv_TEXCOORD6;
      tmpvar_16 = (unity_ProbeVolumeWorldToObject * tmpvar_17).xyz;
    } else {
      tmpvar_16 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_18;
    tmpvar_18 = ((tmpvar_16 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_15.yz = tmpvar_18.yz;
    texCoord_15.x = (tmpvar_18.x * 0.25);
    float tmpvar_19;
    float tmpvar_20;
    tmpvar_20 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_19 = clamp (texCoord_15.x, tmpvar_20, (0.25 - tmpvar_20));
    texCoord_15.x = tmpvar_19;
    vec4 tmpvar_21;
    tmpvar_21 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.25);
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.5);
    x1_14.x = dot (tmpvar_21, tmpvar_13);
    x1_14.y = dot (tmpvar_22, tmpvar_13);
    x1_14.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_15), tmpvar_13);
    ambient_contrib_12 = x1_14;
  } else {
    vec4 tmpvar_23;
    tmpvar_23.w = 1.0;
    tmpvar_23.xyz = tmpvar_7;
    vec3 x_24;
    x_24.x = dot (unity_SHAr, tmpvar_23);
    x_24.y = dot (unity_SHAg, tmpvar_23);
    x_24.z = dot (unity_SHAb, tmpvar_23);
    ambient_contrib_12 = x_24;
  };
  vec3 tmpvar_25;
  tmpvar_25 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_12));
  ambient_11 = tmpvar_25;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_11 = max (((1.055 * 
      pow (max (tmpvar_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_10 = (ambient_11 * tmpvar_9);
  vec3 viewDir_26;
  viewDir_26 = -(tmpvar_8);
  float specularTerm_27;
  float tmpvar_28;
  tmpvar_28 = (1.0 - _Glossiness);
  vec3 inVec_29;
  inVec_29 = (vec3(0.0, 1.0, 0.0) + viewDir_26);
  float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_7, (inVec_29 * 
    inversesqrt(max (0.001, dot (inVec_29, inVec_29)))
  )));
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, viewDir_26));
  float tmpvar_32;
  tmpvar_32 = (tmpvar_28 * tmpvar_28);
  float tmpvar_33;
  tmpvar_33 = (tmpvar_28 * tmpvar_28);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_33 * tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (((tmpvar_30 * tmpvar_30) * (tmpvar_34 - 1.0)) + 1.0);
  float tmpvar_36;
  tmpvar_36 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_31 * (1.0 - tmpvar_32))
     + tmpvar_32)) + (tmpvar_31 * (
      (tmpvar_1 * (1.0 - tmpvar_32))
     + tmpvar_32))) + 1e-05)
  ) * (tmpvar_34 / 
    (((3.141593 * tmpvar_35) * tmpvar_35) + 1e-07)
  )) * 0.7853982);
  specularTerm_27 = tmpvar_36;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_27 = sqrt(max (0.0001, tmpvar_36));
  };
  float tmpvar_37;
  tmpvar_37 = max (0.0, (specularTerm_27 * tmpvar_1));
  specularTerm_27 = tmpvar_37;
  float tmpvar_38;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_38 = 1.0;
  } else {
    tmpvar_38 = 0.0;
  };
  specularTerm_27 = (tmpvar_37 * tmpvar_38);
  vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = (tmpvar_5 * tmpvar_10);
  vec4 tmpvar_40;
  tmpvar_40.xyz = tmpvar_5;
  tmpvar_40.w = tmpvar_9;
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_6;
  tmpvar_41.w = tmpvar_3;
  vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = tmpvar_39.xyz;
  gl_FragData[0] = tmpvar_40;
  gl_FragData[1] = tmpvar_41;
  gl_FragData[2] = tmpvar_42;
  gl_FragData[3] = tmpvar_43;
}


#endif
"
}
SubProgram "metal " {
// Stats: 31 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 290
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
VectorHalf 240 [unity_ColorSpaceLuminance] 4
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_9;
  tmpvar_9 = tmpvar_8.xyz;
  float4 tmpvar_10;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_10 = (_mtl_u.glstate_matrix_mvp * tmpvar_11);
  float4 texcoord_12;
  texcoord_12.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_13;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_14;
  float3 n_15;
  n_15 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_14 = half3(n_15);
  float3 norm_16;
  norm_16 = float3(tmpvar_1);
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].x;
  v_17.y = _mtl_u.unity_WorldToObject[1].x;
  v_17.z = _mtl_u.unity_WorldToObject[2].x;
  v_17.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].y;
  v_18.y = _mtl_u.unity_WorldToObject[1].y;
  v_18.z = _mtl_u.unity_WorldToObject[2].y;
  v_18.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].z;
  v_19.y = _mtl_u.unity_WorldToObject[1].z;
  v_19.z = _mtl_u.unity_WorldToObject[2].z;
  v_19.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_20);
  tmpvar_7 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_21;
  normal_21 = half3(tmpvar_20);
  half3 ambient_22;
  ambient_22 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_23;
  tmpvar_23 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_23) {
    ambient_22 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_24;
  half4 tmpvar_25;
  tmpvar_25 = (normal_21.xyzz * normal_21.yzzx);
  x1_24.x = dot (_mtl_u.unity_SHBr, tmpvar_25);
  x1_24.y = dot (_mtl_u.unity_SHBg, tmpvar_25);
  x1_24.z = dot (_mtl_u.unity_SHBb, tmpvar_25);
  ambient_22 = (ambient_22 + (x1_24 + (_mtl_u.unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )));
  tmpvar_7.xyz = ambient_22;
  _mtl_o.gl_Position = tmpvar_10;
  _mtl_o.xlv_TEXCOORD0 = texcoord_12;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_14;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat7;
float u_xlat8;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat10_2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_2.y * _OcclusionStrength + u_xlat2.x;
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : vs_TEXCOORD6.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
        u_xlat2.x = min(u_xlat8, u_xlat7.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat1);
        u_xlat3.y = dot(u_xlat10_4, u_xlat1);
        u_xlat3.z = dot(u_xlat10_2, u_xlat1);
    } else {
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat1);
        u_xlat3.y = dot(unity_SHAg, u_xlat1);
        u_xlat3.z = dot(unity_SHAb, u_xlat1);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat2.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 95 math, 6 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_17;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_18;
  ambient_18 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_18 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_19.x = dot (unity_SHBr, tmpvar_20);
  x1_19.y = dot (unity_SHBg, tmpvar_20);
  x1_19.z = dot (unity_SHBb, tmpvar_20);
  ambient_18 = (ambient_18 + (x1_19 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_18;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  float tmpvar_3;
  tmpvar_3 = mg_2.y;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_10;
  tmpvar_10 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_11;
  ambient_11 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_12;
  ambient_contrib_12 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_13;
    tmpvar_13.w = 1.0;
    tmpvar_13.xyz = tmpvar_7;
    vec3 x1_14;
    vec3 texCoord_15;
    vec3 tmpvar_16;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_17;
      tmpvar_17.w = 1.0;
      tmpvar_17.xyz = xlv_TEXCOORD6;
      tmpvar_16 = (unity_ProbeVolumeWorldToObject * tmpvar_17).xyz;
    } else {
      tmpvar_16 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_18;
    tmpvar_18 = ((tmpvar_16 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_15.yz = tmpvar_18.yz;
    texCoord_15.x = (tmpvar_18.x * 0.25);
    float tmpvar_19;
    float tmpvar_20;
    tmpvar_20 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_19 = clamp (texCoord_15.x, tmpvar_20, (0.25 - tmpvar_20));
    texCoord_15.x = tmpvar_19;
    vec4 tmpvar_21;
    tmpvar_21 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.25);
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.5);
    x1_14.x = dot (tmpvar_21, tmpvar_13);
    x1_14.y = dot (tmpvar_22, tmpvar_13);
    x1_14.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_15), tmpvar_13);
    ambient_contrib_12 = x1_14;
  } else {
    vec4 tmpvar_23;
    tmpvar_23.w = 1.0;
    tmpvar_23.xyz = tmpvar_7;
    vec3 x_24;
    x_24.x = dot (unity_SHAr, tmpvar_23);
    x_24.y = dot (unity_SHAg, tmpvar_23);
    x_24.z = dot (unity_SHAb, tmpvar_23);
    ambient_contrib_12 = x_24;
  };
  vec3 tmpvar_25;
  tmpvar_25 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_12));
  ambient_11 = tmpvar_25;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_11 = max (((1.055 * 
      pow (max (tmpvar_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_10 = (ambient_11 * tmpvar_9);
  vec3 viewDir_26;
  viewDir_26 = -(tmpvar_8);
  float specularTerm_27;
  float tmpvar_28;
  tmpvar_28 = (1.0 - _Glossiness);
  vec3 inVec_29;
  inVec_29 = (vec3(0.0, 1.0, 0.0) + viewDir_26);
  float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_7, (inVec_29 * 
    inversesqrt(max (0.001, dot (inVec_29, inVec_29)))
  )));
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, viewDir_26));
  float tmpvar_32;
  tmpvar_32 = (tmpvar_28 * tmpvar_28);
  float tmpvar_33;
  tmpvar_33 = (tmpvar_28 * tmpvar_28);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_33 * tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (((tmpvar_30 * tmpvar_30) * (tmpvar_34 - 1.0)) + 1.0);
  float tmpvar_36;
  tmpvar_36 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_31 * (1.0 - tmpvar_32))
     + tmpvar_32)) + (tmpvar_31 * (
      (tmpvar_1 * (1.0 - tmpvar_32))
     + tmpvar_32))) + 1e-05)
  ) * (tmpvar_34 / 
    (((3.141593 * tmpvar_35) * tmpvar_35) + 1e-07)
  )) * 0.7853982);
  specularTerm_27 = tmpvar_36;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_27 = sqrt(max (0.0001, tmpvar_36));
  };
  float tmpvar_37;
  tmpvar_37 = max (0.0, (specularTerm_27 * tmpvar_1));
  specularTerm_27 = tmpvar_37;
  float tmpvar_38;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_38 = 1.0;
  } else {
    tmpvar_38 = 0.0;
  };
  specularTerm_27 = (tmpvar_37 * tmpvar_38);
  vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = (tmpvar_5 * tmpvar_10);
  vec4 tmpvar_40;
  tmpvar_40.xyz = tmpvar_5;
  tmpvar_40.w = tmpvar_9;
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_6;
  tmpvar_41.w = tmpvar_3;
  vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = (tmpvar_39.xyz + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  gl_FragData[0] = tmpvar_40;
  gl_FragData[1] = tmpvar_41;
  gl_FragData[2] = tmpvar_42;
  gl_FragData[3] = tmpvar_43;
}


#endif
"
}
SubProgram "metal " {
// Stats: 31 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 290
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
VectorHalf 240 [unity_ColorSpaceLuminance] 4
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_9;
  tmpvar_9 = tmpvar_8.xyz;
  float4 tmpvar_10;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_10 = (_mtl_u.glstate_matrix_mvp * tmpvar_11);
  float4 texcoord_12;
  texcoord_12.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_13;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_14;
  float3 n_15;
  n_15 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_14 = half3(n_15);
  float3 norm_16;
  norm_16 = float3(tmpvar_1);
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].x;
  v_17.y = _mtl_u.unity_WorldToObject[1].x;
  v_17.z = _mtl_u.unity_WorldToObject[2].x;
  v_17.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].y;
  v_18.y = _mtl_u.unity_WorldToObject[1].y;
  v_18.z = _mtl_u.unity_WorldToObject[2].y;
  v_18.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].z;
  v_19.y = _mtl_u.unity_WorldToObject[1].z;
  v_19.z = _mtl_u.unity_WorldToObject[2].z;
  v_19.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_20);
  tmpvar_7 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_21;
  normal_21 = half3(tmpvar_20);
  half3 ambient_22;
  ambient_22 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_23;
  tmpvar_23 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_23) {
    ambient_22 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_24;
  half4 tmpvar_25;
  tmpvar_25 = (normal_21.xyzz * normal_21.yzzx);
  x1_24.x = dot (_mtl_u.unity_SHBr, tmpvar_25);
  x1_24.y = dot (_mtl_u.unity_SHBg, tmpvar_25);
  x1_24.z = dot (_mtl_u.unity_SHBb, tmpvar_25);
  ambient_22 = (ambient_22 + (x1_24 + (_mtl_u.unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )));
  tmpvar_7.xyz = ambient_22;
  _mtl_o.gl_Position = tmpvar_10;
  _mtl_o.xlv_TEXCOORD0 = texcoord_12;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_14;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat7;
float u_xlat8;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat10_2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_2.y * _OcclusionStrength + u_xlat2.x;
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : vs_TEXCOORD6.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
        u_xlat2.x = min(u_xlat8, u_xlat7.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat1);
        u_xlat3.y = dot(u_xlat10_4, u_xlat1);
        u_xlat3.z = dot(u_xlat10_2, u_xlat1);
    } else {
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat1);
        u_xlat3.y = dot(unity_SHAg, u_xlat1);
        u_xlat3.z = dot(unity_SHAb, u_xlat1);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat2.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
    u_xlat10_3 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 95 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_17;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_18;
  ambient_18 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_18 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_19.x = dot (unity_SHBr, tmpvar_20);
  x1_19.y = dot (unity_SHBg, tmpvar_20);
  x1_19.z = dot (unity_SHBb, tmpvar_20);
  ambient_18 = (ambient_18 + (x1_19 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_18;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  float tmpvar_4;
  tmpvar_4 = mg_3.y;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_9;
  diffColor_9 = ((tmpvar_5 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) * (tmpvar_2.w * _Color.w));
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_10;
  tmpvar_10 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_12;
  ambient_12 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_13;
  ambient_contrib_13 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_14;
    tmpvar_14.w = 1.0;
    tmpvar_14.xyz = tmpvar_7;
    vec3 x1_15;
    vec3 texCoord_16;
    vec3 tmpvar_17;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_18;
      tmpvar_18.w = 1.0;
      tmpvar_18.xyz = xlv_TEXCOORD6;
      tmpvar_17 = (unity_ProbeVolumeWorldToObject * tmpvar_18).xyz;
    } else {
      tmpvar_17 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_19;
    tmpvar_19 = ((tmpvar_17 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_16.yz = tmpvar_19.yz;
    texCoord_16.x = (tmpvar_19.x * 0.25);
    float tmpvar_20;
    float tmpvar_21;
    tmpvar_21 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_20 = clamp (texCoord_16.x, tmpvar_21, (0.25 - tmpvar_21));
    texCoord_16.x = tmpvar_20;
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.25);
    vec4 tmpvar_23;
    tmpvar_23 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.5);
    x1_15.x = dot (tmpvar_22, tmpvar_14);
    x1_15.y = dot (tmpvar_23, tmpvar_14);
    x1_15.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_16), tmpvar_14);
    ambient_contrib_13 = x1_15;
  } else {
    vec4 tmpvar_24;
    tmpvar_24.w = 1.0;
    tmpvar_24.xyz = tmpvar_7;
    vec3 x_25;
    x_25.x = dot (unity_SHAr, tmpvar_24);
    x_25.y = dot (unity_SHAg, tmpvar_24);
    x_25.z = dot (unity_SHAb, tmpvar_24);
    ambient_contrib_13 = x_25;
  };
  vec3 tmpvar_26;
  tmpvar_26 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_13));
  ambient_12 = tmpvar_26;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_12 = max (((1.055 * 
      pow (max (tmpvar_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_11 = (ambient_12 * tmpvar_10);
  vec3 viewDir_27;
  viewDir_27 = -(tmpvar_8);
  float specularTerm_28;
  float tmpvar_29;
  tmpvar_29 = (1.0 - _Glossiness);
  vec3 inVec_30;
  inVec_30 = (vec3(0.0, 1.0, 0.0) + viewDir_27);
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, (inVec_30 * 
    inversesqrt(max (0.001, dot (inVec_30, inVec_30)))
  )));
  float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_7, viewDir_27));
  float tmpvar_33;
  tmpvar_33 = (tmpvar_29 * tmpvar_29);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_29 * tmpvar_29);
  float tmpvar_35;
  tmpvar_35 = (tmpvar_34 * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (((tmpvar_31 * tmpvar_31) * (tmpvar_35 - 1.0)) + 1.0);
  float tmpvar_37;
  tmpvar_37 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_32 * (1.0 - tmpvar_33))
     + tmpvar_33)) + (tmpvar_32 * (
      (tmpvar_1 * (1.0 - tmpvar_33))
     + tmpvar_33))) + 1e-05)
  ) * (tmpvar_35 / 
    (((3.141593 * tmpvar_36) * tmpvar_36) + 1e-07)
  )) * 0.7853982);
  specularTerm_28 = tmpvar_37;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_28 = sqrt(max (0.0001, tmpvar_37));
  };
  float tmpvar_38;
  tmpvar_38 = max (0.0, (specularTerm_28 * tmpvar_1));
  specularTerm_28 = tmpvar_38;
  float tmpvar_39;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_39 = 1.0;
  } else {
    tmpvar_39 = 0.0;
  };
  specularTerm_28 = (tmpvar_38 * tmpvar_39);
  vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = (diffColor_9 * tmpvar_11);
  vec4 tmpvar_41;
  tmpvar_41.xyz = diffColor_9;
  tmpvar_41.w = tmpvar_10;
  vec4 tmpvar_42;
  tmpvar_42.xyz = tmpvar_6;
  tmpvar_42.w = tmpvar_4;
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = tmpvar_40.xyz;
  gl_FragData[0] = tmpvar_41;
  gl_FragData[1] = tmpvar_42;
  gl_FragData[2] = tmpvar_43;
  gl_FragData[3] = tmpvar_44;
}


#endif
"
}
SubProgram "metal " {
// Stats: 31 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 290
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
VectorHalf 240 [unity_ColorSpaceLuminance] 4
Vector 256 [_MainTex_ST]
Vector 272 [_DetailAlbedoMap_ST]
ScalarHalf 288 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_9;
  tmpvar_9 = tmpvar_8.xyz;
  float4 tmpvar_10;
  float4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_10 = (_mtl_u.glstate_matrix_mvp * tmpvar_11);
  float4 texcoord_12;
  texcoord_12.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_13;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_14;
  float3 n_15;
  n_15 = (tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_14 = half3(n_15);
  float3 norm_16;
  norm_16 = float3(tmpvar_1);
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].x;
  v_17.y = _mtl_u.unity_WorldToObject[1].x;
  v_17.z = _mtl_u.unity_WorldToObject[2].x;
  v_17.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].y;
  v_18.y = _mtl_u.unity_WorldToObject[1].y;
  v_18.z = _mtl_u.unity_WorldToObject[2].y;
  v_18.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].z;
  v_19.y = _mtl_u.unity_WorldToObject[1].z;
  v_19.z = _mtl_u.unity_WorldToObject[2].z;
  v_19.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_20);
  tmpvar_7 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_21;
  normal_21 = half3(tmpvar_20);
  half3 ambient_22;
  ambient_22 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_23;
  tmpvar_23 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_23) {
    ambient_22 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_24;
  half4 tmpvar_25;
  tmpvar_25 = (normal_21.xyzz * normal_21.yzzx);
  x1_24.x = dot (_mtl_u.unity_SHBr, tmpvar_25);
  x1_24.y = dot (_mtl_u.unity_SHBg, tmpvar_25);
  x1_24.z = dot (_mtl_u.unity_SHBb, tmpvar_25);
  ambient_22 = (ambient_22 + (x1_24 + (_mtl_u.unity_SHC.xyz * 
    ((normal_21.x * normal_21.x) - (normal_21.y * normal_21.y))
  )));
  tmpvar_7.xyz = ambient_22;
  _mtl_o.gl_Position = tmpvar_10;
  _mtl_o.xlv_TEXCOORD0 = texcoord_12;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_14;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_9;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat6;
float u_xlat8;
float u_xlat15;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.yzw;
    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    u_xlat10_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat1.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_1.y * _OcclusionStrength + u_xlat1.x;
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat6.xyz : vs_TEXCOORD6.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat1.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat6.x = max(u_xlat6.x, u_xlat3.x);
        u_xlat1.x = min(u_xlat8, u_xlat6.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
        u_xlat4.xyz = u_xlat1.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat1.xyz = u_xlat1.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_1 = texture(unity_ProbeVolumeSH, u_xlat1.xyz);
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat2);
        u_xlat3.y = dot(u_xlat10_4, u_xlat2);
        u_xlat3.z = dot(u_xlat10_1, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat2);
        u_xlat3.y = dot(unity_SHAg, u_xlat2);
        u_xlat3.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat1.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat1.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 93 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  mat3 tmpvar_18;
  tmpvar_18[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_18[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_18[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_19;
  tmpvar_19.xyz = normalize((tmpvar_18 * TANGENT.xyz));
  tmpvar_19.w = TANGENT.w;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_20 = tmpvar_19.xyz;
  tmpvar_21 = (((tmpvar_17.yzx * tmpvar_19.zxy) - (tmpvar_17.zxy * tmpvar_19.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_22.x = tmpvar_20.x;
  tmpvar_22.y = tmpvar_21.x;
  tmpvar_22.z = tmpvar_17.x;
  tmpvar_23.x = tmpvar_20.y;
  tmpvar_23.y = tmpvar_21.y;
  tmpvar_23.z = tmpvar_17.y;
  tmpvar_24.x = tmpvar_20.z;
  tmpvar_24.y = tmpvar_21.z;
  tmpvar_24.z = tmpvar_17.z;
  vec3 v_25;
  v_25.x = tmpvar_22.x;
  v_25.y = tmpvar_23.x;
  v_25.z = tmpvar_24.x;
  tmpvar_3.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_22.y;
  v_26.y = tmpvar_23.y;
  v_26.z = tmpvar_24.y;
  tmpvar_4.xyz = v_26;
  vec3 v_27;
  v_27.x = tmpvar_22.z;
  v_27.y = tmpvar_23.z;
  v_27.z = tmpvar_24.z;
  tmpvar_5.xyz = v_27;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_28;
  ambient_28 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_28 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  ambient_28 = (ambient_28 + (x1_29 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_28;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  float tmpvar_3;
  tmpvar_3 = mg_2.y;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_10;
  tmpvar_10 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_11;
  ambient_11 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_12;
  ambient_contrib_12 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_13;
    tmpvar_13.w = 1.0;
    tmpvar_13.xyz = tmpvar_7;
    vec3 x1_14;
    vec3 texCoord_15;
    vec3 tmpvar_16;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_17;
      tmpvar_17.w = 1.0;
      tmpvar_17.xyz = xlv_TEXCOORD6;
      tmpvar_16 = (unity_ProbeVolumeWorldToObject * tmpvar_17).xyz;
    } else {
      tmpvar_16 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_18;
    tmpvar_18 = ((tmpvar_16 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_15.yz = tmpvar_18.yz;
    texCoord_15.x = (tmpvar_18.x * 0.25);
    float tmpvar_19;
    float tmpvar_20;
    tmpvar_20 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_19 = clamp (texCoord_15.x, tmpvar_20, (0.25 - tmpvar_20));
    texCoord_15.x = tmpvar_19;
    vec4 tmpvar_21;
    tmpvar_21 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.25);
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.5);
    x1_14.x = dot (tmpvar_21, tmpvar_13);
    x1_14.y = dot (tmpvar_22, tmpvar_13);
    x1_14.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_15), tmpvar_13);
    ambient_contrib_12 = x1_14;
  } else {
    vec4 tmpvar_23;
    tmpvar_23.w = 1.0;
    tmpvar_23.xyz = tmpvar_7;
    vec3 x_24;
    x_24.x = dot (unity_SHAr, tmpvar_23);
    x_24.y = dot (unity_SHAg, tmpvar_23);
    x_24.z = dot (unity_SHAb, tmpvar_23);
    ambient_contrib_12 = x_24;
  };
  vec3 tmpvar_25;
  tmpvar_25 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_12));
  ambient_11 = tmpvar_25;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_11 = max (((1.055 * 
      pow (max (tmpvar_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_10 = (ambient_11 * tmpvar_9);
  vec3 viewDir_26;
  viewDir_26 = -(tmpvar_8);
  float specularTerm_27;
  float tmpvar_28;
  tmpvar_28 = (1.0 - _Glossiness);
  vec3 inVec_29;
  inVec_29 = (vec3(0.0, 1.0, 0.0) + viewDir_26);
  float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_7, (inVec_29 * 
    inversesqrt(max (0.001, dot (inVec_29, inVec_29)))
  )));
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, viewDir_26));
  float tmpvar_32;
  tmpvar_32 = (tmpvar_28 * tmpvar_28);
  float tmpvar_33;
  tmpvar_33 = (tmpvar_28 * tmpvar_28);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_33 * tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (((tmpvar_30 * tmpvar_30) * (tmpvar_34 - 1.0)) + 1.0);
  float tmpvar_36;
  tmpvar_36 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_31 * (1.0 - tmpvar_32))
     + tmpvar_32)) + (tmpvar_31 * (
      (tmpvar_1 * (1.0 - tmpvar_32))
     + tmpvar_32))) + 1e-05)
  ) * (tmpvar_34 / 
    (((3.141593 * tmpvar_35) * tmpvar_35) + 1e-07)
  )) * 0.7853982);
  specularTerm_27 = tmpvar_36;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_27 = sqrt(max (0.0001, tmpvar_36));
  };
  float tmpvar_37;
  tmpvar_37 = max (0.0, (specularTerm_27 * tmpvar_1));
  specularTerm_27 = tmpvar_37;
  float tmpvar_38;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_38 = 1.0;
  } else {
    tmpvar_38 = 0.0;
  };
  specularTerm_27 = (tmpvar_37 * tmpvar_38);
  vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = (tmpvar_5 * tmpvar_10);
  vec4 tmpvar_40;
  tmpvar_40.xyz = tmpvar_5;
  tmpvar_40.w = tmpvar_9;
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_6;
  tmpvar_41.w = tmpvar_3;
  vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = tmpvar_39.xyz;
  gl_FragData[0] = tmpvar_40;
  gl_FragData[1] = tmpvar_41;
  gl_FragData[2] = tmpvar_42;
  gl_FragData[3] = tmpvar_43;
}


#endif
"
}
SubProgram "metal " {
// Stats: 36 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 306
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
Vector 240 [unity_WorldTransformParams]
VectorHalf 256 [unity_ColorSpaceLuminance] 4
Vector 272 [_MainTex_ST]
Vector 288 [_DetailAlbedoMap_ST]
ScalarHalf 304 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_36;
  normal_36 = half3(tmpvar_22);
  half3 ambient_37;
  ambient_37 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_38;
  tmpvar_38 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_38) {
    ambient_37 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_39;
  half4 tmpvar_40;
  tmpvar_40 = (normal_36.xyzz * normal_36.yzzx);
  x1_39.x = dot (_mtl_u.unity_SHBr, tmpvar_40);
  x1_39.y = dot (_mtl_u.unity_SHBg, tmpvar_40);
  x1_39.z = dot (_mtl_u.unity_SHBb, tmpvar_40);
  ambient_37 = (ambient_37 + (x1_39 + (_mtl_u.unity_SHC.xyz * 
    ((normal_36.x * normal_36.x) - (normal_36.y * normal_36.y))
  )));
  tmpvar_9.xyz = ambient_37;
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat7;
float u_xlat8;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat10_2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_2.y * _OcclusionStrength + u_xlat2.x;
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : vs_TEXCOORD6.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
        u_xlat2.x = min(u_xlat8, u_xlat7.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat1);
        u_xlat3.y = dot(u_xlat10_4, u_xlat1);
        u_xlat3.z = dot(u_xlat10_2, u_xlat1);
    } else {
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat1);
        u_xlat3.y = dot(unity_SHAg, u_xlat1);
        u_xlat3.z = dot(unity_SHAb, u_xlat1);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat2.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 95 math, 6 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  mat3 tmpvar_18;
  tmpvar_18[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_18[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_18[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_19;
  tmpvar_19.xyz = normalize((tmpvar_18 * TANGENT.xyz));
  tmpvar_19.w = TANGENT.w;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_20 = tmpvar_19.xyz;
  tmpvar_21 = (((tmpvar_17.yzx * tmpvar_19.zxy) - (tmpvar_17.zxy * tmpvar_19.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_22.x = tmpvar_20.x;
  tmpvar_22.y = tmpvar_21.x;
  tmpvar_22.z = tmpvar_17.x;
  tmpvar_23.x = tmpvar_20.y;
  tmpvar_23.y = tmpvar_21.y;
  tmpvar_23.z = tmpvar_17.y;
  tmpvar_24.x = tmpvar_20.z;
  tmpvar_24.y = tmpvar_21.z;
  tmpvar_24.z = tmpvar_17.z;
  vec3 v_25;
  v_25.x = tmpvar_22.x;
  v_25.y = tmpvar_23.x;
  v_25.z = tmpvar_24.x;
  tmpvar_3.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_22.y;
  v_26.y = tmpvar_23.y;
  v_26.z = tmpvar_24.y;
  tmpvar_4.xyz = v_26;
  vec3 v_27;
  v_27.x = tmpvar_22.z;
  v_27.y = tmpvar_23.z;
  v_27.z = tmpvar_24.z;
  tmpvar_5.xyz = v_27;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_28;
  ambient_28 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_28 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  ambient_28 = (ambient_28 + (x1_29 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_28;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  float tmpvar_3;
  tmpvar_3 = mg_2.y;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_10;
  tmpvar_10 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_11;
  ambient_11 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_12;
  ambient_contrib_12 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_13;
    tmpvar_13.w = 1.0;
    tmpvar_13.xyz = tmpvar_7;
    vec3 x1_14;
    vec3 texCoord_15;
    vec3 tmpvar_16;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_17;
      tmpvar_17.w = 1.0;
      tmpvar_17.xyz = xlv_TEXCOORD6;
      tmpvar_16 = (unity_ProbeVolumeWorldToObject * tmpvar_17).xyz;
    } else {
      tmpvar_16 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_18;
    tmpvar_18 = ((tmpvar_16 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_15.yz = tmpvar_18.yz;
    texCoord_15.x = (tmpvar_18.x * 0.25);
    float tmpvar_19;
    float tmpvar_20;
    tmpvar_20 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_19 = clamp (texCoord_15.x, tmpvar_20, (0.25 - tmpvar_20));
    texCoord_15.x = tmpvar_19;
    vec4 tmpvar_21;
    tmpvar_21 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.25);
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.5);
    x1_14.x = dot (tmpvar_21, tmpvar_13);
    x1_14.y = dot (tmpvar_22, tmpvar_13);
    x1_14.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_15), tmpvar_13);
    ambient_contrib_12 = x1_14;
  } else {
    vec4 tmpvar_23;
    tmpvar_23.w = 1.0;
    tmpvar_23.xyz = tmpvar_7;
    vec3 x_24;
    x_24.x = dot (unity_SHAr, tmpvar_23);
    x_24.y = dot (unity_SHAg, tmpvar_23);
    x_24.z = dot (unity_SHAb, tmpvar_23);
    ambient_contrib_12 = x_24;
  };
  vec3 tmpvar_25;
  tmpvar_25 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_12));
  ambient_11 = tmpvar_25;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_11 = max (((1.055 * 
      pow (max (tmpvar_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_10 = (ambient_11 * tmpvar_9);
  vec3 viewDir_26;
  viewDir_26 = -(tmpvar_8);
  float specularTerm_27;
  float tmpvar_28;
  tmpvar_28 = (1.0 - _Glossiness);
  vec3 inVec_29;
  inVec_29 = (vec3(0.0, 1.0, 0.0) + viewDir_26);
  float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_7, (inVec_29 * 
    inversesqrt(max (0.001, dot (inVec_29, inVec_29)))
  )));
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, viewDir_26));
  float tmpvar_32;
  tmpvar_32 = (tmpvar_28 * tmpvar_28);
  float tmpvar_33;
  tmpvar_33 = (tmpvar_28 * tmpvar_28);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_33 * tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (((tmpvar_30 * tmpvar_30) * (tmpvar_34 - 1.0)) + 1.0);
  float tmpvar_36;
  tmpvar_36 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_31 * (1.0 - tmpvar_32))
     + tmpvar_32)) + (tmpvar_31 * (
      (tmpvar_1 * (1.0 - tmpvar_32))
     + tmpvar_32))) + 1e-05)
  ) * (tmpvar_34 / 
    (((3.141593 * tmpvar_35) * tmpvar_35) + 1e-07)
  )) * 0.7853982);
  specularTerm_27 = tmpvar_36;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_27 = sqrt(max (0.0001, tmpvar_36));
  };
  float tmpvar_37;
  tmpvar_37 = max (0.0, (specularTerm_27 * tmpvar_1));
  specularTerm_27 = tmpvar_37;
  float tmpvar_38;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_38 = 1.0;
  } else {
    tmpvar_38 = 0.0;
  };
  specularTerm_27 = (tmpvar_37 * tmpvar_38);
  vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = (tmpvar_5 * tmpvar_10);
  vec4 tmpvar_40;
  tmpvar_40.xyz = tmpvar_5;
  tmpvar_40.w = tmpvar_9;
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_6;
  tmpvar_41.w = tmpvar_3;
  vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = (tmpvar_39.xyz + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  gl_FragData[0] = tmpvar_40;
  gl_FragData[1] = tmpvar_41;
  gl_FragData[2] = tmpvar_42;
  gl_FragData[3] = tmpvar_43;
}


#endif
"
}
SubProgram "metal " {
// Stats: 36 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 306
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
Vector 240 [unity_WorldTransformParams]
VectorHalf 256 [unity_ColorSpaceLuminance] 4
Vector 272 [_MainTex_ST]
Vector 288 [_DetailAlbedoMap_ST]
ScalarHalf 304 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_36;
  normal_36 = half3(tmpvar_22);
  half3 ambient_37;
  ambient_37 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_38;
  tmpvar_38 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_38) {
    ambient_37 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_39;
  half4 tmpvar_40;
  tmpvar_40 = (normal_36.xyzz * normal_36.yzzx);
  x1_39.x = dot (_mtl_u.unity_SHBr, tmpvar_40);
  x1_39.y = dot (_mtl_u.unity_SHBg, tmpvar_40);
  x1_39.z = dot (_mtl_u.unity_SHBb, tmpvar_40);
  ambient_37 = (ambient_37 + (x1_39 + (_mtl_u.unity_SHC.xyz * 
    ((normal_36.x * normal_36.x) - (normal_36.y * normal_36.y))
  )));
  tmpvar_9.xyz = ambient_37;
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat7;
float u_xlat8;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat10_2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_2.y * _OcclusionStrength + u_xlat2.x;
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : vs_TEXCOORD6.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
        u_xlat2.x = min(u_xlat8, u_xlat7.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat1);
        u_xlat3.y = dot(u_xlat10_4, u_xlat1);
        u_xlat3.z = dot(u_xlat10_2, u_xlat1);
    } else {
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat1);
        u_xlat3.y = dot(unity_SHAg, u_xlat1);
        u_xlat3.z = dot(unity_SHAb, u_xlat1);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat2.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
    u_xlat10_3 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 95 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  mat3 tmpvar_18;
  tmpvar_18[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_18[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_18[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_19;
  tmpvar_19.xyz = normalize((tmpvar_18 * TANGENT.xyz));
  tmpvar_19.w = TANGENT.w;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_20 = tmpvar_19.xyz;
  tmpvar_21 = (((tmpvar_17.yzx * tmpvar_19.zxy) - (tmpvar_17.zxy * tmpvar_19.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_22.x = tmpvar_20.x;
  tmpvar_22.y = tmpvar_21.x;
  tmpvar_22.z = tmpvar_17.x;
  tmpvar_23.x = tmpvar_20.y;
  tmpvar_23.y = tmpvar_21.y;
  tmpvar_23.z = tmpvar_17.y;
  tmpvar_24.x = tmpvar_20.z;
  tmpvar_24.y = tmpvar_21.z;
  tmpvar_24.z = tmpvar_17.z;
  vec3 v_25;
  v_25.x = tmpvar_22.x;
  v_25.y = tmpvar_23.x;
  v_25.z = tmpvar_24.x;
  tmpvar_3.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_22.y;
  v_26.y = tmpvar_23.y;
  v_26.z = tmpvar_24.y;
  tmpvar_4.xyz = v_26;
  vec3 v_27;
  v_27.x = tmpvar_22.z;
  v_27.y = tmpvar_23.z;
  v_27.z = tmpvar_24.z;
  tmpvar_5.xyz = v_27;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_28;
  ambient_28 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_28 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  ambient_28 = (ambient_28 + (x1_29 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_28;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  float tmpvar_4;
  tmpvar_4 = mg_3.y;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_9;
  diffColor_9 = ((tmpvar_5 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) * (tmpvar_2.w * _Color.w));
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_10;
  tmpvar_10 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_12;
  ambient_12 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_13;
  ambient_contrib_13 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_14;
    tmpvar_14.w = 1.0;
    tmpvar_14.xyz = tmpvar_7;
    vec3 x1_15;
    vec3 texCoord_16;
    vec3 tmpvar_17;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_18;
      tmpvar_18.w = 1.0;
      tmpvar_18.xyz = xlv_TEXCOORD6;
      tmpvar_17 = (unity_ProbeVolumeWorldToObject * tmpvar_18).xyz;
    } else {
      tmpvar_17 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_19;
    tmpvar_19 = ((tmpvar_17 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_16.yz = tmpvar_19.yz;
    texCoord_16.x = (tmpvar_19.x * 0.25);
    float tmpvar_20;
    float tmpvar_21;
    tmpvar_21 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_20 = clamp (texCoord_16.x, tmpvar_21, (0.25 - tmpvar_21));
    texCoord_16.x = tmpvar_20;
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.25);
    vec4 tmpvar_23;
    tmpvar_23 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.5);
    x1_15.x = dot (tmpvar_22, tmpvar_14);
    x1_15.y = dot (tmpvar_23, tmpvar_14);
    x1_15.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_16), tmpvar_14);
    ambient_contrib_13 = x1_15;
  } else {
    vec4 tmpvar_24;
    tmpvar_24.w = 1.0;
    tmpvar_24.xyz = tmpvar_7;
    vec3 x_25;
    x_25.x = dot (unity_SHAr, tmpvar_24);
    x_25.y = dot (unity_SHAg, tmpvar_24);
    x_25.z = dot (unity_SHAb, tmpvar_24);
    ambient_contrib_13 = x_25;
  };
  vec3 tmpvar_26;
  tmpvar_26 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_13));
  ambient_12 = tmpvar_26;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_12 = max (((1.055 * 
      pow (max (tmpvar_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_11 = (ambient_12 * tmpvar_10);
  vec3 viewDir_27;
  viewDir_27 = -(tmpvar_8);
  float specularTerm_28;
  float tmpvar_29;
  tmpvar_29 = (1.0 - _Glossiness);
  vec3 inVec_30;
  inVec_30 = (vec3(0.0, 1.0, 0.0) + viewDir_27);
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, (inVec_30 * 
    inversesqrt(max (0.001, dot (inVec_30, inVec_30)))
  )));
  float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_7, viewDir_27));
  float tmpvar_33;
  tmpvar_33 = (tmpvar_29 * tmpvar_29);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_29 * tmpvar_29);
  float tmpvar_35;
  tmpvar_35 = (tmpvar_34 * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (((tmpvar_31 * tmpvar_31) * (tmpvar_35 - 1.0)) + 1.0);
  float tmpvar_37;
  tmpvar_37 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_32 * (1.0 - tmpvar_33))
     + tmpvar_33)) + (tmpvar_32 * (
      (tmpvar_1 * (1.0 - tmpvar_33))
     + tmpvar_33))) + 1e-05)
  ) * (tmpvar_35 / 
    (((3.141593 * tmpvar_36) * tmpvar_36) + 1e-07)
  )) * 0.7853982);
  specularTerm_28 = tmpvar_37;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_28 = sqrt(max (0.0001, tmpvar_37));
  };
  float tmpvar_38;
  tmpvar_38 = max (0.0, (specularTerm_28 * tmpvar_1));
  specularTerm_28 = tmpvar_38;
  float tmpvar_39;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_39 = 1.0;
  } else {
    tmpvar_39 = 0.0;
  };
  specularTerm_28 = (tmpvar_38 * tmpvar_39);
  vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = (diffColor_9 * tmpvar_11);
  vec4 tmpvar_41;
  tmpvar_41.xyz = diffColor_9;
  tmpvar_41.w = tmpvar_10;
  vec4 tmpvar_42;
  tmpvar_42.xyz = tmpvar_6;
  tmpvar_42.w = tmpvar_4;
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = tmpvar_40.xyz;
  gl_FragData[0] = tmpvar_41;
  gl_FragData[1] = tmpvar_42;
  gl_FragData[2] = tmpvar_43;
  gl_FragData[3] = tmpvar_44;
}


#endif
"
}
SubProgram "metal " {
// Stats: 36 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 306
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
Vector 240 [unity_WorldTransformParams]
VectorHalf 256 [unity_ColorSpaceLuminance] 4
Vector 272 [_MainTex_ST]
Vector 288 [_DetailAlbedoMap_ST]
ScalarHalf 304 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_36;
  normal_36 = half3(tmpvar_22);
  half3 ambient_37;
  ambient_37 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_38;
  tmpvar_38 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_38) {
    ambient_37 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_39;
  half4 tmpvar_40;
  tmpvar_40 = (normal_36.xyzz * normal_36.yzzx);
  x1_39.x = dot (_mtl_u.unity_SHBr, tmpvar_40);
  x1_39.y = dot (_mtl_u.unity_SHBg, tmpvar_40);
  x1_39.z = dot (_mtl_u.unity_SHBb, tmpvar_40);
  ambient_37 = (ambient_37 + (x1_39 + (_mtl_u.unity_SHC.xyz * 
    ((normal_36.x * normal_36.x) - (normal_36.y * normal_36.y))
  )));
  tmpvar_9.xyz = ambient_37;
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat6;
float u_xlat8;
float u_xlat15;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.yzw;
    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    u_xlat10_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat1.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_1.y * _OcclusionStrength + u_xlat1.x;
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat6.xyz : vs_TEXCOORD6.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat1.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat6.x = max(u_xlat6.x, u_xlat3.x);
        u_xlat1.x = min(u_xlat8, u_xlat6.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
        u_xlat4.xyz = u_xlat1.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat1.xyz = u_xlat1.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_1 = texture(unity_ProbeVolumeSH, u_xlat1.xyz);
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat2);
        u_xlat3.y = dot(u_xlat10_4, u_xlat2);
        u_xlat3.z = dot(u_xlat10_1, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat2);
        u_xlat3.y = dot(unity_SHAg, u_xlat2);
        u_xlat3.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat1.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat1.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 72 math, 4 textures, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_18;
  tmpvar_18.xyz = normalize((tmpvar_17 * TANGENT.xyz));
  tmpvar_18.w = TANGENT.w;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_19 = tmpvar_18.xyz;
  tmpvar_20 = (((tmpvar_16.yzx * tmpvar_18.zxy) - (tmpvar_16.zxy * tmpvar_18.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_16.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_16.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_16.z;
  vec3 v_24;
  v_24.x = tmpvar_21.x;
  v_24.y = tmpvar_22.x;
  v_24.z = tmpvar_23.x;
  tmpvar_3.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_21.y;
  v_25.y = tmpvar_22.y;
  v_25.z = tmpvar_23.y;
  tmpvar_4.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_21.z;
  v_26.y = tmpvar_22.z;
  v_26.z = tmpvar_23.z;
  tmpvar_5.xyz = v_26;
  tmpvar_6.xy = vec2(0.0, 0.0);
  tmpvar_6.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  float tmpvar_1;
  vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  float tmpvar_3;
  tmpvar_3 = mg_2.y;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_9 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_10.w) * tmpvar_10.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_7, (tmpvar_11.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_11.w));
  tmpvar_9 = (tmpvar_9 * tmpvar_8);
  vec3 viewDir_12;
  viewDir_12 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_13;
  float tmpvar_14;
  tmpvar_14 = (1.0 - _Glossiness);
  vec3 inVec_15;
  inVec_15 = (vec3(0.0, 1.0, 0.0) + viewDir_12);
  float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_7, (inVec_15 * 
    inversesqrt(max (0.001, dot (inVec_15, inVec_15)))
  )));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_7, viewDir_12));
  float tmpvar_18;
  tmpvar_18 = (tmpvar_14 * tmpvar_14);
  float tmpvar_19;
  tmpvar_19 = (tmpvar_14 * tmpvar_14);
  float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = (((tmpvar_16 * tmpvar_16) * (tmpvar_20 - 1.0)) + 1.0);
  float tmpvar_22;
  tmpvar_22 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_17 * (1.0 - tmpvar_18))
     + tmpvar_18)) + (tmpvar_17 * (
      (tmpvar_1 * (1.0 - tmpvar_18))
     + tmpvar_18))) + 1e-05)
  ) * (tmpvar_20 / 
    (((3.141593 * tmpvar_21) * tmpvar_21) + 1e-07)
  )) * 0.7853982);
  specularTerm_13 = tmpvar_22;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_13 = sqrt(max (0.0001, tmpvar_22));
  };
  float tmpvar_23;
  tmpvar_23 = max (0.0, (specularTerm_13 * tmpvar_1));
  specularTerm_13 = tmpvar_23;
  float tmpvar_24;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_24 = 1.0;
  } else {
    tmpvar_24 = 0.0;
  };
  specularTerm_13 = (tmpvar_23 * tmpvar_24);
  vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = (tmpvar_5 * tmpvar_9);
  vec4 tmpvar_26;
  tmpvar_26.xyz = tmpvar_5;
  tmpvar_26.w = tmpvar_8;
  vec4 tmpvar_27;
  tmpvar_27.xyz = tmpvar_6;
  tmpvar_27.w = tmpvar_3;
  vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = tmpvar_25.xyz;
  gl_FragData[0] = tmpvar_26;
  gl_FragData[1] = tmpvar_27;
  gl_FragData[2] = tmpvar_28;
  gl_FragData[3] = tmpvar_29;
}


#endif
"
}
SubProgram "metal " {
// Stats: 25 math, 1 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 274
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Matrix 144 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [unity_WorldTransformParams]
Vector 224 [unity_DynamicLightmapST]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9.xy = half2(float2(0.0, 0.0));
  tmpvar_9.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat4;
mediump float u_xlat16_10;
void main()
{
    u_xlat10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat0.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_0.y * _OcclusionStrength + u_xlat0.x;
    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat2.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    u_xlat10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_2.xyz = u_xlat10_2.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_10 = max(u_xlat10_2.w, 9.99999975e-05);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat4.x = u_xlat10_2.w * unity_DynamicLightmap_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat4.xxx;
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_10);
    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 74 math, 5 textures, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "UNITY_HDR_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_18;
  tmpvar_18.xyz = normalize((tmpvar_17 * TANGENT.xyz));
  tmpvar_18.w = TANGENT.w;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_19 = tmpvar_18.xyz;
  tmpvar_20 = (((tmpvar_16.yzx * tmpvar_18.zxy) - (tmpvar_16.zxy * tmpvar_18.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_16.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_16.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_16.z;
  vec3 v_24;
  v_24.x = tmpvar_21.x;
  v_24.y = tmpvar_22.x;
  v_24.z = tmpvar_23.x;
  tmpvar_3.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_21.y;
  v_25.y = tmpvar_22.y;
  v_25.z = tmpvar_23.y;
  tmpvar_4.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_21.z;
  v_26.y = tmpvar_22.z;
  v_26.z = tmpvar_23.z;
  tmpvar_5.xyz = v_26;
  tmpvar_6.xy = vec2(0.0, 0.0);
  tmpvar_6.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  float tmpvar_1;
  vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  float tmpvar_3;
  tmpvar_3 = mg_2.y;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_9 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_10.w) * tmpvar_10.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_7, (tmpvar_11.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_11.w));
  tmpvar_9 = (tmpvar_9 * tmpvar_8);
  vec3 viewDir_12;
  viewDir_12 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_13;
  float tmpvar_14;
  tmpvar_14 = (1.0 - _Glossiness);
  vec3 inVec_15;
  inVec_15 = (vec3(0.0, 1.0, 0.0) + viewDir_12);
  float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_7, (inVec_15 * 
    inversesqrt(max (0.001, dot (inVec_15, inVec_15)))
  )));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_7, viewDir_12));
  float tmpvar_18;
  tmpvar_18 = (tmpvar_14 * tmpvar_14);
  float tmpvar_19;
  tmpvar_19 = (tmpvar_14 * tmpvar_14);
  float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = (((tmpvar_16 * tmpvar_16) * (tmpvar_20 - 1.0)) + 1.0);
  float tmpvar_22;
  tmpvar_22 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_17 * (1.0 - tmpvar_18))
     + tmpvar_18)) + (tmpvar_17 * (
      (tmpvar_1 * (1.0 - tmpvar_18))
     + tmpvar_18))) + 1e-05)
  ) * (tmpvar_20 / 
    (((3.141593 * tmpvar_21) * tmpvar_21) + 1e-07)
  )) * 0.7853982);
  specularTerm_13 = tmpvar_22;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_13 = sqrt(max (0.0001, tmpvar_22));
  };
  float tmpvar_23;
  tmpvar_23 = max (0.0, (specularTerm_13 * tmpvar_1));
  specularTerm_13 = tmpvar_23;
  float tmpvar_24;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_24 = 1.0;
  } else {
    tmpvar_24 = 0.0;
  };
  specularTerm_13 = (tmpvar_23 * tmpvar_24);
  vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = (tmpvar_5 * tmpvar_9);
  vec4 tmpvar_26;
  tmpvar_26.xyz = tmpvar_5;
  tmpvar_26.w = tmpvar_8;
  vec4 tmpvar_27;
  tmpvar_27.xyz = tmpvar_6;
  tmpvar_27.w = tmpvar_3;
  vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = (tmpvar_25.xyz + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  gl_FragData[0] = tmpvar_26;
  gl_FragData[1] = tmpvar_27;
  gl_FragData[2] = tmpvar_28;
  gl_FragData[3] = tmpvar_29;
}


#endif
"
}
SubProgram "metal " {
// Stats: 25 math, 1 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "UNITY_HDR_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 274
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Matrix 144 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [unity_WorldTransformParams]
Vector 224 [unity_DynamicLightmapST]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9.xy = half2(float2(0.0, 0.0));
  tmpvar_9.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat4;
mediump float u_xlat16_10;
void main()
{
    u_xlat10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat0.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_0.y * _OcclusionStrength + u_xlat0.x;
    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat2.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    u_xlat10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_2.xyz = u_xlat10_2.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_10 = max(u_xlat10_2.w, 9.99999975e-05);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat4.x = u_xlat10_2.w * unity_DynamicLightmap_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat4.xxx;
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_10);
    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
    u_xlat10_2 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat10_2.xyz * _EmissionColor.xyz;
    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 74 math, 4 textures, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].x;
  v_13.y = unity_WorldToObject[1].x;
  v_13.z = unity_WorldToObject[2].x;
  v_13.w = unity_WorldToObject[3].x;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].y;
  v_14.y = unity_WorldToObject[1].y;
  v_14.z = unity_WorldToObject[2].y;
  v_14.w = unity_WorldToObject[3].y;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].z;
  v_15.y = unity_WorldToObject[1].z;
  v_15.z = unity_WorldToObject[2].z;
  v_15.w = unity_WorldToObject[3].z;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * gl_Normal.x)
   + 
    (v_14.xyz * gl_Normal.y)
  ) + (v_15.xyz * gl_Normal.z)));
  mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_18;
  tmpvar_18.xyz = normalize((tmpvar_17 * TANGENT.xyz));
  tmpvar_18.w = TANGENT.w;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_19 = tmpvar_18.xyz;
  tmpvar_20 = (((tmpvar_16.yzx * tmpvar_18.zxy) - (tmpvar_16.zxy * tmpvar_18.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_16.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_16.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_16.z;
  vec3 v_24;
  v_24.x = tmpvar_21.x;
  v_24.y = tmpvar_22.x;
  v_24.z = tmpvar_23.x;
  tmpvar_3.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_21.y;
  v_25.y = tmpvar_22.y;
  v_25.z = tmpvar_23.y;
  tmpvar_4.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_21.z;
  v_26.y = tmpvar_22.z;
  v_26.z = tmpvar_23.z;
  tmpvar_5.xyz = v_26;
  tmpvar_6.xy = vec2(0.0, 0.0);
  tmpvar_6.zw = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 unity_DynamicLightmap_HDR;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  float tmpvar_4;
  tmpvar_4 = mg_3.y;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_8;
  diffColor_8 = ((tmpvar_5 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) * (tmpvar_2.w * _Color.w));
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_10;
  vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD5.zw);
  vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_DynamicDirectionality, xlv_TEXCOORD5.zw);
  tmpvar_10 = ((pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_11.w) * tmpvar_11.xyz)
  , unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_7, (tmpvar_12.xyz - 0.5))
   + 0.5)) / max (0.0001, tmpvar_12.w));
  tmpvar_10 = (tmpvar_10 * tmpvar_9);
  vec3 viewDir_13;
  viewDir_13 = -(normalize(xlv_TEXCOORD1));
  float specularTerm_14;
  float tmpvar_15;
  tmpvar_15 = (1.0 - _Glossiness);
  vec3 inVec_16;
  inVec_16 = (vec3(0.0, 1.0, 0.0) + viewDir_13);
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_7, (inVec_16 * 
    inversesqrt(max (0.001, dot (inVec_16, inVec_16)))
  )));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_7, viewDir_13));
  float tmpvar_19;
  tmpvar_19 = (tmpvar_15 * tmpvar_15);
  float tmpvar_20;
  tmpvar_20 = (tmpvar_15 * tmpvar_15);
  float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  float tmpvar_22;
  tmpvar_22 = (((tmpvar_17 * tmpvar_17) * (tmpvar_21 - 1.0)) + 1.0);
  float tmpvar_23;
  tmpvar_23 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_18 * (1.0 - tmpvar_19))
     + tmpvar_19)) + (tmpvar_18 * (
      (tmpvar_1 * (1.0 - tmpvar_19))
     + tmpvar_19))) + 1e-05)
  ) * (tmpvar_21 / 
    (((3.141593 * tmpvar_22) * tmpvar_22) + 1e-07)
  )) * 0.7853982);
  specularTerm_14 = tmpvar_23;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_14 = sqrt(max (0.0001, tmpvar_23));
  };
  float tmpvar_24;
  tmpvar_24 = max (0.0, (specularTerm_14 * tmpvar_1));
  specularTerm_14 = tmpvar_24;
  float tmpvar_25;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_25 = 1.0;
  } else {
    tmpvar_25 = 0.0;
  };
  specularTerm_14 = (tmpvar_24 * tmpvar_25);
  vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (diffColor_8 * tmpvar_10);
  vec4 tmpvar_27;
  tmpvar_27.xyz = diffColor_8;
  tmpvar_27.w = tmpvar_9;
  vec4 tmpvar_28;
  tmpvar_28.xyz = tmpvar_6;
  tmpvar_28.w = tmpvar_4;
  vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = tmpvar_26.xyz;
  gl_FragData[0] = tmpvar_27;
  gl_FragData[1] = tmpvar_28;
  gl_FragData[2] = tmpvar_29;
  gl_FragData[3] = tmpvar_30;
}


#endif
"
}
SubProgram "metal " {
// Stats: 25 math, 1 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
Bind "texcoord2" ATTR5
ConstBuffer "$Globals" 274
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Matrix 144 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 208 [unity_WorldTransformParams]
Vector 224 [unity_DynamicLightmapST]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
  float4 _glesMultiTexCoord2 [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9.xy = half2(float2(0.0, 0.0));
  tmpvar_9.zw = half2(((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw));
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.w = 0.0;
    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_DynamicLightmap;
uniform  sampler2D unity_DynamicDirectionality;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
float u_xlat4;
mediump float u_xlat16_10;
void main()
{
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = u_xlat10_1.wxyz * _Color.wxyz;
    u_xlat3.xyz = u_xlat10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.yzw;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;
    u_xlat10_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat1.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_1.y * _OcclusionStrength + u_xlat1.x;
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    u_xlat10_2 = texture(unity_DynamicDirectionality, vs_TEXCOORD5.zw);
    u_xlat16_2.xyz = u_xlat10_2.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_10 = max(u_xlat10_2.w, 9.99999975e-05);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat10_2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
    u_xlat4 = u_xlat10_2.w * unity_DynamicLightmap_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat4);
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_10);
    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 93 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  mat3 tmpvar_18;
  tmpvar_18[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_18[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_18[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_19;
  tmpvar_19.xyz = normalize((tmpvar_18 * TANGENT.xyz));
  tmpvar_19.w = TANGENT.w;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_20 = tmpvar_19.xyz;
  tmpvar_21 = (((tmpvar_17.yzx * tmpvar_19.zxy) - (tmpvar_17.zxy * tmpvar_19.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_22.x = tmpvar_20.x;
  tmpvar_22.y = tmpvar_21.x;
  tmpvar_22.z = tmpvar_17.x;
  tmpvar_23.x = tmpvar_20.y;
  tmpvar_23.y = tmpvar_21.y;
  tmpvar_23.z = tmpvar_17.y;
  tmpvar_24.x = tmpvar_20.z;
  tmpvar_24.y = tmpvar_21.z;
  tmpvar_24.z = tmpvar_17.z;
  vec3 v_25;
  v_25.x = tmpvar_22.x;
  v_25.y = tmpvar_23.x;
  v_25.z = tmpvar_24.x;
  tmpvar_3.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_22.y;
  v_26.y = tmpvar_23.y;
  v_26.z = tmpvar_24.y;
  tmpvar_4.xyz = v_26;
  vec3 v_27;
  v_27.x = tmpvar_22.z;
  v_27.y = tmpvar_23.z;
  v_27.z = tmpvar_24.z;
  tmpvar_5.xyz = v_27;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_28;
  ambient_28 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_28 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  ambient_28 = (ambient_28 + (x1_29 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_28;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  float tmpvar_3;
  tmpvar_3 = mg_2.y;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_10;
  tmpvar_10 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_11;
  ambient_11 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_12;
  ambient_contrib_12 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_13;
    tmpvar_13.w = 1.0;
    tmpvar_13.xyz = tmpvar_7;
    vec3 x1_14;
    vec3 texCoord_15;
    vec3 tmpvar_16;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_17;
      tmpvar_17.w = 1.0;
      tmpvar_17.xyz = xlv_TEXCOORD6;
      tmpvar_16 = (unity_ProbeVolumeWorldToObject * tmpvar_17).xyz;
    } else {
      tmpvar_16 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_18;
    tmpvar_18 = ((tmpvar_16 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_15.yz = tmpvar_18.yz;
    texCoord_15.x = (tmpvar_18.x * 0.25);
    float tmpvar_19;
    float tmpvar_20;
    tmpvar_20 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_19 = clamp (texCoord_15.x, tmpvar_20, (0.25 - tmpvar_20));
    texCoord_15.x = tmpvar_19;
    vec4 tmpvar_21;
    tmpvar_21 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.25);
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.5);
    x1_14.x = dot (tmpvar_21, tmpvar_13);
    x1_14.y = dot (tmpvar_22, tmpvar_13);
    x1_14.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_15), tmpvar_13);
    ambient_contrib_12 = x1_14;
  } else {
    vec4 tmpvar_23;
    tmpvar_23.w = 1.0;
    tmpvar_23.xyz = tmpvar_7;
    vec3 x_24;
    x_24.x = dot (unity_SHAr, tmpvar_23);
    x_24.y = dot (unity_SHAg, tmpvar_23);
    x_24.z = dot (unity_SHAb, tmpvar_23);
    ambient_contrib_12 = x_24;
  };
  vec3 tmpvar_25;
  tmpvar_25 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_12));
  ambient_11 = tmpvar_25;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_11 = max (((1.055 * 
      pow (max (tmpvar_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_10 = (ambient_11 * tmpvar_9);
  vec3 viewDir_26;
  viewDir_26 = -(tmpvar_8);
  float specularTerm_27;
  float tmpvar_28;
  tmpvar_28 = (1.0 - _Glossiness);
  vec3 inVec_29;
  inVec_29 = (vec3(0.0, 1.0, 0.0) + viewDir_26);
  float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_7, (inVec_29 * 
    inversesqrt(max (0.001, dot (inVec_29, inVec_29)))
  )));
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, viewDir_26));
  float tmpvar_32;
  tmpvar_32 = (tmpvar_28 * tmpvar_28);
  float tmpvar_33;
  tmpvar_33 = (tmpvar_28 * tmpvar_28);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_33 * tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (((tmpvar_30 * tmpvar_30) * (tmpvar_34 - 1.0)) + 1.0);
  float tmpvar_36;
  tmpvar_36 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_31 * (1.0 - tmpvar_32))
     + tmpvar_32)) + (tmpvar_31 * (
      (tmpvar_1 * (1.0 - tmpvar_32))
     + tmpvar_32))) + 1e-05)
  ) * (tmpvar_34 / 
    (((3.141593 * tmpvar_35) * tmpvar_35) + 1e-07)
  )) * 0.7853982);
  specularTerm_27 = tmpvar_36;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_27 = sqrt(max (0.0001, tmpvar_36));
  };
  float tmpvar_37;
  tmpvar_37 = max (0.0, (specularTerm_27 * tmpvar_1));
  specularTerm_27 = tmpvar_37;
  float tmpvar_38;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_38 = 1.0;
  } else {
    tmpvar_38 = 0.0;
  };
  specularTerm_27 = (tmpvar_37 * tmpvar_38);
  vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = (tmpvar_5 * tmpvar_10);
  vec4 tmpvar_40;
  tmpvar_40.xyz = tmpvar_5;
  tmpvar_40.w = tmpvar_9;
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_6;
  tmpvar_41.w = tmpvar_3;
  vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = tmpvar_39.xyz;
  gl_FragData[0] = tmpvar_40;
  gl_FragData[1] = tmpvar_41;
  gl_FragData[2] = tmpvar_42;
  gl_FragData[3] = tmpvar_43;
}


#endif
"
}
SubProgram "metal " {
// Stats: 36 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 306
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
Vector 240 [unity_WorldTransformParams]
VectorHalf 256 [unity_ColorSpaceLuminance] 4
Vector 272 [_MainTex_ST]
Vector 288 [_DetailAlbedoMap_ST]
ScalarHalf 304 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_36;
  normal_36 = half3(tmpvar_22);
  half3 ambient_37;
  ambient_37 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_38;
  tmpvar_38 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_38) {
    ambient_37 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_39;
  half4 tmpvar_40;
  tmpvar_40 = (normal_36.xyzz * normal_36.yzzx);
  x1_39.x = dot (_mtl_u.unity_SHBr, tmpvar_40);
  x1_39.y = dot (_mtl_u.unity_SHBg, tmpvar_40);
  x1_39.z = dot (_mtl_u.unity_SHBb, tmpvar_40);
  ambient_37 = (ambient_37 + (x1_39 + (_mtl_u.unity_SHC.xyz * 
    ((normal_36.x * normal_36.x) - (normal_36.y * normal_36.y))
  )));
  tmpvar_9.xyz = ambient_37;
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat7;
float u_xlat8;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat10_2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_2.y * _OcclusionStrength + u_xlat2.x;
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : vs_TEXCOORD6.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
        u_xlat2.x = min(u_xlat8, u_xlat7.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat1);
        u_xlat3.y = dot(u_xlat10_4, u_xlat1);
        u_xlat3.z = dot(u_xlat10_2, u_xlat1);
    } else {
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat1);
        u_xlat3.y = dot(unity_SHAg, u_xlat1);
        u_xlat3.z = dot(unity_SHAb, u_xlat1);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat2.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 95 math, 6 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  mat3 tmpvar_18;
  tmpvar_18[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_18[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_18[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_19;
  tmpvar_19.xyz = normalize((tmpvar_18 * TANGENT.xyz));
  tmpvar_19.w = TANGENT.w;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_20 = tmpvar_19.xyz;
  tmpvar_21 = (((tmpvar_17.yzx * tmpvar_19.zxy) - (tmpvar_17.zxy * tmpvar_19.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_22.x = tmpvar_20.x;
  tmpvar_22.y = tmpvar_21.x;
  tmpvar_22.z = tmpvar_17.x;
  tmpvar_23.x = tmpvar_20.y;
  tmpvar_23.y = tmpvar_21.y;
  tmpvar_23.z = tmpvar_17.y;
  tmpvar_24.x = tmpvar_20.z;
  tmpvar_24.y = tmpvar_21.z;
  tmpvar_24.z = tmpvar_17.z;
  vec3 v_25;
  v_25.x = tmpvar_22.x;
  v_25.y = tmpvar_23.x;
  v_25.z = tmpvar_24.x;
  tmpvar_3.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_22.y;
  v_26.y = tmpvar_23.y;
  v_26.z = tmpvar_24.y;
  tmpvar_4.xyz = v_26;
  vec3 v_27;
  v_27.x = tmpvar_22.z;
  v_27.y = tmpvar_23.z;
  v_27.z = tmpvar_24.z;
  tmpvar_5.xyz = v_27;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_28;
  ambient_28 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_28 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  ambient_28 = (ambient_28 + (x1_29 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_28;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  float tmpvar_3;
  tmpvar_3 = mg_2.y;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_10;
  tmpvar_10 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_11;
  ambient_11 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_12;
  ambient_contrib_12 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_13;
    tmpvar_13.w = 1.0;
    tmpvar_13.xyz = tmpvar_7;
    vec3 x1_14;
    vec3 texCoord_15;
    vec3 tmpvar_16;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_17;
      tmpvar_17.w = 1.0;
      tmpvar_17.xyz = xlv_TEXCOORD6;
      tmpvar_16 = (unity_ProbeVolumeWorldToObject * tmpvar_17).xyz;
    } else {
      tmpvar_16 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_18;
    tmpvar_18 = ((tmpvar_16 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_15.yz = tmpvar_18.yz;
    texCoord_15.x = (tmpvar_18.x * 0.25);
    float tmpvar_19;
    float tmpvar_20;
    tmpvar_20 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_19 = clamp (texCoord_15.x, tmpvar_20, (0.25 - tmpvar_20));
    texCoord_15.x = tmpvar_19;
    vec4 tmpvar_21;
    tmpvar_21 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.25);
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_15);
    texCoord_15.x = (tmpvar_19 + 0.5);
    x1_14.x = dot (tmpvar_21, tmpvar_13);
    x1_14.y = dot (tmpvar_22, tmpvar_13);
    x1_14.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_15), tmpvar_13);
    ambient_contrib_12 = x1_14;
  } else {
    vec4 tmpvar_23;
    tmpvar_23.w = 1.0;
    tmpvar_23.xyz = tmpvar_7;
    vec3 x_24;
    x_24.x = dot (unity_SHAr, tmpvar_23);
    x_24.y = dot (unity_SHAg, tmpvar_23);
    x_24.z = dot (unity_SHAb, tmpvar_23);
    ambient_contrib_12 = x_24;
  };
  vec3 tmpvar_25;
  tmpvar_25 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_12));
  ambient_11 = tmpvar_25;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_11 = max (((1.055 * 
      pow (max (tmpvar_25, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_10 = (ambient_11 * tmpvar_9);
  vec3 viewDir_26;
  viewDir_26 = -(tmpvar_8);
  float specularTerm_27;
  float tmpvar_28;
  tmpvar_28 = (1.0 - _Glossiness);
  vec3 inVec_29;
  inVec_29 = (vec3(0.0, 1.0, 0.0) + viewDir_26);
  float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_7, (inVec_29 * 
    inversesqrt(max (0.001, dot (inVec_29, inVec_29)))
  )));
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, viewDir_26));
  float tmpvar_32;
  tmpvar_32 = (tmpvar_28 * tmpvar_28);
  float tmpvar_33;
  tmpvar_33 = (tmpvar_28 * tmpvar_28);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_33 * tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (((tmpvar_30 * tmpvar_30) * (tmpvar_34 - 1.0)) + 1.0);
  float tmpvar_36;
  tmpvar_36 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_31 * (1.0 - tmpvar_32))
     + tmpvar_32)) + (tmpvar_31 * (
      (tmpvar_1 * (1.0 - tmpvar_32))
     + tmpvar_32))) + 1e-05)
  ) * (tmpvar_34 / 
    (((3.141593 * tmpvar_35) * tmpvar_35) + 1e-07)
  )) * 0.7853982);
  specularTerm_27 = tmpvar_36;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_27 = sqrt(max (0.0001, tmpvar_36));
  };
  float tmpvar_37;
  tmpvar_37 = max (0.0, (specularTerm_27 * tmpvar_1));
  specularTerm_27 = tmpvar_37;
  float tmpvar_38;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_38 = 1.0;
  } else {
    tmpvar_38 = 0.0;
  };
  specularTerm_27 = (tmpvar_37 * tmpvar_38);
  vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = (tmpvar_5 * tmpvar_10);
  vec4 tmpvar_40;
  tmpvar_40.xyz = tmpvar_5;
  tmpvar_40.w = tmpvar_9;
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_6;
  tmpvar_41.w = tmpvar_3;
  vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = (tmpvar_39.xyz + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  gl_FragData[0] = tmpvar_40;
  gl_FragData[1] = tmpvar_41;
  gl_FragData[2] = tmpvar_42;
  gl_FragData[3] = tmpvar_43;
}


#endif
"
}
SubProgram "metal " {
// Stats: 36 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 306
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
Vector 240 [unity_WorldTransformParams]
VectorHalf 256 [unity_ColorSpaceLuminance] 4
Vector 272 [_MainTex_ST]
Vector 288 [_DetailAlbedoMap_ST]
ScalarHalf 304 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_36;
  normal_36 = half3(tmpvar_22);
  half3 ambient_37;
  ambient_37 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_38;
  tmpvar_38 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_38) {
    ambient_37 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_39;
  half4 tmpvar_40;
  tmpvar_40 = (normal_36.xyzz * normal_36.yzzx);
  x1_39.x = dot (_mtl_u.unity_SHBr, tmpvar_40);
  x1_39.y = dot (_mtl_u.unity_SHBg, tmpvar_40);
  x1_39.z = dot (_mtl_u.unity_SHBb, tmpvar_40);
  ambient_37 = (ambient_37 + (x1_39 + (_mtl_u.unity_SHC.xyz * 
    ((normal_36.x * normal_36.x) - (normal_36.y * normal_36.y))
  )));
  tmpvar_9.xyz = ambient_37;
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D _EmissionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat7;
float u_xlat8;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat10_2 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_2.y * _OcclusionStrength + u_xlat2.x;
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat7.xyz : vs_TEXCOORD6.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat7.x, u_xlat3.x);
        u_xlat2.x = min(u_xlat8, u_xlat7.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat1);
        u_xlat3.y = dot(u_xlat10_4, u_xlat1);
        u_xlat3.z = dot(u_xlat10_2, u_xlat1);
    } else {
        u_xlat1.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat1);
        u_xlat3.y = dot(unity_SHAg, u_xlat1);
        u_xlat3.z = dot(unity_SHAb, u_xlat1);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat2.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.www * u_xlat2.xyz;
    u_xlat10_3 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    u_xlat3.xyz = u_xlat10_3.xyz * _EmissionColor.xyz;
    SV_Target3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 95 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_WorldTransformParams;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = gl_Vertex.xyz;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_10);
  vec4 texcoord_11;
  texcoord_11.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_1;
  } else {
    tmpvar_12 = tmpvar_2;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 n_13;
  n_13 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].x;
  v_14.y = unity_WorldToObject[1].x;
  v_14.z = unity_WorldToObject[2].x;
  v_14.w = unity_WorldToObject[3].x;
  vec4 v_15;
  v_15.x = unity_WorldToObject[0].y;
  v_15.y = unity_WorldToObject[1].y;
  v_15.z = unity_WorldToObject[2].y;
  v_15.w = unity_WorldToObject[3].y;
  vec4 v_16;
  v_16.x = unity_WorldToObject[0].z;
  v_16.y = unity_WorldToObject[1].z;
  v_16.z = unity_WorldToObject[2].z;
  v_16.w = unity_WorldToObject[3].z;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * gl_Normal.x)
   + 
    (v_15.xyz * gl_Normal.y)
  ) + (v_16.xyz * gl_Normal.z)));
  mat3 tmpvar_18;
  tmpvar_18[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_18[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_18[2] = unity_ObjectToWorld[2].xyz;
  vec4 tmpvar_19;
  tmpvar_19.xyz = normalize((tmpvar_18 * TANGENT.xyz));
  tmpvar_19.w = TANGENT.w;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_20 = tmpvar_19.xyz;
  tmpvar_21 = (((tmpvar_17.yzx * tmpvar_19.zxy) - (tmpvar_17.zxy * tmpvar_19.yzx)) * (TANGENT.w * unity_WorldTransformParams.w));
  vec3 tmpvar_22;
  vec3 tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_22.x = tmpvar_20.x;
  tmpvar_22.y = tmpvar_21.x;
  tmpvar_22.z = tmpvar_17.x;
  tmpvar_23.x = tmpvar_20.y;
  tmpvar_23.y = tmpvar_21.y;
  tmpvar_23.z = tmpvar_17.y;
  tmpvar_24.x = tmpvar_20.z;
  tmpvar_24.y = tmpvar_21.z;
  tmpvar_24.z = tmpvar_17.z;
  vec3 v_25;
  v_25.x = tmpvar_22.x;
  v_25.y = tmpvar_23.x;
  v_25.z = tmpvar_24.x;
  tmpvar_3.xyz = v_25;
  vec3 v_26;
  v_26.x = tmpvar_22.y;
  v_26.y = tmpvar_23.y;
  v_26.z = tmpvar_24.y;
  tmpvar_4.xyz = v_26;
  vec3 v_27;
  v_27.x = tmpvar_22.z;
  v_27.y = tmpvar_23.z;
  v_27.z = tmpvar_24.z;
  tmpvar_5.xyz = v_27;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_28;
  ambient_28 = vec3(0.0, 0.0, 0.0);
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_28 = vec3(0.0, 0.0, 0.0);
  };
  vec3 x1_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_17.xyzz * tmpvar_17.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  ambient_28 = (ambient_28 + (x1_29 + (unity_SHC.xyz * 
    ((tmpvar_17.x * tmpvar_17.x) - (tmpvar_17.y * tmpvar_17.y))
  )));
  tmpvar_6.xyz = ambient_28;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = n_13;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform sampler3D unity_ProbeVolumeSH;
uniform vec4 unity_ProbeVolumeParams;
uniform mat4 unity_ProbeVolumeWorldToObject;
uniform vec3 unity_ProbeVolumeSizeInv;
uniform vec3 unity_ProbeVolumeMin;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  float tmpvar_4;
  tmpvar_4 = mg_3.y;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec3 diffColor_9;
  diffColor_9 = ((tmpvar_5 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) * (tmpvar_2.w * _Color.w));
  tmpvar_1 = max (0.0, tmpvar_7.y);
  float tmpvar_10;
  tmpvar_10 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec3 ambient_12;
  ambient_12 = xlv_TEXCOORD5.xyz;
  vec3 ambient_contrib_13;
  ambient_contrib_13 = vec3(0.0, 0.0, 0.0);
  if ((unity_ProbeVolumeParams.x == 1.0)) {
    vec4 tmpvar_14;
    tmpvar_14.w = 1.0;
    tmpvar_14.xyz = tmpvar_7;
    vec3 x1_15;
    vec3 texCoord_16;
    vec3 tmpvar_17;
    if ((unity_ProbeVolumeParams.y == 1.0)) {
      vec4 tmpvar_18;
      tmpvar_18.w = 1.0;
      tmpvar_18.xyz = xlv_TEXCOORD6;
      tmpvar_17 = (unity_ProbeVolumeWorldToObject * tmpvar_18).xyz;
    } else {
      tmpvar_17 = xlv_TEXCOORD6;
    };
    vec3 tmpvar_19;
    tmpvar_19 = ((tmpvar_17 - unity_ProbeVolumeMin) * unity_ProbeVolumeSizeInv);
    texCoord_16.yz = tmpvar_19.yz;
    texCoord_16.x = (tmpvar_19.x * 0.25);
    float tmpvar_20;
    float tmpvar_21;
    tmpvar_21 = (0.5 * unity_ProbeVolumeParams.z);
    tmpvar_20 = clamp (texCoord_16.x, tmpvar_21, (0.25 - tmpvar_21));
    texCoord_16.x = tmpvar_20;
    vec4 tmpvar_22;
    tmpvar_22 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.25);
    vec4 tmpvar_23;
    tmpvar_23 = texture3D (unity_ProbeVolumeSH, texCoord_16);
    texCoord_16.x = (tmpvar_20 + 0.5);
    x1_15.x = dot (tmpvar_22, tmpvar_14);
    x1_15.y = dot (tmpvar_23, tmpvar_14);
    x1_15.z = dot (texture3D (unity_ProbeVolumeSH, texCoord_16), tmpvar_14);
    ambient_contrib_13 = x1_15;
  } else {
    vec4 tmpvar_24;
    tmpvar_24.w = 1.0;
    tmpvar_24.xyz = tmpvar_7;
    vec3 x_25;
    x_25.x = dot (unity_SHAr, tmpvar_24);
    x_25.y = dot (unity_SHAg, tmpvar_24);
    x_25.z = dot (unity_SHAb, tmpvar_24);
    ambient_contrib_13 = x_25;
  };
  vec3 tmpvar_26;
  tmpvar_26 = max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + ambient_contrib_13));
  ambient_12 = tmpvar_26;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    ambient_12 = max (((1.055 * 
      pow (max (tmpvar_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  tmpvar_11 = (ambient_12 * tmpvar_10);
  vec3 viewDir_27;
  viewDir_27 = -(tmpvar_8);
  float specularTerm_28;
  float tmpvar_29;
  tmpvar_29 = (1.0 - _Glossiness);
  vec3 inVec_30;
  inVec_30 = (vec3(0.0, 1.0, 0.0) + viewDir_27);
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_7, (inVec_30 * 
    inversesqrt(max (0.001, dot (inVec_30, inVec_30)))
  )));
  float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_7, viewDir_27));
  float tmpvar_33;
  tmpvar_33 = (tmpvar_29 * tmpvar_29);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_29 * tmpvar_29);
  float tmpvar_35;
  tmpvar_35 = (tmpvar_34 * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (((tmpvar_31 * tmpvar_31) * (tmpvar_35 - 1.0)) + 1.0);
  float tmpvar_37;
  tmpvar_37 = (((2.0 / 
    (((tmpvar_1 * (
      (tmpvar_32 * (1.0 - tmpvar_33))
     + tmpvar_33)) + (tmpvar_32 * (
      (tmpvar_1 * (1.0 - tmpvar_33))
     + tmpvar_33))) + 1e-05)
  ) * (tmpvar_35 / 
    (((3.141593 * tmpvar_36) * tmpvar_36) + 1e-07)
  )) * 0.7853982);
  specularTerm_28 = tmpvar_37;
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    specularTerm_28 = sqrt(max (0.0001, tmpvar_37));
  };
  float tmpvar_38;
  tmpvar_38 = max (0.0, (specularTerm_28 * tmpvar_1));
  specularTerm_28 = tmpvar_38;
  float tmpvar_39;
  if (any(bvec3(tmpvar_6))) {
    tmpvar_39 = 1.0;
  } else {
    tmpvar_39 = 0.0;
  };
  specularTerm_28 = (tmpvar_38 * tmpvar_39);
  vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = (diffColor_9 * tmpvar_11);
  vec4 tmpvar_41;
  tmpvar_41.xyz = diffColor_9;
  tmpvar_41.w = tmpvar_10;
  vec4 tmpvar_42;
  tmpvar_42.xyz = tmpvar_6;
  tmpvar_42.w = tmpvar_4;
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = ((tmpvar_7 * 0.5) + 0.5);
  vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = tmpvar_40.xyz;
  gl_FragData[0] = tmpvar_41;
  gl_FragData[1] = tmpvar_42;
  gl_FragData[2] = tmpvar_43;
  gl_FragData[3] = tmpvar_44;
}


#endif
"
}
SubProgram "metal " {
// Stats: 36 math, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
Bind "tangent" ATTR0
Bind "vertex" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 306
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHBr] 4
VectorHalf 24 [unity_SHBg] 4
VectorHalf 32 [unity_SHBb] 4
VectorHalf 40 [unity_SHC] 4
Vector 240 [unity_WorldTransformParams]
VectorHalf 256 [unity_ColorSpaceLuminance] 4
Vector 272 [_MainTex_ST]
Vector 288 [_DetailAlbedoMap_ST]
ScalarHalf 304 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
inline float4x4 _xlcast_float4x4(half4x4 v) { return float4x4(float4(v[0]), float4(v[1]), float4(v[2]), float4(v[3])); }
inline float3x3 _xlcast_float3x3(half3x3 v) { return float3x3(float3(v[0]), float3(v[1]), float3(v[2])); }
inline float2x2 _xlcast_float2x2(half2x2 v) { return float2x2(float2(v[0]), float2(v[1])); }
inline half4x4 _xlcast_half4x4(float4x4 v) { return half4x4(half4(v[0]), half4(v[1]), half4(v[2]), half4(v[3])); }
inline half3x3 _xlcast_half3x3(float3x3 v) { return half3x3(half3(v[0]), half3(v[1]), half3(v[2])); }
inline half2x2 _xlcast_half2x2(float2x2 v) { return half2x2(half2(v[0]), half2(v[1])); }
struct xlatMtlShaderInput {
  float4 _glesTANGENT [[attribute(0)]];
  float4 _glesVertex [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 unity_WorldTransformParams;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  tmpvar_4 = half4(_mtl_i._glesTANGENT);
  float3x3 tangentToWorld_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  half4 tmpvar_8;
  half4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float3 tmpvar_11;
  tmpvar_11 = tmpvar_10.xyz;
  float4 tmpvar_12;
  float4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_12 = (_mtl_u.glstate_matrix_mvp * tmpvar_13);
  float4 texcoord_14;
  texcoord_14.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_15;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_16;
  float3 n_17;
  n_17 = (tmpvar_10.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_16 = half3(n_17);
  float3 norm_18;
  norm_18 = float3(tmpvar_1);
  float4 v_19;
  v_19.x = _mtl_u.unity_WorldToObject[0].x;
  v_19.y = _mtl_u.unity_WorldToObject[1].x;
  v_19.z = _mtl_u.unity_WorldToObject[2].x;
  v_19.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_20;
  v_20.x = _mtl_u.unity_WorldToObject[0].y;
  v_20.y = _mtl_u.unity_WorldToObject[1].y;
  v_20.z = _mtl_u.unity_WorldToObject[2].y;
  v_20.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_21;
  v_21.x = _mtl_u.unity_WorldToObject[0].z;
  v_21.y = _mtl_u.unity_WorldToObject[1].z;
  v_21.z = _mtl_u.unity_WorldToObject[2].z;
  v_21.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * norm_18.x)
   + 
    (v_20.xyz * norm_18.y)
  ) + (v_21.xyz * norm_18.z)));
  float3 dir_23;
  dir_23 = float3(tmpvar_4.xyz);
  float3x3 tmpvar_24;
  tmpvar_24[0] = _mtl_u.unity_ObjectToWorld[0].xyz;
  tmpvar_24[1] = _mtl_u.unity_ObjectToWorld[1].xyz;
  tmpvar_24[2] = _mtl_u.unity_ObjectToWorld[2].xyz;
  float4 tmpvar_25;
  tmpvar_25.xyz = normalize((tmpvar_24 * dir_23));
  tmpvar_25.w = float(tmpvar_4.w);
  half3 normal_26;
  normal_26 = half3(tmpvar_22);
  half3 tangent_27;
  tangent_27 = half3(tmpvar_25.xyz);
  half tangentSign_28;
  tangentSign_28 = half(tmpvar_25.w);
  half xlat_varsign_29;
  float tmpvar_30;
  tmpvar_30 = ((float)tangentSign_28 * _mtl_u.unity_WorldTransformParams.w);
  xlat_varsign_29 = half(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * xlat_varsign_29);
  half3x3 tmpvar_32;
  tmpvar_32[0].x = tangent_27.x;
  tmpvar_32[0].y = tmpvar_31.x;
  tmpvar_32[0].z = normal_26.x;
  tmpvar_32[1].x = tangent_27.y;
  tmpvar_32[1].y = tmpvar_31.y;
  tmpvar_32[1].z = normal_26.y;
  tmpvar_32[2].x = tangent_27.z;
  tmpvar_32[2].y = tmpvar_31.z;
  tmpvar_32[2].z = normal_26.z;
  tangentToWorld_5 = _xlcast_float3x3(tmpvar_32);
  float3 v_33;
  v_33.x = tangentToWorld_5[0].x;
  v_33.y = tangentToWorld_5[1].x;
  v_33.z = tangentToWorld_5[2].x;
  tmpvar_6.xyz = half3(v_33);
  float3 v_34;
  v_34.x = tangentToWorld_5[0].y;
  v_34.y = tangentToWorld_5[1].y;
  v_34.z = tangentToWorld_5[2].y;
  tmpvar_7.xyz = half3(v_34);
  float3 v_35;
  v_35.x = tangentToWorld_5[0].z;
  v_35.y = tangentToWorld_5[1].z;
  v_35.z = tangentToWorld_5[2].z;
  tmpvar_8.xyz = half3(v_35);
  tmpvar_9 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 normal_36;
  normal_36 = half3(tmpvar_22);
  half3 ambient_37;
  ambient_37 = half3(float3(0.0, 0.0, 0.0));
  bool tmpvar_38;
  tmpvar_38 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_38) {
    ambient_37 = half3(float3(0.0, 0.0, 0.0));
  };
  half3 x1_39;
  half4 tmpvar_40;
  tmpvar_40 = (normal_36.xyzz * normal_36.yzzx);
  x1_39.x = dot (_mtl_u.unity_SHBr, tmpvar_40);
  x1_39.y = dot (_mtl_u.unity_SHBg, tmpvar_40);
  x1_39.z = dot (_mtl_u.unity_SHBb, tmpvar_40);
  ambient_37 = (ambient_37 + (x1_39 + (_mtl_u.unity_SHC.xyz * 
    ((normal_36.x * normal_36.x) - (normal_36.y * normal_36.y))
  )));
  tmpvar_9.xyz = ambient_37;
  _mtl_o.gl_Position = tmpvar_12;
  _mtl_o.xlv_TEXCOORD0 = texcoord_14;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_16;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_8;
  _mtl_o.xlv_TEXCOORD5 = tmpvar_9;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec4 in_TANGENT0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD3.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat6;
float u_xlat8;
float u_xlat15;
bool u_xlatb16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.yzw;
    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    u_xlat10_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat1.x = (-_OcclusionStrength) + 1.0;
    u_xlat0.w = u_xlat10_1.y * _OcclusionStrength + u_xlat1.x;
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD6.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat6.xyz : vs_TEXCOORD6.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat1.y * 0.25;
        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat6.x = max(u_xlat6.x, u_xlat3.x);
        u_xlat1.x = min(u_xlat8, u_xlat6.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
        u_xlat4.xyz = u_xlat1.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat1.xyz = u_xlat1.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_1 = texture(unity_ProbeVolumeSH, u_xlat1.xyz);
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat2);
        u_xlat3.y = dot(u_xlat10_4, u_xlat2);
        u_xlat3.z = dot(u_xlat10_1, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat2);
        u_xlat3.y = dot(unity_SHAg, u_xlat2);
        u_xlat3.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat1.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = log2(u_xlat1.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.www * u_xlat1.xyz;
    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0 = u_xlat0;
    SV_Target1.w = _Glossiness;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}
#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 95 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
ConstBuffer "$Globals" 174
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_4;
  mg_4.x = _mtl_u._Metallic;
  mg_4.y = _mtl_u._Glossiness;
  half tmpvar_5;
  tmpvar_5 = mg_4.y;
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_7;
  half3 tmpvar_8;
  tmpvar_8 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  tmpvar_7 = (tmpvar_6 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  tmpvar_1 = max ((half)0.0, tmpvar_9.y);
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  float3 tmpvar_14;
  tmpvar_14 = float3(i_posWorld_2);
  half3 tmpvar_15;
  tmpvar_15 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_16;
  ambient_16 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_17;
  ambient_contrib_17 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_18;
    tmpvar_18.w = half(1.0);
    tmpvar_18.xyz = tmpvar_9;
    half3 x1_19;
    half4 SHAb_20;
    half4 SHAg_21;
    half4 SHAr_22;
    float3 texCoord_23;
    float3 tmpvar_24;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_25;
      tmpvar_25.w = 1.0;
      tmpvar_25.xyz = tmpvar_14;
      tmpvar_24 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_25).xyz;
    } else {
      tmpvar_24 = tmpvar_14;
    };
    float3 tmpvar_26;
    tmpvar_26 = ((tmpvar_24 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_23.yz = tmpvar_26.yz;
    texCoord_23.x = (tmpvar_26.x * 0.25);
    float tmpvar_27;
    float tmpvar_28;
    tmpvar_28 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_27 = clamp (texCoord_23.x, tmpvar_28, (0.25 - tmpvar_28));
    texCoord_23.x = tmpvar_27;
    half4 tmpvar_29;
    tmpvar_29 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAr_22 = tmpvar_29;
    texCoord_23.x = (tmpvar_27 + 0.25);
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAg_21 = tmpvar_30;
    texCoord_23.x = (tmpvar_27 + 0.5);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAb_20 = tmpvar_31;
    x1_19.x = dot (SHAr_22, tmpvar_18);
    x1_19.y = dot (SHAg_21, tmpvar_18);
    x1_19.z = dot (SHAb_20, tmpvar_18);
    ambient_contrib_17 = x1_19;
  } else {
    half4 tmpvar_32;
    tmpvar_32.w = half(1.0);
    tmpvar_32.xyz = tmpvar_9;
    half3 x_33;
    x_33.x = dot (_mtl_u.unity_SHAr, tmpvar_32);
    x_33.y = dot (_mtl_u.unity_SHAg, tmpvar_32);
    x_33.z = dot (_mtl_u.unity_SHAb, tmpvar_32);
    ambient_contrib_17 = x_33;
  };
  half3 tmpvar_34;
  tmpvar_34 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_17));
  ambient_16 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    ambient_16 = max ((((half)1.055 * 
      pow (max (tmpvar_34, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_15 = (ambient_16 * tmpvar_13);
  half3 viewDir_36;
  viewDir_36 = -(tmpvar_10);
  half specularTerm_37;
  half tmpvar_38;
  tmpvar_38 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_39;
  inVec_39 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_36);
  half tmpvar_40;
  tmpvar_40 = max ((half)0.0, dot (tmpvar_9, (inVec_39 * 
    rsqrt(max ((half)0.001, dot (inVec_39, inVec_39)))
  )));
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_9, viewDir_36));
  half tmpvar_42;
  tmpvar_42 = (tmpvar_38 * tmpvar_38);
  half tmpvar_43;
  tmpvar_43 = (tmpvar_38 * tmpvar_38);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_43 * tmpvar_43);
  half tmpvar_45;
  tmpvar_45 = (((tmpvar_40 * tmpvar_40) * (tmpvar_44 - (half)1.0)) + (half)1.0);
  half tmpvar_46;
  tmpvar_46 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_41 * ((half)1.0 - tmpvar_42))
     + tmpvar_42)) + (tmpvar_41 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_42))
     + tmpvar_42))) + (half)1e-05)
  ) * (tmpvar_44 / 
    ((((half)3.141593 * tmpvar_45) * tmpvar_45) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_37 = tmpvar_46;
  bool tmpvar_47;
  tmpvar_47 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_47) {
    specularTerm_37 = sqrt(max ((half)0.0001, tmpvar_46));
  };
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, (specularTerm_37 * tmpvar_1));
  specularTerm_37 = tmpvar_48;
  bool3 tmpvar_49;
  tmpvar_49 = bool3(tmpvar_8);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_37 = (tmpvar_48 * (half)tmpvar_51);
  half4 tmpvar_52;
  tmpvar_52.w = half(1.0);
  tmpvar_52.xyz = (tmpvar_7 * tmpvar_15);
  half4 tmpvar_53;
  tmpvar_53.xyz = tmpvar_7;
  tmpvar_53.w = tmpvar_13;
  half4 tmpvar_54;
  tmpvar_54.xyz = tmpvar_8;
  tmpvar_54.w = tmpvar_5;
  half4 tmpvar_55;
  tmpvar_55.w = half(1.0);
  tmpvar_55.xyz = ((tmpvar_9 * (half)0.5) + (half)0.5);
  half4 tmpvar_56;
  tmpvar_56.w = half(1.0);
  tmpvar_56.xyz = exp2(-(tmpvar_52.xyz));
  _mtl_o._glesFragData_0 = tmpvar_53;
  _mtl_o._glesFragData_1 = tmpvar_54;
  _mtl_o._glesFragData_2 = tmpvar_55;
  _mtl_o._glesFragData_3 = tmpvar_56;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 97 math, 6 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
SetTexture 3 [_EmissionMap] 2D 3
ConstBuffer "$Globals" 184
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
VectorHalf 176 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]]
  ,   texture2d<half> _EmissionMap [[texture(3)]], sampler _mtlsmp__EmissionMap [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 color_1;
  half tmpvar_2;
  half3 i_posWorld_3;
  i_posWorld_3 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_4;
  tmpvar_4 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_5;
  mg_5.x = _mtl_u._Metallic;
  mg_5.y = _mtl_u._Glossiness;
  half tmpvar_6;
  tmpvar_6 = mg_5.y;
  half3 tmpvar_7;
  tmpvar_7 = (_mtl_u._Color.xyz * tmpvar_4.xyz);
  half3 tmpvar_8;
  half3 tmpvar_9;
  tmpvar_9 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_7, half3(_mtl_u._Metallic));
  tmpvar_8 = (tmpvar_7 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD1);
  tmpvar_2 = max ((half)0.0, tmpvar_10.y);
  half occ_12;
  half tmpvar_13;
  tmpvar_13 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_12 = tmpvar_13;
  half tmpvar_14;
  tmpvar_14 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_12 * _mtl_u._OcclusionStrength));
  float3 tmpvar_15;
  tmpvar_15 = float3(i_posWorld_3);
  half3 tmpvar_16;
  tmpvar_16 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_17;
  ambient_17 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_18;
  ambient_contrib_18 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_19;
    tmpvar_19.w = half(1.0);
    tmpvar_19.xyz = tmpvar_10;
    half3 x1_20;
    half4 SHAb_21;
    half4 SHAg_22;
    half4 SHAr_23;
    float3 texCoord_24;
    float3 tmpvar_25;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_26;
      tmpvar_26.w = 1.0;
      tmpvar_26.xyz = tmpvar_15;
      tmpvar_25 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_26).xyz;
    } else {
      tmpvar_25 = tmpvar_15;
    };
    float3 tmpvar_27;
    tmpvar_27 = ((tmpvar_25 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_24.yz = tmpvar_27.yz;
    texCoord_24.x = (tmpvar_27.x * 0.25);
    float tmpvar_28;
    float tmpvar_29;
    tmpvar_29 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_28 = clamp (texCoord_24.x, tmpvar_29, (0.25 - tmpvar_29));
    texCoord_24.x = tmpvar_28;
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_24));
    SHAr_23 = tmpvar_30;
    texCoord_24.x = (tmpvar_28 + 0.25);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_24));
    SHAg_22 = tmpvar_31;
    texCoord_24.x = (tmpvar_28 + 0.5);
    half4 tmpvar_32;
    tmpvar_32 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_24));
    SHAb_21 = tmpvar_32;
    x1_20.x = dot (SHAr_23, tmpvar_19);
    x1_20.y = dot (SHAg_22, tmpvar_19);
    x1_20.z = dot (SHAb_21, tmpvar_19);
    ambient_contrib_18 = x1_20;
  } else {
    half4 tmpvar_33;
    tmpvar_33.w = half(1.0);
    tmpvar_33.xyz = tmpvar_10;
    half3 x_34;
    x_34.x = dot (_mtl_u.unity_SHAr, tmpvar_33);
    x_34.y = dot (_mtl_u.unity_SHAg, tmpvar_33);
    x_34.z = dot (_mtl_u.unity_SHAb, tmpvar_33);
    ambient_contrib_18 = x_34;
  };
  half3 tmpvar_35;
  tmpvar_35 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_18));
  ambient_17 = tmpvar_35;
  bool tmpvar_36;
  tmpvar_36 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_36) {
    ambient_17 = max ((((half)1.055 * 
      pow (max (tmpvar_35, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_16 = (ambient_17 * tmpvar_14);
  half3 viewDir_37;
  viewDir_37 = -(tmpvar_11);
  half specularTerm_38;
  half tmpvar_39;
  tmpvar_39 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_40;
  inVec_40 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_37);
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_10, (inVec_40 * 
    rsqrt(max ((half)0.001, dot (inVec_40, inVec_40)))
  )));
  half tmpvar_42;
  tmpvar_42 = max ((half)0.0, dot (tmpvar_10, viewDir_37));
  half tmpvar_43;
  tmpvar_43 = (tmpvar_39 * tmpvar_39);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_39 * tmpvar_39);
  half tmpvar_45;
  tmpvar_45 = (tmpvar_44 * tmpvar_44);
  half tmpvar_46;
  tmpvar_46 = (((tmpvar_41 * tmpvar_41) * (tmpvar_45 - (half)1.0)) + (half)1.0);
  half tmpvar_47;
  tmpvar_47 = ((((half)2.0 / 
    (((tmpvar_2 * (
      (tmpvar_42 * ((half)1.0 - tmpvar_43))
     + tmpvar_43)) + (tmpvar_42 * (
      (tmpvar_2 * ((half)1.0 - tmpvar_43))
     + tmpvar_43))) + (half)1e-05)
  ) * (tmpvar_45 / 
    ((((half)3.141593 * tmpvar_46) * tmpvar_46) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_38 = tmpvar_47;
  bool tmpvar_48;
  tmpvar_48 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_48) {
    specularTerm_38 = sqrt(max ((half)0.0001, tmpvar_47));
  };
  half tmpvar_49;
  tmpvar_49 = max ((half)0.0, (specularTerm_38 * tmpvar_2));
  specularTerm_38 = tmpvar_49;
  bool3 tmpvar_50;
  tmpvar_50 = bool3(tmpvar_9);
  bool tmpvar_51;
  tmpvar_51 = any(tmpvar_50);
  float tmpvar_52;
  if (tmpvar_51) {
    tmpvar_52 = 1.0;
  } else {
    tmpvar_52 = 0.0;
  };
  specularTerm_38 = (tmpvar_49 * (half)tmpvar_52);
  half4 tmpvar_53;
  tmpvar_53.w = half(1.0);
  tmpvar_53.xyz = (tmpvar_8 * tmpvar_16);
  half4 tmpvar_54;
  tmpvar_54 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  color_1 = (tmpvar_53.xyz + (tmpvar_54.xyz * _mtl_u._EmissionColor.xyz));
  color_1 = exp2(-(color_1));
  half4 tmpvar_55;
  tmpvar_55.xyz = tmpvar_8;
  tmpvar_55.w = tmpvar_14;
  half4 tmpvar_56;
  tmpvar_56.xyz = tmpvar_9;
  tmpvar_56.w = tmpvar_6;
  half4 tmpvar_57;
  tmpvar_57.w = half(1.0);
  tmpvar_57.xyz = ((tmpvar_10 * (half)0.5) + (half)0.5);
  half4 tmpvar_58;
  tmpvar_58.w = half(1.0);
  tmpvar_58.xyz = color_1;
  _mtl_o._glesFragData_0 = tmpvar_55;
  _mtl_o._glesFragData_1 = tmpvar_56;
  _mtl_o._glesFragData_2 = tmpvar_57;
  _mtl_o._glesFragData_3 = tmpvar_58;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 97 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
ConstBuffer "$Globals" 174
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_4;
  mg_4.x = _mtl_u._Metallic;
  mg_4.y = _mtl_u._Glossiness;
  half tmpvar_5;
  tmpvar_5 = mg_4.y;
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 diffColor_10;
  diffColor_10 = ((tmpvar_6 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - 
    (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)
  )) * (tmpvar_3.w * _mtl_u._Color.w));
  tmpvar_1 = max ((half)0.0, tmpvar_8.y);
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  float3 tmpvar_14;
  tmpvar_14 = float3(i_posWorld_2);
  half3 tmpvar_15;
  tmpvar_15 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_16;
  ambient_16 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_17;
  ambient_contrib_17 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_18;
    tmpvar_18.w = half(1.0);
    tmpvar_18.xyz = tmpvar_8;
    half3 x1_19;
    half4 SHAb_20;
    half4 SHAg_21;
    half4 SHAr_22;
    float3 texCoord_23;
    float3 tmpvar_24;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_25;
      tmpvar_25.w = 1.0;
      tmpvar_25.xyz = tmpvar_14;
      tmpvar_24 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_25).xyz;
    } else {
      tmpvar_24 = tmpvar_14;
    };
    float3 tmpvar_26;
    tmpvar_26 = ((tmpvar_24 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_23.yz = tmpvar_26.yz;
    texCoord_23.x = (tmpvar_26.x * 0.25);
    float tmpvar_27;
    float tmpvar_28;
    tmpvar_28 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_27 = clamp (texCoord_23.x, tmpvar_28, (0.25 - tmpvar_28));
    texCoord_23.x = tmpvar_27;
    half4 tmpvar_29;
    tmpvar_29 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAr_22 = tmpvar_29;
    texCoord_23.x = (tmpvar_27 + 0.25);
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAg_21 = tmpvar_30;
    texCoord_23.x = (tmpvar_27 + 0.5);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAb_20 = tmpvar_31;
    x1_19.x = dot (SHAr_22, tmpvar_18);
    x1_19.y = dot (SHAg_21, tmpvar_18);
    x1_19.z = dot (SHAb_20, tmpvar_18);
    ambient_contrib_17 = x1_19;
  } else {
    half4 tmpvar_32;
    tmpvar_32.w = half(1.0);
    tmpvar_32.xyz = tmpvar_8;
    half3 x_33;
    x_33.x = dot (_mtl_u.unity_SHAr, tmpvar_32);
    x_33.y = dot (_mtl_u.unity_SHAg, tmpvar_32);
    x_33.z = dot (_mtl_u.unity_SHAb, tmpvar_32);
    ambient_contrib_17 = x_33;
  };
  half3 tmpvar_34;
  tmpvar_34 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_17));
  ambient_16 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    ambient_16 = max ((((half)1.055 * 
      pow (max (tmpvar_34, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_15 = (ambient_16 * tmpvar_13);
  half3 viewDir_36;
  viewDir_36 = -(tmpvar_9);
  half specularTerm_37;
  half tmpvar_38;
  tmpvar_38 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_39;
  inVec_39 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_36);
  half tmpvar_40;
  tmpvar_40 = max ((half)0.0, dot (tmpvar_8, (inVec_39 * 
    rsqrt(max ((half)0.001, dot (inVec_39, inVec_39)))
  )));
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_8, viewDir_36));
  half tmpvar_42;
  tmpvar_42 = (tmpvar_38 * tmpvar_38);
  half tmpvar_43;
  tmpvar_43 = (tmpvar_38 * tmpvar_38);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_43 * tmpvar_43);
  half tmpvar_45;
  tmpvar_45 = (((tmpvar_40 * tmpvar_40) * (tmpvar_44 - (half)1.0)) + (half)1.0);
  half tmpvar_46;
  tmpvar_46 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_41 * ((half)1.0 - tmpvar_42))
     + tmpvar_42)) + (tmpvar_41 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_42))
     + tmpvar_42))) + (half)1e-05)
  ) * (tmpvar_44 / 
    ((((half)3.141593 * tmpvar_45) * tmpvar_45) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_37 = tmpvar_46;
  bool tmpvar_47;
  tmpvar_47 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_47) {
    specularTerm_37 = sqrt(max ((half)0.0001, tmpvar_46));
  };
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, (specularTerm_37 * tmpvar_1));
  specularTerm_37 = tmpvar_48;
  bool3 tmpvar_49;
  tmpvar_49 = bool3(tmpvar_7);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_37 = (tmpvar_48 * (half)tmpvar_51);
  half4 tmpvar_52;
  tmpvar_52.w = half(1.0);
  tmpvar_52.xyz = (diffColor_10 * tmpvar_15);
  half4 tmpvar_53;
  tmpvar_53.xyz = diffColor_10;
  tmpvar_53.w = tmpvar_13;
  half4 tmpvar_54;
  tmpvar_54.xyz = tmpvar_7;
  tmpvar_54.w = tmpvar_5;
  half4 tmpvar_55;
  tmpvar_55.w = half(1.0);
  tmpvar_55.xyz = ((tmpvar_8 * (half)0.5) + (half)0.5);
  half4 tmpvar_56;
  tmpvar_56.w = half(1.0);
  tmpvar_56.xyz = exp2(-(tmpvar_52.xyz));
  _mtl_o._glesFragData_0 = tmpvar_53;
  _mtl_o._glesFragData_1 = tmpvar_54;
  _mtl_o._glesFragData_2 = tmpvar_55;
  _mtl_o._glesFragData_3 = tmpvar_56;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 95 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
ConstBuffer "$Globals" 174
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_4;
  mg_4.x = _mtl_u._Metallic;
  mg_4.y = _mtl_u._Glossiness;
  half tmpvar_5;
  tmpvar_5 = mg_4.y;
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_7;
  half3 tmpvar_8;
  tmpvar_8 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  tmpvar_7 = (tmpvar_6 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  tmpvar_1 = max ((half)0.0, tmpvar_9.y);
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  float3 tmpvar_14;
  tmpvar_14 = float3(i_posWorld_2);
  half3 tmpvar_15;
  tmpvar_15 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_16;
  ambient_16 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_17;
  ambient_contrib_17 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_18;
    tmpvar_18.w = half(1.0);
    tmpvar_18.xyz = tmpvar_9;
    half3 x1_19;
    half4 SHAb_20;
    half4 SHAg_21;
    half4 SHAr_22;
    float3 texCoord_23;
    float3 tmpvar_24;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_25;
      tmpvar_25.w = 1.0;
      tmpvar_25.xyz = tmpvar_14;
      tmpvar_24 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_25).xyz;
    } else {
      tmpvar_24 = tmpvar_14;
    };
    float3 tmpvar_26;
    tmpvar_26 = ((tmpvar_24 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_23.yz = tmpvar_26.yz;
    texCoord_23.x = (tmpvar_26.x * 0.25);
    float tmpvar_27;
    float tmpvar_28;
    tmpvar_28 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_27 = clamp (texCoord_23.x, tmpvar_28, (0.25 - tmpvar_28));
    texCoord_23.x = tmpvar_27;
    half4 tmpvar_29;
    tmpvar_29 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAr_22 = tmpvar_29;
    texCoord_23.x = (tmpvar_27 + 0.25);
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAg_21 = tmpvar_30;
    texCoord_23.x = (tmpvar_27 + 0.5);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAb_20 = tmpvar_31;
    x1_19.x = dot (SHAr_22, tmpvar_18);
    x1_19.y = dot (SHAg_21, tmpvar_18);
    x1_19.z = dot (SHAb_20, tmpvar_18);
    ambient_contrib_17 = x1_19;
  } else {
    half4 tmpvar_32;
    tmpvar_32.w = half(1.0);
    tmpvar_32.xyz = tmpvar_9;
    half3 x_33;
    x_33.x = dot (_mtl_u.unity_SHAr, tmpvar_32);
    x_33.y = dot (_mtl_u.unity_SHAg, tmpvar_32);
    x_33.z = dot (_mtl_u.unity_SHAb, tmpvar_32);
    ambient_contrib_17 = x_33;
  };
  half3 tmpvar_34;
  tmpvar_34 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_17));
  ambient_16 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    ambient_16 = max ((((half)1.055 * 
      pow (max (tmpvar_34, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_15 = (ambient_16 * tmpvar_13);
  half3 viewDir_36;
  viewDir_36 = -(tmpvar_10);
  half specularTerm_37;
  half tmpvar_38;
  tmpvar_38 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_39;
  inVec_39 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_36);
  half tmpvar_40;
  tmpvar_40 = max ((half)0.0, dot (tmpvar_9, (inVec_39 * 
    rsqrt(max ((half)0.001, dot (inVec_39, inVec_39)))
  )));
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_9, viewDir_36));
  half tmpvar_42;
  tmpvar_42 = (tmpvar_38 * tmpvar_38);
  half tmpvar_43;
  tmpvar_43 = (tmpvar_38 * tmpvar_38);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_43 * tmpvar_43);
  half tmpvar_45;
  tmpvar_45 = (((tmpvar_40 * tmpvar_40) * (tmpvar_44 - (half)1.0)) + (half)1.0);
  half tmpvar_46;
  tmpvar_46 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_41 * ((half)1.0 - tmpvar_42))
     + tmpvar_42)) + (tmpvar_41 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_42))
     + tmpvar_42))) + (half)1e-05)
  ) * (tmpvar_44 / 
    ((((half)3.141593 * tmpvar_45) * tmpvar_45) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_37 = tmpvar_46;
  bool tmpvar_47;
  tmpvar_47 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_47) {
    specularTerm_37 = sqrt(max ((half)0.0001, tmpvar_46));
  };
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, (specularTerm_37 * tmpvar_1));
  specularTerm_37 = tmpvar_48;
  bool3 tmpvar_49;
  tmpvar_49 = bool3(tmpvar_8);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_37 = (tmpvar_48 * (half)tmpvar_51);
  half4 tmpvar_52;
  tmpvar_52.w = half(1.0);
  tmpvar_52.xyz = (tmpvar_7 * tmpvar_15);
  half4 tmpvar_53;
  tmpvar_53.xyz = tmpvar_7;
  tmpvar_53.w = tmpvar_13;
  half4 tmpvar_54;
  tmpvar_54.xyz = tmpvar_8;
  tmpvar_54.w = tmpvar_5;
  half4 tmpvar_55;
  tmpvar_55.w = half(1.0);
  tmpvar_55.xyz = ((tmpvar_9 * (half)0.5) + (half)0.5);
  half4 tmpvar_56;
  tmpvar_56.w = half(1.0);
  tmpvar_56.xyz = exp2(-(tmpvar_52.xyz));
  _mtl_o._glesFragData_0 = tmpvar_53;
  _mtl_o._glesFragData_1 = tmpvar_54;
  _mtl_o._glesFragData_2 = tmpvar_55;
  _mtl_o._glesFragData_3 = tmpvar_56;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 97 math, 6 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
SetTexture 3 [_EmissionMap] 2D 3
ConstBuffer "$Globals" 184
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
VectorHalf 176 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]]
  ,   texture2d<half> _EmissionMap [[texture(3)]], sampler _mtlsmp__EmissionMap [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 color_1;
  half tmpvar_2;
  half3 i_posWorld_3;
  i_posWorld_3 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_4;
  tmpvar_4 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_5;
  mg_5.x = _mtl_u._Metallic;
  mg_5.y = _mtl_u._Glossiness;
  half tmpvar_6;
  tmpvar_6 = mg_5.y;
  half3 tmpvar_7;
  tmpvar_7 = (_mtl_u._Color.xyz * tmpvar_4.xyz);
  half3 tmpvar_8;
  half3 tmpvar_9;
  tmpvar_9 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_7, half3(_mtl_u._Metallic));
  tmpvar_8 = (tmpvar_7 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD1);
  tmpvar_2 = max ((half)0.0, tmpvar_10.y);
  half occ_12;
  half tmpvar_13;
  tmpvar_13 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_12 = tmpvar_13;
  half tmpvar_14;
  tmpvar_14 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_12 * _mtl_u._OcclusionStrength));
  float3 tmpvar_15;
  tmpvar_15 = float3(i_posWorld_3);
  half3 tmpvar_16;
  tmpvar_16 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_17;
  ambient_17 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_18;
  ambient_contrib_18 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_19;
    tmpvar_19.w = half(1.0);
    tmpvar_19.xyz = tmpvar_10;
    half3 x1_20;
    half4 SHAb_21;
    half4 SHAg_22;
    half4 SHAr_23;
    float3 texCoord_24;
    float3 tmpvar_25;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_26;
      tmpvar_26.w = 1.0;
      tmpvar_26.xyz = tmpvar_15;
      tmpvar_25 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_26).xyz;
    } else {
      tmpvar_25 = tmpvar_15;
    };
    float3 tmpvar_27;
    tmpvar_27 = ((tmpvar_25 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_24.yz = tmpvar_27.yz;
    texCoord_24.x = (tmpvar_27.x * 0.25);
    float tmpvar_28;
    float tmpvar_29;
    tmpvar_29 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_28 = clamp (texCoord_24.x, tmpvar_29, (0.25 - tmpvar_29));
    texCoord_24.x = tmpvar_28;
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_24));
    SHAr_23 = tmpvar_30;
    texCoord_24.x = (tmpvar_28 + 0.25);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_24));
    SHAg_22 = tmpvar_31;
    texCoord_24.x = (tmpvar_28 + 0.5);
    half4 tmpvar_32;
    tmpvar_32 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_24));
    SHAb_21 = tmpvar_32;
    x1_20.x = dot (SHAr_23, tmpvar_19);
    x1_20.y = dot (SHAg_22, tmpvar_19);
    x1_20.z = dot (SHAb_21, tmpvar_19);
    ambient_contrib_18 = x1_20;
  } else {
    half4 tmpvar_33;
    tmpvar_33.w = half(1.0);
    tmpvar_33.xyz = tmpvar_10;
    half3 x_34;
    x_34.x = dot (_mtl_u.unity_SHAr, tmpvar_33);
    x_34.y = dot (_mtl_u.unity_SHAg, tmpvar_33);
    x_34.z = dot (_mtl_u.unity_SHAb, tmpvar_33);
    ambient_contrib_18 = x_34;
  };
  half3 tmpvar_35;
  tmpvar_35 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_18));
  ambient_17 = tmpvar_35;
  bool tmpvar_36;
  tmpvar_36 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_36) {
    ambient_17 = max ((((half)1.055 * 
      pow (max (tmpvar_35, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_16 = (ambient_17 * tmpvar_14);
  half3 viewDir_37;
  viewDir_37 = -(tmpvar_11);
  half specularTerm_38;
  half tmpvar_39;
  tmpvar_39 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_40;
  inVec_40 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_37);
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_10, (inVec_40 * 
    rsqrt(max ((half)0.001, dot (inVec_40, inVec_40)))
  )));
  half tmpvar_42;
  tmpvar_42 = max ((half)0.0, dot (tmpvar_10, viewDir_37));
  half tmpvar_43;
  tmpvar_43 = (tmpvar_39 * tmpvar_39);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_39 * tmpvar_39);
  half tmpvar_45;
  tmpvar_45 = (tmpvar_44 * tmpvar_44);
  half tmpvar_46;
  tmpvar_46 = (((tmpvar_41 * tmpvar_41) * (tmpvar_45 - (half)1.0)) + (half)1.0);
  half tmpvar_47;
  tmpvar_47 = ((((half)2.0 / 
    (((tmpvar_2 * (
      (tmpvar_42 * ((half)1.0 - tmpvar_43))
     + tmpvar_43)) + (tmpvar_42 * (
      (tmpvar_2 * ((half)1.0 - tmpvar_43))
     + tmpvar_43))) + (half)1e-05)
  ) * (tmpvar_45 / 
    ((((half)3.141593 * tmpvar_46) * tmpvar_46) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_38 = tmpvar_47;
  bool tmpvar_48;
  tmpvar_48 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_48) {
    specularTerm_38 = sqrt(max ((half)0.0001, tmpvar_47));
  };
  half tmpvar_49;
  tmpvar_49 = max ((half)0.0, (specularTerm_38 * tmpvar_2));
  specularTerm_38 = tmpvar_49;
  bool3 tmpvar_50;
  tmpvar_50 = bool3(tmpvar_9);
  bool tmpvar_51;
  tmpvar_51 = any(tmpvar_50);
  float tmpvar_52;
  if (tmpvar_51) {
    tmpvar_52 = 1.0;
  } else {
    tmpvar_52 = 0.0;
  };
  specularTerm_38 = (tmpvar_49 * (half)tmpvar_52);
  half4 tmpvar_53;
  tmpvar_53.w = half(1.0);
  tmpvar_53.xyz = (tmpvar_8 * tmpvar_16);
  half4 tmpvar_54;
  tmpvar_54 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  color_1 = (tmpvar_53.xyz + (tmpvar_54.xyz * _mtl_u._EmissionColor.xyz));
  color_1 = exp2(-(color_1));
  half4 tmpvar_55;
  tmpvar_55.xyz = tmpvar_8;
  tmpvar_55.w = tmpvar_14;
  half4 tmpvar_56;
  tmpvar_56.xyz = tmpvar_9;
  tmpvar_56.w = tmpvar_6;
  half4 tmpvar_57;
  tmpvar_57.w = half(1.0);
  tmpvar_57.xyz = ((tmpvar_10 * (half)0.5) + (half)0.5);
  half4 tmpvar_58;
  tmpvar_58.w = half(1.0);
  tmpvar_58.xyz = color_1;
  _mtl_o._glesFragData_0 = tmpvar_55;
  _mtl_o._glesFragData_1 = tmpvar_56;
  _mtl_o._glesFragData_2 = tmpvar_57;
  _mtl_o._glesFragData_3 = tmpvar_58;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 97 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
ConstBuffer "$Globals" 174
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_4;
  mg_4.x = _mtl_u._Metallic;
  mg_4.y = _mtl_u._Glossiness;
  half tmpvar_5;
  tmpvar_5 = mg_4.y;
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 diffColor_10;
  diffColor_10 = ((tmpvar_6 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - 
    (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)
  )) * (tmpvar_3.w * _mtl_u._Color.w));
  tmpvar_1 = max ((half)0.0, tmpvar_8.y);
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  float3 tmpvar_14;
  tmpvar_14 = float3(i_posWorld_2);
  half3 tmpvar_15;
  tmpvar_15 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_16;
  ambient_16 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_17;
  ambient_contrib_17 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_18;
    tmpvar_18.w = half(1.0);
    tmpvar_18.xyz = tmpvar_8;
    half3 x1_19;
    half4 SHAb_20;
    half4 SHAg_21;
    half4 SHAr_22;
    float3 texCoord_23;
    float3 tmpvar_24;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_25;
      tmpvar_25.w = 1.0;
      tmpvar_25.xyz = tmpvar_14;
      tmpvar_24 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_25).xyz;
    } else {
      tmpvar_24 = tmpvar_14;
    };
    float3 tmpvar_26;
    tmpvar_26 = ((tmpvar_24 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_23.yz = tmpvar_26.yz;
    texCoord_23.x = (tmpvar_26.x * 0.25);
    float tmpvar_27;
    float tmpvar_28;
    tmpvar_28 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_27 = clamp (texCoord_23.x, tmpvar_28, (0.25 - tmpvar_28));
    texCoord_23.x = tmpvar_27;
    half4 tmpvar_29;
    tmpvar_29 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAr_22 = tmpvar_29;
    texCoord_23.x = (tmpvar_27 + 0.25);
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAg_21 = tmpvar_30;
    texCoord_23.x = (tmpvar_27 + 0.5);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAb_20 = tmpvar_31;
    x1_19.x = dot (SHAr_22, tmpvar_18);
    x1_19.y = dot (SHAg_21, tmpvar_18);
    x1_19.z = dot (SHAb_20, tmpvar_18);
    ambient_contrib_17 = x1_19;
  } else {
    half4 tmpvar_32;
    tmpvar_32.w = half(1.0);
    tmpvar_32.xyz = tmpvar_8;
    half3 x_33;
    x_33.x = dot (_mtl_u.unity_SHAr, tmpvar_32);
    x_33.y = dot (_mtl_u.unity_SHAg, tmpvar_32);
    x_33.z = dot (_mtl_u.unity_SHAb, tmpvar_32);
    ambient_contrib_17 = x_33;
  };
  half3 tmpvar_34;
  tmpvar_34 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_17));
  ambient_16 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    ambient_16 = max ((((half)1.055 * 
      pow (max (tmpvar_34, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_15 = (ambient_16 * tmpvar_13);
  half3 viewDir_36;
  viewDir_36 = -(tmpvar_9);
  half specularTerm_37;
  half tmpvar_38;
  tmpvar_38 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_39;
  inVec_39 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_36);
  half tmpvar_40;
  tmpvar_40 = max ((half)0.0, dot (tmpvar_8, (inVec_39 * 
    rsqrt(max ((half)0.001, dot (inVec_39, inVec_39)))
  )));
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_8, viewDir_36));
  half tmpvar_42;
  tmpvar_42 = (tmpvar_38 * tmpvar_38);
  half tmpvar_43;
  tmpvar_43 = (tmpvar_38 * tmpvar_38);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_43 * tmpvar_43);
  half tmpvar_45;
  tmpvar_45 = (((tmpvar_40 * tmpvar_40) * (tmpvar_44 - (half)1.0)) + (half)1.0);
  half tmpvar_46;
  tmpvar_46 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_41 * ((half)1.0 - tmpvar_42))
     + tmpvar_42)) + (tmpvar_41 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_42))
     + tmpvar_42))) + (half)1e-05)
  ) * (tmpvar_44 / 
    ((((half)3.141593 * tmpvar_45) * tmpvar_45) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_37 = tmpvar_46;
  bool tmpvar_47;
  tmpvar_47 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_47) {
    specularTerm_37 = sqrt(max ((half)0.0001, tmpvar_46));
  };
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, (specularTerm_37 * tmpvar_1));
  specularTerm_37 = tmpvar_48;
  bool3 tmpvar_49;
  tmpvar_49 = bool3(tmpvar_7);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_37 = (tmpvar_48 * (half)tmpvar_51);
  half4 tmpvar_52;
  tmpvar_52.w = half(1.0);
  tmpvar_52.xyz = (diffColor_10 * tmpvar_15);
  half4 tmpvar_53;
  tmpvar_53.xyz = diffColor_10;
  tmpvar_53.w = tmpvar_13;
  half4 tmpvar_54;
  tmpvar_54.xyz = tmpvar_7;
  tmpvar_54.w = tmpvar_5;
  half4 tmpvar_55;
  tmpvar_55.w = half(1.0);
  tmpvar_55.xyz = ((tmpvar_8 * (half)0.5) + (half)0.5);
  half4 tmpvar_56;
  tmpvar_56.w = half(1.0);
  tmpvar_56.xyz = exp2(-(tmpvar_52.xyz));
  _mtl_o._glesFragData_0 = tmpvar_53;
  _mtl_o._glesFragData_1 = tmpvar_54;
  _mtl_o._glesFragData_2 = tmpvar_55;
  _mtl_o._glesFragData_3 = tmpvar_56;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 74 math, 4 textures, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
SetTexture 0 [unity_DynamicLightmap] 2D 0
SetTexture 1 [unity_DynamicDirectionality] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_OcclusionMap] 2D 3
ConstBuffer "$Globals" 38
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [unity_DynamicLightmap_HDR] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
ScalarHalf 36 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 unity_DynamicLightmap_HDR;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_DynamicLightmap [[texture(0)]], sampler _mtlsmp_unity_DynamicLightmap [[sampler(0)]]
  ,   texture2d<half> unity_DynamicDirectionality [[texture(1)]], sampler _mtlsmp_unity_DynamicDirectionality [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _OcclusionMap [[texture(3)]], sampler _mtlsmp__OcclusionMap [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_3;
  mg_3.x = _mtl_u._Metallic;
  mg_3.y = _mtl_u._Glossiness;
  half tmpvar_4;
  tmpvar_4 = mg_3.y;
  half3 tmpvar_5;
  tmpvar_5 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_6;
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, half3(_mtl_u._Metallic));
  tmpvar_6 = (tmpvar_5 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  tmpvar_1 = max ((half)0.0, tmpvar_8.y);
  half occ_9;
  half tmpvar_10;
  tmpvar_10 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_9 = tmpvar_10;
  half tmpvar_11;
  tmpvar_11 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_9 * _mtl_u._OcclusionStrength));
  float4 tmpvar_12;
  tmpvar_12 = float4(_mtl_i.xlv_TEXCOORD5);
  half4 realtimeDirTex_13;
  half3 tmpvar_14;
  half4 tmpvar_15;
  tmpvar_15 = unity_DynamicLightmap.sample(_mtlsmp_unity_DynamicLightmap, (float2)(tmpvar_12.zw));
  half4 tmpvar_16;
  tmpvar_16 = unity_DynamicDirectionality.sample(_mtlsmp_unity_DynamicDirectionality, (float2)(tmpvar_12.zw));
  realtimeDirTex_13 = tmpvar_16;
  half4 dirTex_17;
  dirTex_17 = realtimeDirTex_13;
  half3 y_18;
  y_18 = (dirTex_17.xyz - (half)0.5);
  half tmpvar_19;
  tmpvar_19 = max ((half)0.0001, dirTex_17.w);
  tmpvar_14 = ((pow (
    ((_mtl_u.unity_DynamicLightmap_HDR.x * tmpvar_15.w) * tmpvar_15.xyz)
  , _mtl_u.unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_8, y_18)
   + (half)0.5)) / tmpvar_19);
  tmpvar_14 = (tmpvar_14 * tmpvar_11);
  half3 viewDir_20;
  viewDir_20 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_21;
  half tmpvar_22;
  tmpvar_22 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_23;
  inVec_23 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_20);
  half tmpvar_24;
  tmpvar_24 = max ((half)0.0, dot (tmpvar_8, (inVec_23 * 
    rsqrt(max ((half)0.001, dot (inVec_23, inVec_23)))
  )));
  half tmpvar_25;
  tmpvar_25 = max ((half)0.0, dot (tmpvar_8, viewDir_20));
  half tmpvar_26;
  tmpvar_26 = (tmpvar_22 * tmpvar_22);
  half tmpvar_27;
  tmpvar_27 = (tmpvar_22 * tmpvar_22);
  half tmpvar_28;
  tmpvar_28 = (tmpvar_27 * tmpvar_27);
  half tmpvar_29;
  tmpvar_29 = (((tmpvar_24 * tmpvar_24) * (tmpvar_28 - (half)1.0)) + (half)1.0);
  half tmpvar_30;
  tmpvar_30 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_25 * ((half)1.0 - tmpvar_26))
     + tmpvar_26)) + (tmpvar_25 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_26))
     + tmpvar_26))) + (half)1e-05)
  ) * (tmpvar_28 / 
    ((((half)3.141593 * tmpvar_29) * tmpvar_29) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_21 = tmpvar_30;
  bool tmpvar_31;
  tmpvar_31 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_31) {
    specularTerm_21 = sqrt(max ((half)0.0001, tmpvar_30));
  };
  half tmpvar_32;
  tmpvar_32 = max ((half)0.0, (specularTerm_21 * tmpvar_1));
  specularTerm_21 = tmpvar_32;
  bool3 tmpvar_33;
  tmpvar_33 = bool3(tmpvar_7);
  bool tmpvar_34;
  tmpvar_34 = any(tmpvar_33);
  float tmpvar_35;
  if (tmpvar_34) {
    tmpvar_35 = 1.0;
  } else {
    tmpvar_35 = 0.0;
  };
  specularTerm_21 = (tmpvar_32 * (half)tmpvar_35);
  half4 tmpvar_36;
  tmpvar_36.w = half(1.0);
  tmpvar_36.xyz = (tmpvar_6 * tmpvar_14);
  half4 tmpvar_37;
  tmpvar_37.xyz = tmpvar_6;
  tmpvar_37.w = tmpvar_11;
  half4 tmpvar_38;
  tmpvar_38.xyz = tmpvar_7;
  tmpvar_38.w = tmpvar_4;
  half4 tmpvar_39;
  tmpvar_39.w = half(1.0);
  tmpvar_39.xyz = ((tmpvar_8 * (half)0.5) + (half)0.5);
  half4 tmpvar_40;
  tmpvar_40.w = half(1.0);
  tmpvar_40.xyz = exp2(-(tmpvar_36.xyz));
  _mtl_o._glesFragData_0 = tmpvar_37;
  _mtl_o._glesFragData_1 = tmpvar_38;
  _mtl_o._glesFragData_2 = tmpvar_39;
  _mtl_o._glesFragData_3 = tmpvar_40;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 76 math, 5 textures, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
SetTexture 0 [unity_DynamicLightmap] 2D 0
SetTexture 1 [unity_DynamicDirectionality] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_OcclusionMap] 2D 3
SetTexture 4 [_EmissionMap] 2D 4
ConstBuffer "$Globals" 48
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [unity_DynamicLightmap_HDR] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
ScalarHalf 36 [_OcclusionStrength]
VectorHalf 40 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 unity_DynamicLightmap_HDR;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_DynamicLightmap [[texture(0)]], sampler _mtlsmp_unity_DynamicLightmap [[sampler(0)]]
  ,   texture2d<half> unity_DynamicDirectionality [[texture(1)]], sampler _mtlsmp_unity_DynamicDirectionality [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _OcclusionMap [[texture(3)]], sampler _mtlsmp__OcclusionMap [[sampler(3)]]
  ,   texture2d<half> _EmissionMap [[texture(4)]], sampler _mtlsmp__EmissionMap [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 color_1;
  half tmpvar_2;
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_4;
  mg_4.x = _mtl_u._Metallic;
  mg_4.y = _mtl_u._Glossiness;
  half tmpvar_5;
  tmpvar_5 = mg_4.y;
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_7;
  half3 tmpvar_8;
  tmpvar_8 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  tmpvar_7 = (tmpvar_6 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  tmpvar_2 = max ((half)0.0, tmpvar_9.y);
  half occ_10;
  half tmpvar_11;
  tmpvar_11 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_10 = tmpvar_11;
  half tmpvar_12;
  tmpvar_12 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_10 * _mtl_u._OcclusionStrength));
  float4 tmpvar_13;
  tmpvar_13 = float4(_mtl_i.xlv_TEXCOORD5);
  half4 realtimeDirTex_14;
  half3 tmpvar_15;
  half4 tmpvar_16;
  tmpvar_16 = unity_DynamicLightmap.sample(_mtlsmp_unity_DynamicLightmap, (float2)(tmpvar_13.zw));
  half4 tmpvar_17;
  tmpvar_17 = unity_DynamicDirectionality.sample(_mtlsmp_unity_DynamicDirectionality, (float2)(tmpvar_13.zw));
  realtimeDirTex_14 = tmpvar_17;
  half4 dirTex_18;
  dirTex_18 = realtimeDirTex_14;
  half3 y_19;
  y_19 = (dirTex_18.xyz - (half)0.5);
  half tmpvar_20;
  tmpvar_20 = max ((half)0.0001, dirTex_18.w);
  tmpvar_15 = ((pow (
    ((_mtl_u.unity_DynamicLightmap_HDR.x * tmpvar_16.w) * tmpvar_16.xyz)
  , _mtl_u.unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_9, y_19)
   + (half)0.5)) / tmpvar_20);
  tmpvar_15 = (tmpvar_15 * tmpvar_12);
  half3 viewDir_21;
  viewDir_21 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_22;
  half tmpvar_23;
  tmpvar_23 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_24;
  inVec_24 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_21);
  half tmpvar_25;
  tmpvar_25 = max ((half)0.0, dot (tmpvar_9, (inVec_24 * 
    rsqrt(max ((half)0.001, dot (inVec_24, inVec_24)))
  )));
  half tmpvar_26;
  tmpvar_26 = max ((half)0.0, dot (tmpvar_9, viewDir_21));
  half tmpvar_27;
  tmpvar_27 = (tmpvar_23 * tmpvar_23);
  half tmpvar_28;
  tmpvar_28 = (tmpvar_23 * tmpvar_23);
  half tmpvar_29;
  tmpvar_29 = (tmpvar_28 * tmpvar_28);
  half tmpvar_30;
  tmpvar_30 = (((tmpvar_25 * tmpvar_25) * (tmpvar_29 - (half)1.0)) + (half)1.0);
  half tmpvar_31;
  tmpvar_31 = ((((half)2.0 / 
    (((tmpvar_2 * (
      (tmpvar_26 * ((half)1.0 - tmpvar_27))
     + tmpvar_27)) + (tmpvar_26 * (
      (tmpvar_2 * ((half)1.0 - tmpvar_27))
     + tmpvar_27))) + (half)1e-05)
  ) * (tmpvar_29 / 
    ((((half)3.141593 * tmpvar_30) * tmpvar_30) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_22 = tmpvar_31;
  bool tmpvar_32;
  tmpvar_32 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_32) {
    specularTerm_22 = sqrt(max ((half)0.0001, tmpvar_31));
  };
  half tmpvar_33;
  tmpvar_33 = max ((half)0.0, (specularTerm_22 * tmpvar_2));
  specularTerm_22 = tmpvar_33;
  bool3 tmpvar_34;
  tmpvar_34 = bool3(tmpvar_8);
  bool tmpvar_35;
  tmpvar_35 = any(tmpvar_34);
  float tmpvar_36;
  if (tmpvar_35) {
    tmpvar_36 = 1.0;
  } else {
    tmpvar_36 = 0.0;
  };
  specularTerm_22 = (tmpvar_33 * (half)tmpvar_36);
  half4 tmpvar_37;
  tmpvar_37.w = half(1.0);
  tmpvar_37.xyz = (tmpvar_7 * tmpvar_15);
  half4 tmpvar_38;
  tmpvar_38 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  color_1 = (tmpvar_37.xyz + (tmpvar_38.xyz * _mtl_u._EmissionColor.xyz));
  color_1 = exp2(-(color_1));
  half4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_7;
  tmpvar_39.w = tmpvar_12;
  half4 tmpvar_40;
  tmpvar_40.xyz = tmpvar_8;
  tmpvar_40.w = tmpvar_5;
  half4 tmpvar_41;
  tmpvar_41.w = half(1.0);
  tmpvar_41.xyz = ((tmpvar_9 * (half)0.5) + (half)0.5);
  half4 tmpvar_42;
  tmpvar_42.w = half(1.0);
  tmpvar_42.xyz = color_1;
  _mtl_o._glesFragData_0 = tmpvar_39;
  _mtl_o._glesFragData_1 = tmpvar_40;
  _mtl_o._glesFragData_2 = tmpvar_41;
  _mtl_o._glesFragData_3 = tmpvar_42;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 76 math, 4 textures, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_DynamicLightmap] 2D 0
SetTexture 1 [unity_DynamicDirectionality] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_OcclusionMap] 2D 3
ConstBuffer "$Globals" 38
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [unity_DynamicLightmap_HDR] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
ScalarHalf 36 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 unity_DynamicLightmap_HDR;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_DynamicLightmap [[texture(0)]], sampler _mtlsmp_unity_DynamicLightmap [[sampler(0)]]
  ,   texture2d<half> unity_DynamicDirectionality [[texture(1)]], sampler _mtlsmp_unity_DynamicDirectionality [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _OcclusionMap [[texture(3)]], sampler _mtlsmp__OcclusionMap [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_3;
  mg_3.x = _mtl_u._Metallic;
  mg_3.y = _mtl_u._Glossiness;
  half tmpvar_4;
  tmpvar_4 = mg_3.y;
  half3 tmpvar_5;
  tmpvar_5 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_6;
  tmpvar_6 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, half3(_mtl_u._Metallic));
  half3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 diffColor_8;
  diffColor_8 = ((tmpvar_5 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - 
    (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)
  )) * (tmpvar_2.w * _mtl_u._Color.w));
  tmpvar_1 = max ((half)0.0, tmpvar_7.y);
  half occ_9;
  half tmpvar_10;
  tmpvar_10 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_9 = tmpvar_10;
  half tmpvar_11;
  tmpvar_11 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_9 * _mtl_u._OcclusionStrength));
  float4 tmpvar_12;
  tmpvar_12 = float4(_mtl_i.xlv_TEXCOORD5);
  half4 realtimeDirTex_13;
  half3 tmpvar_14;
  half4 tmpvar_15;
  tmpvar_15 = unity_DynamicLightmap.sample(_mtlsmp_unity_DynamicLightmap, (float2)(tmpvar_12.zw));
  half4 tmpvar_16;
  tmpvar_16 = unity_DynamicDirectionality.sample(_mtlsmp_unity_DynamicDirectionality, (float2)(tmpvar_12.zw));
  realtimeDirTex_13 = tmpvar_16;
  half4 dirTex_17;
  dirTex_17 = realtimeDirTex_13;
  half3 y_18;
  y_18 = (dirTex_17.xyz - (half)0.5);
  half tmpvar_19;
  tmpvar_19 = max ((half)0.0001, dirTex_17.w);
  tmpvar_14 = ((pow (
    ((_mtl_u.unity_DynamicLightmap_HDR.x * tmpvar_15.w) * tmpvar_15.xyz)
  , _mtl_u.unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_7, y_18)
   + (half)0.5)) / tmpvar_19);
  tmpvar_14 = (tmpvar_14 * tmpvar_11);
  half3 viewDir_20;
  viewDir_20 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_21;
  half tmpvar_22;
  tmpvar_22 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_23;
  inVec_23 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_20);
  half tmpvar_24;
  tmpvar_24 = max ((half)0.0, dot (tmpvar_7, (inVec_23 * 
    rsqrt(max ((half)0.001, dot (inVec_23, inVec_23)))
  )));
  half tmpvar_25;
  tmpvar_25 = max ((half)0.0, dot (tmpvar_7, viewDir_20));
  half tmpvar_26;
  tmpvar_26 = (tmpvar_22 * tmpvar_22);
  half tmpvar_27;
  tmpvar_27 = (tmpvar_22 * tmpvar_22);
  half tmpvar_28;
  tmpvar_28 = (tmpvar_27 * tmpvar_27);
  half tmpvar_29;
  tmpvar_29 = (((tmpvar_24 * tmpvar_24) * (tmpvar_28 - (half)1.0)) + (half)1.0);
  half tmpvar_30;
  tmpvar_30 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_25 * ((half)1.0 - tmpvar_26))
     + tmpvar_26)) + (tmpvar_25 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_26))
     + tmpvar_26))) + (half)1e-05)
  ) * (tmpvar_28 / 
    ((((half)3.141593 * tmpvar_29) * tmpvar_29) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_21 = tmpvar_30;
  bool tmpvar_31;
  tmpvar_31 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_31) {
    specularTerm_21 = sqrt(max ((half)0.0001, tmpvar_30));
  };
  half tmpvar_32;
  tmpvar_32 = max ((half)0.0, (specularTerm_21 * tmpvar_1));
  specularTerm_21 = tmpvar_32;
  bool3 tmpvar_33;
  tmpvar_33 = bool3(tmpvar_6);
  bool tmpvar_34;
  tmpvar_34 = any(tmpvar_33);
  float tmpvar_35;
  if (tmpvar_34) {
    tmpvar_35 = 1.0;
  } else {
    tmpvar_35 = 0.0;
  };
  specularTerm_21 = (tmpvar_32 * (half)tmpvar_35);
  half4 tmpvar_36;
  tmpvar_36.w = half(1.0);
  tmpvar_36.xyz = (diffColor_8 * tmpvar_14);
  half4 tmpvar_37;
  tmpvar_37.xyz = diffColor_8;
  tmpvar_37.w = tmpvar_11;
  half4 tmpvar_38;
  tmpvar_38.xyz = tmpvar_6;
  tmpvar_38.w = tmpvar_4;
  half4 tmpvar_39;
  tmpvar_39.w = half(1.0);
  tmpvar_39.xyz = ((tmpvar_7 * (half)0.5) + (half)0.5);
  half4 tmpvar_40;
  tmpvar_40.w = half(1.0);
  tmpvar_40.xyz = exp2(-(tmpvar_36.xyz));
  _mtl_o._glesFragData_0 = tmpvar_37;
  _mtl_o._glesFragData_1 = tmpvar_38;
  _mtl_o._glesFragData_2 = tmpvar_39;
  _mtl_o._glesFragData_3 = tmpvar_40;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 95 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
ConstBuffer "$Globals" 174
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_4;
  mg_4.x = _mtl_u._Metallic;
  mg_4.y = _mtl_u._Glossiness;
  half tmpvar_5;
  tmpvar_5 = mg_4.y;
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_7;
  half3 tmpvar_8;
  tmpvar_8 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  tmpvar_7 = (tmpvar_6 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  tmpvar_1 = max ((half)0.0, tmpvar_9.y);
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  float3 tmpvar_14;
  tmpvar_14 = float3(i_posWorld_2);
  half3 tmpvar_15;
  tmpvar_15 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_16;
  ambient_16 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_17;
  ambient_contrib_17 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_18;
    tmpvar_18.w = half(1.0);
    tmpvar_18.xyz = tmpvar_9;
    half3 x1_19;
    half4 SHAb_20;
    half4 SHAg_21;
    half4 SHAr_22;
    float3 texCoord_23;
    float3 tmpvar_24;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_25;
      tmpvar_25.w = 1.0;
      tmpvar_25.xyz = tmpvar_14;
      tmpvar_24 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_25).xyz;
    } else {
      tmpvar_24 = tmpvar_14;
    };
    float3 tmpvar_26;
    tmpvar_26 = ((tmpvar_24 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_23.yz = tmpvar_26.yz;
    texCoord_23.x = (tmpvar_26.x * 0.25);
    float tmpvar_27;
    float tmpvar_28;
    tmpvar_28 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_27 = clamp (texCoord_23.x, tmpvar_28, (0.25 - tmpvar_28));
    texCoord_23.x = tmpvar_27;
    half4 tmpvar_29;
    tmpvar_29 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAr_22 = tmpvar_29;
    texCoord_23.x = (tmpvar_27 + 0.25);
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAg_21 = tmpvar_30;
    texCoord_23.x = (tmpvar_27 + 0.5);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAb_20 = tmpvar_31;
    x1_19.x = dot (SHAr_22, tmpvar_18);
    x1_19.y = dot (SHAg_21, tmpvar_18);
    x1_19.z = dot (SHAb_20, tmpvar_18);
    ambient_contrib_17 = x1_19;
  } else {
    half4 tmpvar_32;
    tmpvar_32.w = half(1.0);
    tmpvar_32.xyz = tmpvar_9;
    half3 x_33;
    x_33.x = dot (_mtl_u.unity_SHAr, tmpvar_32);
    x_33.y = dot (_mtl_u.unity_SHAg, tmpvar_32);
    x_33.z = dot (_mtl_u.unity_SHAb, tmpvar_32);
    ambient_contrib_17 = x_33;
  };
  half3 tmpvar_34;
  tmpvar_34 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_17));
  ambient_16 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    ambient_16 = max ((((half)1.055 * 
      pow (max (tmpvar_34, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_15 = (ambient_16 * tmpvar_13);
  half3 viewDir_36;
  viewDir_36 = -(tmpvar_10);
  half specularTerm_37;
  half tmpvar_38;
  tmpvar_38 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_39;
  inVec_39 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_36);
  half tmpvar_40;
  tmpvar_40 = max ((half)0.0, dot (tmpvar_9, (inVec_39 * 
    rsqrt(max ((half)0.001, dot (inVec_39, inVec_39)))
  )));
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_9, viewDir_36));
  half tmpvar_42;
  tmpvar_42 = (tmpvar_38 * tmpvar_38);
  half tmpvar_43;
  tmpvar_43 = (tmpvar_38 * tmpvar_38);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_43 * tmpvar_43);
  half tmpvar_45;
  tmpvar_45 = (((tmpvar_40 * tmpvar_40) * (tmpvar_44 - (half)1.0)) + (half)1.0);
  half tmpvar_46;
  tmpvar_46 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_41 * ((half)1.0 - tmpvar_42))
     + tmpvar_42)) + (tmpvar_41 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_42))
     + tmpvar_42))) + (half)1e-05)
  ) * (tmpvar_44 / 
    ((((half)3.141593 * tmpvar_45) * tmpvar_45) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_37 = tmpvar_46;
  bool tmpvar_47;
  tmpvar_47 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_47) {
    specularTerm_37 = sqrt(max ((half)0.0001, tmpvar_46));
  };
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, (specularTerm_37 * tmpvar_1));
  specularTerm_37 = tmpvar_48;
  bool3 tmpvar_49;
  tmpvar_49 = bool3(tmpvar_8);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_37 = (tmpvar_48 * (half)tmpvar_51);
  half4 tmpvar_52;
  tmpvar_52.w = half(1.0);
  tmpvar_52.xyz = (tmpvar_7 * tmpvar_15);
  half4 tmpvar_53;
  tmpvar_53.xyz = tmpvar_7;
  tmpvar_53.w = tmpvar_13;
  half4 tmpvar_54;
  tmpvar_54.xyz = tmpvar_8;
  tmpvar_54.w = tmpvar_5;
  half4 tmpvar_55;
  tmpvar_55.w = half(1.0);
  tmpvar_55.xyz = ((tmpvar_9 * (half)0.5) + (half)0.5);
  half4 tmpvar_56;
  tmpvar_56.w = half(1.0);
  tmpvar_56.xyz = exp2(-(tmpvar_52.xyz));
  _mtl_o._glesFragData_0 = tmpvar_53;
  _mtl_o._glesFragData_1 = tmpvar_54;
  _mtl_o._glesFragData_2 = tmpvar_55;
  _mtl_o._glesFragData_3 = tmpvar_56;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 97 math, 6 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
SetTexture 3 [_EmissionMap] 2D 3
ConstBuffer "$Globals" 184
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
VectorHalf 176 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]]
  ,   texture2d<half> _EmissionMap [[texture(3)]], sampler _mtlsmp__EmissionMap [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 color_1;
  half tmpvar_2;
  half3 i_posWorld_3;
  i_posWorld_3 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_4;
  tmpvar_4 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_5;
  mg_5.x = _mtl_u._Metallic;
  mg_5.y = _mtl_u._Glossiness;
  half tmpvar_6;
  tmpvar_6 = mg_5.y;
  half3 tmpvar_7;
  tmpvar_7 = (_mtl_u._Color.xyz * tmpvar_4.xyz);
  half3 tmpvar_8;
  half3 tmpvar_9;
  tmpvar_9 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_7, half3(_mtl_u._Metallic));
  tmpvar_8 = (tmpvar_7 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_11;
  tmpvar_11 = normalize(_mtl_i.xlv_TEXCOORD1);
  tmpvar_2 = max ((half)0.0, tmpvar_10.y);
  half occ_12;
  half tmpvar_13;
  tmpvar_13 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_12 = tmpvar_13;
  half tmpvar_14;
  tmpvar_14 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_12 * _mtl_u._OcclusionStrength));
  float3 tmpvar_15;
  tmpvar_15 = float3(i_posWorld_3);
  half3 tmpvar_16;
  tmpvar_16 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_17;
  ambient_17 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_18;
  ambient_contrib_18 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_19;
    tmpvar_19.w = half(1.0);
    tmpvar_19.xyz = tmpvar_10;
    half3 x1_20;
    half4 SHAb_21;
    half4 SHAg_22;
    half4 SHAr_23;
    float3 texCoord_24;
    float3 tmpvar_25;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_26;
      tmpvar_26.w = 1.0;
      tmpvar_26.xyz = tmpvar_15;
      tmpvar_25 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_26).xyz;
    } else {
      tmpvar_25 = tmpvar_15;
    };
    float3 tmpvar_27;
    tmpvar_27 = ((tmpvar_25 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_24.yz = tmpvar_27.yz;
    texCoord_24.x = (tmpvar_27.x * 0.25);
    float tmpvar_28;
    float tmpvar_29;
    tmpvar_29 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_28 = clamp (texCoord_24.x, tmpvar_29, (0.25 - tmpvar_29));
    texCoord_24.x = tmpvar_28;
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_24));
    SHAr_23 = tmpvar_30;
    texCoord_24.x = (tmpvar_28 + 0.25);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_24));
    SHAg_22 = tmpvar_31;
    texCoord_24.x = (tmpvar_28 + 0.5);
    half4 tmpvar_32;
    tmpvar_32 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_24));
    SHAb_21 = tmpvar_32;
    x1_20.x = dot (SHAr_23, tmpvar_19);
    x1_20.y = dot (SHAg_22, tmpvar_19);
    x1_20.z = dot (SHAb_21, tmpvar_19);
    ambient_contrib_18 = x1_20;
  } else {
    half4 tmpvar_33;
    tmpvar_33.w = half(1.0);
    tmpvar_33.xyz = tmpvar_10;
    half3 x_34;
    x_34.x = dot (_mtl_u.unity_SHAr, tmpvar_33);
    x_34.y = dot (_mtl_u.unity_SHAg, tmpvar_33);
    x_34.z = dot (_mtl_u.unity_SHAb, tmpvar_33);
    ambient_contrib_18 = x_34;
  };
  half3 tmpvar_35;
  tmpvar_35 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_18));
  ambient_17 = tmpvar_35;
  bool tmpvar_36;
  tmpvar_36 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_36) {
    ambient_17 = max ((((half)1.055 * 
      pow (max (tmpvar_35, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_16 = (ambient_17 * tmpvar_14);
  half3 viewDir_37;
  viewDir_37 = -(tmpvar_11);
  half specularTerm_38;
  half tmpvar_39;
  tmpvar_39 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_40;
  inVec_40 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_37);
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_10, (inVec_40 * 
    rsqrt(max ((half)0.001, dot (inVec_40, inVec_40)))
  )));
  half tmpvar_42;
  tmpvar_42 = max ((half)0.0, dot (tmpvar_10, viewDir_37));
  half tmpvar_43;
  tmpvar_43 = (tmpvar_39 * tmpvar_39);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_39 * tmpvar_39);
  half tmpvar_45;
  tmpvar_45 = (tmpvar_44 * tmpvar_44);
  half tmpvar_46;
  tmpvar_46 = (((tmpvar_41 * tmpvar_41) * (tmpvar_45 - (half)1.0)) + (half)1.0);
  half tmpvar_47;
  tmpvar_47 = ((((half)2.0 / 
    (((tmpvar_2 * (
      (tmpvar_42 * ((half)1.0 - tmpvar_43))
     + tmpvar_43)) + (tmpvar_42 * (
      (tmpvar_2 * ((half)1.0 - tmpvar_43))
     + tmpvar_43))) + (half)1e-05)
  ) * (tmpvar_45 / 
    ((((half)3.141593 * tmpvar_46) * tmpvar_46) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_38 = tmpvar_47;
  bool tmpvar_48;
  tmpvar_48 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_48) {
    specularTerm_38 = sqrt(max ((half)0.0001, tmpvar_47));
  };
  half tmpvar_49;
  tmpvar_49 = max ((half)0.0, (specularTerm_38 * tmpvar_2));
  specularTerm_38 = tmpvar_49;
  bool3 tmpvar_50;
  tmpvar_50 = bool3(tmpvar_9);
  bool tmpvar_51;
  tmpvar_51 = any(tmpvar_50);
  float tmpvar_52;
  if (tmpvar_51) {
    tmpvar_52 = 1.0;
  } else {
    tmpvar_52 = 0.0;
  };
  specularTerm_38 = (tmpvar_49 * (half)tmpvar_52);
  half4 tmpvar_53;
  tmpvar_53.w = half(1.0);
  tmpvar_53.xyz = (tmpvar_8 * tmpvar_16);
  half4 tmpvar_54;
  tmpvar_54 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  color_1 = (tmpvar_53.xyz + (tmpvar_54.xyz * _mtl_u._EmissionColor.xyz));
  color_1 = exp2(-(color_1));
  half4 tmpvar_55;
  tmpvar_55.xyz = tmpvar_8;
  tmpvar_55.w = tmpvar_14;
  half4 tmpvar_56;
  tmpvar_56.xyz = tmpvar_9;
  tmpvar_56.w = tmpvar_6;
  half4 tmpvar_57;
  tmpvar_57.w = half(1.0);
  tmpvar_57.xyz = ((tmpvar_10 * (half)0.5) + (half)0.5);
  half4 tmpvar_58;
  tmpvar_58.w = half(1.0);
  tmpvar_58.xyz = color_1;
  _mtl_o._glesFragData_0 = tmpvar_55;
  _mtl_o._glesFragData_1 = tmpvar_56;
  _mtl_o._glesFragData_2 = tmpvar_57;
  _mtl_o._glesFragData_3 = tmpvar_58;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 97 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
ConstBuffer "$Globals" 174
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_4;
  mg_4.x = _mtl_u._Metallic;
  mg_4.y = _mtl_u._Glossiness;
  half tmpvar_5;
  tmpvar_5 = mg_4.y;
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 diffColor_10;
  diffColor_10 = ((tmpvar_6 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - 
    (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)
  )) * (tmpvar_3.w * _mtl_u._Color.w));
  tmpvar_1 = max ((half)0.0, tmpvar_8.y);
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  float3 tmpvar_14;
  tmpvar_14 = float3(i_posWorld_2);
  half3 tmpvar_15;
  tmpvar_15 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_16;
  ambient_16 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_17;
  ambient_contrib_17 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_18;
    tmpvar_18.w = half(1.0);
    tmpvar_18.xyz = tmpvar_8;
    half3 x1_19;
    half4 SHAb_20;
    half4 SHAg_21;
    half4 SHAr_22;
    float3 texCoord_23;
    float3 tmpvar_24;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_25;
      tmpvar_25.w = 1.0;
      tmpvar_25.xyz = tmpvar_14;
      tmpvar_24 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_25).xyz;
    } else {
      tmpvar_24 = tmpvar_14;
    };
    float3 tmpvar_26;
    tmpvar_26 = ((tmpvar_24 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_23.yz = tmpvar_26.yz;
    texCoord_23.x = (tmpvar_26.x * 0.25);
    float tmpvar_27;
    float tmpvar_28;
    tmpvar_28 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_27 = clamp (texCoord_23.x, tmpvar_28, (0.25 - tmpvar_28));
    texCoord_23.x = tmpvar_27;
    half4 tmpvar_29;
    tmpvar_29 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAr_22 = tmpvar_29;
    texCoord_23.x = (tmpvar_27 + 0.25);
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAg_21 = tmpvar_30;
    texCoord_23.x = (tmpvar_27 + 0.5);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAb_20 = tmpvar_31;
    x1_19.x = dot (SHAr_22, tmpvar_18);
    x1_19.y = dot (SHAg_21, tmpvar_18);
    x1_19.z = dot (SHAb_20, tmpvar_18);
    ambient_contrib_17 = x1_19;
  } else {
    half4 tmpvar_32;
    tmpvar_32.w = half(1.0);
    tmpvar_32.xyz = tmpvar_8;
    half3 x_33;
    x_33.x = dot (_mtl_u.unity_SHAr, tmpvar_32);
    x_33.y = dot (_mtl_u.unity_SHAg, tmpvar_32);
    x_33.z = dot (_mtl_u.unity_SHAb, tmpvar_32);
    ambient_contrib_17 = x_33;
  };
  half3 tmpvar_34;
  tmpvar_34 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_17));
  ambient_16 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    ambient_16 = max ((((half)1.055 * 
      pow (max (tmpvar_34, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_15 = (ambient_16 * tmpvar_13);
  half3 viewDir_36;
  viewDir_36 = -(tmpvar_9);
  half specularTerm_37;
  half tmpvar_38;
  tmpvar_38 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_39;
  inVec_39 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_36);
  half tmpvar_40;
  tmpvar_40 = max ((half)0.0, dot (tmpvar_8, (inVec_39 * 
    rsqrt(max ((half)0.001, dot (inVec_39, inVec_39)))
  )));
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_8, viewDir_36));
  half tmpvar_42;
  tmpvar_42 = (tmpvar_38 * tmpvar_38);
  half tmpvar_43;
  tmpvar_43 = (tmpvar_38 * tmpvar_38);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_43 * tmpvar_43);
  half tmpvar_45;
  tmpvar_45 = (((tmpvar_40 * tmpvar_40) * (tmpvar_44 - (half)1.0)) + (half)1.0);
  half tmpvar_46;
  tmpvar_46 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_41 * ((half)1.0 - tmpvar_42))
     + tmpvar_42)) + (tmpvar_41 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_42))
     + tmpvar_42))) + (half)1e-05)
  ) * (tmpvar_44 / 
    ((((half)3.141593 * tmpvar_45) * tmpvar_45) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_37 = tmpvar_46;
  bool tmpvar_47;
  tmpvar_47 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_47) {
    specularTerm_37 = sqrt(max ((half)0.0001, tmpvar_46));
  };
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, (specularTerm_37 * tmpvar_1));
  specularTerm_37 = tmpvar_48;
  bool3 tmpvar_49;
  tmpvar_49 = bool3(tmpvar_7);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_37 = (tmpvar_48 * (half)tmpvar_51);
  half4 tmpvar_52;
  tmpvar_52.w = half(1.0);
  tmpvar_52.xyz = (diffColor_10 * tmpvar_15);
  half4 tmpvar_53;
  tmpvar_53.xyz = diffColor_10;
  tmpvar_53.w = tmpvar_13;
  half4 tmpvar_54;
  tmpvar_54.xyz = tmpvar_7;
  tmpvar_54.w = tmpvar_5;
  half4 tmpvar_55;
  tmpvar_55.w = half(1.0);
  tmpvar_55.xyz = ((tmpvar_8 * (half)0.5) + (half)0.5);
  half4 tmpvar_56;
  tmpvar_56.w = half(1.0);
  tmpvar_56.xyz = exp2(-(tmpvar_52.xyz));
  _mtl_o._glesFragData_0 = tmpvar_53;
  _mtl_o._glesFragData_1 = tmpvar_54;
  _mtl_o._glesFragData_2 = tmpvar_55;
  _mtl_o._glesFragData_3 = tmpvar_56;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 93 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
ConstBuffer "$Globals" 174
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_4;
  mg_4.x = _mtl_u._Metallic;
  mg_4.y = _mtl_u._Glossiness;
  half tmpvar_5;
  tmpvar_5 = mg_4.y;
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_7;
  half3 tmpvar_8;
  tmpvar_8 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  tmpvar_7 = (tmpvar_6 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  tmpvar_1 = max ((half)0.0, tmpvar_9.y);
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  float3 tmpvar_14;
  tmpvar_14 = float3(i_posWorld_2);
  half3 tmpvar_15;
  tmpvar_15 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_16;
  ambient_16 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_17;
  ambient_contrib_17 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_18;
    tmpvar_18.w = half(1.0);
    tmpvar_18.xyz = tmpvar_9;
    half3 x1_19;
    half4 SHAb_20;
    half4 SHAg_21;
    half4 SHAr_22;
    float3 texCoord_23;
    float3 tmpvar_24;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_25;
      tmpvar_25.w = 1.0;
      tmpvar_25.xyz = tmpvar_14;
      tmpvar_24 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_25).xyz;
    } else {
      tmpvar_24 = tmpvar_14;
    };
    float3 tmpvar_26;
    tmpvar_26 = ((tmpvar_24 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_23.yz = tmpvar_26.yz;
    texCoord_23.x = (tmpvar_26.x * 0.25);
    float tmpvar_27;
    float tmpvar_28;
    tmpvar_28 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_27 = clamp (texCoord_23.x, tmpvar_28, (0.25 - tmpvar_28));
    texCoord_23.x = tmpvar_27;
    half4 tmpvar_29;
    tmpvar_29 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAr_22 = tmpvar_29;
    texCoord_23.x = (tmpvar_27 + 0.25);
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAg_21 = tmpvar_30;
    texCoord_23.x = (tmpvar_27 + 0.5);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAb_20 = tmpvar_31;
    x1_19.x = dot (SHAr_22, tmpvar_18);
    x1_19.y = dot (SHAg_21, tmpvar_18);
    x1_19.z = dot (SHAb_20, tmpvar_18);
    ambient_contrib_17 = x1_19;
  } else {
    half4 tmpvar_32;
    tmpvar_32.w = half(1.0);
    tmpvar_32.xyz = tmpvar_9;
    half3 x_33;
    x_33.x = dot (_mtl_u.unity_SHAr, tmpvar_32);
    x_33.y = dot (_mtl_u.unity_SHAg, tmpvar_32);
    x_33.z = dot (_mtl_u.unity_SHAb, tmpvar_32);
    ambient_contrib_17 = x_33;
  };
  half3 tmpvar_34;
  tmpvar_34 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_17));
  ambient_16 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    ambient_16 = max ((((half)1.055 * 
      pow (max (tmpvar_34, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_15 = (ambient_16 * tmpvar_13);
  half3 viewDir_36;
  viewDir_36 = -(tmpvar_10);
  half specularTerm_37;
  half tmpvar_38;
  tmpvar_38 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_39;
  inVec_39 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_36);
  half tmpvar_40;
  tmpvar_40 = max ((half)0.0, dot (tmpvar_9, (inVec_39 * 
    rsqrt(max ((half)0.001, dot (inVec_39, inVec_39)))
  )));
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_9, viewDir_36));
  half tmpvar_42;
  tmpvar_42 = (tmpvar_38 * tmpvar_38);
  half tmpvar_43;
  tmpvar_43 = (tmpvar_38 * tmpvar_38);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_43 * tmpvar_43);
  half tmpvar_45;
  tmpvar_45 = (((tmpvar_40 * tmpvar_40) * (tmpvar_44 - (half)1.0)) + (half)1.0);
  half tmpvar_46;
  tmpvar_46 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_41 * ((half)1.0 - tmpvar_42))
     + tmpvar_42)) + (tmpvar_41 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_42))
     + tmpvar_42))) + (half)1e-05)
  ) * (tmpvar_44 / 
    ((((half)3.141593 * tmpvar_45) * tmpvar_45) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_37 = tmpvar_46;
  bool tmpvar_47;
  tmpvar_47 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_47) {
    specularTerm_37 = sqrt(max ((half)0.0001, tmpvar_46));
  };
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, (specularTerm_37 * tmpvar_1));
  specularTerm_37 = tmpvar_48;
  bool3 tmpvar_49;
  tmpvar_49 = bool3(tmpvar_8);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_37 = (tmpvar_48 * (half)tmpvar_51);
  half4 tmpvar_52;
  tmpvar_52.w = half(1.0);
  tmpvar_52.xyz = (tmpvar_7 * tmpvar_15);
  half4 tmpvar_53;
  tmpvar_53.xyz = tmpvar_7;
  tmpvar_53.w = tmpvar_13;
  half4 tmpvar_54;
  tmpvar_54.xyz = tmpvar_8;
  tmpvar_54.w = tmpvar_5;
  half4 tmpvar_55;
  tmpvar_55.w = half(1.0);
  tmpvar_55.xyz = ((tmpvar_9 * (half)0.5) + (half)0.5);
  half4 tmpvar_56;
  tmpvar_56.w = half(1.0);
  tmpvar_56.xyz = tmpvar_52.xyz;
  _mtl_o._glesFragData_0 = tmpvar_53;
  _mtl_o._glesFragData_1 = tmpvar_54;
  _mtl_o._glesFragData_2 = tmpvar_55;
  _mtl_o._glesFragData_3 = tmpvar_56;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 95 math, 6 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
SetTexture 3 [_EmissionMap] 2D 3
ConstBuffer "$Globals" 184
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
VectorHalf 176 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]]
  ,   texture2d<half> _EmissionMap [[texture(3)]], sampler _mtlsmp__EmissionMap [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_4;
  mg_4.x = _mtl_u._Metallic;
  mg_4.y = _mtl_u._Glossiness;
  half tmpvar_5;
  tmpvar_5 = mg_4.y;
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_7;
  half3 tmpvar_8;
  tmpvar_8 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  tmpvar_7 = (tmpvar_6 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  tmpvar_1 = max ((half)0.0, tmpvar_9.y);
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  float3 tmpvar_14;
  tmpvar_14 = float3(i_posWorld_2);
  half3 tmpvar_15;
  tmpvar_15 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_16;
  ambient_16 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_17;
  ambient_contrib_17 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_18;
    tmpvar_18.w = half(1.0);
    tmpvar_18.xyz = tmpvar_9;
    half3 x1_19;
    half4 SHAb_20;
    half4 SHAg_21;
    half4 SHAr_22;
    float3 texCoord_23;
    float3 tmpvar_24;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_25;
      tmpvar_25.w = 1.0;
      tmpvar_25.xyz = tmpvar_14;
      tmpvar_24 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_25).xyz;
    } else {
      tmpvar_24 = tmpvar_14;
    };
    float3 tmpvar_26;
    tmpvar_26 = ((tmpvar_24 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_23.yz = tmpvar_26.yz;
    texCoord_23.x = (tmpvar_26.x * 0.25);
    float tmpvar_27;
    float tmpvar_28;
    tmpvar_28 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_27 = clamp (texCoord_23.x, tmpvar_28, (0.25 - tmpvar_28));
    texCoord_23.x = tmpvar_27;
    half4 tmpvar_29;
    tmpvar_29 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAr_22 = tmpvar_29;
    texCoord_23.x = (tmpvar_27 + 0.25);
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAg_21 = tmpvar_30;
    texCoord_23.x = (tmpvar_27 + 0.5);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAb_20 = tmpvar_31;
    x1_19.x = dot (SHAr_22, tmpvar_18);
    x1_19.y = dot (SHAg_21, tmpvar_18);
    x1_19.z = dot (SHAb_20, tmpvar_18);
    ambient_contrib_17 = x1_19;
  } else {
    half4 tmpvar_32;
    tmpvar_32.w = half(1.0);
    tmpvar_32.xyz = tmpvar_9;
    half3 x_33;
    x_33.x = dot (_mtl_u.unity_SHAr, tmpvar_32);
    x_33.y = dot (_mtl_u.unity_SHAg, tmpvar_32);
    x_33.z = dot (_mtl_u.unity_SHAb, tmpvar_32);
    ambient_contrib_17 = x_33;
  };
  half3 tmpvar_34;
  tmpvar_34 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_17));
  ambient_16 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    ambient_16 = max ((((half)1.055 * 
      pow (max (tmpvar_34, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_15 = (ambient_16 * tmpvar_13);
  half3 viewDir_36;
  viewDir_36 = -(tmpvar_10);
  half specularTerm_37;
  half tmpvar_38;
  tmpvar_38 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_39;
  inVec_39 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_36);
  half tmpvar_40;
  tmpvar_40 = max ((half)0.0, dot (tmpvar_9, (inVec_39 * 
    rsqrt(max ((half)0.001, dot (inVec_39, inVec_39)))
  )));
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_9, viewDir_36));
  half tmpvar_42;
  tmpvar_42 = (tmpvar_38 * tmpvar_38);
  half tmpvar_43;
  tmpvar_43 = (tmpvar_38 * tmpvar_38);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_43 * tmpvar_43);
  half tmpvar_45;
  tmpvar_45 = (((tmpvar_40 * tmpvar_40) * (tmpvar_44 - (half)1.0)) + (half)1.0);
  half tmpvar_46;
  tmpvar_46 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_41 * ((half)1.0 - tmpvar_42))
     + tmpvar_42)) + (tmpvar_41 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_42))
     + tmpvar_42))) + (half)1e-05)
  ) * (tmpvar_44 / 
    ((((half)3.141593 * tmpvar_45) * tmpvar_45) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_37 = tmpvar_46;
  bool tmpvar_47;
  tmpvar_47 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_47) {
    specularTerm_37 = sqrt(max ((half)0.0001, tmpvar_46));
  };
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, (specularTerm_37 * tmpvar_1));
  specularTerm_37 = tmpvar_48;
  bool3 tmpvar_49;
  tmpvar_49 = bool3(tmpvar_8);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_37 = (tmpvar_48 * (half)tmpvar_51);
  half4 tmpvar_52;
  tmpvar_52.w = half(1.0);
  tmpvar_52.xyz = (tmpvar_7 * tmpvar_15);
  half4 tmpvar_53;
  tmpvar_53 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half4 tmpvar_54;
  tmpvar_54.xyz = tmpvar_7;
  tmpvar_54.w = tmpvar_13;
  half4 tmpvar_55;
  tmpvar_55.xyz = tmpvar_8;
  tmpvar_55.w = tmpvar_5;
  half4 tmpvar_56;
  tmpvar_56.w = half(1.0);
  tmpvar_56.xyz = ((tmpvar_9 * (half)0.5) + (half)0.5);
  half4 tmpvar_57;
  tmpvar_57.w = half(1.0);
  tmpvar_57.xyz = (tmpvar_52.xyz + (tmpvar_53.xyz * _mtl_u._EmissionColor.xyz));
  _mtl_o._glesFragData_0 = tmpvar_54;
  _mtl_o._glesFragData_1 = tmpvar_55;
  _mtl_o._glesFragData_2 = tmpvar_56;
  _mtl_o._glesFragData_3 = tmpvar_57;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 95 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
ConstBuffer "$Globals" 174
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_4;
  mg_4.x = _mtl_u._Metallic;
  mg_4.y = _mtl_u._Glossiness;
  half tmpvar_5;
  tmpvar_5 = mg_4.y;
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 diffColor_10;
  diffColor_10 = ((tmpvar_6 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - 
    (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)
  )) * (tmpvar_3.w * _mtl_u._Color.w));
  tmpvar_1 = max ((half)0.0, tmpvar_8.y);
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  float3 tmpvar_14;
  tmpvar_14 = float3(i_posWorld_2);
  half3 tmpvar_15;
  tmpvar_15 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_16;
  ambient_16 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_17;
  ambient_contrib_17 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_18;
    tmpvar_18.w = half(1.0);
    tmpvar_18.xyz = tmpvar_8;
    half3 x1_19;
    half4 SHAb_20;
    half4 SHAg_21;
    half4 SHAr_22;
    float3 texCoord_23;
    float3 tmpvar_24;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_25;
      tmpvar_25.w = 1.0;
      tmpvar_25.xyz = tmpvar_14;
      tmpvar_24 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_25).xyz;
    } else {
      tmpvar_24 = tmpvar_14;
    };
    float3 tmpvar_26;
    tmpvar_26 = ((tmpvar_24 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_23.yz = tmpvar_26.yz;
    texCoord_23.x = (tmpvar_26.x * 0.25);
    float tmpvar_27;
    float tmpvar_28;
    tmpvar_28 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_27 = clamp (texCoord_23.x, tmpvar_28, (0.25 - tmpvar_28));
    texCoord_23.x = tmpvar_27;
    half4 tmpvar_29;
    tmpvar_29 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAr_22 = tmpvar_29;
    texCoord_23.x = (tmpvar_27 + 0.25);
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAg_21 = tmpvar_30;
    texCoord_23.x = (tmpvar_27 + 0.5);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAb_20 = tmpvar_31;
    x1_19.x = dot (SHAr_22, tmpvar_18);
    x1_19.y = dot (SHAg_21, tmpvar_18);
    x1_19.z = dot (SHAb_20, tmpvar_18);
    ambient_contrib_17 = x1_19;
  } else {
    half4 tmpvar_32;
    tmpvar_32.w = half(1.0);
    tmpvar_32.xyz = tmpvar_8;
    half3 x_33;
    x_33.x = dot (_mtl_u.unity_SHAr, tmpvar_32);
    x_33.y = dot (_mtl_u.unity_SHAg, tmpvar_32);
    x_33.z = dot (_mtl_u.unity_SHAb, tmpvar_32);
    ambient_contrib_17 = x_33;
  };
  half3 tmpvar_34;
  tmpvar_34 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_17));
  ambient_16 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    ambient_16 = max ((((half)1.055 * 
      pow (max (tmpvar_34, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_15 = (ambient_16 * tmpvar_13);
  half3 viewDir_36;
  viewDir_36 = -(tmpvar_9);
  half specularTerm_37;
  half tmpvar_38;
  tmpvar_38 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_39;
  inVec_39 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_36);
  half tmpvar_40;
  tmpvar_40 = max ((half)0.0, dot (tmpvar_8, (inVec_39 * 
    rsqrt(max ((half)0.001, dot (inVec_39, inVec_39)))
  )));
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_8, viewDir_36));
  half tmpvar_42;
  tmpvar_42 = (tmpvar_38 * tmpvar_38);
  half tmpvar_43;
  tmpvar_43 = (tmpvar_38 * tmpvar_38);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_43 * tmpvar_43);
  half tmpvar_45;
  tmpvar_45 = (((tmpvar_40 * tmpvar_40) * (tmpvar_44 - (half)1.0)) + (half)1.0);
  half tmpvar_46;
  tmpvar_46 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_41 * ((half)1.0 - tmpvar_42))
     + tmpvar_42)) + (tmpvar_41 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_42))
     + tmpvar_42))) + (half)1e-05)
  ) * (tmpvar_44 / 
    ((((half)3.141593 * tmpvar_45) * tmpvar_45) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_37 = tmpvar_46;
  bool tmpvar_47;
  tmpvar_47 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_47) {
    specularTerm_37 = sqrt(max ((half)0.0001, tmpvar_46));
  };
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, (specularTerm_37 * tmpvar_1));
  specularTerm_37 = tmpvar_48;
  bool3 tmpvar_49;
  tmpvar_49 = bool3(tmpvar_7);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_37 = (tmpvar_48 * (half)tmpvar_51);
  half4 tmpvar_52;
  tmpvar_52.w = half(1.0);
  tmpvar_52.xyz = (diffColor_10 * tmpvar_15);
  half4 tmpvar_53;
  tmpvar_53.xyz = diffColor_10;
  tmpvar_53.w = tmpvar_13;
  half4 tmpvar_54;
  tmpvar_54.xyz = tmpvar_7;
  tmpvar_54.w = tmpvar_5;
  half4 tmpvar_55;
  tmpvar_55.w = half(1.0);
  tmpvar_55.xyz = ((tmpvar_8 * (half)0.5) + (half)0.5);
  half4 tmpvar_56;
  tmpvar_56.w = half(1.0);
  tmpvar_56.xyz = tmpvar_52.xyz;
  _mtl_o._glesFragData_0 = tmpvar_53;
  _mtl_o._glesFragData_1 = tmpvar_54;
  _mtl_o._glesFragData_2 = tmpvar_55;
  _mtl_o._glesFragData_3 = tmpvar_56;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 93 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
ConstBuffer "$Globals" 174
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_4;
  mg_4.x = _mtl_u._Metallic;
  mg_4.y = _mtl_u._Glossiness;
  half tmpvar_5;
  tmpvar_5 = mg_4.y;
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_7;
  half3 tmpvar_8;
  tmpvar_8 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  tmpvar_7 = (tmpvar_6 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  tmpvar_1 = max ((half)0.0, tmpvar_9.y);
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  float3 tmpvar_14;
  tmpvar_14 = float3(i_posWorld_2);
  half3 tmpvar_15;
  tmpvar_15 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_16;
  ambient_16 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_17;
  ambient_contrib_17 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_18;
    tmpvar_18.w = half(1.0);
    tmpvar_18.xyz = tmpvar_9;
    half3 x1_19;
    half4 SHAb_20;
    half4 SHAg_21;
    half4 SHAr_22;
    float3 texCoord_23;
    float3 tmpvar_24;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_25;
      tmpvar_25.w = 1.0;
      tmpvar_25.xyz = tmpvar_14;
      tmpvar_24 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_25).xyz;
    } else {
      tmpvar_24 = tmpvar_14;
    };
    float3 tmpvar_26;
    tmpvar_26 = ((tmpvar_24 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_23.yz = tmpvar_26.yz;
    texCoord_23.x = (tmpvar_26.x * 0.25);
    float tmpvar_27;
    float tmpvar_28;
    tmpvar_28 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_27 = clamp (texCoord_23.x, tmpvar_28, (0.25 - tmpvar_28));
    texCoord_23.x = tmpvar_27;
    half4 tmpvar_29;
    tmpvar_29 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAr_22 = tmpvar_29;
    texCoord_23.x = (tmpvar_27 + 0.25);
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAg_21 = tmpvar_30;
    texCoord_23.x = (tmpvar_27 + 0.5);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAb_20 = tmpvar_31;
    x1_19.x = dot (SHAr_22, tmpvar_18);
    x1_19.y = dot (SHAg_21, tmpvar_18);
    x1_19.z = dot (SHAb_20, tmpvar_18);
    ambient_contrib_17 = x1_19;
  } else {
    half4 tmpvar_32;
    tmpvar_32.w = half(1.0);
    tmpvar_32.xyz = tmpvar_9;
    half3 x_33;
    x_33.x = dot (_mtl_u.unity_SHAr, tmpvar_32);
    x_33.y = dot (_mtl_u.unity_SHAg, tmpvar_32);
    x_33.z = dot (_mtl_u.unity_SHAb, tmpvar_32);
    ambient_contrib_17 = x_33;
  };
  half3 tmpvar_34;
  tmpvar_34 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_17));
  ambient_16 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    ambient_16 = max ((((half)1.055 * 
      pow (max (tmpvar_34, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_15 = (ambient_16 * tmpvar_13);
  half3 viewDir_36;
  viewDir_36 = -(tmpvar_10);
  half specularTerm_37;
  half tmpvar_38;
  tmpvar_38 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_39;
  inVec_39 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_36);
  half tmpvar_40;
  tmpvar_40 = max ((half)0.0, dot (tmpvar_9, (inVec_39 * 
    rsqrt(max ((half)0.001, dot (inVec_39, inVec_39)))
  )));
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_9, viewDir_36));
  half tmpvar_42;
  tmpvar_42 = (tmpvar_38 * tmpvar_38);
  half tmpvar_43;
  tmpvar_43 = (tmpvar_38 * tmpvar_38);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_43 * tmpvar_43);
  half tmpvar_45;
  tmpvar_45 = (((tmpvar_40 * tmpvar_40) * (tmpvar_44 - (half)1.0)) + (half)1.0);
  half tmpvar_46;
  tmpvar_46 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_41 * ((half)1.0 - tmpvar_42))
     + tmpvar_42)) + (tmpvar_41 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_42))
     + tmpvar_42))) + (half)1e-05)
  ) * (tmpvar_44 / 
    ((((half)3.141593 * tmpvar_45) * tmpvar_45) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_37 = tmpvar_46;
  bool tmpvar_47;
  tmpvar_47 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_47) {
    specularTerm_37 = sqrt(max ((half)0.0001, tmpvar_46));
  };
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, (specularTerm_37 * tmpvar_1));
  specularTerm_37 = tmpvar_48;
  bool3 tmpvar_49;
  tmpvar_49 = bool3(tmpvar_8);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_37 = (tmpvar_48 * (half)tmpvar_51);
  half4 tmpvar_52;
  tmpvar_52.w = half(1.0);
  tmpvar_52.xyz = (tmpvar_7 * tmpvar_15);
  half4 tmpvar_53;
  tmpvar_53.xyz = tmpvar_7;
  tmpvar_53.w = tmpvar_13;
  half4 tmpvar_54;
  tmpvar_54.xyz = tmpvar_8;
  tmpvar_54.w = tmpvar_5;
  half4 tmpvar_55;
  tmpvar_55.w = half(1.0);
  tmpvar_55.xyz = ((tmpvar_9 * (half)0.5) + (half)0.5);
  half4 tmpvar_56;
  tmpvar_56.w = half(1.0);
  tmpvar_56.xyz = tmpvar_52.xyz;
  _mtl_o._glesFragData_0 = tmpvar_53;
  _mtl_o._glesFragData_1 = tmpvar_54;
  _mtl_o._glesFragData_2 = tmpvar_55;
  _mtl_o._glesFragData_3 = tmpvar_56;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 95 math, 6 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
SetTexture 3 [_EmissionMap] 2D 3
ConstBuffer "$Globals" 184
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
VectorHalf 176 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]]
  ,   texture2d<half> _EmissionMap [[texture(3)]], sampler _mtlsmp__EmissionMap [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_4;
  mg_4.x = _mtl_u._Metallic;
  mg_4.y = _mtl_u._Glossiness;
  half tmpvar_5;
  tmpvar_5 = mg_4.y;
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_7;
  half3 tmpvar_8;
  tmpvar_8 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  tmpvar_7 = (tmpvar_6 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  tmpvar_1 = max ((half)0.0, tmpvar_9.y);
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  float3 tmpvar_14;
  tmpvar_14 = float3(i_posWorld_2);
  half3 tmpvar_15;
  tmpvar_15 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_16;
  ambient_16 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_17;
  ambient_contrib_17 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_18;
    tmpvar_18.w = half(1.0);
    tmpvar_18.xyz = tmpvar_9;
    half3 x1_19;
    half4 SHAb_20;
    half4 SHAg_21;
    half4 SHAr_22;
    float3 texCoord_23;
    float3 tmpvar_24;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_25;
      tmpvar_25.w = 1.0;
      tmpvar_25.xyz = tmpvar_14;
      tmpvar_24 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_25).xyz;
    } else {
      tmpvar_24 = tmpvar_14;
    };
    float3 tmpvar_26;
    tmpvar_26 = ((tmpvar_24 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_23.yz = tmpvar_26.yz;
    texCoord_23.x = (tmpvar_26.x * 0.25);
    float tmpvar_27;
    float tmpvar_28;
    tmpvar_28 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_27 = clamp (texCoord_23.x, tmpvar_28, (0.25 - tmpvar_28));
    texCoord_23.x = tmpvar_27;
    half4 tmpvar_29;
    tmpvar_29 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAr_22 = tmpvar_29;
    texCoord_23.x = (tmpvar_27 + 0.25);
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAg_21 = tmpvar_30;
    texCoord_23.x = (tmpvar_27 + 0.5);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAb_20 = tmpvar_31;
    x1_19.x = dot (SHAr_22, tmpvar_18);
    x1_19.y = dot (SHAg_21, tmpvar_18);
    x1_19.z = dot (SHAb_20, tmpvar_18);
    ambient_contrib_17 = x1_19;
  } else {
    half4 tmpvar_32;
    tmpvar_32.w = half(1.0);
    tmpvar_32.xyz = tmpvar_9;
    half3 x_33;
    x_33.x = dot (_mtl_u.unity_SHAr, tmpvar_32);
    x_33.y = dot (_mtl_u.unity_SHAg, tmpvar_32);
    x_33.z = dot (_mtl_u.unity_SHAb, tmpvar_32);
    ambient_contrib_17 = x_33;
  };
  half3 tmpvar_34;
  tmpvar_34 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_17));
  ambient_16 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    ambient_16 = max ((((half)1.055 * 
      pow (max (tmpvar_34, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_15 = (ambient_16 * tmpvar_13);
  half3 viewDir_36;
  viewDir_36 = -(tmpvar_10);
  half specularTerm_37;
  half tmpvar_38;
  tmpvar_38 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_39;
  inVec_39 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_36);
  half tmpvar_40;
  tmpvar_40 = max ((half)0.0, dot (tmpvar_9, (inVec_39 * 
    rsqrt(max ((half)0.001, dot (inVec_39, inVec_39)))
  )));
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_9, viewDir_36));
  half tmpvar_42;
  tmpvar_42 = (tmpvar_38 * tmpvar_38);
  half tmpvar_43;
  tmpvar_43 = (tmpvar_38 * tmpvar_38);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_43 * tmpvar_43);
  half tmpvar_45;
  tmpvar_45 = (((tmpvar_40 * tmpvar_40) * (tmpvar_44 - (half)1.0)) + (half)1.0);
  half tmpvar_46;
  tmpvar_46 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_41 * ((half)1.0 - tmpvar_42))
     + tmpvar_42)) + (tmpvar_41 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_42))
     + tmpvar_42))) + (half)1e-05)
  ) * (tmpvar_44 / 
    ((((half)3.141593 * tmpvar_45) * tmpvar_45) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_37 = tmpvar_46;
  bool tmpvar_47;
  tmpvar_47 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_47) {
    specularTerm_37 = sqrt(max ((half)0.0001, tmpvar_46));
  };
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, (specularTerm_37 * tmpvar_1));
  specularTerm_37 = tmpvar_48;
  bool3 tmpvar_49;
  tmpvar_49 = bool3(tmpvar_8);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_37 = (tmpvar_48 * (half)tmpvar_51);
  half4 tmpvar_52;
  tmpvar_52.w = half(1.0);
  tmpvar_52.xyz = (tmpvar_7 * tmpvar_15);
  half4 tmpvar_53;
  tmpvar_53 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half4 tmpvar_54;
  tmpvar_54.xyz = tmpvar_7;
  tmpvar_54.w = tmpvar_13;
  half4 tmpvar_55;
  tmpvar_55.xyz = tmpvar_8;
  tmpvar_55.w = tmpvar_5;
  half4 tmpvar_56;
  tmpvar_56.w = half(1.0);
  tmpvar_56.xyz = ((tmpvar_9 * (half)0.5) + (half)0.5);
  half4 tmpvar_57;
  tmpvar_57.w = half(1.0);
  tmpvar_57.xyz = (tmpvar_52.xyz + (tmpvar_53.xyz * _mtl_u._EmissionColor.xyz));
  _mtl_o._glesFragData_0 = tmpvar_54;
  _mtl_o._glesFragData_1 = tmpvar_55;
  _mtl_o._glesFragData_2 = tmpvar_56;
  _mtl_o._glesFragData_3 = tmpvar_57;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 95 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
ConstBuffer "$Globals" 174
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_4;
  mg_4.x = _mtl_u._Metallic;
  mg_4.y = _mtl_u._Glossiness;
  half tmpvar_5;
  tmpvar_5 = mg_4.y;
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 diffColor_10;
  diffColor_10 = ((tmpvar_6 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - 
    (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)
  )) * (tmpvar_3.w * _mtl_u._Color.w));
  tmpvar_1 = max ((half)0.0, tmpvar_8.y);
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  float3 tmpvar_14;
  tmpvar_14 = float3(i_posWorld_2);
  half3 tmpvar_15;
  tmpvar_15 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_16;
  ambient_16 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_17;
  ambient_contrib_17 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_18;
    tmpvar_18.w = half(1.0);
    tmpvar_18.xyz = tmpvar_8;
    half3 x1_19;
    half4 SHAb_20;
    half4 SHAg_21;
    half4 SHAr_22;
    float3 texCoord_23;
    float3 tmpvar_24;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_25;
      tmpvar_25.w = 1.0;
      tmpvar_25.xyz = tmpvar_14;
      tmpvar_24 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_25).xyz;
    } else {
      tmpvar_24 = tmpvar_14;
    };
    float3 tmpvar_26;
    tmpvar_26 = ((tmpvar_24 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_23.yz = tmpvar_26.yz;
    texCoord_23.x = (tmpvar_26.x * 0.25);
    float tmpvar_27;
    float tmpvar_28;
    tmpvar_28 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_27 = clamp (texCoord_23.x, tmpvar_28, (0.25 - tmpvar_28));
    texCoord_23.x = tmpvar_27;
    half4 tmpvar_29;
    tmpvar_29 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAr_22 = tmpvar_29;
    texCoord_23.x = (tmpvar_27 + 0.25);
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAg_21 = tmpvar_30;
    texCoord_23.x = (tmpvar_27 + 0.5);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAb_20 = tmpvar_31;
    x1_19.x = dot (SHAr_22, tmpvar_18);
    x1_19.y = dot (SHAg_21, tmpvar_18);
    x1_19.z = dot (SHAb_20, tmpvar_18);
    ambient_contrib_17 = x1_19;
  } else {
    half4 tmpvar_32;
    tmpvar_32.w = half(1.0);
    tmpvar_32.xyz = tmpvar_8;
    half3 x_33;
    x_33.x = dot (_mtl_u.unity_SHAr, tmpvar_32);
    x_33.y = dot (_mtl_u.unity_SHAg, tmpvar_32);
    x_33.z = dot (_mtl_u.unity_SHAb, tmpvar_32);
    ambient_contrib_17 = x_33;
  };
  half3 tmpvar_34;
  tmpvar_34 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_17));
  ambient_16 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    ambient_16 = max ((((half)1.055 * 
      pow (max (tmpvar_34, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_15 = (ambient_16 * tmpvar_13);
  half3 viewDir_36;
  viewDir_36 = -(tmpvar_9);
  half specularTerm_37;
  half tmpvar_38;
  tmpvar_38 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_39;
  inVec_39 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_36);
  half tmpvar_40;
  tmpvar_40 = max ((half)0.0, dot (tmpvar_8, (inVec_39 * 
    rsqrt(max ((half)0.001, dot (inVec_39, inVec_39)))
  )));
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_8, viewDir_36));
  half tmpvar_42;
  tmpvar_42 = (tmpvar_38 * tmpvar_38);
  half tmpvar_43;
  tmpvar_43 = (tmpvar_38 * tmpvar_38);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_43 * tmpvar_43);
  half tmpvar_45;
  tmpvar_45 = (((tmpvar_40 * tmpvar_40) * (tmpvar_44 - (half)1.0)) + (half)1.0);
  half tmpvar_46;
  tmpvar_46 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_41 * ((half)1.0 - tmpvar_42))
     + tmpvar_42)) + (tmpvar_41 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_42))
     + tmpvar_42))) + (half)1e-05)
  ) * (tmpvar_44 / 
    ((((half)3.141593 * tmpvar_45) * tmpvar_45) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_37 = tmpvar_46;
  bool tmpvar_47;
  tmpvar_47 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_47) {
    specularTerm_37 = sqrt(max ((half)0.0001, tmpvar_46));
  };
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, (specularTerm_37 * tmpvar_1));
  specularTerm_37 = tmpvar_48;
  bool3 tmpvar_49;
  tmpvar_49 = bool3(tmpvar_7);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_37 = (tmpvar_48 * (half)tmpvar_51);
  half4 tmpvar_52;
  tmpvar_52.w = half(1.0);
  tmpvar_52.xyz = (diffColor_10 * tmpvar_15);
  half4 tmpvar_53;
  tmpvar_53.xyz = diffColor_10;
  tmpvar_53.w = tmpvar_13;
  half4 tmpvar_54;
  tmpvar_54.xyz = tmpvar_7;
  tmpvar_54.w = tmpvar_5;
  half4 tmpvar_55;
  tmpvar_55.w = half(1.0);
  tmpvar_55.xyz = ((tmpvar_8 * (half)0.5) + (half)0.5);
  half4 tmpvar_56;
  tmpvar_56.w = half(1.0);
  tmpvar_56.xyz = tmpvar_52.xyz;
  _mtl_o._glesFragData_0 = tmpvar_53;
  _mtl_o._glesFragData_1 = tmpvar_54;
  _mtl_o._glesFragData_2 = tmpvar_55;
  _mtl_o._glesFragData_3 = tmpvar_56;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 72 math, 4 textures, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
SetTexture 0 [unity_DynamicLightmap] 2D 0
SetTexture 1 [unity_DynamicDirectionality] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_OcclusionMap] 2D 3
ConstBuffer "$Globals" 38
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [unity_DynamicLightmap_HDR] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
ScalarHalf 36 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 unity_DynamicLightmap_HDR;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_DynamicLightmap [[texture(0)]], sampler _mtlsmp_unity_DynamicLightmap [[sampler(0)]]
  ,   texture2d<half> unity_DynamicDirectionality [[texture(1)]], sampler _mtlsmp_unity_DynamicDirectionality [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _OcclusionMap [[texture(3)]], sampler _mtlsmp__OcclusionMap [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_3;
  mg_3.x = _mtl_u._Metallic;
  mg_3.y = _mtl_u._Glossiness;
  half tmpvar_4;
  tmpvar_4 = mg_3.y;
  half3 tmpvar_5;
  tmpvar_5 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_6;
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, half3(_mtl_u._Metallic));
  tmpvar_6 = (tmpvar_5 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  tmpvar_1 = max ((half)0.0, tmpvar_8.y);
  half occ_9;
  half tmpvar_10;
  tmpvar_10 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_9 = tmpvar_10;
  half tmpvar_11;
  tmpvar_11 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_9 * _mtl_u._OcclusionStrength));
  float4 tmpvar_12;
  tmpvar_12 = float4(_mtl_i.xlv_TEXCOORD5);
  half4 realtimeDirTex_13;
  half3 tmpvar_14;
  half4 tmpvar_15;
  tmpvar_15 = unity_DynamicLightmap.sample(_mtlsmp_unity_DynamicLightmap, (float2)(tmpvar_12.zw));
  half4 tmpvar_16;
  tmpvar_16 = unity_DynamicDirectionality.sample(_mtlsmp_unity_DynamicDirectionality, (float2)(tmpvar_12.zw));
  realtimeDirTex_13 = tmpvar_16;
  half4 dirTex_17;
  dirTex_17 = realtimeDirTex_13;
  half3 y_18;
  y_18 = (dirTex_17.xyz - (half)0.5);
  half tmpvar_19;
  tmpvar_19 = max ((half)0.0001, dirTex_17.w);
  tmpvar_14 = ((pow (
    ((_mtl_u.unity_DynamicLightmap_HDR.x * tmpvar_15.w) * tmpvar_15.xyz)
  , _mtl_u.unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_8, y_18)
   + (half)0.5)) / tmpvar_19);
  tmpvar_14 = (tmpvar_14 * tmpvar_11);
  half3 viewDir_20;
  viewDir_20 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_21;
  half tmpvar_22;
  tmpvar_22 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_23;
  inVec_23 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_20);
  half tmpvar_24;
  tmpvar_24 = max ((half)0.0, dot (tmpvar_8, (inVec_23 * 
    rsqrt(max ((half)0.001, dot (inVec_23, inVec_23)))
  )));
  half tmpvar_25;
  tmpvar_25 = max ((half)0.0, dot (tmpvar_8, viewDir_20));
  half tmpvar_26;
  tmpvar_26 = (tmpvar_22 * tmpvar_22);
  half tmpvar_27;
  tmpvar_27 = (tmpvar_22 * tmpvar_22);
  half tmpvar_28;
  tmpvar_28 = (tmpvar_27 * tmpvar_27);
  half tmpvar_29;
  tmpvar_29 = (((tmpvar_24 * tmpvar_24) * (tmpvar_28 - (half)1.0)) + (half)1.0);
  half tmpvar_30;
  tmpvar_30 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_25 * ((half)1.0 - tmpvar_26))
     + tmpvar_26)) + (tmpvar_25 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_26))
     + tmpvar_26))) + (half)1e-05)
  ) * (tmpvar_28 / 
    ((((half)3.141593 * tmpvar_29) * tmpvar_29) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_21 = tmpvar_30;
  bool tmpvar_31;
  tmpvar_31 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_31) {
    specularTerm_21 = sqrt(max ((half)0.0001, tmpvar_30));
  };
  half tmpvar_32;
  tmpvar_32 = max ((half)0.0, (specularTerm_21 * tmpvar_1));
  specularTerm_21 = tmpvar_32;
  bool3 tmpvar_33;
  tmpvar_33 = bool3(tmpvar_7);
  bool tmpvar_34;
  tmpvar_34 = any(tmpvar_33);
  float tmpvar_35;
  if (tmpvar_34) {
    tmpvar_35 = 1.0;
  } else {
    tmpvar_35 = 0.0;
  };
  specularTerm_21 = (tmpvar_32 * (half)tmpvar_35);
  half4 tmpvar_36;
  tmpvar_36.w = half(1.0);
  tmpvar_36.xyz = (tmpvar_6 * tmpvar_14);
  half4 tmpvar_37;
  tmpvar_37.xyz = tmpvar_6;
  tmpvar_37.w = tmpvar_11;
  half4 tmpvar_38;
  tmpvar_38.xyz = tmpvar_7;
  tmpvar_38.w = tmpvar_4;
  half4 tmpvar_39;
  tmpvar_39.w = half(1.0);
  tmpvar_39.xyz = ((tmpvar_8 * (half)0.5) + (half)0.5);
  half4 tmpvar_40;
  tmpvar_40.w = half(1.0);
  tmpvar_40.xyz = tmpvar_36.xyz;
  _mtl_o._glesFragData_0 = tmpvar_37;
  _mtl_o._glesFragData_1 = tmpvar_38;
  _mtl_o._glesFragData_2 = tmpvar_39;
  _mtl_o._glesFragData_3 = tmpvar_40;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "UNITY_HDR_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 74 math, 5 textures, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "UNITY_HDR_ON" }
SetTexture 0 [unity_DynamicLightmap] 2D 0
SetTexture 1 [unity_DynamicDirectionality] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_OcclusionMap] 2D 3
SetTexture 4 [_EmissionMap] 2D 4
ConstBuffer "$Globals" 48
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [unity_DynamicLightmap_HDR] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
ScalarHalf 36 [_OcclusionStrength]
VectorHalf 40 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 unity_DynamicLightmap_HDR;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_DynamicLightmap [[texture(0)]], sampler _mtlsmp_unity_DynamicLightmap [[sampler(0)]]
  ,   texture2d<half> unity_DynamicDirectionality [[texture(1)]], sampler _mtlsmp_unity_DynamicDirectionality [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _OcclusionMap [[texture(3)]], sampler _mtlsmp__OcclusionMap [[sampler(3)]]
  ,   texture2d<half> _EmissionMap [[texture(4)]], sampler _mtlsmp__EmissionMap [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_3;
  mg_3.x = _mtl_u._Metallic;
  mg_3.y = _mtl_u._Glossiness;
  half tmpvar_4;
  tmpvar_4 = mg_3.y;
  half3 tmpvar_5;
  tmpvar_5 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_6;
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, half3(_mtl_u._Metallic));
  tmpvar_6 = (tmpvar_5 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  tmpvar_1 = max ((half)0.0, tmpvar_8.y);
  half occ_9;
  half tmpvar_10;
  tmpvar_10 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_9 = tmpvar_10;
  half tmpvar_11;
  tmpvar_11 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_9 * _mtl_u._OcclusionStrength));
  float4 tmpvar_12;
  tmpvar_12 = float4(_mtl_i.xlv_TEXCOORD5);
  half4 realtimeDirTex_13;
  half3 tmpvar_14;
  half4 tmpvar_15;
  tmpvar_15 = unity_DynamicLightmap.sample(_mtlsmp_unity_DynamicLightmap, (float2)(tmpvar_12.zw));
  half4 tmpvar_16;
  tmpvar_16 = unity_DynamicDirectionality.sample(_mtlsmp_unity_DynamicDirectionality, (float2)(tmpvar_12.zw));
  realtimeDirTex_13 = tmpvar_16;
  half4 dirTex_17;
  dirTex_17 = realtimeDirTex_13;
  half3 y_18;
  y_18 = (dirTex_17.xyz - (half)0.5);
  half tmpvar_19;
  tmpvar_19 = max ((half)0.0001, dirTex_17.w);
  tmpvar_14 = ((pow (
    ((_mtl_u.unity_DynamicLightmap_HDR.x * tmpvar_15.w) * tmpvar_15.xyz)
  , _mtl_u.unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_8, y_18)
   + (half)0.5)) / tmpvar_19);
  tmpvar_14 = (tmpvar_14 * tmpvar_11);
  half3 viewDir_20;
  viewDir_20 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_21;
  half tmpvar_22;
  tmpvar_22 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_23;
  inVec_23 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_20);
  half tmpvar_24;
  tmpvar_24 = max ((half)0.0, dot (tmpvar_8, (inVec_23 * 
    rsqrt(max ((half)0.001, dot (inVec_23, inVec_23)))
  )));
  half tmpvar_25;
  tmpvar_25 = max ((half)0.0, dot (tmpvar_8, viewDir_20));
  half tmpvar_26;
  tmpvar_26 = (tmpvar_22 * tmpvar_22);
  half tmpvar_27;
  tmpvar_27 = (tmpvar_22 * tmpvar_22);
  half tmpvar_28;
  tmpvar_28 = (tmpvar_27 * tmpvar_27);
  half tmpvar_29;
  tmpvar_29 = (((tmpvar_24 * tmpvar_24) * (tmpvar_28 - (half)1.0)) + (half)1.0);
  half tmpvar_30;
  tmpvar_30 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_25 * ((half)1.0 - tmpvar_26))
     + tmpvar_26)) + (tmpvar_25 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_26))
     + tmpvar_26))) + (half)1e-05)
  ) * (tmpvar_28 / 
    ((((half)3.141593 * tmpvar_29) * tmpvar_29) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_21 = tmpvar_30;
  bool tmpvar_31;
  tmpvar_31 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_31) {
    specularTerm_21 = sqrt(max ((half)0.0001, tmpvar_30));
  };
  half tmpvar_32;
  tmpvar_32 = max ((half)0.0, (specularTerm_21 * tmpvar_1));
  specularTerm_21 = tmpvar_32;
  bool3 tmpvar_33;
  tmpvar_33 = bool3(tmpvar_7);
  bool tmpvar_34;
  tmpvar_34 = any(tmpvar_33);
  float tmpvar_35;
  if (tmpvar_34) {
    tmpvar_35 = 1.0;
  } else {
    tmpvar_35 = 0.0;
  };
  specularTerm_21 = (tmpvar_32 * (half)tmpvar_35);
  half4 tmpvar_36;
  tmpvar_36.w = half(1.0);
  tmpvar_36.xyz = (tmpvar_6 * tmpvar_14);
  half4 tmpvar_37;
  tmpvar_37 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half4 tmpvar_38;
  tmpvar_38.xyz = tmpvar_6;
  tmpvar_38.w = tmpvar_11;
  half4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_7;
  tmpvar_39.w = tmpvar_4;
  half4 tmpvar_40;
  tmpvar_40.w = half(1.0);
  tmpvar_40.xyz = ((tmpvar_8 * (half)0.5) + (half)0.5);
  half4 tmpvar_41;
  tmpvar_41.w = half(1.0);
  tmpvar_41.xyz = (tmpvar_36.xyz + (tmpvar_37.xyz * _mtl_u._EmissionColor.xyz));
  _mtl_o._glesFragData_0 = tmpvar_38;
  _mtl_o._glesFragData_1 = tmpvar_39;
  _mtl_o._glesFragData_2 = tmpvar_40;
  _mtl_o._glesFragData_3 = tmpvar_41;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "_EMISSION" "UNITY_HDR_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 74 math, 4 textures, 2 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_DynamicLightmap] 2D 0
SetTexture 1 [unity_DynamicDirectionality] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_OcclusionMap] 2D 3
ConstBuffer "$Globals" 38
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [unity_ColorSpaceLuminance] 4
VectorHalf 16 [unity_DynamicLightmap_HDR] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
ScalarHalf 36 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 unity_DynamicLightmap_HDR;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_DynamicLightmap [[texture(0)]], sampler _mtlsmp_unity_DynamicLightmap [[sampler(0)]]
  ,   texture2d<half> unity_DynamicDirectionality [[texture(1)]], sampler _mtlsmp_unity_DynamicDirectionality [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _OcclusionMap [[texture(3)]], sampler _mtlsmp__OcclusionMap [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_3;
  mg_3.x = _mtl_u._Metallic;
  mg_3.y = _mtl_u._Glossiness;
  half tmpvar_4;
  tmpvar_4 = mg_3.y;
  half3 tmpvar_5;
  tmpvar_5 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_6;
  tmpvar_6 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, half3(_mtl_u._Metallic));
  half3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 diffColor_8;
  diffColor_8 = ((tmpvar_5 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - 
    (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)
  )) * (tmpvar_2.w * _mtl_u._Color.w));
  tmpvar_1 = max ((half)0.0, tmpvar_7.y);
  half occ_9;
  half tmpvar_10;
  tmpvar_10 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_9 = tmpvar_10;
  half tmpvar_11;
  tmpvar_11 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_9 * _mtl_u._OcclusionStrength));
  float4 tmpvar_12;
  tmpvar_12 = float4(_mtl_i.xlv_TEXCOORD5);
  half4 realtimeDirTex_13;
  half3 tmpvar_14;
  half4 tmpvar_15;
  tmpvar_15 = unity_DynamicLightmap.sample(_mtlsmp_unity_DynamicLightmap, (float2)(tmpvar_12.zw));
  half4 tmpvar_16;
  tmpvar_16 = unity_DynamicDirectionality.sample(_mtlsmp_unity_DynamicDirectionality, (float2)(tmpvar_12.zw));
  realtimeDirTex_13 = tmpvar_16;
  half4 dirTex_17;
  dirTex_17 = realtimeDirTex_13;
  half3 y_18;
  y_18 = (dirTex_17.xyz - (half)0.5);
  half tmpvar_19;
  tmpvar_19 = max ((half)0.0001, dirTex_17.w);
  tmpvar_14 = ((pow (
    ((_mtl_u.unity_DynamicLightmap_HDR.x * tmpvar_15.w) * tmpvar_15.xyz)
  , _mtl_u.unity_DynamicLightmap_HDR.yyy) * (
    dot (tmpvar_7, y_18)
   + (half)0.5)) / tmpvar_19);
  tmpvar_14 = (tmpvar_14 * tmpvar_11);
  half3 viewDir_20;
  viewDir_20 = -(normalize(_mtl_i.xlv_TEXCOORD1));
  half specularTerm_21;
  half tmpvar_22;
  tmpvar_22 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_23;
  inVec_23 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_20);
  half tmpvar_24;
  tmpvar_24 = max ((half)0.0, dot (tmpvar_7, (inVec_23 * 
    rsqrt(max ((half)0.001, dot (inVec_23, inVec_23)))
  )));
  half tmpvar_25;
  tmpvar_25 = max ((half)0.0, dot (tmpvar_7, viewDir_20));
  half tmpvar_26;
  tmpvar_26 = (tmpvar_22 * tmpvar_22);
  half tmpvar_27;
  tmpvar_27 = (tmpvar_22 * tmpvar_22);
  half tmpvar_28;
  tmpvar_28 = (tmpvar_27 * tmpvar_27);
  half tmpvar_29;
  tmpvar_29 = (((tmpvar_24 * tmpvar_24) * (tmpvar_28 - (half)1.0)) + (half)1.0);
  half tmpvar_30;
  tmpvar_30 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_25 * ((half)1.0 - tmpvar_26))
     + tmpvar_26)) + (tmpvar_25 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_26))
     + tmpvar_26))) + (half)1e-05)
  ) * (tmpvar_28 / 
    ((((half)3.141593 * tmpvar_29) * tmpvar_29) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_21 = tmpvar_30;
  bool tmpvar_31;
  tmpvar_31 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_31) {
    specularTerm_21 = sqrt(max ((half)0.0001, tmpvar_30));
  };
  half tmpvar_32;
  tmpvar_32 = max ((half)0.0, (specularTerm_21 * tmpvar_1));
  specularTerm_21 = tmpvar_32;
  bool3 tmpvar_33;
  tmpvar_33 = bool3(tmpvar_6);
  bool tmpvar_34;
  tmpvar_34 = any(tmpvar_33);
  float tmpvar_35;
  if (tmpvar_34) {
    tmpvar_35 = 1.0;
  } else {
    tmpvar_35 = 0.0;
  };
  specularTerm_21 = (tmpvar_32 * (half)tmpvar_35);
  half4 tmpvar_36;
  tmpvar_36.w = half(1.0);
  tmpvar_36.xyz = (diffColor_8 * tmpvar_14);
  half4 tmpvar_37;
  tmpvar_37.xyz = diffColor_8;
  tmpvar_37.w = tmpvar_11;
  half4 tmpvar_38;
  tmpvar_38.xyz = tmpvar_6;
  tmpvar_38.w = tmpvar_4;
  half4 tmpvar_39;
  tmpvar_39.w = half(1.0);
  tmpvar_39.xyz = ((tmpvar_7 * (half)0.5) + (half)0.5);
  half4 tmpvar_40;
  tmpvar_40.w = half(1.0);
  tmpvar_40.xyz = tmpvar_36.xyz;
  _mtl_o._glesFragData_0 = tmpvar_37;
  _mtl_o._glesFragData_1 = tmpvar_38;
  _mtl_o._glesFragData_2 = tmpvar_39;
  _mtl_o._glesFragData_3 = tmpvar_40;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 93 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
ConstBuffer "$Globals" 174
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_4;
  mg_4.x = _mtl_u._Metallic;
  mg_4.y = _mtl_u._Glossiness;
  half tmpvar_5;
  tmpvar_5 = mg_4.y;
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_7;
  half3 tmpvar_8;
  tmpvar_8 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  tmpvar_7 = (tmpvar_6 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  tmpvar_1 = max ((half)0.0, tmpvar_9.y);
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  float3 tmpvar_14;
  tmpvar_14 = float3(i_posWorld_2);
  half3 tmpvar_15;
  tmpvar_15 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_16;
  ambient_16 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_17;
  ambient_contrib_17 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_18;
    tmpvar_18.w = half(1.0);
    tmpvar_18.xyz = tmpvar_9;
    half3 x1_19;
    half4 SHAb_20;
    half4 SHAg_21;
    half4 SHAr_22;
    float3 texCoord_23;
    float3 tmpvar_24;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_25;
      tmpvar_25.w = 1.0;
      tmpvar_25.xyz = tmpvar_14;
      tmpvar_24 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_25).xyz;
    } else {
      tmpvar_24 = tmpvar_14;
    };
    float3 tmpvar_26;
    tmpvar_26 = ((tmpvar_24 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_23.yz = tmpvar_26.yz;
    texCoord_23.x = (tmpvar_26.x * 0.25);
    float tmpvar_27;
    float tmpvar_28;
    tmpvar_28 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_27 = clamp (texCoord_23.x, tmpvar_28, (0.25 - tmpvar_28));
    texCoord_23.x = tmpvar_27;
    half4 tmpvar_29;
    tmpvar_29 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAr_22 = tmpvar_29;
    texCoord_23.x = (tmpvar_27 + 0.25);
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAg_21 = tmpvar_30;
    texCoord_23.x = (tmpvar_27 + 0.5);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAb_20 = tmpvar_31;
    x1_19.x = dot (SHAr_22, tmpvar_18);
    x1_19.y = dot (SHAg_21, tmpvar_18);
    x1_19.z = dot (SHAb_20, tmpvar_18);
    ambient_contrib_17 = x1_19;
  } else {
    half4 tmpvar_32;
    tmpvar_32.w = half(1.0);
    tmpvar_32.xyz = tmpvar_9;
    half3 x_33;
    x_33.x = dot (_mtl_u.unity_SHAr, tmpvar_32);
    x_33.y = dot (_mtl_u.unity_SHAg, tmpvar_32);
    x_33.z = dot (_mtl_u.unity_SHAb, tmpvar_32);
    ambient_contrib_17 = x_33;
  };
  half3 tmpvar_34;
  tmpvar_34 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_17));
  ambient_16 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    ambient_16 = max ((((half)1.055 * 
      pow (max (tmpvar_34, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_15 = (ambient_16 * tmpvar_13);
  half3 viewDir_36;
  viewDir_36 = -(tmpvar_10);
  half specularTerm_37;
  half tmpvar_38;
  tmpvar_38 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_39;
  inVec_39 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_36);
  half tmpvar_40;
  tmpvar_40 = max ((half)0.0, dot (tmpvar_9, (inVec_39 * 
    rsqrt(max ((half)0.001, dot (inVec_39, inVec_39)))
  )));
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_9, viewDir_36));
  half tmpvar_42;
  tmpvar_42 = (tmpvar_38 * tmpvar_38);
  half tmpvar_43;
  tmpvar_43 = (tmpvar_38 * tmpvar_38);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_43 * tmpvar_43);
  half tmpvar_45;
  tmpvar_45 = (((tmpvar_40 * tmpvar_40) * (tmpvar_44 - (half)1.0)) + (half)1.0);
  half tmpvar_46;
  tmpvar_46 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_41 * ((half)1.0 - tmpvar_42))
     + tmpvar_42)) + (tmpvar_41 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_42))
     + tmpvar_42))) + (half)1e-05)
  ) * (tmpvar_44 / 
    ((((half)3.141593 * tmpvar_45) * tmpvar_45) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_37 = tmpvar_46;
  bool tmpvar_47;
  tmpvar_47 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_47) {
    specularTerm_37 = sqrt(max ((half)0.0001, tmpvar_46));
  };
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, (specularTerm_37 * tmpvar_1));
  specularTerm_37 = tmpvar_48;
  bool3 tmpvar_49;
  tmpvar_49 = bool3(tmpvar_8);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_37 = (tmpvar_48 * (half)tmpvar_51);
  half4 tmpvar_52;
  tmpvar_52.w = half(1.0);
  tmpvar_52.xyz = (tmpvar_7 * tmpvar_15);
  half4 tmpvar_53;
  tmpvar_53.xyz = tmpvar_7;
  tmpvar_53.w = tmpvar_13;
  half4 tmpvar_54;
  tmpvar_54.xyz = tmpvar_8;
  tmpvar_54.w = tmpvar_5;
  half4 tmpvar_55;
  tmpvar_55.w = half(1.0);
  tmpvar_55.xyz = ((tmpvar_9 * (half)0.5) + (half)0.5);
  half4 tmpvar_56;
  tmpvar_56.w = half(1.0);
  tmpvar_56.xyz = tmpvar_52.xyz;
  _mtl_o._glesFragData_0 = tmpvar_53;
  _mtl_o._glesFragData_1 = tmpvar_54;
  _mtl_o._glesFragData_2 = tmpvar_55;
  _mtl_o._glesFragData_3 = tmpvar_56;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 95 math, 6 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
SetTexture 3 [_EmissionMap] 2D 3
ConstBuffer "$Globals" 184
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
VectorHalf 176 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]]
  ,   texture2d<half> _EmissionMap [[texture(3)]], sampler _mtlsmp__EmissionMap [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_4;
  mg_4.x = _mtl_u._Metallic;
  mg_4.y = _mtl_u._Glossiness;
  half tmpvar_5;
  tmpvar_5 = mg_4.y;
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_7;
  half3 tmpvar_8;
  tmpvar_8 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  tmpvar_7 = (tmpvar_6 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD1);
  tmpvar_1 = max ((half)0.0, tmpvar_9.y);
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  float3 tmpvar_14;
  tmpvar_14 = float3(i_posWorld_2);
  half3 tmpvar_15;
  tmpvar_15 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_16;
  ambient_16 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_17;
  ambient_contrib_17 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_18;
    tmpvar_18.w = half(1.0);
    tmpvar_18.xyz = tmpvar_9;
    half3 x1_19;
    half4 SHAb_20;
    half4 SHAg_21;
    half4 SHAr_22;
    float3 texCoord_23;
    float3 tmpvar_24;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_25;
      tmpvar_25.w = 1.0;
      tmpvar_25.xyz = tmpvar_14;
      tmpvar_24 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_25).xyz;
    } else {
      tmpvar_24 = tmpvar_14;
    };
    float3 tmpvar_26;
    tmpvar_26 = ((tmpvar_24 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_23.yz = tmpvar_26.yz;
    texCoord_23.x = (tmpvar_26.x * 0.25);
    float tmpvar_27;
    float tmpvar_28;
    tmpvar_28 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_27 = clamp (texCoord_23.x, tmpvar_28, (0.25 - tmpvar_28));
    texCoord_23.x = tmpvar_27;
    half4 tmpvar_29;
    tmpvar_29 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAr_22 = tmpvar_29;
    texCoord_23.x = (tmpvar_27 + 0.25);
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAg_21 = tmpvar_30;
    texCoord_23.x = (tmpvar_27 + 0.5);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAb_20 = tmpvar_31;
    x1_19.x = dot (SHAr_22, tmpvar_18);
    x1_19.y = dot (SHAg_21, tmpvar_18);
    x1_19.z = dot (SHAb_20, tmpvar_18);
    ambient_contrib_17 = x1_19;
  } else {
    half4 tmpvar_32;
    tmpvar_32.w = half(1.0);
    tmpvar_32.xyz = tmpvar_9;
    half3 x_33;
    x_33.x = dot (_mtl_u.unity_SHAr, tmpvar_32);
    x_33.y = dot (_mtl_u.unity_SHAg, tmpvar_32);
    x_33.z = dot (_mtl_u.unity_SHAb, tmpvar_32);
    ambient_contrib_17 = x_33;
  };
  half3 tmpvar_34;
  tmpvar_34 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_17));
  ambient_16 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    ambient_16 = max ((((half)1.055 * 
      pow (max (tmpvar_34, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_15 = (ambient_16 * tmpvar_13);
  half3 viewDir_36;
  viewDir_36 = -(tmpvar_10);
  half specularTerm_37;
  half tmpvar_38;
  tmpvar_38 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_39;
  inVec_39 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_36);
  half tmpvar_40;
  tmpvar_40 = max ((half)0.0, dot (tmpvar_9, (inVec_39 * 
    rsqrt(max ((half)0.001, dot (inVec_39, inVec_39)))
  )));
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_9, viewDir_36));
  half tmpvar_42;
  tmpvar_42 = (tmpvar_38 * tmpvar_38);
  half tmpvar_43;
  tmpvar_43 = (tmpvar_38 * tmpvar_38);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_43 * tmpvar_43);
  half tmpvar_45;
  tmpvar_45 = (((tmpvar_40 * tmpvar_40) * (tmpvar_44 - (half)1.0)) + (half)1.0);
  half tmpvar_46;
  tmpvar_46 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_41 * ((half)1.0 - tmpvar_42))
     + tmpvar_42)) + (tmpvar_41 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_42))
     + tmpvar_42))) + (half)1e-05)
  ) * (tmpvar_44 / 
    ((((half)3.141593 * tmpvar_45) * tmpvar_45) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_37 = tmpvar_46;
  bool tmpvar_47;
  tmpvar_47 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_47) {
    specularTerm_37 = sqrt(max ((half)0.0001, tmpvar_46));
  };
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, (specularTerm_37 * tmpvar_1));
  specularTerm_37 = tmpvar_48;
  bool3 tmpvar_49;
  tmpvar_49 = bool3(tmpvar_8);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_37 = (tmpvar_48 * (half)tmpvar_51);
  half4 tmpvar_52;
  tmpvar_52.w = half(1.0);
  tmpvar_52.xyz = (tmpvar_7 * tmpvar_15);
  half4 tmpvar_53;
  tmpvar_53 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half4 tmpvar_54;
  tmpvar_54.xyz = tmpvar_7;
  tmpvar_54.w = tmpvar_13;
  half4 tmpvar_55;
  tmpvar_55.xyz = tmpvar_8;
  tmpvar_55.w = tmpvar_5;
  half4 tmpvar_56;
  tmpvar_56.w = half(1.0);
  tmpvar_56.xyz = ((tmpvar_9 * (half)0.5) + (half)0.5);
  half4 tmpvar_57;
  tmpvar_57.w = half(1.0);
  tmpvar_57.xyz = (tmpvar_52.xyz + (tmpvar_53.xyz * _mtl_u._EmissionColor.xyz));
  _mtl_o._glesFragData_0 = tmpvar_54;
  _mtl_o._glesFragData_1 = tmpvar_55;
  _mtl_o._glesFragData_2 = tmpvar_56;
  _mtl_o._glesFragData_3 = tmpvar_57;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "UNITY_HDR_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 95 math, 5 textures, 5 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_ProbeVolumeSH] 3D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
ConstBuffer "$Globals" 174
Matrix 48 [unity_ProbeVolumeWorldToObject]
VectorHalf 0 [unity_SHAr] 4
VectorHalf 8 [unity_SHAg] 4
VectorHalf 16 [unity_SHAb] 4
Vector 32 [unity_ProbeVolumeParams]
Vector 112 [unity_ProbeVolumeSizeInv] 3
Vector 128 [unity_ProbeVolumeMin] 3
VectorHalf 144 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 152 [unity_ColorSpaceLuminance] 4
VectorHalf 160 [_Color] 4
ScalarHalf 168 [_Metallic]
ScalarHalf 170 [_Glossiness]
ScalarHalf 172 [_OcclusionStrength]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
  half4 _glesFragData_1 [[color(1)]];
  half4 _glesFragData_2 [[color(2)]];
  half4 _glesFragData_3 [[color(3)]];
};
struct xlatMtlShaderUniform {
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  float4 unity_ProbeVolumeParams;
  float4x4 unity_ProbeVolumeWorldToObject;
  float3 unity_ProbeVolumeSizeInv;
  float3 unity_ProbeVolumeMin;
  half4 unity_ColorSpaceDielectricSpec;
  half4 unity_ColorSpaceLuminance;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half _OcclusionStrength;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture3d<half> unity_ProbeVolumeSH [[texture(0)]], sampler _mtlsmp_unity_ProbeVolumeSH [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half3 i_posWorld_2;
  i_posWorld_2 = half3(_mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half2 mg_4;
  mg_4.x = _mtl_u._Metallic;
  mg_4.y = _mtl_u._Glossiness;
  half tmpvar_5;
  tmpvar_5 = mg_4.y;
  half3 tmpvar_6;
  tmpvar_6 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_7;
  tmpvar_7 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, half3(_mtl_u._Metallic));
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD1);
  half3 diffColor_10;
  diffColor_10 = ((tmpvar_6 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - 
    (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)
  )) * (tmpvar_3.w * _mtl_u._Color.w));
  tmpvar_1 = max ((half)0.0, tmpvar_8.y);
  half occ_11;
  half tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy)).y;
  occ_11 = tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = (((half)1.0 - _mtl_u._OcclusionStrength) + (occ_11 * _mtl_u._OcclusionStrength));
  float3 tmpvar_14;
  tmpvar_14 = float3(i_posWorld_2);
  half3 tmpvar_15;
  tmpvar_15 = half3(float3(0.0, 0.0, 0.0));
  half3 ambient_16;
  ambient_16 = _mtl_i.xlv_TEXCOORD5.xyz;
  half3 ambient_contrib_17;
  ambient_contrib_17 = half3(float3(0.0, 0.0, 0.0));
  if ((_mtl_u.unity_ProbeVolumeParams.x == 1.0)) {
    half4 tmpvar_18;
    tmpvar_18.w = half(1.0);
    tmpvar_18.xyz = tmpvar_8;
    half3 x1_19;
    half4 SHAb_20;
    half4 SHAg_21;
    half4 SHAr_22;
    float3 texCoord_23;
    float3 tmpvar_24;
    if ((_mtl_u.unity_ProbeVolumeParams.y == 1.0)) {
      float4 tmpvar_25;
      tmpvar_25.w = 1.0;
      tmpvar_25.xyz = tmpvar_14;
      tmpvar_24 = (_mtl_u.unity_ProbeVolumeWorldToObject * tmpvar_25).xyz;
    } else {
      tmpvar_24 = tmpvar_14;
    };
    float3 tmpvar_26;
    tmpvar_26 = ((tmpvar_24 - _mtl_u.unity_ProbeVolumeMin) * _mtl_u.unity_ProbeVolumeSizeInv);
    texCoord_23.yz = tmpvar_26.yz;
    texCoord_23.x = (tmpvar_26.x * 0.25);
    float tmpvar_27;
    float tmpvar_28;
    tmpvar_28 = (0.5 * _mtl_u.unity_ProbeVolumeParams.z);
    tmpvar_27 = clamp (texCoord_23.x, tmpvar_28, (0.25 - tmpvar_28));
    texCoord_23.x = tmpvar_27;
    half4 tmpvar_29;
    tmpvar_29 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAr_22 = tmpvar_29;
    texCoord_23.x = (tmpvar_27 + 0.25);
    half4 tmpvar_30;
    tmpvar_30 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAg_21 = tmpvar_30;
    texCoord_23.x = (tmpvar_27 + 0.5);
    half4 tmpvar_31;
    tmpvar_31 = unity_ProbeVolumeSH.sample(_mtlsmp_unity_ProbeVolumeSH, (float3)(texCoord_23));
    SHAb_20 = tmpvar_31;
    x1_19.x = dot (SHAr_22, tmpvar_18);
    x1_19.y = dot (SHAg_21, tmpvar_18);
    x1_19.z = dot (SHAb_20, tmpvar_18);
    ambient_contrib_17 = x1_19;
  } else {
    half4 tmpvar_32;
    tmpvar_32.w = half(1.0);
    tmpvar_32.xyz = tmpvar_8;
    half3 x_33;
    x_33.x = dot (_mtl_u.unity_SHAr, tmpvar_32);
    x_33.y = dot (_mtl_u.unity_SHAg, tmpvar_32);
    x_33.z = dot (_mtl_u.unity_SHAb, tmpvar_32);
    ambient_contrib_17 = x_33;
  };
  half3 tmpvar_34;
  tmpvar_34 = max ((half3)float3(0.0, 0.0, 0.0), (_mtl_i.xlv_TEXCOORD5.xyz + ambient_contrib_17));
  ambient_16 = tmpvar_34;
  bool tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_35) {
    ambient_16 = max ((((half)1.055 * 
      pow (max (tmpvar_34, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  tmpvar_15 = (ambient_16 * tmpvar_13);
  half3 viewDir_36;
  viewDir_36 = -(tmpvar_9);
  half specularTerm_37;
  half tmpvar_38;
  tmpvar_38 = ((half)1.0 - _mtl_u._Glossiness);
  half3 inVec_39;
  inVec_39 = ((half3)float3(0.0, 1.0, 0.0) + viewDir_36);
  half tmpvar_40;
  tmpvar_40 = max ((half)0.0, dot (tmpvar_8, (inVec_39 * 
    rsqrt(max ((half)0.001, dot (inVec_39, inVec_39)))
  )));
  half tmpvar_41;
  tmpvar_41 = max ((half)0.0, dot (tmpvar_8, viewDir_36));
  half tmpvar_42;
  tmpvar_42 = (tmpvar_38 * tmpvar_38);
  half tmpvar_43;
  tmpvar_43 = (tmpvar_38 * tmpvar_38);
  half tmpvar_44;
  tmpvar_44 = (tmpvar_43 * tmpvar_43);
  half tmpvar_45;
  tmpvar_45 = (((tmpvar_40 * tmpvar_40) * (tmpvar_44 - (half)1.0)) + (half)1.0);
  half tmpvar_46;
  tmpvar_46 = ((((half)2.0 / 
    (((tmpvar_1 * (
      (tmpvar_41 * ((half)1.0 - tmpvar_42))
     + tmpvar_42)) + (tmpvar_41 * (
      (tmpvar_1 * ((half)1.0 - tmpvar_42))
     + tmpvar_42))) + (half)1e-05)
  ) * (tmpvar_44 / 
    ((((half)3.141593 * tmpvar_45) * tmpvar_45) + (half)1e-07)
  )) * (half)0.7853982);
  specularTerm_37 = tmpvar_46;
  bool tmpvar_47;
  tmpvar_47 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_47) {
    specularTerm_37 = sqrt(max ((half)0.0001, tmpvar_46));
  };
  half tmpvar_48;
  tmpvar_48 = max ((half)0.0, (specularTerm_37 * tmpvar_1));
  specularTerm_37 = tmpvar_48;
  bool3 tmpvar_49;
  tmpvar_49 = bool3(tmpvar_7);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  float tmpvar_51;
  if (tmpvar_50) {
    tmpvar_51 = 1.0;
  } else {
    tmpvar_51 = 0.0;
  };
  specularTerm_37 = (tmpvar_48 * (half)tmpvar_51);
  half4 tmpvar_52;
  tmpvar_52.w = half(1.0);
  tmpvar_52.xyz = (diffColor_10 * tmpvar_15);
  half4 tmpvar_53;
  tmpvar_53.xyz = diffColor_10;
  tmpvar_53.w = tmpvar_13;
  half4 tmpvar_54;
  tmpvar_54.xyz = tmpvar_7;
  tmpvar_54.w = tmpvar_5;
  half4 tmpvar_55;
  tmpvar_55.w = half(1.0);
  tmpvar_55.xyz = ((tmpvar_8 * (half)0.5) + (half)0.5);
  half4 tmpvar_56;
  tmpvar_56.w = half(1.0);
  tmpvar_56.xyz = tmpvar_52.xyz;
  _mtl_o._glesFragData_0 = tmpvar_53;
  _mtl_o._glesFragData_1 = tmpvar_54;
  _mtl_o._glesFragData_2 = tmpvar_55;
  _mtl_o._glesFragData_3 = tmpvar_56;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
}
 }


 // Stats for Vertex shader:
 //       metal : 17 math, 5 branch
 //      opengl : 30 avg math (28..32), 1 avg texture (1..2), 3 branch
 // Stats for Fragment shader:
 //       metal : 30 avg math (28..32), 1 avg texture (1..2), 3 branch
 Pass {
  Name "META"
  Tags { "LIGHTMODE"="Meta" "RenderType"="Opaque" "PerformanceChecks"="False" }
  Cull Off
  GpuProgramID 307700
Program "vp" {
SubProgram "opengl " {
// Stats: 28 math, 1 textures, 3 branches
"#version 120

#ifdef VERTEX

uniform vec4 unity_LightmapST;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform bvec4 unity_MetaVertexControl;
varying vec4 xlv_TEXCOORD0;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 vertex_3;
  vertex_3 = gl_Vertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((gl_MultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    float tmpvar_4;
    if ((gl_Vertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (gl_ModelViewProjectionMatrix * tmpvar_7);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  xlv_TEXCOORD0 = texcoord_8;
  gl_Position = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform bvec4 unity_MetaFragmentControl;
uniform float unity_OneOverOutputBoost;
uniform float unity_MaxOutputValue;
uniform float unity_UseLinearSpace;
varying vec4 xlv_TEXCOORD0;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 res_2;
  float tmpvar_3;
  tmpvar_3 = (1.0 - _Glossiness);
  res_2 = ((tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) + ((
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic))
   * tmpvar_3) * (tmpvar_3 * 0.5)));
  vec4 res_4;
  res_4 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    vec4 tmpvar_5;
    tmpvar_5.w = 1.0;
    tmpvar_5.xyz = res_2;
    res_4.w = tmpvar_5.w;
    res_4.xyz = clamp (pow (res_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
  };
  if (unity_MetaFragmentControl.y) {
    vec3 emission_6;
    if (bool(unity_UseLinearSpace)) {
      emission_6 = vec3(0.0, 0.0, 0.0);
    } else {
      emission_6 = vec3(0.0, 0.0, 0.0);
    };
    vec4 rgbm_7;
    vec4 tmpvar_8;
    tmpvar_8.w = 1.0;
    tmpvar_8.xyz = (emission_6 * 0.01030928);
    rgbm_7.xyz = tmpvar_8.xyz;
    rgbm_7.w = max (max (tmpvar_8.x, tmpvar_8.y), max (tmpvar_8.z, 0.02));
    rgbm_7.w = (ceil((rgbm_7.w * 255.0)) / 255.0);
    rgbm_7.w = max (rgbm_7.w, 0.02);
    rgbm_7.xyz = (tmpvar_8.xyz / rgbm_7.w);
    res_4 = rgbm_7;
  };
  gl_FragData[0] = res_4;
}


#endif
"
}
SubProgram "metal " {
// Stats: 17 math, 5 branches
Bind "vertex" ATTR0
Bind "texcoord" ATTR1
Bind "texcoord1" ATTR2
Bind "texcoord2" ATTR3
ConstBuffer "$Globals" 136
Matrix 0 [glstate_matrix_mvp]
Vector 64 [unity_LightmapST]
Vector 80 [unity_DynamicLightmapST]
Vector 96 [_MainTex_ST]
Vector 112 [_DetailAlbedoMap_ST]
ScalarHalf 128 [_UVSec]
VectorBool 132 [unity_MetaVertexControl] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesMultiTexCoord0 [[attribute(1)]];
  float4 _glesMultiTexCoord1 [[attribute(2)]];
  float4 _glesMultiTexCoord2 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4 unity_LightmapST;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  bool4 unity_MetaVertexControl;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float2 tmpvar_1;
  tmpvar_1 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord1.xy;
  float4 vertex_3;
  vertex_3 = _mtl_i._glesVertex;
  if (_mtl_u.unity_MetaVertexControl.x) {
    vertex_3.xy = ((_mtl_i._glesMultiTexCoord1.xy * _mtl_u.unity_LightmapST.xy) + _mtl_u.unity_LightmapST.zw);
    float tmpvar_4;
    if ((_mtl_i._glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (_mtl_u.unity_MetaVertexControl.y) {
    vertex_3.xy = ((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw);
    float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  float4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (_mtl_u.glstate_matrix_mvp * tmpvar_7);
  float4 texcoord_8;
  texcoord_8.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_9;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  _mtl_o.xlv_TEXCOORD0 = texcoord_8;
  _mtl_o.gl_Position = tmpvar_6;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	bvec4 unity_MetaVertexControl;
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
out vec4 vs_TEXCOORD0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat1 = hlslcc_mtx4glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform  sampler2D _MainTex;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = (-_Glossiness) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = _Color.xyz * u_xlat10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat6 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat6 = unity_OneOverOutputBoost;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 0.0235294122) : u_xlat0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 32 math, 2 textures, 3 branches
Keywords { "_EMISSION" }
"#version 120

#ifdef VERTEX

uniform vec4 unity_LightmapST;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform bvec4 unity_MetaVertexControl;
varying vec4 xlv_TEXCOORD0;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 vertex_3;
  vertex_3 = gl_Vertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((gl_MultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    float tmpvar_4;
    if ((gl_Vertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (gl_ModelViewProjectionMatrix * tmpvar_7);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  xlv_TEXCOORD0 = texcoord_8;
  gl_Position = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform bvec4 unity_MetaFragmentControl;
uniform float unity_OneOverOutputBoost;
uniform float unity_MaxOutputValue;
uniform float unity_UseLinearSpace;
varying vec4 xlv_TEXCOORD0;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 res_2;
  float tmpvar_3;
  tmpvar_3 = (1.0 - _Glossiness);
  res_2 = ((tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) + ((
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic))
   * tmpvar_3) * (tmpvar_3 * 0.5)));
  vec3 tmpvar_4;
  tmpvar_4 = (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz);
  vec4 res_5;
  res_5 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    vec4 tmpvar_6;
    tmpvar_6.w = 1.0;
    tmpvar_6.xyz = res_2;
    res_5.w = tmpvar_6.w;
    res_5.xyz = clamp (pow (res_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
  };
  if (unity_MetaFragmentControl.y) {
    vec3 emission_7;
    if (bool(unity_UseLinearSpace)) {
      emission_7 = tmpvar_4;
    } else {
      emission_7 = (tmpvar_4 * ((tmpvar_4 * 
        ((tmpvar_4 * 0.305306) + 0.6821711)
      ) + 0.01252288));
    };
    vec4 rgbm_8;
    vec4 tmpvar_9;
    tmpvar_9.w = 1.0;
    tmpvar_9.xyz = (emission_7 * 0.01030928);
    rgbm_8.xyz = tmpvar_9.xyz;
    rgbm_8.w = max (max (tmpvar_9.x, tmpvar_9.y), max (tmpvar_9.z, 0.02));
    rgbm_8.w = (ceil((rgbm_8.w * 255.0)) / 255.0);
    rgbm_8.w = max (rgbm_8.w, 0.02);
    rgbm_8.xyz = (tmpvar_9.xyz / rgbm_8.w);
    res_5 = rgbm_8;
  };
  gl_FragData[0] = res_5;
}


#endif
"
}
SubProgram "metal " {
// Stats: 17 math, 5 branches
Keywords { "_EMISSION" }
Bind "vertex" ATTR0
Bind "texcoord" ATTR1
Bind "texcoord1" ATTR2
Bind "texcoord2" ATTR3
ConstBuffer "$Globals" 136
Matrix 0 [glstate_matrix_mvp]
Vector 64 [unity_LightmapST]
Vector 80 [unity_DynamicLightmapST]
Vector 96 [_MainTex_ST]
Vector 112 [_DetailAlbedoMap_ST]
ScalarHalf 128 [_UVSec]
VectorBool 132 [unity_MetaVertexControl] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesMultiTexCoord0 [[attribute(1)]];
  float4 _glesMultiTexCoord1 [[attribute(2)]];
  float4 _glesMultiTexCoord2 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4 unity_LightmapST;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  bool4 unity_MetaVertexControl;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float2 tmpvar_1;
  tmpvar_1 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord1.xy;
  float4 vertex_3;
  vertex_3 = _mtl_i._glesVertex;
  if (_mtl_u.unity_MetaVertexControl.x) {
    vertex_3.xy = ((_mtl_i._glesMultiTexCoord1.xy * _mtl_u.unity_LightmapST.xy) + _mtl_u.unity_LightmapST.zw);
    float tmpvar_4;
    if ((_mtl_i._glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (_mtl_u.unity_MetaVertexControl.y) {
    vertex_3.xy = ((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw);
    float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  float4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (_mtl_u.glstate_matrix_mvp * tmpvar_7);
  float4 texcoord_8;
  texcoord_8.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_9;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  _mtl_o.xlv_TEXCOORD0 = texcoord_8;
  _mtl_o.gl_Position = tmpvar_6;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	bvec4 unity_MetaVertexControl;
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
out vec4 vs_TEXCOORD0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat1 = hlslcc_mtx4glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 _EmissionColor;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float unity_UseLinearSpace;
uniform  sampler2D _MainTex;
uniform  sampler2D _EmissionMap;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
float u_xlat10;
bool u_xlatb10;
void main()
{
    u_xlat0.x = (-_Glossiness) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = _Color.xyz * u_xlat10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat9 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat9 = unity_OneOverOutputBoost;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.010309278, 0.010309278, 0.010309278);
    u_xlat10 = max(u_xlat1.y, u_xlat1.x);
    u_xlat2.x = max(u_xlat1.z, 0.0199999996);
    u_xlat10 = max(u_xlat10, u_xlat2.x);
    u_xlat10 = u_xlat10 * 255.0;
    u_xlat10 = ceil(u_xlat10);
    u_xlat2.w = u_xlat10 * 0.00392156886;
    u_xlat2.xyz = u_xlat1.xyz / u_xlat2.www;
    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat2 : u_xlat0;
    return;
}
#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 28 math, 1 textures, 3 branches
SetTexture 0 [_MainTex] 2D 0
ConstBuffer "$Globals" 36
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_Color] 4
ScalarHalf 16 [_Metallic]
ScalarHalf 18 [_Glossiness]
VectorBool 20 [unity_MetaFragmentControl] 4
Float 24 [unity_OneOverOutputBoost]
Float 28 [unity_MaxOutputValue]
Float 32 [unity_UseLinearSpace]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  bool4 unity_MetaFragmentControl;
  float unity_OneOverOutputBoost;
  float unity_MaxOutputValue;
  float unity_UseLinearSpace;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 res_4;
  half tmpvar_5;
  tmpvar_5 = ((half)1.0 - _mtl_u._Glossiness);
  res_4 = ((tmpvar_3 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - 
    (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)
  )) + ((
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic))
   * tmpvar_5) * (tmpvar_5 * (half)0.5)));
  half4 res_6;
  res_6 = half4(float4(0.0, 0.0, 0.0, 0.0));
  if (_mtl_u.unity_MetaFragmentControl.x) {
    half4 tmpvar_7;
    tmpvar_7.w = half(1.0);
    tmpvar_7.xyz = res_4;
    res_6.w = tmpvar_7.w;
    float3 tmpvar_8;
    tmpvar_8 = clamp (pow ((float3)res_4, float3(clamp (_mtl_u.unity_OneOverOutputBoost, 0.0, 1.0))), float3(0.0, 0.0, 0.0), float3(_mtl_u.unity_MaxOutputValue));
    res_6.xyz = half3(tmpvar_8);
  };
  if (_mtl_u.unity_MetaFragmentControl.y) {
    half3 emission_9;
    if (bool(_mtl_u.unity_UseLinearSpace)) {
      emission_9 = half3(float3(0.0, 0.0, 0.0));
    } else {
      emission_9 = half3(float3(0.0, 0.0, 0.0));
    };
    half4 tmpvar_10;
    float4 rgbm_11;
    float4 tmpvar_12;
    tmpvar_12.w = 1.0;
    tmpvar_12.xyz = ((float3)(emission_9 * (half)0.01030928));
    rgbm_11.xyz = tmpvar_12.xyz;
    rgbm_11.w = max (max (tmpvar_12.x, tmpvar_12.y), max (tmpvar_12.z, 0.02));
    rgbm_11.w = (ceil((rgbm_11.w * 255.0)) / 255.0);
    rgbm_11.w = max (rgbm_11.w, 0.02);
    rgbm_11.xyz = (tmpvar_12.xyz / rgbm_11.w);
    tmpvar_10 = half4(rgbm_11);
    res_6 = tmpvar_10;
  };
  tmpvar_1 = float4(res_6);
  _mtl_o._glesFragData_0 = half4(tmpvar_1);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "_EMISSION" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 32 math, 2 textures, 3 branches
Keywords { "_EMISSION" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_EmissionMap] 2D 1
ConstBuffer "$Globals" 48
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_Color] 4
ScalarHalf 16 [_Metallic]
ScalarHalf 18 [_Glossiness]
VectorHalf 24 [_EmissionColor] 4
VectorBool 32 [unity_MetaFragmentControl] 4
Float 36 [unity_OneOverOutputBoost]
Float 40 [unity_MaxOutputValue]
Float 44 [unity_UseLinearSpace]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half4 _EmissionColor;
  bool4 unity_MetaFragmentControl;
  float unity_OneOverOutputBoost;
  float unity_MaxOutputValue;
  float unity_UseLinearSpace;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _EmissionMap [[texture(1)]], sampler _mtlsmp__EmissionMap [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 res_4;
  half tmpvar_5;
  tmpvar_5 = ((half)1.0 - _mtl_u._Glossiness);
  res_4 = ((tmpvar_3 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - 
    (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)
  )) + ((
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic))
   * tmpvar_5) * (tmpvar_5 * (half)0.5)));
  half3 tmpvar_6;
  half4 tmpvar_7;
  tmpvar_7 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_6 = (tmpvar_7.xyz * _mtl_u._EmissionColor.xyz);
  half4 res_8;
  res_8 = half4(float4(0.0, 0.0, 0.0, 0.0));
  if (_mtl_u.unity_MetaFragmentControl.x) {
    half4 tmpvar_9;
    tmpvar_9.w = half(1.0);
    tmpvar_9.xyz = res_4;
    res_8.w = tmpvar_9.w;
    float3 tmpvar_10;
    tmpvar_10 = clamp (pow ((float3)res_4, float3(clamp (_mtl_u.unity_OneOverOutputBoost, 0.0, 1.0))), float3(0.0, 0.0, 0.0), float3(_mtl_u.unity_MaxOutputValue));
    res_8.xyz = half3(tmpvar_10);
  };
  if (_mtl_u.unity_MetaFragmentControl.y) {
    half3 emission_11;
    if (bool(_mtl_u.unity_UseLinearSpace)) {
      emission_11 = tmpvar_6;
    } else {
      emission_11 = (tmpvar_6 * ((tmpvar_6 * 
        ((tmpvar_6 * (half)0.305306) + (half)0.6821711)
      ) + (half)0.01252288));
    };
    half4 tmpvar_12;
    float4 rgbm_13;
    float4 tmpvar_14;
    tmpvar_14.w = 1.0;
    tmpvar_14.xyz = ((float3)(emission_11 * (half)0.01030928));
    rgbm_13.xyz = tmpvar_14.xyz;
    rgbm_13.w = max (max (tmpvar_14.x, tmpvar_14.y), max (tmpvar_14.z, 0.02));
    rgbm_13.w = (ceil((rgbm_13.w * 255.0)) / 255.0);
    rgbm_13.w = max (rgbm_13.w, 0.02);
    rgbm_13.xyz = (tmpvar_14.xyz / rgbm_13.w);
    tmpvar_12 = half4(rgbm_13);
    res_8 = tmpvar_12;
  };
  tmpvar_1 = float4(res_8);
  _mtl_o._glesFragData_0 = half4(tmpvar_1);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "_EMISSION" }
"// shader disassembly not supported on glcore"
}
}
 }
}
SubShader { 
 LOD 150
 Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }


 // Stats for Vertex shader:
 //       metal : 56 avg math (41..71), 2 branch
 //      opengl : 48 avg math (40..52), 4 avg texture (4..6)
 // Stats for Fragment shader:
 //       metal : 48 avg math (40..52), 4 avg texture (4..6)
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite [_ZWrite]
  Blend [_SrcBlend] [_DstBlend]
  GpuProgramID 329169
Program "vp" {
SubProgram "opengl " {
// Stats: 49 math, 4 textures
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 ambientOrLightmapUV_16;
  ambientOrLightmapUV_16 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_17;
  ambient_17 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_15;
  vec3 res_19;
  vec3 x_20;
  x_20.x = dot (unity_SHAr, tmpvar_18);
  x_20.y = dot (unity_SHAg, tmpvar_18);
  x_20.z = dot (unity_SHAb, tmpvar_18);
  vec3 x1_21;
  vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  res_19 = (x_20 + (x1_21 + (unity_SHC.xyz * 
    ((tmpvar_15.x * tmpvar_15.x) - (tmpvar_15.y * tmpvar_15.y))
  )));
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    res_19 = max (((1.055 * 
      pow (max (res_19, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  ambient_17 = max (vec3(0.0, 0.0, 0.0), res_19);
  ambientOrLightmapUV_16.xyz = ambient_17;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_16;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  vec3 tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (1.0 - _Glossiness);
  tmpvar_8 = (xlv_TEXCOORD1 - (2.0 * (
    dot (tmpvar_6, xlv_TEXCOORD1)
   * tmpvar_6)));
  vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_8;
  tmpvar_10.w = ((tmpvar_9 * (1.7 - 
    (0.7 * tmpvar_9)
  )) * 6.0);
  vec4 tmpvar_11;
  tmpvar_11 = textureCubeLod (unity_SpecCube0, tmpvar_8, tmpvar_10.w);
  vec3 viewDir_12;
  viewDir_12 = -(xlv_TEXCOORD1);
  vec3 color_13;
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((viewDir_12 - (2.0 * 
    (dot (tmpvar_6, viewDir_12) * tmpvar_6)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_6, viewDir_12), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * tmpvar_14) * (tmpvar_14 * tmpvar_14));
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = tmpvar_9;
  color_13 = ((tmpvar_3 + (
    (texture2D (unity_NHxRoughness, tmpvar_16).w * 16.0)
   * tmpvar_4)) * (_LightColor0.xyz * clamp (
    dot (tmpvar_6, _WorldSpaceLightPos0.xyz)
  , 0.0, 1.0)));
  color_13 = (color_13 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_7)
   * tmpvar_3) + (
    (((unity_SpecCube0_HDR.x * pow (tmpvar_11.w, unity_SpecCube0_HDR.y)) * tmpvar_11.xyz) * tmpvar_7)
   * 
    mix (tmpvar_4, vec3(clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)), tmpvar_15.yyy)
  )));
  vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = color_13;
  c_1.w = tmpvar_17.w;
  c_1.xyz = color_13;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_18;
  xlat_varoutput_18.xyz = c_1.xyz;
  xlat_varoutput_18.w = 1.0;
  gl_FragData[0] = xlat_varoutput_18;
}


#endif
"
}
SubProgram "metal " {
// Stats: 41 math, 2 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 322
Matrix 80 [glstate_matrix_mvp]
Matrix 144 [unity_ObjectToWorld]
Matrix 208 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHAr] 4
VectorHalf 24 [unity_SHAg] 4
VectorHalf 32 [unity_SHAb] 4
VectorHalf 40 [unity_SHBr] 4
VectorHalf 48 [unity_SHBg] 4
VectorHalf 56 [unity_SHBb] 4
VectorHalf 64 [unity_SHC] 4
VectorHalf 272 [unity_ColorSpaceLuminance] 4
Vector 288 [_MainTex_ST]
Vector 304 [_DetailAlbedoMap_ST]
ScalarHalf 320 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  half3 normalWorld_19;
  normalWorld_19 = half3(tmpvar_18);
  half4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 ambient_21;
  ambient_21 = half3(float3(0.0, 0.0, 0.0));
  half4 tmpvar_22;
  tmpvar_22.w = half(1.0);
  tmpvar_22.xyz = normalWorld_19;
  half3 res_23;
  half3 x_24;
  x_24.x = dot (_mtl_u.unity_SHAr, tmpvar_22);
  x_24.y = dot (_mtl_u.unity_SHAg, tmpvar_22);
  x_24.z = dot (_mtl_u.unity_SHAb, tmpvar_22);
  half3 x1_25;
  half4 tmpvar_26;
  tmpvar_26 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_25.x = dot (_mtl_u.unity_SHBr, tmpvar_26);
  x1_25.y = dot (_mtl_u.unity_SHBg, tmpvar_26);
  x1_25.z = dot (_mtl_u.unity_SHBb, tmpvar_26);
  res_23 = (x_24 + (x1_25 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  bool tmpvar_27;
  tmpvar_27 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_27) {
    res_23 = max ((((half)1.055 * 
      pow (max (res_23, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  ambient_21 = max ((half3)float3(0.0, 0.0, 0.0), res_23);
  ambientOrLightmapUV_20.xyz = ambient_21;
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_NHxRoughness;
uniform  samplerCube unity_SpecCube0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat22;
void main()
{
    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 6.0;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
    u_xlat16_0 = log2(u_xlat10_2.w);
    u_xlat0.x = u_xlat16_0 * unity_SpecCube0_HDR.y;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat0.xxx;
    u_xlat10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.yyy;
    u_xlat3.xyz = u_xlat10_3.yyy * vs_TEXCOORD5.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
    u_xlat22 = u_xlat0.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.y = (-u_xlat0.x) + 1.0;
    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat22 = (-u_xlat0.x) + _Glossiness;
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat5.xyz = _Color.xyz * u_xlat10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat10_0 = texture(unity_NHxRoughness, u_xlat0.yw);
    u_xlat16_0 = u_xlat10_0.w * 16.0;
    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 50 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 o_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_7 * 0.5);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_7.zw;
  vec4 ambientOrLightmapUV_19;
  ambientOrLightmapUV_19 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_20;
  ambient_20 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_15;
  vec3 res_22;
  vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_21);
  x_23.y = dot (unity_SHAg, tmpvar_21);
  x_23.z = dot (unity_SHAb, tmpvar_21);
  vec3 x1_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  res_22 = (x_23 + (x1_24 + (unity_SHC.xyz * 
    ((tmpvar_15.x * tmpvar_15.x) - (tmpvar_15.y * tmpvar_15.y))
  )));
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    res_22 = max (((1.055 * 
      pow (max (res_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  ambient_20 = max (vec3(0.0, 0.0, 0.0), res_22);
  ambientOrLightmapUV_19.xyz = ambient_20;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_19;
  xlv_TEXCOORD6 = o_16;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  vec3 tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (1.0 - _Glossiness);
  tmpvar_8 = (xlv_TEXCOORD1 - (2.0 * (
    dot (tmpvar_6, xlv_TEXCOORD1)
   * tmpvar_6)));
  vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_8;
  tmpvar_10.w = ((tmpvar_9 * (1.7 - 
    (0.7 * tmpvar_9)
  )) * 6.0);
  vec4 tmpvar_11;
  tmpvar_11 = textureCubeLod (unity_SpecCube0, tmpvar_8, tmpvar_10.w);
  vec3 viewDir_12;
  viewDir_12 = -(xlv_TEXCOORD1);
  vec3 color_13;
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((viewDir_12 - (2.0 * 
    (dot (tmpvar_6, viewDir_12) * tmpvar_6)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_6, viewDir_12), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * tmpvar_14) * (tmpvar_14 * tmpvar_14));
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = tmpvar_9;
  color_13 = ((tmpvar_3 + (
    (texture2D (unity_NHxRoughness, tmpvar_16).w * 16.0)
   * tmpvar_4)) * ((_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x) * clamp (
    dot (tmpvar_6, _WorldSpaceLightPos0.xyz)
  , 0.0, 1.0)));
  color_13 = (color_13 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_7)
   * tmpvar_3) + (
    (((unity_SpecCube0_HDR.x * pow (tmpvar_11.w, unity_SpecCube0_HDR.y)) * tmpvar_11.xyz) * tmpvar_7)
   * 
    mix (tmpvar_4, vec3(clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)), tmpvar_15.yyy)
  )));
  vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = color_13;
  c_1.w = tmpvar_17.w;
  c_1.xyz = color_13;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_18;
  xlat_varoutput_18.xyz = c_1.xyz;
  xlat_varoutput_18.w = 1.0;
  gl_FragData[0] = xlat_varoutput_18;
}


#endif
"
}
SubProgram "metal " {
// Stats: 44 math, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 338
Matrix 96 [glstate_matrix_mvp]
Matrix 160 [unity_ObjectToWorld]
Matrix 224 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
VectorHalf 32 [unity_SHAr] 4
VectorHalf 40 [unity_SHAg] 4
VectorHalf 48 [unity_SHAb] 4
VectorHalf 56 [unity_SHBr] 4
VectorHalf 64 [unity_SHBg] 4
VectorHalf 72 [unity_SHBb] 4
VectorHalf 80 [unity_SHC] 4
VectorHalf 288 [unity_ColorSpaceLuminance] 4
Vector 304 [_MainTex_ST]
Vector 320 [_DetailAlbedoMap_ST]
ScalarHalf 336 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float4 o_19;
  float4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  float2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _mtl_u._ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  half3 normalWorld_22;
  normalWorld_22 = half3(tmpvar_18);
  half4 ambientOrLightmapUV_23;
  ambientOrLightmapUV_23 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 ambient_24;
  ambient_24 = half3(float3(0.0, 0.0, 0.0));
  half4 tmpvar_25;
  tmpvar_25.w = half(1.0);
  tmpvar_25.xyz = normalWorld_22;
  half3 res_26;
  half3 x_27;
  x_27.x = dot (_mtl_u.unity_SHAr, tmpvar_25);
  x_27.y = dot (_mtl_u.unity_SHAg, tmpvar_25);
  x_27.z = dot (_mtl_u.unity_SHAb, tmpvar_25);
  half3 x1_28;
  half4 tmpvar_29;
  tmpvar_29 = (normalWorld_22.xyzz * normalWorld_22.yzzx);
  x1_28.x = dot (_mtl_u.unity_SHBr, tmpvar_29);
  x1_28.y = dot (_mtl_u.unity_SHBg, tmpvar_29);
  x1_28.z = dot (_mtl_u.unity_SHBb, tmpvar_29);
  res_26 = (x_27 + (x1_28 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_22.x * normalWorld_22.x) - (normalWorld_22.y * normalWorld_22.y))
  )));
  bool tmpvar_30;
  tmpvar_30 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_30) {
    res_26 = max ((((half)1.055 * 
      pow (max (res_26, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  ambient_24 = max ((half3)float3(0.0, 0.0, 0.0), res_26);
  ambientOrLightmapUV_23.xyz = ambient_24;
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_23;
  _mtl_o.xlv_TEXCOORD6 = o_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat2.x = u_xlat1.y * u_xlat1.y;
    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat1.xyz;
    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_NHxRoughness;
uniform  samplerCube unity_SpecCube0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat8;
float u_xlat22;
void main()
{
    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 6.0;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
    u_xlat16_0 = log2(u_xlat10_2.w);
    u_xlat0.x = u_xlat16_0 * unity_SpecCube0_HDR.y;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat0.xxx;
    u_xlat10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.yyy;
    u_xlat3.xyz = u_xlat10_3.yyy * vs_TEXCOORD5.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
    u_xlat22 = u_xlat0.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.y = (-u_xlat0.x) + 1.0;
    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat8 = (-u_xlat1.x) + _Glossiness;
    u_xlat8 = u_xlat8 + 1.0;
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat5.xyz = _Color.xyz * u_xlat10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat1.xzw = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat5.xyz = vec3(u_xlat8) + (-u_xlat4.xyz);
    u_xlat5.xyz = u_xlat0.zzz * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat10_6 = texture(unity_NHxRoughness, u_xlat0.yw);
    u_xlat16_7 = u_xlat10_6.w * 16.0;
    u_xlat7.xyz = vec3(u_xlat16_7) * u_xlat4.xyz + u_xlat1.xzw;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xzw + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.xyz = u_xlat10_2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 49 math, 4 textures
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 ambientOrLightmapUV_16;
  ambientOrLightmapUV_16.w = 0.0;
  vec3 col_17;
  vec4 ndotl_18;
  vec4 lengthSq_19;
  vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosX0 - tmpvar_6.x);
  vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosY0 - tmpvar_6.y);
  vec4 tmpvar_22;
  tmpvar_22 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_19 = (tmpvar_20 * tmpvar_20);
  lengthSq_19 = (lengthSq_19 + (tmpvar_21 * tmpvar_21));
  lengthSq_19 = (lengthSq_19 + (tmpvar_22 * tmpvar_22));
  ndotl_18 = (tmpvar_20 * tmpvar_15.x);
  ndotl_18 = (ndotl_18 + (tmpvar_21 * tmpvar_15.y));
  ndotl_18 = (ndotl_18 + (tmpvar_22 * tmpvar_15.z));
  vec4 tmpvar_23;
  tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_18 * inversesqrt(lengthSq_19)));
  ndotl_18 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
    (lengthSq_19 * unity_4LightAtten0)
  ))));
  col_17 = (unity_LightColor[0].xyz * tmpvar_24.x);
  col_17 = (col_17 + (unity_LightColor[1].xyz * tmpvar_24.y));
  col_17 = (col_17 + (unity_LightColor[2].xyz * tmpvar_24.z));
  col_17 = (col_17 + (unity_LightColor[3].xyz * tmpvar_24.w));
  ambientOrLightmapUV_16.xyz = col_17;
  vec3 ambient_25;
  ambient_25 = ambientOrLightmapUV_16.xyz;
  vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = tmpvar_15;
  vec3 res_27;
  vec3 x_28;
  x_28.x = dot (unity_SHAr, tmpvar_26);
  x_28.y = dot (unity_SHAg, tmpvar_26);
  x_28.z = dot (unity_SHAb, tmpvar_26);
  vec3 x1_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
    ((tmpvar_15.x * tmpvar_15.x) - (tmpvar_15.y * tmpvar_15.y))
  )));
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    res_27 = max (((1.055 * 
      pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  ambient_25 = (col_17 + max (vec3(0.0, 0.0, 0.0), res_27));
  ambientOrLightmapUV_16.xyz = ambient_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_16;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  vec3 tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (1.0 - _Glossiness);
  tmpvar_8 = (xlv_TEXCOORD1 - (2.0 * (
    dot (tmpvar_6, xlv_TEXCOORD1)
   * tmpvar_6)));
  vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_8;
  tmpvar_10.w = ((tmpvar_9 * (1.7 - 
    (0.7 * tmpvar_9)
  )) * 6.0);
  vec4 tmpvar_11;
  tmpvar_11 = textureCubeLod (unity_SpecCube0, tmpvar_8, tmpvar_10.w);
  vec3 viewDir_12;
  viewDir_12 = -(xlv_TEXCOORD1);
  vec3 color_13;
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((viewDir_12 - (2.0 * 
    (dot (tmpvar_6, viewDir_12) * tmpvar_6)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_6, viewDir_12), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * tmpvar_14) * (tmpvar_14 * tmpvar_14));
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = tmpvar_9;
  color_13 = ((tmpvar_3 + (
    (texture2D (unity_NHxRoughness, tmpvar_16).w * 16.0)
   * tmpvar_4)) * (_LightColor0.xyz * clamp (
    dot (tmpvar_6, _WorldSpaceLightPos0.xyz)
  , 0.0, 1.0)));
  color_13 = (color_13 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_7)
   * tmpvar_3) + (
    (((unity_SpecCube0_HDR.x * pow (tmpvar_11.w, unity_SpecCube0_HDR.y)) * tmpvar_11.xyz) * tmpvar_7)
   * 
    mix (tmpvar_4, vec3(clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)), tmpvar_15.yyy)
  )));
  vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = color_13;
  c_1.w = tmpvar_17.w;
  c_1.xyz = color_13;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_18;
  xlat_varoutput_18.xyz = c_1.xyz;
  xlat_varoutput_18.w = 1.0;
  gl_FragData[0] = xlat_varoutput_18;
}


#endif
"
}
SubProgram "metal " {
// Stats: 68 math, 2 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 434
Matrix 192 [glstate_matrix_mvp]
Matrix 256 [unity_ObjectToWorld]
Matrix 320 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [unity_4LightPosX0]
Vector 32 [unity_4LightPosY0]
Vector 48 [unity_4LightPosZ0]
VectorHalf 64 [unity_4LightAtten0] 4
VectorHalf 72 [unity_LightColor] 4 8
VectorHalf 136 [unity_SHAr] 4
VectorHalf 144 [unity_SHAg] 4
VectorHalf 152 [unity_SHAb] 4
VectorHalf 160 [unity_SHBr] 4
VectorHalf 168 [unity_SHBg] 4
VectorHalf 176 [unity_SHBb] 4
VectorHalf 184 [unity_SHC] 4
VectorHalf 384 [unity_ColorSpaceLuminance] 4
Vector 400 [_MainTex_ST]
Vector 416 [_DetailAlbedoMap_ST]
ScalarHalf 432 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 unity_4LightPosX0;
  float4 unity_4LightPosY0;
  float4 unity_4LightPosZ0;
  half4 unity_4LightAtten0;
  half4 unity_LightColor[8];
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  half3 normalWorld_19;
  normalWorld_19 = half3(tmpvar_18);
  half4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = half(0.0);
  float3 lightColor0_21;
  lightColor0_21 = float3(_mtl_u.unity_LightColor[0].xyz);
  float3 lightColor1_22;
  lightColor1_22 = float3(_mtl_u.unity_LightColor[1].xyz);
  float3 lightColor2_23;
  lightColor2_23 = float3(_mtl_u.unity_LightColor[2].xyz);
  float3 lightColor3_24;
  lightColor3_24 = float3(_mtl_u.unity_LightColor[3].xyz);
  float4 lightAttenSq_25;
  lightAttenSq_25 = float4(_mtl_u.unity_4LightAtten0);
  float3 normal_26;
  normal_26 = float3(normalWorld_19);
  float3 col_27;
  float4 ndotl_28;
  float4 lengthSq_29;
  float4 tmpvar_30;
  tmpvar_30 = (_mtl_u.unity_4LightPosX0 - tmpvar_7.x);
  float4 tmpvar_31;
  tmpvar_31 = (_mtl_u.unity_4LightPosY0 - tmpvar_7.y);
  float4 tmpvar_32;
  tmpvar_32 = (_mtl_u.unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  float4 tmpvar_33;
  tmpvar_33 = max (float4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * rsqrt(lengthSq_29)));
  ndotl_28 = tmpvar_33;
  float4 tmpvar_34;
  tmpvar_34 = (tmpvar_33 * (1.0/((1.0 + 
    (lengthSq_29 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_34.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_34.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_34.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_34.w));
  ambientOrLightmapUV_20.xyz = half3(col_27);
  half3 ambient_35;
  ambient_35 = ambientOrLightmapUV_20.xyz;
  half4 tmpvar_36;
  tmpvar_36.w = half(1.0);
  tmpvar_36.xyz = normalWorld_19;
  half3 res_37;
  half3 x_38;
  x_38.x = dot (_mtl_u.unity_SHAr, tmpvar_36);
  x_38.y = dot (_mtl_u.unity_SHAg, tmpvar_36);
  x_38.z = dot (_mtl_u.unity_SHAb, tmpvar_36);
  half3 x1_39;
  half4 tmpvar_40;
  tmpvar_40 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_39.x = dot (_mtl_u.unity_SHBr, tmpvar_40);
  x1_39.y = dot (_mtl_u.unity_SHBg, tmpvar_40);
  x1_39.z = dot (_mtl_u.unity_SHBb, tmpvar_40);
  res_37 = (x_38 + (x1_39 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  bool tmpvar_41;
  tmpvar_41 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_41) {
    res_37 = max ((((half)1.055 * 
      pow (max (res_37, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  ambient_35 = (ambientOrLightmapUV_20.xyz + max ((half3)float3(0.0, 0.0, 0.0), res_37));
  ambientOrLightmapUV_20.xyz = ambient_35;
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_NHxRoughness;
uniform  samplerCube unity_SpecCube0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat22;
void main()
{
    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 6.0;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
    u_xlat16_0 = log2(u_xlat10_2.w);
    u_xlat0.x = u_xlat16_0 * unity_SpecCube0_HDR.y;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat0.xxx;
    u_xlat10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.yyy;
    u_xlat3.xyz = u_xlat10_3.yyy * vs_TEXCOORD5.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
    u_xlat22 = u_xlat0.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.y = (-u_xlat0.x) + 1.0;
    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat22 = (-u_xlat0.x) + _Glossiness;
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat5.xyz = _Color.xyz * u_xlat10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat10_0 = texture(unity_NHxRoughness, u_xlat0.yw);
    u_xlat16_0 = u_xlat10_0.w * 16.0;
    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 50 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 o_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_7 * 0.5);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_7.zw;
  vec4 ambientOrLightmapUV_19;
  ambientOrLightmapUV_19.w = 0.0;
  vec3 col_20;
  vec4 ndotl_21;
  vec4 lengthSq_22;
  vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_6.x);
  vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_6.y);
  vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_22 = (tmpvar_23 * tmpvar_23);
  lengthSq_22 = (lengthSq_22 + (tmpvar_24 * tmpvar_24));
  lengthSq_22 = (lengthSq_22 + (tmpvar_25 * tmpvar_25));
  ndotl_21 = (tmpvar_23 * tmpvar_15.x);
  ndotl_21 = (ndotl_21 + (tmpvar_24 * tmpvar_15.y));
  ndotl_21 = (ndotl_21 + (tmpvar_25 * tmpvar_15.z));
  vec4 tmpvar_26;
  tmpvar_26 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_21 * inversesqrt(lengthSq_22)));
  ndotl_21 = tmpvar_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (1.0/((1.0 + 
    (lengthSq_22 * unity_4LightAtten0)
  ))));
  col_20 = (unity_LightColor[0].xyz * tmpvar_27.x);
  col_20 = (col_20 + (unity_LightColor[1].xyz * tmpvar_27.y));
  col_20 = (col_20 + (unity_LightColor[2].xyz * tmpvar_27.z));
  col_20 = (col_20 + (unity_LightColor[3].xyz * tmpvar_27.w));
  ambientOrLightmapUV_19.xyz = col_20;
  vec3 ambient_28;
  ambient_28 = ambientOrLightmapUV_19.xyz;
  vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = tmpvar_15;
  vec3 res_30;
  vec3 x_31;
  x_31.x = dot (unity_SHAr, tmpvar_29);
  x_31.y = dot (unity_SHAg, tmpvar_29);
  x_31.z = dot (unity_SHAb, tmpvar_29);
  vec3 x1_32;
  vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x1_32.x = dot (unity_SHBr, tmpvar_33);
  x1_32.y = dot (unity_SHBg, tmpvar_33);
  x1_32.z = dot (unity_SHBb, tmpvar_33);
  res_30 = (x_31 + (x1_32 + (unity_SHC.xyz * 
    ((tmpvar_15.x * tmpvar_15.x) - (tmpvar_15.y * tmpvar_15.y))
  )));
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    res_30 = max (((1.055 * 
      pow (max (res_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  ambient_28 = (col_20 + max (vec3(0.0, 0.0, 0.0), res_30));
  ambientOrLightmapUV_19.xyz = ambient_28;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_19;
  xlv_TEXCOORD6 = o_16;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  vec3 tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (1.0 - _Glossiness);
  tmpvar_8 = (xlv_TEXCOORD1 - (2.0 * (
    dot (tmpvar_6, xlv_TEXCOORD1)
   * tmpvar_6)));
  vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_8;
  tmpvar_10.w = ((tmpvar_9 * (1.7 - 
    (0.7 * tmpvar_9)
  )) * 6.0);
  vec4 tmpvar_11;
  tmpvar_11 = textureCubeLod (unity_SpecCube0, tmpvar_8, tmpvar_10.w);
  vec3 viewDir_12;
  viewDir_12 = -(xlv_TEXCOORD1);
  vec3 color_13;
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((viewDir_12 - (2.0 * 
    (dot (tmpvar_6, viewDir_12) * tmpvar_6)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_6, viewDir_12), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * tmpvar_14) * (tmpvar_14 * tmpvar_14));
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = tmpvar_9;
  color_13 = ((tmpvar_3 + (
    (texture2D (unity_NHxRoughness, tmpvar_16).w * 16.0)
   * tmpvar_4)) * ((_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x) * clamp (
    dot (tmpvar_6, _WorldSpaceLightPos0.xyz)
  , 0.0, 1.0)));
  color_13 = (color_13 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_7)
   * tmpvar_3) + (
    (((unity_SpecCube0_HDR.x * pow (tmpvar_11.w, unity_SpecCube0_HDR.y)) * tmpvar_11.xyz) * tmpvar_7)
   * 
    mix (tmpvar_4, vec3(clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)), tmpvar_15.yyy)
  )));
  vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = color_13;
  c_1.w = tmpvar_17.w;
  c_1.xyz = color_13;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_18;
  xlat_varoutput_18.xyz = c_1.xyz;
  xlat_varoutput_18.w = 1.0;
  gl_FragData[0] = xlat_varoutput_18;
}


#endif
"
}
SubProgram "metal " {
// Stats: 71 math, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 450
Matrix 208 [glstate_matrix_mvp]
Matrix 272 [unity_ObjectToWorld]
Matrix 336 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 32 [unity_4LightPosX0]
Vector 48 [unity_4LightPosY0]
Vector 64 [unity_4LightPosZ0]
VectorHalf 80 [unity_4LightAtten0] 4
VectorHalf 88 [unity_LightColor] 4 8
VectorHalf 152 [unity_SHAr] 4
VectorHalf 160 [unity_SHAg] 4
VectorHalf 168 [unity_SHAb] 4
VectorHalf 176 [unity_SHBr] 4
VectorHalf 184 [unity_SHBg] 4
VectorHalf 192 [unity_SHBb] 4
VectorHalf 200 [unity_SHC] 4
VectorHalf 400 [unity_ColorSpaceLuminance] 4
Vector 416 [_MainTex_ST]
Vector 432 [_DetailAlbedoMap_ST]
ScalarHalf 448 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4 unity_4LightPosX0;
  float4 unity_4LightPosY0;
  float4 unity_4LightPosZ0;
  half4 unity_4LightAtten0;
  half4 unity_LightColor[8];
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float4 o_19;
  float4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  float2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _mtl_u._ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  half3 normalWorld_22;
  normalWorld_22 = half3(tmpvar_18);
  half4 ambientOrLightmapUV_23;
  ambientOrLightmapUV_23.w = half(0.0);
  float3 lightColor0_24;
  lightColor0_24 = float3(_mtl_u.unity_LightColor[0].xyz);
  float3 lightColor1_25;
  lightColor1_25 = float3(_mtl_u.unity_LightColor[1].xyz);
  float3 lightColor2_26;
  lightColor2_26 = float3(_mtl_u.unity_LightColor[2].xyz);
  float3 lightColor3_27;
  lightColor3_27 = float3(_mtl_u.unity_LightColor[3].xyz);
  float4 lightAttenSq_28;
  lightAttenSq_28 = float4(_mtl_u.unity_4LightAtten0);
  float3 normal_29;
  normal_29 = float3(normalWorld_22);
  float3 col_30;
  float4 ndotl_31;
  float4 lengthSq_32;
  float4 tmpvar_33;
  tmpvar_33 = (_mtl_u.unity_4LightPosX0 - tmpvar_7.x);
  float4 tmpvar_34;
  tmpvar_34 = (_mtl_u.unity_4LightPosY0 - tmpvar_7.y);
  float4 tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_32 = (tmpvar_33 * tmpvar_33);
  lengthSq_32 = (lengthSq_32 + (tmpvar_34 * tmpvar_34));
  lengthSq_32 = (lengthSq_32 + (tmpvar_35 * tmpvar_35));
  ndotl_31 = (tmpvar_33 * normal_29.x);
  ndotl_31 = (ndotl_31 + (tmpvar_34 * normal_29.y));
  ndotl_31 = (ndotl_31 + (tmpvar_35 * normal_29.z));
  float4 tmpvar_36;
  tmpvar_36 = max (float4(0.0, 0.0, 0.0, 0.0), (ndotl_31 * rsqrt(lengthSq_32)));
  ndotl_31 = tmpvar_36;
  float4 tmpvar_37;
  tmpvar_37 = (tmpvar_36 * (1.0/((1.0 + 
    (lengthSq_32 * lightAttenSq_28)
  ))));
  col_30 = (lightColor0_24 * tmpvar_37.x);
  col_30 = (col_30 + (lightColor1_25 * tmpvar_37.y));
  col_30 = (col_30 + (lightColor2_26 * tmpvar_37.z));
  col_30 = (col_30 + (lightColor3_27 * tmpvar_37.w));
  ambientOrLightmapUV_23.xyz = half3(col_30);
  half3 ambient_38;
  ambient_38 = ambientOrLightmapUV_23.xyz;
  half4 tmpvar_39;
  tmpvar_39.w = half(1.0);
  tmpvar_39.xyz = normalWorld_22;
  half3 res_40;
  half3 x_41;
  x_41.x = dot (_mtl_u.unity_SHAr, tmpvar_39);
  x_41.y = dot (_mtl_u.unity_SHAg, tmpvar_39);
  x_41.z = dot (_mtl_u.unity_SHAb, tmpvar_39);
  half3 x1_42;
  half4 tmpvar_43;
  tmpvar_43 = (normalWorld_22.xyzz * normalWorld_22.yzzx);
  x1_42.x = dot (_mtl_u.unity_SHBr, tmpvar_43);
  x1_42.y = dot (_mtl_u.unity_SHBg, tmpvar_43);
  x1_42.z = dot (_mtl_u.unity_SHBb, tmpvar_43);
  res_40 = (x_41 + (x1_42 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_22.x * normalWorld_22.x) - (normalWorld_22.y * normalWorld_22.y))
  )));
  bool tmpvar_44;
  tmpvar_44 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_44) {
    res_40 = max ((((half)1.055 * 
      pow (max (res_40, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  ambient_38 = (ambientOrLightmapUV_23.xyz + max ((half3)float3(0.0, 0.0, 0.0), res_40));
  ambientOrLightmapUV_23.xyz = ambient_38;
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_23;
  _mtl_o.xlv_TEXCOORD6 = o_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat2.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat2.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat2.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat3.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat3.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat3.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat3.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat3.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat22 = u_xlat2.y * u_xlat2.y;
    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat2);
    u_xlat4.y = dot(unity_SHAg, u_xlat2);
    u_xlat4.z = dot(unity_SHAb, u_xlat2);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.xyz = log2(u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat4.xyz = exp2(u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : u_xlat3.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
    u_xlat4 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_NHxRoughness;
uniform  samplerCube unity_SpecCube0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat8;
float u_xlat22;
void main()
{
    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 6.0;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
    u_xlat16_0 = log2(u_xlat10_2.w);
    u_xlat0.x = u_xlat16_0 * unity_SpecCube0_HDR.y;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat0.xxx;
    u_xlat10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.yyy;
    u_xlat3.xyz = u_xlat10_3.yyy * vs_TEXCOORD5.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
    u_xlat22 = u_xlat0.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.y = (-u_xlat0.x) + 1.0;
    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat8 = (-u_xlat1.x) + _Glossiness;
    u_xlat8 = u_xlat8 + 1.0;
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat5.xyz = _Color.xyz * u_xlat10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat1.xzw = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat5.xyz = vec3(u_xlat8) + (-u_xlat4.xyz);
    u_xlat5.xyz = u_xlat0.zzz * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat10_6 = texture(unity_NHxRoughness, u_xlat0.yw);
    u_xlat16_7 = u_xlat10_6.w * 16.0;
    u_xlat7.xyz = vec3(u_xlat16_7) * u_xlat4.xyz + u_xlat1.xzw;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xzw + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.xyz = u_xlat10_2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 51 math, 5 textures
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 ambientOrLightmapUV_16;
  ambientOrLightmapUV_16 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_17;
  ambient_17 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_15;
  vec3 res_19;
  vec3 x_20;
  x_20.x = dot (unity_SHAr, tmpvar_18);
  x_20.y = dot (unity_SHAg, tmpvar_18);
  x_20.z = dot (unity_SHAb, tmpvar_18);
  vec3 x1_21;
  vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  res_19 = (x_20 + (x1_21 + (unity_SHC.xyz * 
    ((tmpvar_15.x * tmpvar_15.x) - (tmpvar_15.y * tmpvar_15.y))
  )));
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    res_19 = max (((1.055 * 
      pow (max (res_19, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  ambient_17 = max (vec3(0.0, 0.0, 0.0), res_19);
  ambientOrLightmapUV_16.xyz = ambient_17;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_16;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  vec3 tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (1.0 - _Glossiness);
  tmpvar_8 = (xlv_TEXCOORD1 - (2.0 * (
    dot (tmpvar_6, xlv_TEXCOORD1)
   * tmpvar_6)));
  vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_8;
  tmpvar_10.w = ((tmpvar_9 * (1.7 - 
    (0.7 * tmpvar_9)
  )) * 6.0);
  vec4 tmpvar_11;
  tmpvar_11 = textureCubeLod (unity_SpecCube0, tmpvar_8, tmpvar_10.w);
  vec3 viewDir_12;
  viewDir_12 = -(xlv_TEXCOORD1);
  vec3 color_13;
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((viewDir_12 - (2.0 * 
    (dot (tmpvar_6, viewDir_12) * tmpvar_6)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_6, viewDir_12), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * tmpvar_14) * (tmpvar_14 * tmpvar_14));
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = tmpvar_9;
  color_13 = ((tmpvar_3 + (
    (texture2D (unity_NHxRoughness, tmpvar_16).w * 16.0)
   * tmpvar_4)) * (_LightColor0.xyz * clamp (
    dot (tmpvar_6, _WorldSpaceLightPos0.xyz)
  , 0.0, 1.0)));
  color_13 = (color_13 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_7)
   * tmpvar_3) + (
    (((unity_SpecCube0_HDR.x * pow (tmpvar_11.w, unity_SpecCube0_HDR.y)) * tmpvar_11.xyz) * tmpvar_7)
   * 
    mix (tmpvar_4, vec3(clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)), tmpvar_15.yyy)
  )));
  vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = color_13;
  c_1.w = tmpvar_17.w;
  c_1.xyz = (color_13 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_18;
  xlat_varoutput_18.xyz = c_1.xyz;
  xlat_varoutput_18.w = 1.0;
  gl_FragData[0] = xlat_varoutput_18;
}


#endif
"
}
SubProgram "metal " {
// Stats: 41 math, 2 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 322
Matrix 80 [glstate_matrix_mvp]
Matrix 144 [unity_ObjectToWorld]
Matrix 208 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHAr] 4
VectorHalf 24 [unity_SHAg] 4
VectorHalf 32 [unity_SHAb] 4
VectorHalf 40 [unity_SHBr] 4
VectorHalf 48 [unity_SHBg] 4
VectorHalf 56 [unity_SHBb] 4
VectorHalf 64 [unity_SHC] 4
VectorHalf 272 [unity_ColorSpaceLuminance] 4
Vector 288 [_MainTex_ST]
Vector 304 [_DetailAlbedoMap_ST]
ScalarHalf 320 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  half3 normalWorld_19;
  normalWorld_19 = half3(tmpvar_18);
  half4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 ambient_21;
  ambient_21 = half3(float3(0.0, 0.0, 0.0));
  half4 tmpvar_22;
  tmpvar_22.w = half(1.0);
  tmpvar_22.xyz = normalWorld_19;
  half3 res_23;
  half3 x_24;
  x_24.x = dot (_mtl_u.unity_SHAr, tmpvar_22);
  x_24.y = dot (_mtl_u.unity_SHAg, tmpvar_22);
  x_24.z = dot (_mtl_u.unity_SHAb, tmpvar_22);
  half3 x1_25;
  half4 tmpvar_26;
  tmpvar_26 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_25.x = dot (_mtl_u.unity_SHBr, tmpvar_26);
  x1_25.y = dot (_mtl_u.unity_SHBg, tmpvar_26);
  x1_25.z = dot (_mtl_u.unity_SHBb, tmpvar_26);
  res_23 = (x_24 + (x1_25 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  bool tmpvar_27;
  tmpvar_27 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_27) {
    res_23 = max ((((half)1.055 * 
      pow (max (res_23, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  ambient_21 = max ((half3)float3(0.0, 0.0, 0.0), res_23);
  ambientOrLightmapUV_20.xyz = ambient_21;
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_NHxRoughness;
uniform  sampler2D _EmissionMap;
uniform  samplerCube unity_SpecCube0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat22;
void main()
{
    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 6.0;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
    u_xlat16_0 = log2(u_xlat10_2.w);
    u_xlat0.x = u_xlat16_0 * unity_SpecCube0_HDR.y;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat0.xxx;
    u_xlat10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.yyy;
    u_xlat3.xyz = u_xlat10_3.yyy * vs_TEXCOORD5.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
    u_xlat22 = u_xlat0.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.y = (-u_xlat0.x) + 1.0;
    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat22 = (-u_xlat0.x) + _Glossiness;
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat5.xyz = _Color.xyz * u_xlat10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat10_0 = texture(unity_NHxRoughness, u_xlat0.yw);
    u_xlat16_0 = u_xlat10_0.w * 16.0;
    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 52 math, 6 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 o_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_7 * 0.5);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_7.zw;
  vec4 ambientOrLightmapUV_19;
  ambientOrLightmapUV_19 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_20;
  ambient_20 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_15;
  vec3 res_22;
  vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_21);
  x_23.y = dot (unity_SHAg, tmpvar_21);
  x_23.z = dot (unity_SHAb, tmpvar_21);
  vec3 x1_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  res_22 = (x_23 + (x1_24 + (unity_SHC.xyz * 
    ((tmpvar_15.x * tmpvar_15.x) - (tmpvar_15.y * tmpvar_15.y))
  )));
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    res_22 = max (((1.055 * 
      pow (max (res_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  ambient_20 = max (vec3(0.0, 0.0, 0.0), res_22);
  ambientOrLightmapUV_19.xyz = ambient_20;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_19;
  xlv_TEXCOORD6 = o_16;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  vec3 tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (1.0 - _Glossiness);
  tmpvar_8 = (xlv_TEXCOORD1 - (2.0 * (
    dot (tmpvar_6, xlv_TEXCOORD1)
   * tmpvar_6)));
  vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_8;
  tmpvar_10.w = ((tmpvar_9 * (1.7 - 
    (0.7 * tmpvar_9)
  )) * 6.0);
  vec4 tmpvar_11;
  tmpvar_11 = textureCubeLod (unity_SpecCube0, tmpvar_8, tmpvar_10.w);
  vec3 viewDir_12;
  viewDir_12 = -(xlv_TEXCOORD1);
  vec3 color_13;
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((viewDir_12 - (2.0 * 
    (dot (tmpvar_6, viewDir_12) * tmpvar_6)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_6, viewDir_12), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * tmpvar_14) * (tmpvar_14 * tmpvar_14));
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = tmpvar_9;
  color_13 = ((tmpvar_3 + (
    (texture2D (unity_NHxRoughness, tmpvar_16).w * 16.0)
   * tmpvar_4)) * ((_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x) * clamp (
    dot (tmpvar_6, _WorldSpaceLightPos0.xyz)
  , 0.0, 1.0)));
  color_13 = (color_13 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_7)
   * tmpvar_3) + (
    (((unity_SpecCube0_HDR.x * pow (tmpvar_11.w, unity_SpecCube0_HDR.y)) * tmpvar_11.xyz) * tmpvar_7)
   * 
    mix (tmpvar_4, vec3(clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)), tmpvar_15.yyy)
  )));
  vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = color_13;
  c_1.w = tmpvar_17.w;
  c_1.xyz = (color_13 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_18;
  xlat_varoutput_18.xyz = c_1.xyz;
  xlat_varoutput_18.w = 1.0;
  gl_FragData[0] = xlat_varoutput_18;
}


#endif
"
}
SubProgram "metal " {
// Stats: 44 math, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 338
Matrix 96 [glstate_matrix_mvp]
Matrix 160 [unity_ObjectToWorld]
Matrix 224 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
VectorHalf 32 [unity_SHAr] 4
VectorHalf 40 [unity_SHAg] 4
VectorHalf 48 [unity_SHAb] 4
VectorHalf 56 [unity_SHBr] 4
VectorHalf 64 [unity_SHBg] 4
VectorHalf 72 [unity_SHBb] 4
VectorHalf 80 [unity_SHC] 4
VectorHalf 288 [unity_ColorSpaceLuminance] 4
Vector 304 [_MainTex_ST]
Vector 320 [_DetailAlbedoMap_ST]
ScalarHalf 336 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float4 o_19;
  float4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  float2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _mtl_u._ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  half3 normalWorld_22;
  normalWorld_22 = half3(tmpvar_18);
  half4 ambientOrLightmapUV_23;
  ambientOrLightmapUV_23 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 ambient_24;
  ambient_24 = half3(float3(0.0, 0.0, 0.0));
  half4 tmpvar_25;
  tmpvar_25.w = half(1.0);
  tmpvar_25.xyz = normalWorld_22;
  half3 res_26;
  half3 x_27;
  x_27.x = dot (_mtl_u.unity_SHAr, tmpvar_25);
  x_27.y = dot (_mtl_u.unity_SHAg, tmpvar_25);
  x_27.z = dot (_mtl_u.unity_SHAb, tmpvar_25);
  half3 x1_28;
  half4 tmpvar_29;
  tmpvar_29 = (normalWorld_22.xyzz * normalWorld_22.yzzx);
  x1_28.x = dot (_mtl_u.unity_SHBr, tmpvar_29);
  x1_28.y = dot (_mtl_u.unity_SHBg, tmpvar_29);
  x1_28.z = dot (_mtl_u.unity_SHBb, tmpvar_29);
  res_26 = (x_27 + (x1_28 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_22.x * normalWorld_22.x) - (normalWorld_22.y * normalWorld_22.y))
  )));
  bool tmpvar_30;
  tmpvar_30 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_30) {
    res_26 = max ((((half)1.055 * 
      pow (max (res_26, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  ambient_24 = max ((half3)float3(0.0, 0.0, 0.0), res_26);
  ambientOrLightmapUV_23.xyz = ambient_24;
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_23;
  _mtl_o.xlv_TEXCOORD6 = o_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat2.x = u_xlat1.y * u_xlat1.y;
    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat1.xyz;
    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_NHxRoughness;
uniform  sampler2D _EmissionMap;
uniform  samplerCube unity_SpecCube0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat8;
float u_xlat22;
void main()
{
    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 6.0;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
    u_xlat16_0 = log2(u_xlat10_2.w);
    u_xlat0.x = u_xlat16_0 * unity_SpecCube0_HDR.y;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat0.xxx;
    u_xlat10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.yyy;
    u_xlat3.xyz = u_xlat10_3.yyy * vs_TEXCOORD5.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
    u_xlat22 = u_xlat0.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.y = (-u_xlat0.x) + 1.0;
    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat8 = (-u_xlat1.x) + _Glossiness;
    u_xlat8 = u_xlat8 + 1.0;
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat5.xyz = _Color.xyz * u_xlat10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat1.xzw = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat5.xyz = vec3(u_xlat8) + (-u_xlat4.xyz);
    u_xlat5.xyz = u_xlat0.zzz * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat10_6 = texture(unity_NHxRoughness, u_xlat0.yw);
    u_xlat16_7 = u_xlat10_6.w * 16.0;
    u_xlat7.xyz = vec3(u_xlat16_7) * u_xlat4.xyz + u_xlat1.xzw;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xzw + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.xyz = u_xlat10_2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 51 math, 5 textures
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 ambientOrLightmapUV_16;
  ambientOrLightmapUV_16.w = 0.0;
  vec3 col_17;
  vec4 ndotl_18;
  vec4 lengthSq_19;
  vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosX0 - tmpvar_6.x);
  vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosY0 - tmpvar_6.y);
  vec4 tmpvar_22;
  tmpvar_22 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_19 = (tmpvar_20 * tmpvar_20);
  lengthSq_19 = (lengthSq_19 + (tmpvar_21 * tmpvar_21));
  lengthSq_19 = (lengthSq_19 + (tmpvar_22 * tmpvar_22));
  ndotl_18 = (tmpvar_20 * tmpvar_15.x);
  ndotl_18 = (ndotl_18 + (tmpvar_21 * tmpvar_15.y));
  ndotl_18 = (ndotl_18 + (tmpvar_22 * tmpvar_15.z));
  vec4 tmpvar_23;
  tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_18 * inversesqrt(lengthSq_19)));
  ndotl_18 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
    (lengthSq_19 * unity_4LightAtten0)
  ))));
  col_17 = (unity_LightColor[0].xyz * tmpvar_24.x);
  col_17 = (col_17 + (unity_LightColor[1].xyz * tmpvar_24.y));
  col_17 = (col_17 + (unity_LightColor[2].xyz * tmpvar_24.z));
  col_17 = (col_17 + (unity_LightColor[3].xyz * tmpvar_24.w));
  ambientOrLightmapUV_16.xyz = col_17;
  vec3 ambient_25;
  ambient_25 = ambientOrLightmapUV_16.xyz;
  vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = tmpvar_15;
  vec3 res_27;
  vec3 x_28;
  x_28.x = dot (unity_SHAr, tmpvar_26);
  x_28.y = dot (unity_SHAg, tmpvar_26);
  x_28.z = dot (unity_SHAb, tmpvar_26);
  vec3 x1_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
    ((tmpvar_15.x * tmpvar_15.x) - (tmpvar_15.y * tmpvar_15.y))
  )));
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    res_27 = max (((1.055 * 
      pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  ambient_25 = (col_17 + max (vec3(0.0, 0.0, 0.0), res_27));
  ambientOrLightmapUV_16.xyz = ambient_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_16;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  vec3 tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (1.0 - _Glossiness);
  tmpvar_8 = (xlv_TEXCOORD1 - (2.0 * (
    dot (tmpvar_6, xlv_TEXCOORD1)
   * tmpvar_6)));
  vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_8;
  tmpvar_10.w = ((tmpvar_9 * (1.7 - 
    (0.7 * tmpvar_9)
  )) * 6.0);
  vec4 tmpvar_11;
  tmpvar_11 = textureCubeLod (unity_SpecCube0, tmpvar_8, tmpvar_10.w);
  vec3 viewDir_12;
  viewDir_12 = -(xlv_TEXCOORD1);
  vec3 color_13;
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((viewDir_12 - (2.0 * 
    (dot (tmpvar_6, viewDir_12) * tmpvar_6)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_6, viewDir_12), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * tmpvar_14) * (tmpvar_14 * tmpvar_14));
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = tmpvar_9;
  color_13 = ((tmpvar_3 + (
    (texture2D (unity_NHxRoughness, tmpvar_16).w * 16.0)
   * tmpvar_4)) * (_LightColor0.xyz * clamp (
    dot (tmpvar_6, _WorldSpaceLightPos0.xyz)
  , 0.0, 1.0)));
  color_13 = (color_13 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_7)
   * tmpvar_3) + (
    (((unity_SpecCube0_HDR.x * pow (tmpvar_11.w, unity_SpecCube0_HDR.y)) * tmpvar_11.xyz) * tmpvar_7)
   * 
    mix (tmpvar_4, vec3(clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)), tmpvar_15.yyy)
  )));
  vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = color_13;
  c_1.w = tmpvar_17.w;
  c_1.xyz = (color_13 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_18;
  xlat_varoutput_18.xyz = c_1.xyz;
  xlat_varoutput_18.w = 1.0;
  gl_FragData[0] = xlat_varoutput_18;
}


#endif
"
}
SubProgram "metal " {
// Stats: 68 math, 2 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 434
Matrix 192 [glstate_matrix_mvp]
Matrix 256 [unity_ObjectToWorld]
Matrix 320 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [unity_4LightPosX0]
Vector 32 [unity_4LightPosY0]
Vector 48 [unity_4LightPosZ0]
VectorHalf 64 [unity_4LightAtten0] 4
VectorHalf 72 [unity_LightColor] 4 8
VectorHalf 136 [unity_SHAr] 4
VectorHalf 144 [unity_SHAg] 4
VectorHalf 152 [unity_SHAb] 4
VectorHalf 160 [unity_SHBr] 4
VectorHalf 168 [unity_SHBg] 4
VectorHalf 176 [unity_SHBb] 4
VectorHalf 184 [unity_SHC] 4
VectorHalf 384 [unity_ColorSpaceLuminance] 4
Vector 400 [_MainTex_ST]
Vector 416 [_DetailAlbedoMap_ST]
ScalarHalf 432 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 unity_4LightPosX0;
  float4 unity_4LightPosY0;
  float4 unity_4LightPosZ0;
  half4 unity_4LightAtten0;
  half4 unity_LightColor[8];
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  half3 normalWorld_19;
  normalWorld_19 = half3(tmpvar_18);
  half4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = half(0.0);
  float3 lightColor0_21;
  lightColor0_21 = float3(_mtl_u.unity_LightColor[0].xyz);
  float3 lightColor1_22;
  lightColor1_22 = float3(_mtl_u.unity_LightColor[1].xyz);
  float3 lightColor2_23;
  lightColor2_23 = float3(_mtl_u.unity_LightColor[2].xyz);
  float3 lightColor3_24;
  lightColor3_24 = float3(_mtl_u.unity_LightColor[3].xyz);
  float4 lightAttenSq_25;
  lightAttenSq_25 = float4(_mtl_u.unity_4LightAtten0);
  float3 normal_26;
  normal_26 = float3(normalWorld_19);
  float3 col_27;
  float4 ndotl_28;
  float4 lengthSq_29;
  float4 tmpvar_30;
  tmpvar_30 = (_mtl_u.unity_4LightPosX0 - tmpvar_7.x);
  float4 tmpvar_31;
  tmpvar_31 = (_mtl_u.unity_4LightPosY0 - tmpvar_7.y);
  float4 tmpvar_32;
  tmpvar_32 = (_mtl_u.unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  float4 tmpvar_33;
  tmpvar_33 = max (float4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * rsqrt(lengthSq_29)));
  ndotl_28 = tmpvar_33;
  float4 tmpvar_34;
  tmpvar_34 = (tmpvar_33 * (1.0/((1.0 + 
    (lengthSq_29 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_34.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_34.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_34.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_34.w));
  ambientOrLightmapUV_20.xyz = half3(col_27);
  half3 ambient_35;
  ambient_35 = ambientOrLightmapUV_20.xyz;
  half4 tmpvar_36;
  tmpvar_36.w = half(1.0);
  tmpvar_36.xyz = normalWorld_19;
  half3 res_37;
  half3 x_38;
  x_38.x = dot (_mtl_u.unity_SHAr, tmpvar_36);
  x_38.y = dot (_mtl_u.unity_SHAg, tmpvar_36);
  x_38.z = dot (_mtl_u.unity_SHAb, tmpvar_36);
  half3 x1_39;
  half4 tmpvar_40;
  tmpvar_40 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_39.x = dot (_mtl_u.unity_SHBr, tmpvar_40);
  x1_39.y = dot (_mtl_u.unity_SHBg, tmpvar_40);
  x1_39.z = dot (_mtl_u.unity_SHBb, tmpvar_40);
  res_37 = (x_38 + (x1_39 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  bool tmpvar_41;
  tmpvar_41 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_41) {
    res_37 = max ((((half)1.055 * 
      pow (max (res_37, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  ambient_35 = (ambientOrLightmapUV_20.xyz + max ((half3)float3(0.0, 0.0, 0.0), res_37));
  ambientOrLightmapUV_20.xyz = ambient_35;
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_NHxRoughness;
uniform  sampler2D _EmissionMap;
uniform  samplerCube unity_SpecCube0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat22;
void main()
{
    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 6.0;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
    u_xlat16_0 = log2(u_xlat10_2.w);
    u_xlat0.x = u_xlat16_0 * unity_SpecCube0_HDR.y;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat0.xxx;
    u_xlat10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.yyy;
    u_xlat3.xyz = u_xlat10_3.yyy * vs_TEXCOORD5.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
    u_xlat22 = u_xlat0.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.y = (-u_xlat0.x) + 1.0;
    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat22 = (-u_xlat0.x) + _Glossiness;
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat5.xyz = _Color.xyz * u_xlat10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat10_0 = texture(unity_NHxRoughness, u_xlat0.yw);
    u_xlat16_0 = u_xlat10_0.w * 16.0;
    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 52 math, 6 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 o_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_7 * 0.5);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_7.zw;
  vec4 ambientOrLightmapUV_19;
  ambientOrLightmapUV_19.w = 0.0;
  vec3 col_20;
  vec4 ndotl_21;
  vec4 lengthSq_22;
  vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_6.x);
  vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_6.y);
  vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_22 = (tmpvar_23 * tmpvar_23);
  lengthSq_22 = (lengthSq_22 + (tmpvar_24 * tmpvar_24));
  lengthSq_22 = (lengthSq_22 + (tmpvar_25 * tmpvar_25));
  ndotl_21 = (tmpvar_23 * tmpvar_15.x);
  ndotl_21 = (ndotl_21 + (tmpvar_24 * tmpvar_15.y));
  ndotl_21 = (ndotl_21 + (tmpvar_25 * tmpvar_15.z));
  vec4 tmpvar_26;
  tmpvar_26 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_21 * inversesqrt(lengthSq_22)));
  ndotl_21 = tmpvar_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (1.0/((1.0 + 
    (lengthSq_22 * unity_4LightAtten0)
  ))));
  col_20 = (unity_LightColor[0].xyz * tmpvar_27.x);
  col_20 = (col_20 + (unity_LightColor[1].xyz * tmpvar_27.y));
  col_20 = (col_20 + (unity_LightColor[2].xyz * tmpvar_27.z));
  col_20 = (col_20 + (unity_LightColor[3].xyz * tmpvar_27.w));
  ambientOrLightmapUV_19.xyz = col_20;
  vec3 ambient_28;
  ambient_28 = ambientOrLightmapUV_19.xyz;
  vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = tmpvar_15;
  vec3 res_30;
  vec3 x_31;
  x_31.x = dot (unity_SHAr, tmpvar_29);
  x_31.y = dot (unity_SHAg, tmpvar_29);
  x_31.z = dot (unity_SHAb, tmpvar_29);
  vec3 x1_32;
  vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x1_32.x = dot (unity_SHBr, tmpvar_33);
  x1_32.y = dot (unity_SHBg, tmpvar_33);
  x1_32.z = dot (unity_SHBb, tmpvar_33);
  res_30 = (x_31 + (x1_32 + (unity_SHC.xyz * 
    ((tmpvar_15.x * tmpvar_15.x) - (tmpvar_15.y * tmpvar_15.y))
  )));
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    res_30 = max (((1.055 * 
      pow (max (res_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  ambient_28 = (col_20 + max (vec3(0.0, 0.0, 0.0), res_30));
  ambientOrLightmapUV_19.xyz = ambient_28;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_19;
  xlv_TEXCOORD6 = o_16;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  vec3 tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (1.0 - _Glossiness);
  tmpvar_8 = (xlv_TEXCOORD1 - (2.0 * (
    dot (tmpvar_6, xlv_TEXCOORD1)
   * tmpvar_6)));
  vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_8;
  tmpvar_10.w = ((tmpvar_9 * (1.7 - 
    (0.7 * tmpvar_9)
  )) * 6.0);
  vec4 tmpvar_11;
  tmpvar_11 = textureCubeLod (unity_SpecCube0, tmpvar_8, tmpvar_10.w);
  vec3 viewDir_12;
  viewDir_12 = -(xlv_TEXCOORD1);
  vec3 color_13;
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((viewDir_12 - (2.0 * 
    (dot (tmpvar_6, viewDir_12) * tmpvar_6)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_6, viewDir_12), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * tmpvar_14) * (tmpvar_14 * tmpvar_14));
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = tmpvar_9;
  color_13 = ((tmpvar_3 + (
    (texture2D (unity_NHxRoughness, tmpvar_16).w * 16.0)
   * tmpvar_4)) * ((_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x) * clamp (
    dot (tmpvar_6, _WorldSpaceLightPos0.xyz)
  , 0.0, 1.0)));
  color_13 = (color_13 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_7)
   * tmpvar_3) + (
    (((unity_SpecCube0_HDR.x * pow (tmpvar_11.w, unity_SpecCube0_HDR.y)) * tmpvar_11.xyz) * tmpvar_7)
   * 
    mix (tmpvar_4, vec3(clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)), tmpvar_15.yyy)
  )));
  vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = color_13;
  c_1.w = tmpvar_17.w;
  c_1.xyz = (color_13 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_18;
  xlat_varoutput_18.xyz = c_1.xyz;
  xlat_varoutput_18.w = 1.0;
  gl_FragData[0] = xlat_varoutput_18;
}


#endif
"
}
SubProgram "metal " {
// Stats: 71 math, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 450
Matrix 208 [glstate_matrix_mvp]
Matrix 272 [unity_ObjectToWorld]
Matrix 336 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 32 [unity_4LightPosX0]
Vector 48 [unity_4LightPosY0]
Vector 64 [unity_4LightPosZ0]
VectorHalf 80 [unity_4LightAtten0] 4
VectorHalf 88 [unity_LightColor] 4 8
VectorHalf 152 [unity_SHAr] 4
VectorHalf 160 [unity_SHAg] 4
VectorHalf 168 [unity_SHAb] 4
VectorHalf 176 [unity_SHBr] 4
VectorHalf 184 [unity_SHBg] 4
VectorHalf 192 [unity_SHBb] 4
VectorHalf 200 [unity_SHC] 4
VectorHalf 400 [unity_ColorSpaceLuminance] 4
Vector 416 [_MainTex_ST]
Vector 432 [_DetailAlbedoMap_ST]
ScalarHalf 448 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4 unity_4LightPosX0;
  float4 unity_4LightPosY0;
  float4 unity_4LightPosZ0;
  half4 unity_4LightAtten0;
  half4 unity_LightColor[8];
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float4 o_19;
  float4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  float2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _mtl_u._ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  half3 normalWorld_22;
  normalWorld_22 = half3(tmpvar_18);
  half4 ambientOrLightmapUV_23;
  ambientOrLightmapUV_23.w = half(0.0);
  float3 lightColor0_24;
  lightColor0_24 = float3(_mtl_u.unity_LightColor[0].xyz);
  float3 lightColor1_25;
  lightColor1_25 = float3(_mtl_u.unity_LightColor[1].xyz);
  float3 lightColor2_26;
  lightColor2_26 = float3(_mtl_u.unity_LightColor[2].xyz);
  float3 lightColor3_27;
  lightColor3_27 = float3(_mtl_u.unity_LightColor[3].xyz);
  float4 lightAttenSq_28;
  lightAttenSq_28 = float4(_mtl_u.unity_4LightAtten0);
  float3 normal_29;
  normal_29 = float3(normalWorld_22);
  float3 col_30;
  float4 ndotl_31;
  float4 lengthSq_32;
  float4 tmpvar_33;
  tmpvar_33 = (_mtl_u.unity_4LightPosX0 - tmpvar_7.x);
  float4 tmpvar_34;
  tmpvar_34 = (_mtl_u.unity_4LightPosY0 - tmpvar_7.y);
  float4 tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_32 = (tmpvar_33 * tmpvar_33);
  lengthSq_32 = (lengthSq_32 + (tmpvar_34 * tmpvar_34));
  lengthSq_32 = (lengthSq_32 + (tmpvar_35 * tmpvar_35));
  ndotl_31 = (tmpvar_33 * normal_29.x);
  ndotl_31 = (ndotl_31 + (tmpvar_34 * normal_29.y));
  ndotl_31 = (ndotl_31 + (tmpvar_35 * normal_29.z));
  float4 tmpvar_36;
  tmpvar_36 = max (float4(0.0, 0.0, 0.0, 0.0), (ndotl_31 * rsqrt(lengthSq_32)));
  ndotl_31 = tmpvar_36;
  float4 tmpvar_37;
  tmpvar_37 = (tmpvar_36 * (1.0/((1.0 + 
    (lengthSq_32 * lightAttenSq_28)
  ))));
  col_30 = (lightColor0_24 * tmpvar_37.x);
  col_30 = (col_30 + (lightColor1_25 * tmpvar_37.y));
  col_30 = (col_30 + (lightColor2_26 * tmpvar_37.z));
  col_30 = (col_30 + (lightColor3_27 * tmpvar_37.w));
  ambientOrLightmapUV_23.xyz = half3(col_30);
  half3 ambient_38;
  ambient_38 = ambientOrLightmapUV_23.xyz;
  half4 tmpvar_39;
  tmpvar_39.w = half(1.0);
  tmpvar_39.xyz = normalWorld_22;
  half3 res_40;
  half3 x_41;
  x_41.x = dot (_mtl_u.unity_SHAr, tmpvar_39);
  x_41.y = dot (_mtl_u.unity_SHAg, tmpvar_39);
  x_41.z = dot (_mtl_u.unity_SHAb, tmpvar_39);
  half3 x1_42;
  half4 tmpvar_43;
  tmpvar_43 = (normalWorld_22.xyzz * normalWorld_22.yzzx);
  x1_42.x = dot (_mtl_u.unity_SHBr, tmpvar_43);
  x1_42.y = dot (_mtl_u.unity_SHBg, tmpvar_43);
  x1_42.z = dot (_mtl_u.unity_SHBb, tmpvar_43);
  res_40 = (x_41 + (x1_42 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_22.x * normalWorld_22.x) - (normalWorld_22.y * normalWorld_22.y))
  )));
  bool tmpvar_44;
  tmpvar_44 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_44) {
    res_40 = max ((((half)1.055 * 
      pow (max (res_40, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  ambient_38 = (ambientOrLightmapUV_23.xyz + max ((half3)float3(0.0, 0.0, 0.0), res_40));
  ambientOrLightmapUV_23.xyz = ambient_38;
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_23;
  _mtl_o.xlv_TEXCOORD6 = o_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat2.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat2.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat2.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat3.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat3.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat3.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat3.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat3.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat22 = u_xlat2.y * u_xlat2.y;
    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat2);
    u_xlat4.y = dot(unity_SHAg, u_xlat2);
    u_xlat4.z = dot(unity_SHAb, u_xlat2);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.xyz = log2(u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat4.xyz = exp2(u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : u_xlat3.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
    u_xlat4 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_NHxRoughness;
uniform  sampler2D _EmissionMap;
uniform  samplerCube unity_SpecCube0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
float u_xlat8;
float u_xlat22;
void main()
{
    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 6.0;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
    u_xlat16_0 = log2(u_xlat10_2.w);
    u_xlat0.x = u_xlat16_0 * unity_SpecCube0_HDR.y;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat0.xxx;
    u_xlat10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.yyy;
    u_xlat3.xyz = u_xlat10_3.yyy * vs_TEXCOORD5.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
    u_xlat22 = u_xlat0.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.y = (-u_xlat0.x) + 1.0;
    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat8 = (-u_xlat1.x) + _Glossiness;
    u_xlat8 = u_xlat8 + 1.0;
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat5.xyz = _Color.xyz * u_xlat10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat1.xzw = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat5.xyz = vec3(u_xlat8) + (-u_xlat4.xyz);
    u_xlat5.xyz = u_xlat0.zzz * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat10_6 = texture(unity_NHxRoughness, u_xlat0.yw);
    u_xlat16_7 = u_xlat10_6.w * 16.0;
    u_xlat7.xyz = vec3(u_xlat16_7) * u_xlat4.xyz + u_xlat1.xzw;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.xzw + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.xyz = u_xlat10_2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 40 math, 4 textures
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 ambientOrLightmapUV_16;
  ambientOrLightmapUV_16 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_17;
  ambient_17 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_15;
  vec3 res_19;
  vec3 x_20;
  x_20.x = dot (unity_SHAr, tmpvar_18);
  x_20.y = dot (unity_SHAg, tmpvar_18);
  x_20.z = dot (unity_SHAb, tmpvar_18);
  vec3 x1_21;
  vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  res_19 = (x_20 + (x1_21 + (unity_SHC.xyz * 
    ((tmpvar_15.x * tmpvar_15.x) - (tmpvar_15.y * tmpvar_15.y))
  )));
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    res_19 = max (((1.055 * 
      pow (max (res_19, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  ambient_17 = max (vec3(0.0, 0.0, 0.0), res_19);
  ambientOrLightmapUV_16.xyz = ambient_17;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_16;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_IndirectSpecColor;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  vec3 viewDir_8;
  viewDir_8 = -(xlv_TEXCOORD1);
  vec3 color_9;
  vec2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_8 - (2.0 * 
    (dot (tmpvar_6, viewDir_8) * tmpvar_6)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_10.y = (1.0 - clamp (dot (tmpvar_6, viewDir_8), 0.0, 1.0));
  vec2 tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10));
  vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (1.0 - _Glossiness);
  color_9 = ((tmpvar_3 + (
    (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0)
   * tmpvar_4)) * (_LightColor0.xyz * clamp (
    dot (tmpvar_6, _WorldSpaceLightPos0.xyz)
  , 0.0, 1.0)));
  color_9 = (color_9 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_7)
   * tmpvar_3) + (
    (unity_IndirectSpecColor.xyz * tmpvar_7)
   * 
    mix (tmpvar_4, vec3(clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)), tmpvar_11.yyy)
  )));
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = color_9;
  c_1.w = tmpvar_13.w;
  c_1.xyz = (color_9 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = c_1.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "metal " {
// Stats: 41 math, 2 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 322
Matrix 80 [glstate_matrix_mvp]
Matrix 144 [unity_ObjectToWorld]
Matrix 208 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHAr] 4
VectorHalf 24 [unity_SHAg] 4
VectorHalf 32 [unity_SHAb] 4
VectorHalf 40 [unity_SHBr] 4
VectorHalf 48 [unity_SHBg] 4
VectorHalf 56 [unity_SHBb] 4
VectorHalf 64 [unity_SHC] 4
VectorHalf 272 [unity_ColorSpaceLuminance] 4
Vector 288 [_MainTex_ST]
Vector 304 [_DetailAlbedoMap_ST]
ScalarHalf 320 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  half3 normalWorld_19;
  normalWorld_19 = half3(tmpvar_18);
  half4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 ambient_21;
  ambient_21 = half3(float3(0.0, 0.0, 0.0));
  half4 tmpvar_22;
  tmpvar_22.w = half(1.0);
  tmpvar_22.xyz = normalWorld_19;
  half3 res_23;
  half3 x_24;
  x_24.x = dot (_mtl_u.unity_SHAr, tmpvar_22);
  x_24.y = dot (_mtl_u.unity_SHAg, tmpvar_22);
  x_24.z = dot (_mtl_u.unity_SHAb, tmpvar_22);
  half3 x1_25;
  half4 tmpvar_26;
  tmpvar_26 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_25.x = dot (_mtl_u.unity_SHBr, tmpvar_26);
  x1_25.y = dot (_mtl_u.unity_SHBg, tmpvar_26);
  x1_25.z = dot (_mtl_u.unity_SHBb, tmpvar_26);
  res_23 = (x_24 + (x1_25 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  bool tmpvar_27;
  tmpvar_27 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_27) {
    res_23 = max ((((half)1.055 * 
      pow (max (res_23, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  ambient_21 = max ((half3)float3(0.0, 0.0, 0.0), res_23);
  ambientOrLightmapUV_20.xyz = ambient_21;
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_IndirectSpecColor;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_NHxRoughness;
uniform  sampler2D _EmissionMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat21 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat1.x = u_xlat21 + u_xlat21;
    u_xlat21 = u_xlat21;
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat2.y = (-u_xlat21) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * (-u_xlat1.xxx) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat2.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.xy = u_xlat2.xy * u_xlat2.xy;
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat22 = (-u_xlat21) + _Glossiness;
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat4.xyz = vec3(u_xlat22) + (-u_xlat3.xyz);
    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz + u_xlat3.xyz;
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat5.xzw = u_xlat10_5.yyy * unity_IndirectSpecColor.xyz;
    u_xlat6.xyz = u_xlat10_5.yyy * vs_TEXCOORD5.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xzw;
    u_xlat4.xyz = u_xlat6.xyz * u_xlat2.xyz + u_xlat4.xyz;
    u_xlat1.z = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xz);
    u_xlat16_21 = u_xlat10_1.w * 16.0;
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat4.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 41 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 o_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_7 * 0.5);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_7.zw;
  vec4 ambientOrLightmapUV_19;
  ambientOrLightmapUV_19 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_20;
  ambient_20 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_15;
  vec3 res_22;
  vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_21);
  x_23.y = dot (unity_SHAg, tmpvar_21);
  x_23.z = dot (unity_SHAb, tmpvar_21);
  vec3 x1_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  res_22 = (x_23 + (x1_24 + (unity_SHC.xyz * 
    ((tmpvar_15.x * tmpvar_15.x) - (tmpvar_15.y * tmpvar_15.y))
  )));
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    res_22 = max (((1.055 * 
      pow (max (res_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  ambient_20 = max (vec3(0.0, 0.0, 0.0), res_22);
  ambientOrLightmapUV_19.xyz = ambient_20;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_19;
  xlv_TEXCOORD6 = o_16;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_IndirectSpecColor;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  vec3 viewDir_8;
  viewDir_8 = -(xlv_TEXCOORD1);
  vec3 color_9;
  vec2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_8 - (2.0 * 
    (dot (tmpvar_6, viewDir_8) * tmpvar_6)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_10.y = (1.0 - clamp (dot (tmpvar_6, viewDir_8), 0.0, 1.0));
  vec2 tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10));
  vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (1.0 - _Glossiness);
  color_9 = ((tmpvar_3 + (
    (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0)
   * tmpvar_4)) * ((_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x) * clamp (
    dot (tmpvar_6, _WorldSpaceLightPos0.xyz)
  , 0.0, 1.0)));
  color_9 = (color_9 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_7)
   * tmpvar_3) + (
    (unity_IndirectSpecColor.xyz * tmpvar_7)
   * 
    mix (tmpvar_4, vec3(clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)), tmpvar_11.yyy)
  )));
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = color_9;
  c_1.w = tmpvar_13.w;
  c_1.xyz = (color_9 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = c_1.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "metal " {
// Stats: 44 math, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 338
Matrix 96 [glstate_matrix_mvp]
Matrix 160 [unity_ObjectToWorld]
Matrix 224 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
VectorHalf 32 [unity_SHAr] 4
VectorHalf 40 [unity_SHAg] 4
VectorHalf 48 [unity_SHAb] 4
VectorHalf 56 [unity_SHBr] 4
VectorHalf 64 [unity_SHBg] 4
VectorHalf 72 [unity_SHBb] 4
VectorHalf 80 [unity_SHC] 4
VectorHalf 288 [unity_ColorSpaceLuminance] 4
Vector 304 [_MainTex_ST]
Vector 320 [_DetailAlbedoMap_ST]
ScalarHalf 336 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float4 o_19;
  float4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  float2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _mtl_u._ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  half3 normalWorld_22;
  normalWorld_22 = half3(tmpvar_18);
  half4 ambientOrLightmapUV_23;
  ambientOrLightmapUV_23 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 ambient_24;
  ambient_24 = half3(float3(0.0, 0.0, 0.0));
  half4 tmpvar_25;
  tmpvar_25.w = half(1.0);
  tmpvar_25.xyz = normalWorld_22;
  half3 res_26;
  half3 x_27;
  x_27.x = dot (_mtl_u.unity_SHAr, tmpvar_25);
  x_27.y = dot (_mtl_u.unity_SHAg, tmpvar_25);
  x_27.z = dot (_mtl_u.unity_SHAb, tmpvar_25);
  half3 x1_28;
  half4 tmpvar_29;
  tmpvar_29 = (normalWorld_22.xyzz * normalWorld_22.yzzx);
  x1_28.x = dot (_mtl_u.unity_SHBr, tmpvar_29);
  x1_28.y = dot (_mtl_u.unity_SHBg, tmpvar_29);
  x1_28.z = dot (_mtl_u.unity_SHBb, tmpvar_29);
  res_26 = (x_27 + (x1_28 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_22.x * normalWorld_22.x) - (normalWorld_22.y * normalWorld_22.y))
  )));
  bool tmpvar_30;
  tmpvar_30 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_30) {
    res_26 = max ((((half)1.055 * 
      pow (max (res_26, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  ambient_24 = max ((half3)float3(0.0, 0.0, 0.0), res_26);
  ambientOrLightmapUV_23.xyz = ambient_24;
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_23;
  _mtl_o.xlv_TEXCOORD6 = o_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat2.x = u_xlat1.y * u_xlat1.y;
    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat1.xyz;
    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_IndirectSpecColor;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_NHxRoughness;
uniform  sampler2D _EmissionMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat18 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat1.x = u_xlat18 + u_xlat18;
    u_xlat18 = u_xlat18;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat2.y = (-u_xlat18) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * (-u_xlat1.xxx) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6.xy = u_xlat2.xy * u_xlat2.xy;
    u_xlat1.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat6.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat12 = (-u_xlat6.x) + _Glossiness;
    u_xlat12 = u_xlat12 + 1.0;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat6.xyz = vec3(u_xlat12) + (-u_xlat3.xyz);
    u_xlat6.xyz = u_xlat1.yyy * u_xlat6.xyz + u_xlat3.xyz;
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat4.xzw = u_xlat10_4.yyy * unity_IndirectSpecColor.xyz;
    u_xlat5.xyz = u_xlat10_4.yyy * vs_TEXCOORD5.xyz;
    u_xlat6.xyz = u_xlat6.xyz * u_xlat4.xzw;
    u_xlat6.xyz = u_xlat5.xyz * u_xlat2.xyz + u_xlat6.xyz;
    u_xlat1.z = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xz);
    u_xlat16_1 = u_xlat10_1.w * 16.0;
    u_xlat1.xyz = vec3(u_xlat16_1) * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.xyz = u_xlat10_2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat6.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 40 math, 4 textures
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 ambientOrLightmapUV_16;
  ambientOrLightmapUV_16.w = 0.0;
  vec3 col_17;
  vec4 ndotl_18;
  vec4 lengthSq_19;
  vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosX0 - tmpvar_6.x);
  vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosY0 - tmpvar_6.y);
  vec4 tmpvar_22;
  tmpvar_22 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_19 = (tmpvar_20 * tmpvar_20);
  lengthSq_19 = (lengthSq_19 + (tmpvar_21 * tmpvar_21));
  lengthSq_19 = (lengthSq_19 + (tmpvar_22 * tmpvar_22));
  ndotl_18 = (tmpvar_20 * tmpvar_15.x);
  ndotl_18 = (ndotl_18 + (tmpvar_21 * tmpvar_15.y));
  ndotl_18 = (ndotl_18 + (tmpvar_22 * tmpvar_15.z));
  vec4 tmpvar_23;
  tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_18 * inversesqrt(lengthSq_19)));
  ndotl_18 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
    (lengthSq_19 * unity_4LightAtten0)
  ))));
  col_17 = (unity_LightColor[0].xyz * tmpvar_24.x);
  col_17 = (col_17 + (unity_LightColor[1].xyz * tmpvar_24.y));
  col_17 = (col_17 + (unity_LightColor[2].xyz * tmpvar_24.z));
  col_17 = (col_17 + (unity_LightColor[3].xyz * tmpvar_24.w));
  ambientOrLightmapUV_16.xyz = col_17;
  vec3 ambient_25;
  ambient_25 = ambientOrLightmapUV_16.xyz;
  vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = tmpvar_15;
  vec3 res_27;
  vec3 x_28;
  x_28.x = dot (unity_SHAr, tmpvar_26);
  x_28.y = dot (unity_SHAg, tmpvar_26);
  x_28.z = dot (unity_SHAb, tmpvar_26);
  vec3 x1_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
    ((tmpvar_15.x * tmpvar_15.x) - (tmpvar_15.y * tmpvar_15.y))
  )));
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    res_27 = max (((1.055 * 
      pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  ambient_25 = (col_17 + max (vec3(0.0, 0.0, 0.0), res_27));
  ambientOrLightmapUV_16.xyz = ambient_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_16;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_IndirectSpecColor;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  vec3 viewDir_8;
  viewDir_8 = -(xlv_TEXCOORD1);
  vec3 color_9;
  vec2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_8 - (2.0 * 
    (dot (tmpvar_6, viewDir_8) * tmpvar_6)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_10.y = (1.0 - clamp (dot (tmpvar_6, viewDir_8), 0.0, 1.0));
  vec2 tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10));
  vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (1.0 - _Glossiness);
  color_9 = ((tmpvar_3 + (
    (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0)
   * tmpvar_4)) * (_LightColor0.xyz * clamp (
    dot (tmpvar_6, _WorldSpaceLightPos0.xyz)
  , 0.0, 1.0)));
  color_9 = (color_9 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_7)
   * tmpvar_3) + (
    (unity_IndirectSpecColor.xyz * tmpvar_7)
   * 
    mix (tmpvar_4, vec3(clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)), tmpvar_11.yyy)
  )));
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = color_9;
  c_1.w = tmpvar_13.w;
  c_1.xyz = (color_9 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = c_1.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "metal " {
// Stats: 68 math, 2 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 434
Matrix 192 [glstate_matrix_mvp]
Matrix 256 [unity_ObjectToWorld]
Matrix 320 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [unity_4LightPosX0]
Vector 32 [unity_4LightPosY0]
Vector 48 [unity_4LightPosZ0]
VectorHalf 64 [unity_4LightAtten0] 4
VectorHalf 72 [unity_LightColor] 4 8
VectorHalf 136 [unity_SHAr] 4
VectorHalf 144 [unity_SHAg] 4
VectorHalf 152 [unity_SHAb] 4
VectorHalf 160 [unity_SHBr] 4
VectorHalf 168 [unity_SHBg] 4
VectorHalf 176 [unity_SHBb] 4
VectorHalf 184 [unity_SHC] 4
VectorHalf 384 [unity_ColorSpaceLuminance] 4
Vector 400 [_MainTex_ST]
Vector 416 [_DetailAlbedoMap_ST]
ScalarHalf 432 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 unity_4LightPosX0;
  float4 unity_4LightPosY0;
  float4 unity_4LightPosZ0;
  half4 unity_4LightAtten0;
  half4 unity_LightColor[8];
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  half3 normalWorld_19;
  normalWorld_19 = half3(tmpvar_18);
  half4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = half(0.0);
  float3 lightColor0_21;
  lightColor0_21 = float3(_mtl_u.unity_LightColor[0].xyz);
  float3 lightColor1_22;
  lightColor1_22 = float3(_mtl_u.unity_LightColor[1].xyz);
  float3 lightColor2_23;
  lightColor2_23 = float3(_mtl_u.unity_LightColor[2].xyz);
  float3 lightColor3_24;
  lightColor3_24 = float3(_mtl_u.unity_LightColor[3].xyz);
  float4 lightAttenSq_25;
  lightAttenSq_25 = float4(_mtl_u.unity_4LightAtten0);
  float3 normal_26;
  normal_26 = float3(normalWorld_19);
  float3 col_27;
  float4 ndotl_28;
  float4 lengthSq_29;
  float4 tmpvar_30;
  tmpvar_30 = (_mtl_u.unity_4LightPosX0 - tmpvar_7.x);
  float4 tmpvar_31;
  tmpvar_31 = (_mtl_u.unity_4LightPosY0 - tmpvar_7.y);
  float4 tmpvar_32;
  tmpvar_32 = (_mtl_u.unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  float4 tmpvar_33;
  tmpvar_33 = max (float4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * rsqrt(lengthSq_29)));
  ndotl_28 = tmpvar_33;
  float4 tmpvar_34;
  tmpvar_34 = (tmpvar_33 * (1.0/((1.0 + 
    (lengthSq_29 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_34.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_34.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_34.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_34.w));
  ambientOrLightmapUV_20.xyz = half3(col_27);
  half3 ambient_35;
  ambient_35 = ambientOrLightmapUV_20.xyz;
  half4 tmpvar_36;
  tmpvar_36.w = half(1.0);
  tmpvar_36.xyz = normalWorld_19;
  half3 res_37;
  half3 x_38;
  x_38.x = dot (_mtl_u.unity_SHAr, tmpvar_36);
  x_38.y = dot (_mtl_u.unity_SHAg, tmpvar_36);
  x_38.z = dot (_mtl_u.unity_SHAb, tmpvar_36);
  half3 x1_39;
  half4 tmpvar_40;
  tmpvar_40 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_39.x = dot (_mtl_u.unity_SHBr, tmpvar_40);
  x1_39.y = dot (_mtl_u.unity_SHBg, tmpvar_40);
  x1_39.z = dot (_mtl_u.unity_SHBb, tmpvar_40);
  res_37 = (x_38 + (x1_39 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  bool tmpvar_41;
  tmpvar_41 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_41) {
    res_37 = max ((((half)1.055 * 
      pow (max (res_37, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  ambient_35 = (ambientOrLightmapUV_20.xyz + max ((half3)float3(0.0, 0.0, 0.0), res_37));
  ambientOrLightmapUV_20.xyz = ambient_35;
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_IndirectSpecColor;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_NHxRoughness;
uniform  sampler2D _EmissionMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat21 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat1.x = u_xlat21 + u_xlat21;
    u_xlat21 = u_xlat21;
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat2.y = (-u_xlat21) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * (-u_xlat1.xxx) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat2.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.xy = u_xlat2.xy * u_xlat2.xy;
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat22 = (-u_xlat21) + _Glossiness;
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat4.xyz = vec3(u_xlat22) + (-u_xlat3.xyz);
    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz + u_xlat3.xyz;
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat5.xzw = u_xlat10_5.yyy * unity_IndirectSpecColor.xyz;
    u_xlat6.xyz = u_xlat10_5.yyy * vs_TEXCOORD5.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xzw;
    u_xlat4.xyz = u_xlat6.xyz * u_xlat2.xyz + u_xlat4.xyz;
    u_xlat1.z = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xz);
    u_xlat16_21 = u_xlat10_1.w * 16.0;
    u_xlat1.xyz = vec3(u_xlat16_21) * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat4.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 41 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 o_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_7 * 0.5);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_7.zw;
  vec4 ambientOrLightmapUV_19;
  ambientOrLightmapUV_19.w = 0.0;
  vec3 col_20;
  vec4 ndotl_21;
  vec4 lengthSq_22;
  vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_6.x);
  vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_6.y);
  vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_22 = (tmpvar_23 * tmpvar_23);
  lengthSq_22 = (lengthSq_22 + (tmpvar_24 * tmpvar_24));
  lengthSq_22 = (lengthSq_22 + (tmpvar_25 * tmpvar_25));
  ndotl_21 = (tmpvar_23 * tmpvar_15.x);
  ndotl_21 = (ndotl_21 + (tmpvar_24 * tmpvar_15.y));
  ndotl_21 = (ndotl_21 + (tmpvar_25 * tmpvar_15.z));
  vec4 tmpvar_26;
  tmpvar_26 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_21 * inversesqrt(lengthSq_22)));
  ndotl_21 = tmpvar_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (1.0/((1.0 + 
    (lengthSq_22 * unity_4LightAtten0)
  ))));
  col_20 = (unity_LightColor[0].xyz * tmpvar_27.x);
  col_20 = (col_20 + (unity_LightColor[1].xyz * tmpvar_27.y));
  col_20 = (col_20 + (unity_LightColor[2].xyz * tmpvar_27.z));
  col_20 = (col_20 + (unity_LightColor[3].xyz * tmpvar_27.w));
  ambientOrLightmapUV_19.xyz = col_20;
  vec3 ambient_28;
  ambient_28 = ambientOrLightmapUV_19.xyz;
  vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = tmpvar_15;
  vec3 res_30;
  vec3 x_31;
  x_31.x = dot (unity_SHAr, tmpvar_29);
  x_31.y = dot (unity_SHAg, tmpvar_29);
  x_31.z = dot (unity_SHAb, tmpvar_29);
  vec3 x1_32;
  vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x1_32.x = dot (unity_SHBr, tmpvar_33);
  x1_32.y = dot (unity_SHBg, tmpvar_33);
  x1_32.z = dot (unity_SHBb, tmpvar_33);
  res_30 = (x_31 + (x1_32 + (unity_SHC.xyz * 
    ((tmpvar_15.x * tmpvar_15.x) - (tmpvar_15.y * tmpvar_15.y))
  )));
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    res_30 = max (((1.055 * 
      pow (max (res_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  ambient_28 = (col_20 + max (vec3(0.0, 0.0, 0.0), res_30));
  ambientOrLightmapUV_19.xyz = ambient_28;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_19;
  xlv_TEXCOORD6 = o_16;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_IndirectSpecColor;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  float tmpvar_5;
  tmpvar_5 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_3 = (tmpvar_2 * tmpvar_5);
  vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  vec3 viewDir_8;
  viewDir_8 = -(xlv_TEXCOORD1);
  vec3 color_9;
  vec2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_8 - (2.0 * 
    (dot (tmpvar_6, viewDir_8) * tmpvar_6)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_10.y = (1.0 - clamp (dot (tmpvar_6, viewDir_8), 0.0, 1.0));
  vec2 tmpvar_11;
  tmpvar_11 = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10));
  vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_11.x;
  tmpvar_12.y = (1.0 - _Glossiness);
  color_9 = ((tmpvar_3 + (
    (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0)
   * tmpvar_4)) * ((_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x) * clamp (
    dot (tmpvar_6, _WorldSpaceLightPos0.xyz)
  , 0.0, 1.0)));
  color_9 = (color_9 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_7)
   * tmpvar_3) + (
    (unity_IndirectSpecColor.xyz * tmpvar_7)
   * 
    mix (tmpvar_4, vec3(clamp ((_Glossiness + (1.0 - tmpvar_5)), 0.0, 1.0)), tmpvar_11.yyy)
  )));
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = color_9;
  c_1.w = tmpvar_13.w;
  c_1.xyz = (color_9 + (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz));
  vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = c_1.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "metal " {
// Stats: 71 math, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 450
Matrix 208 [glstate_matrix_mvp]
Matrix 272 [unity_ObjectToWorld]
Matrix 336 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 32 [unity_4LightPosX0]
Vector 48 [unity_4LightPosY0]
Vector 64 [unity_4LightPosZ0]
VectorHalf 80 [unity_4LightAtten0] 4
VectorHalf 88 [unity_LightColor] 4 8
VectorHalf 152 [unity_SHAr] 4
VectorHalf 160 [unity_SHAg] 4
VectorHalf 168 [unity_SHAb] 4
VectorHalf 176 [unity_SHBr] 4
VectorHalf 184 [unity_SHBg] 4
VectorHalf 192 [unity_SHBb] 4
VectorHalf 200 [unity_SHC] 4
VectorHalf 400 [unity_ColorSpaceLuminance] 4
Vector 416 [_MainTex_ST]
Vector 432 [_DetailAlbedoMap_ST]
ScalarHalf 448 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4 unity_4LightPosX0;
  float4 unity_4LightPosY0;
  float4 unity_4LightPosZ0;
  half4 unity_4LightAtten0;
  half4 unity_LightColor[8];
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float4 o_19;
  float4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  float2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _mtl_u._ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  half3 normalWorld_22;
  normalWorld_22 = half3(tmpvar_18);
  half4 ambientOrLightmapUV_23;
  ambientOrLightmapUV_23.w = half(0.0);
  float3 lightColor0_24;
  lightColor0_24 = float3(_mtl_u.unity_LightColor[0].xyz);
  float3 lightColor1_25;
  lightColor1_25 = float3(_mtl_u.unity_LightColor[1].xyz);
  float3 lightColor2_26;
  lightColor2_26 = float3(_mtl_u.unity_LightColor[2].xyz);
  float3 lightColor3_27;
  lightColor3_27 = float3(_mtl_u.unity_LightColor[3].xyz);
  float4 lightAttenSq_28;
  lightAttenSq_28 = float4(_mtl_u.unity_4LightAtten0);
  float3 normal_29;
  normal_29 = float3(normalWorld_22);
  float3 col_30;
  float4 ndotl_31;
  float4 lengthSq_32;
  float4 tmpvar_33;
  tmpvar_33 = (_mtl_u.unity_4LightPosX0 - tmpvar_7.x);
  float4 tmpvar_34;
  tmpvar_34 = (_mtl_u.unity_4LightPosY0 - tmpvar_7.y);
  float4 tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_32 = (tmpvar_33 * tmpvar_33);
  lengthSq_32 = (lengthSq_32 + (tmpvar_34 * tmpvar_34));
  lengthSq_32 = (lengthSq_32 + (tmpvar_35 * tmpvar_35));
  ndotl_31 = (tmpvar_33 * normal_29.x);
  ndotl_31 = (ndotl_31 + (tmpvar_34 * normal_29.y));
  ndotl_31 = (ndotl_31 + (tmpvar_35 * normal_29.z));
  float4 tmpvar_36;
  tmpvar_36 = max (float4(0.0, 0.0, 0.0, 0.0), (ndotl_31 * rsqrt(lengthSq_32)));
  ndotl_31 = tmpvar_36;
  float4 tmpvar_37;
  tmpvar_37 = (tmpvar_36 * (1.0/((1.0 + 
    (lengthSq_32 * lightAttenSq_28)
  ))));
  col_30 = (lightColor0_24 * tmpvar_37.x);
  col_30 = (col_30 + (lightColor1_25 * tmpvar_37.y));
  col_30 = (col_30 + (lightColor2_26 * tmpvar_37.z));
  col_30 = (col_30 + (lightColor3_27 * tmpvar_37.w));
  ambientOrLightmapUV_23.xyz = half3(col_30);
  half3 ambient_38;
  ambient_38 = ambientOrLightmapUV_23.xyz;
  half4 tmpvar_39;
  tmpvar_39.w = half(1.0);
  tmpvar_39.xyz = normalWorld_22;
  half3 res_40;
  half3 x_41;
  x_41.x = dot (_mtl_u.unity_SHAr, tmpvar_39);
  x_41.y = dot (_mtl_u.unity_SHAg, tmpvar_39);
  x_41.z = dot (_mtl_u.unity_SHAb, tmpvar_39);
  half3 x1_42;
  half4 tmpvar_43;
  tmpvar_43 = (normalWorld_22.xyzz * normalWorld_22.yzzx);
  x1_42.x = dot (_mtl_u.unity_SHBr, tmpvar_43);
  x1_42.y = dot (_mtl_u.unity_SHBg, tmpvar_43);
  x1_42.z = dot (_mtl_u.unity_SHBb, tmpvar_43);
  res_40 = (x_41 + (x1_42 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_22.x * normalWorld_22.x) - (normalWorld_22.y * normalWorld_22.y))
  )));
  bool tmpvar_44;
  tmpvar_44 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_44) {
    res_40 = max ((((half)1.055 * 
      pow (max (res_40, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  ambient_38 = (ambientOrLightmapUV_23.xyz + max ((half3)float3(0.0, 0.0, 0.0), res_40));
  ambientOrLightmapUV_23.xyz = ambient_38;
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_23;
  _mtl_o.xlv_TEXCOORD6 = o_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat2.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat2.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat2.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat3.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat3.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat3.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat3.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat3.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat22 = u_xlat2.y * u_xlat2.y;
    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat2);
    u_xlat4.y = dot(unity_SHAg, u_xlat2);
    u_xlat4.z = dot(unity_SHAb, u_xlat2);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.xyz = log2(u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat4.xyz = exp2(u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : u_xlat3.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
    u_xlat4 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_IndirectSpecColor;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 _EmissionColor;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_NHxRoughness;
uniform  sampler2D _EmissionMap;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat18 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat1.x = u_xlat18 + u_xlat18;
    u_xlat18 = u_xlat18;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat2.y = (-u_xlat18) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * (-u_xlat1.xxx) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6.xy = u_xlat2.xy * u_xlat2.xy;
    u_xlat1.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat6.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat12 = (-u_xlat6.x) + _Glossiness;
    u_xlat12 = u_xlat12 + 1.0;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat6.xyz = vec3(u_xlat12) + (-u_xlat3.xyz);
    u_xlat6.xyz = u_xlat1.yyy * u_xlat6.xyz + u_xlat3.xyz;
    u_xlat10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat4.xzw = u_xlat10_4.yyy * unity_IndirectSpecColor.xyz;
    u_xlat5.xyz = u_xlat10_4.yyy * vs_TEXCOORD5.xyz;
    u_xlat6.xyz = u_xlat6.xyz * u_xlat4.xzw;
    u_xlat6.xyz = u_xlat5.xyz * u_xlat2.xyz + u_xlat6.xyz;
    u_xlat1.z = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xz);
    u_xlat16_1 = u_xlat10_1.w * 16.0;
    u_xlat1.xyz = vec3(u_xlat16_1) * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.xyz = u_xlat10_2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat6.xyz;
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 50 math, 4 textures
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 ambientOrLightmapUV_16;
  ambientOrLightmapUV_16 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_17;
  ambient_17 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_15;
  vec3 res_19;
  vec3 x_20;
  x_20.x = dot (unity_SHAr, tmpvar_18);
  x_20.y = dot (unity_SHAg, tmpvar_18);
  x_20.z = dot (unity_SHAb, tmpvar_18);
  vec3 x1_21;
  vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  res_19 = (x_20 + (x1_21 + (unity_SHC.xyz * 
    ((tmpvar_15.x * tmpvar_15.x) - (tmpvar_15.y * tmpvar_15.y))
  )));
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    res_19 = max (((1.055 * 
      pow (max (res_19, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  ambient_17 = max (vec3(0.0, 0.0, 0.0), res_19);
  ambientOrLightmapUV_16.xyz = ambient_17;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_16;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  float tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (tmpvar_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_8;
  diffColor_8 = ((tmpvar_4 * tmpvar_6) * tmpvar_2);
  float tmpvar_9;
  tmpvar_9 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  vec3 tmpvar_10;
  float tmpvar_11;
  tmpvar_11 = (1.0 - _Glossiness);
  tmpvar_10 = (xlv_TEXCOORD1 - (2.0 * (
    dot (tmpvar_7, xlv_TEXCOORD1)
   * tmpvar_7)));
  vec4 tmpvar_12;
  tmpvar_12.xyz = tmpvar_10;
  tmpvar_12.w = ((tmpvar_11 * (1.7 - 
    (0.7 * tmpvar_11)
  )) * 6.0);
  vec4 tmpvar_13;
  tmpvar_13 = textureCubeLod (unity_SpecCube0, tmpvar_10, tmpvar_12.w);
  vec3 viewDir_14;
  viewDir_14 = -(xlv_TEXCOORD1);
  vec3 color_15;
  vec2 tmpvar_16;
  tmpvar_16.x = dot ((viewDir_14 - (2.0 * 
    (dot (tmpvar_7, viewDir_14) * tmpvar_7)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_16.y = (1.0 - clamp (dot (tmpvar_7, viewDir_14), 0.0, 1.0));
  vec2 tmpvar_17;
  tmpvar_17 = ((tmpvar_16 * tmpvar_16) * (tmpvar_16 * tmpvar_16));
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = tmpvar_11;
  color_15 = ((diffColor_8 + (
    (texture2D (unity_NHxRoughness, tmpvar_18).w * 16.0)
   * tmpvar_5)) * (_LightColor0.xyz * clamp (
    dot (tmpvar_7, _WorldSpaceLightPos0.xyz)
  , 0.0, 1.0)));
  color_15 = (color_15 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * diffColor_8) + (
    (((unity_SpecCube0_HDR.x * pow (tmpvar_13.w, unity_SpecCube0_HDR.y)) * tmpvar_13.xyz) * tmpvar_9)
   * 
    mix (tmpvar_5, vec3(clamp ((_Glossiness + (1.0 - tmpvar_6)), 0.0, 1.0)), tmpvar_17.yyy)
  )));
  vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = color_15;
  c_1.w = tmpvar_19.w;
  c_1.xyz = color_15;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_20;
  xlat_varoutput_20.xyz = c_1.xyz;
  xlat_varoutput_20.w = tmpvar_2;
  gl_FragData[0] = xlat_varoutput_20;
}


#endif
"
}
SubProgram "metal " {
// Stats: 41 math, 2 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 322
Matrix 80 [glstate_matrix_mvp]
Matrix 144 [unity_ObjectToWorld]
Matrix 208 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [unity_SHAr] 4
VectorHalf 24 [unity_SHAg] 4
VectorHalf 32 [unity_SHAb] 4
VectorHalf 40 [unity_SHBr] 4
VectorHalf 48 [unity_SHBg] 4
VectorHalf 56 [unity_SHBb] 4
VectorHalf 64 [unity_SHC] 4
VectorHalf 272 [unity_ColorSpaceLuminance] 4
Vector 288 [_MainTex_ST]
Vector 304 [_DetailAlbedoMap_ST]
ScalarHalf 320 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  half3 normalWorld_19;
  normalWorld_19 = half3(tmpvar_18);
  half4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 ambient_21;
  ambient_21 = half3(float3(0.0, 0.0, 0.0));
  half4 tmpvar_22;
  tmpvar_22.w = half(1.0);
  tmpvar_22.xyz = normalWorld_19;
  half3 res_23;
  half3 x_24;
  x_24.x = dot (_mtl_u.unity_SHAr, tmpvar_22);
  x_24.y = dot (_mtl_u.unity_SHAg, tmpvar_22);
  x_24.z = dot (_mtl_u.unity_SHAb, tmpvar_22);
  half3 x1_25;
  half4 tmpvar_26;
  tmpvar_26 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_25.x = dot (_mtl_u.unity_SHBr, tmpvar_26);
  x1_25.y = dot (_mtl_u.unity_SHBg, tmpvar_26);
  x1_25.z = dot (_mtl_u.unity_SHBb, tmpvar_26);
  res_23 = (x_24 + (x1_25 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  bool tmpvar_27;
  tmpvar_27 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_27) {
    res_23 = max ((((half)1.055 * 
      pow (max (res_23, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  ambient_21 = max ((half3)float3(0.0, 0.0, 0.0), res_23);
  ambientOrLightmapUV_20.xyz = ambient_21;
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_NHxRoughness;
uniform  samplerCube unity_SpecCube0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump float u_xlat16_8;
float u_xlat25;
void main()
{
    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 6.0;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat25 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + vs_TEXCOORD1.xyz;
    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
    u_xlat16_0 = log2(u_xlat10_2.w);
    u_xlat0.x = u_xlat16_0 * unity_SpecCube0_HDR.y;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat0.xxx;
    u_xlat10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.yyy;
    u_xlat3.xyz = u_xlat10_3.yyy * vs_TEXCOORD5.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
    u_xlat25 = u_xlat0.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.y = (-u_xlat0.x) + 1.0;
    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat25 = (-u_xlat0.x) + _Glossiness;
    u_xlat25 = u_xlat25 + 1.0;
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat4 = u_xlat10_4.wxyz * _Color.wxyz;
    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat10_7 = texture(unity_NHxRoughness, u_xlat0.yw);
    u_xlat16_8 = u_xlat10_7.w * 16.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat4.yzw;
    u_xlat0.xzw = u_xlat4.xxx * u_xlat0.xzw;
    SV_Target0.w = u_xlat4.x;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat0.xzw + u_xlat2.xyz;
    u_xlat0.xyz = vec3(u_xlat16_8) * u_xlat5.xyz + u_xlat0.xzw;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 51 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 o_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_7 * 0.5);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_7.zw;
  vec4 ambientOrLightmapUV_19;
  ambientOrLightmapUV_19 = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 ambient_20;
  ambient_20 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_15;
  vec3 res_22;
  vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_21);
  x_23.y = dot (unity_SHAg, tmpvar_21);
  x_23.z = dot (unity_SHAb, tmpvar_21);
  vec3 x1_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  res_22 = (x_23 + (x1_24 + (unity_SHC.xyz * 
    ((tmpvar_15.x * tmpvar_15.x) - (tmpvar_15.y * tmpvar_15.y))
  )));
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    res_22 = max (((1.055 * 
      pow (max (res_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  ambient_20 = max (vec3(0.0, 0.0, 0.0), res_22);
  ambientOrLightmapUV_19.xyz = ambient_20;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_19;
  xlv_TEXCOORD6 = o_16;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  float tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (tmpvar_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_8;
  diffColor_8 = ((tmpvar_4 * tmpvar_6) * tmpvar_2);
  float tmpvar_9;
  tmpvar_9 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  vec3 tmpvar_10;
  float tmpvar_11;
  tmpvar_11 = (1.0 - _Glossiness);
  tmpvar_10 = (xlv_TEXCOORD1 - (2.0 * (
    dot (tmpvar_7, xlv_TEXCOORD1)
   * tmpvar_7)));
  vec4 tmpvar_12;
  tmpvar_12.xyz = tmpvar_10;
  tmpvar_12.w = ((tmpvar_11 * (1.7 - 
    (0.7 * tmpvar_11)
  )) * 6.0);
  vec4 tmpvar_13;
  tmpvar_13 = textureCubeLod (unity_SpecCube0, tmpvar_10, tmpvar_12.w);
  vec3 viewDir_14;
  viewDir_14 = -(xlv_TEXCOORD1);
  vec3 color_15;
  vec2 tmpvar_16;
  tmpvar_16.x = dot ((viewDir_14 - (2.0 * 
    (dot (tmpvar_7, viewDir_14) * tmpvar_7)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_16.y = (1.0 - clamp (dot (tmpvar_7, viewDir_14), 0.0, 1.0));
  vec2 tmpvar_17;
  tmpvar_17 = ((tmpvar_16 * tmpvar_16) * (tmpvar_16 * tmpvar_16));
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = tmpvar_11;
  color_15 = ((diffColor_8 + (
    (texture2D (unity_NHxRoughness, tmpvar_18).w * 16.0)
   * tmpvar_5)) * ((_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x) * clamp (
    dot (tmpvar_7, _WorldSpaceLightPos0.xyz)
  , 0.0, 1.0)));
  color_15 = (color_15 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * diffColor_8) + (
    (((unity_SpecCube0_HDR.x * pow (tmpvar_13.w, unity_SpecCube0_HDR.y)) * tmpvar_13.xyz) * tmpvar_9)
   * 
    mix (tmpvar_5, vec3(clamp ((_Glossiness + (1.0 - tmpvar_6)), 0.0, 1.0)), tmpvar_17.yyy)
  )));
  vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = color_15;
  c_1.w = tmpvar_19.w;
  c_1.xyz = color_15;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_20;
  xlat_varoutput_20.xyz = c_1.xyz;
  xlat_varoutput_20.w = tmpvar_2;
  gl_FragData[0] = xlat_varoutput_20;
}


#endif
"
}
SubProgram "metal " {
// Stats: 44 math, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 338
Matrix 96 [glstate_matrix_mvp]
Matrix 160 [unity_ObjectToWorld]
Matrix 224 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
VectorHalf 32 [unity_SHAr] 4
VectorHalf 40 [unity_SHAg] 4
VectorHalf 48 [unity_SHAb] 4
VectorHalf 56 [unity_SHBr] 4
VectorHalf 64 [unity_SHBg] 4
VectorHalf 72 [unity_SHBb] 4
VectorHalf 80 [unity_SHC] 4
VectorHalf 288 [unity_ColorSpaceLuminance] 4
Vector 304 [_MainTex_ST]
Vector 320 [_DetailAlbedoMap_ST]
ScalarHalf 336 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float4 o_19;
  float4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  float2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _mtl_u._ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  half3 normalWorld_22;
  normalWorld_22 = half3(tmpvar_18);
  half4 ambientOrLightmapUV_23;
  ambientOrLightmapUV_23 = half4(float4(0.0, 0.0, 0.0, 0.0));
  half3 ambient_24;
  ambient_24 = half3(float3(0.0, 0.0, 0.0));
  half4 tmpvar_25;
  tmpvar_25.w = half(1.0);
  tmpvar_25.xyz = normalWorld_22;
  half3 res_26;
  half3 x_27;
  x_27.x = dot (_mtl_u.unity_SHAr, tmpvar_25);
  x_27.y = dot (_mtl_u.unity_SHAg, tmpvar_25);
  x_27.z = dot (_mtl_u.unity_SHAb, tmpvar_25);
  half3 x1_28;
  half4 tmpvar_29;
  tmpvar_29 = (normalWorld_22.xyzz * normalWorld_22.yzzx);
  x1_28.x = dot (_mtl_u.unity_SHBr, tmpvar_29);
  x1_28.y = dot (_mtl_u.unity_SHBg, tmpvar_29);
  x1_28.z = dot (_mtl_u.unity_SHBb, tmpvar_29);
  res_26 = (x_27 + (x1_28 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_22.x * normalWorld_22.x) - (normalWorld_22.y * normalWorld_22.y))
  )));
  bool tmpvar_30;
  tmpvar_30 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_30) {
    res_26 = max ((((half)1.055 * 
      pow (max (res_26, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  ambient_24 = max ((half3)float3(0.0, 0.0, 0.0), res_26);
  ambientOrLightmapUV_23.xyz = ambient_24;
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_23;
  _mtl_o.xlv_TEXCOORD6 = o_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    vs_TEXCOORD1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.w = 0.0;
    u_xlat2.x = u_xlat1.y * u_xlat1.y;
    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat1.xyz;
    vs_TEXCOORD5.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_NHxRoughness;
uniform  samplerCube unity_SpecCube0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
vec3 u_xlat8;
float u_xlat22;
void main()
{
    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 6.0;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
    u_xlat16_0 = log2(u_xlat10_2.w);
    u_xlat0.x = u_xlat16_0 * unity_SpecCube0_HDR.y;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat0.xxx;
    u_xlat10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.yyy;
    u_xlat3.xyz = u_xlat10_3.yyy * vs_TEXCOORD5.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
    u_xlat22 = u_xlat0.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.y = (-u_xlat0.x) + 1.0;
    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat8.x = (-u_xlat1.x) + _Glossiness;
    u_xlat8.x = u_xlat8.x + 1.0;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat4 = u_xlat10_4.wxyz * _Color.wxyz;
    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat8.xyz = u_xlat8.xxx + (-u_xlat5.xyz);
    u_xlat8.xyz = u_xlat0.zzz * u_xlat8.xyz + u_xlat5.xyz;
    u_xlat10_6 = texture(unity_NHxRoughness, u_xlat0.yw);
    u_xlat16_7 = u_xlat10_6.w * 16.0;
    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat4.yzw;
    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz;
    SV_Target0.w = u_xlat4.x;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat2.xyz + u_xlat8.xyz;
    u_xlat7.xyz = vec3(u_xlat16_7) * u_xlat5.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.xyz = u_xlat10_2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 50 math, 4 textures
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 ambientOrLightmapUV_16;
  ambientOrLightmapUV_16.w = 0.0;
  vec3 col_17;
  vec4 ndotl_18;
  vec4 lengthSq_19;
  vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosX0 - tmpvar_6.x);
  vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosY0 - tmpvar_6.y);
  vec4 tmpvar_22;
  tmpvar_22 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_19 = (tmpvar_20 * tmpvar_20);
  lengthSq_19 = (lengthSq_19 + (tmpvar_21 * tmpvar_21));
  lengthSq_19 = (lengthSq_19 + (tmpvar_22 * tmpvar_22));
  ndotl_18 = (tmpvar_20 * tmpvar_15.x);
  ndotl_18 = (ndotl_18 + (tmpvar_21 * tmpvar_15.y));
  ndotl_18 = (ndotl_18 + (tmpvar_22 * tmpvar_15.z));
  vec4 tmpvar_23;
  tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_18 * inversesqrt(lengthSq_19)));
  ndotl_18 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
    (lengthSq_19 * unity_4LightAtten0)
  ))));
  col_17 = (unity_LightColor[0].xyz * tmpvar_24.x);
  col_17 = (col_17 + (unity_LightColor[1].xyz * tmpvar_24.y));
  col_17 = (col_17 + (unity_LightColor[2].xyz * tmpvar_24.z));
  col_17 = (col_17 + (unity_LightColor[3].xyz * tmpvar_24.w));
  ambientOrLightmapUV_16.xyz = col_17;
  vec3 ambient_25;
  ambient_25 = ambientOrLightmapUV_16.xyz;
  vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = tmpvar_15;
  vec3 res_27;
  vec3 x_28;
  x_28.x = dot (unity_SHAr, tmpvar_26);
  x_28.y = dot (unity_SHAg, tmpvar_26);
  x_28.z = dot (unity_SHAb, tmpvar_26);
  vec3 x1_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
    ((tmpvar_15.x * tmpvar_15.x) - (tmpvar_15.y * tmpvar_15.y))
  )));
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    res_27 = max (((1.055 * 
      pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  ambient_25 = (col_17 + max (vec3(0.0, 0.0, 0.0), res_27));
  ambientOrLightmapUV_16.xyz = ambient_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_16;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  float tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (tmpvar_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_8;
  diffColor_8 = ((tmpvar_4 * tmpvar_6) * tmpvar_2);
  float tmpvar_9;
  tmpvar_9 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  vec3 tmpvar_10;
  float tmpvar_11;
  tmpvar_11 = (1.0 - _Glossiness);
  tmpvar_10 = (xlv_TEXCOORD1 - (2.0 * (
    dot (tmpvar_7, xlv_TEXCOORD1)
   * tmpvar_7)));
  vec4 tmpvar_12;
  tmpvar_12.xyz = tmpvar_10;
  tmpvar_12.w = ((tmpvar_11 * (1.7 - 
    (0.7 * tmpvar_11)
  )) * 6.0);
  vec4 tmpvar_13;
  tmpvar_13 = textureCubeLod (unity_SpecCube0, tmpvar_10, tmpvar_12.w);
  vec3 viewDir_14;
  viewDir_14 = -(xlv_TEXCOORD1);
  vec3 color_15;
  vec2 tmpvar_16;
  tmpvar_16.x = dot ((viewDir_14 - (2.0 * 
    (dot (tmpvar_7, viewDir_14) * tmpvar_7)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_16.y = (1.0 - clamp (dot (tmpvar_7, viewDir_14), 0.0, 1.0));
  vec2 tmpvar_17;
  tmpvar_17 = ((tmpvar_16 * tmpvar_16) * (tmpvar_16 * tmpvar_16));
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = tmpvar_11;
  color_15 = ((diffColor_8 + (
    (texture2D (unity_NHxRoughness, tmpvar_18).w * 16.0)
   * tmpvar_5)) * (_LightColor0.xyz * clamp (
    dot (tmpvar_7, _WorldSpaceLightPos0.xyz)
  , 0.0, 1.0)));
  color_15 = (color_15 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * diffColor_8) + (
    (((unity_SpecCube0_HDR.x * pow (tmpvar_13.w, unity_SpecCube0_HDR.y)) * tmpvar_13.xyz) * tmpvar_9)
   * 
    mix (tmpvar_5, vec3(clamp ((_Glossiness + (1.0 - tmpvar_6)), 0.0, 1.0)), tmpvar_17.yyy)
  )));
  vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = color_15;
  c_1.w = tmpvar_19.w;
  c_1.xyz = color_15;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_20;
  xlat_varoutput_20.xyz = c_1.xyz;
  xlat_varoutput_20.w = tmpvar_2;
  gl_FragData[0] = xlat_varoutput_20;
}


#endif
"
}
SubProgram "metal " {
// Stats: 68 math, 2 branches
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 434
Matrix 192 [glstate_matrix_mvp]
Matrix 256 [unity_ObjectToWorld]
Matrix 320 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [unity_4LightPosX0]
Vector 32 [unity_4LightPosY0]
Vector 48 [unity_4LightPosZ0]
VectorHalf 64 [unity_4LightAtten0] 4
VectorHalf 72 [unity_LightColor] 4 8
VectorHalf 136 [unity_SHAr] 4
VectorHalf 144 [unity_SHAg] 4
VectorHalf 152 [unity_SHAb] 4
VectorHalf 160 [unity_SHBr] 4
VectorHalf 168 [unity_SHBg] 4
VectorHalf 176 [unity_SHBb] 4
VectorHalf 184 [unity_SHC] 4
VectorHalf 384 [unity_ColorSpaceLuminance] 4
Vector 400 [_MainTex_ST]
Vector 416 [_DetailAlbedoMap_ST]
ScalarHalf 432 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 unity_4LightPosX0;
  float4 unity_4LightPosY0;
  float4 unity_4LightPosZ0;
  half4 unity_4LightAtten0;
  half4 unity_LightColor[8];
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  half3 normalWorld_19;
  normalWorld_19 = half3(tmpvar_18);
  half4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = half(0.0);
  float3 lightColor0_21;
  lightColor0_21 = float3(_mtl_u.unity_LightColor[0].xyz);
  float3 lightColor1_22;
  lightColor1_22 = float3(_mtl_u.unity_LightColor[1].xyz);
  float3 lightColor2_23;
  lightColor2_23 = float3(_mtl_u.unity_LightColor[2].xyz);
  float3 lightColor3_24;
  lightColor3_24 = float3(_mtl_u.unity_LightColor[3].xyz);
  float4 lightAttenSq_25;
  lightAttenSq_25 = float4(_mtl_u.unity_4LightAtten0);
  float3 normal_26;
  normal_26 = float3(normalWorld_19);
  float3 col_27;
  float4 ndotl_28;
  float4 lengthSq_29;
  float4 tmpvar_30;
  tmpvar_30 = (_mtl_u.unity_4LightPosX0 - tmpvar_7.x);
  float4 tmpvar_31;
  tmpvar_31 = (_mtl_u.unity_4LightPosY0 - tmpvar_7.y);
  float4 tmpvar_32;
  tmpvar_32 = (_mtl_u.unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  float4 tmpvar_33;
  tmpvar_33 = max (float4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * rsqrt(lengthSq_29)));
  ndotl_28 = tmpvar_33;
  float4 tmpvar_34;
  tmpvar_34 = (tmpvar_33 * (1.0/((1.0 + 
    (lengthSq_29 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_34.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_34.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_34.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_34.w));
  ambientOrLightmapUV_20.xyz = half3(col_27);
  half3 ambient_35;
  ambient_35 = ambientOrLightmapUV_20.xyz;
  half4 tmpvar_36;
  tmpvar_36.w = half(1.0);
  tmpvar_36.xyz = normalWorld_19;
  half3 res_37;
  half3 x_38;
  x_38.x = dot (_mtl_u.unity_SHAr, tmpvar_36);
  x_38.y = dot (_mtl_u.unity_SHAg, tmpvar_36);
  x_38.z = dot (_mtl_u.unity_SHAb, tmpvar_36);
  half3 x1_39;
  half4 tmpvar_40;
  tmpvar_40 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_39.x = dot (_mtl_u.unity_SHBr, tmpvar_40);
  x1_39.y = dot (_mtl_u.unity_SHBg, tmpvar_40);
  x1_39.z = dot (_mtl_u.unity_SHBb, tmpvar_40);
  res_37 = (x_38 + (x1_39 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  bool tmpvar_41;
  tmpvar_41 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_41) {
    res_37 = max ((((half)1.055 * 
      pow (max (res_37, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  ambient_35 = (ambientOrLightmapUV_20.xyz + max ((half3)float3(0.0, 0.0, 0.0), res_37));
  ambientOrLightmapUV_20.xyz = ambient_35;
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    vs_TEXCOORD1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz + u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_NHxRoughness;
uniform  samplerCube unity_SpecCube0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump float u_xlat16_8;
float u_xlat25;
void main()
{
    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 6.0;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat25 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat25 = u_xlat25 + u_xlat25;
    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + vs_TEXCOORD1.xyz;
    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
    u_xlat16_0 = log2(u_xlat10_2.w);
    u_xlat0.x = u_xlat16_0 * unity_SpecCube0_HDR.y;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat0.xxx;
    u_xlat10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.yyy;
    u_xlat3.xyz = u_xlat10_3.yyy * vs_TEXCOORD5.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
    u_xlat25 = u_xlat0.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.y = (-u_xlat0.x) + 1.0;
    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat25)) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.yz = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat25 = (-u_xlat0.x) + _Glossiness;
    u_xlat25 = u_xlat25 + 1.0;
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat4 = u_xlat10_4.wxyz * _Color.wxyz;
    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
    u_xlat6.xyz = u_xlat0.zzz * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat10_7 = texture(unity_NHxRoughness, u_xlat0.yw);
    u_xlat16_8 = u_xlat10_7.w * 16.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat4.yzw;
    u_xlat0.xzw = u_xlat4.xxx * u_xlat0.xzw;
    SV_Target0.w = u_xlat4.x;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat0.xzw + u_xlat2.xyz;
    u_xlat0.xyz = vec3(u_xlat16_8) * u_xlat5.xyz + u_xlat0.xzw;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 51 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 unity_ColorSpaceLuminance;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].x;
  v_12.y = unity_WorldToObject[1].x;
  v_12.z = unity_WorldToObject[2].x;
  v_12.w = unity_WorldToObject[3].x;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].y;
  v_13.y = unity_WorldToObject[1].y;
  v_13.z = unity_WorldToObject[2].y;
  v_13.w = unity_WorldToObject[3].y;
  vec4 v_14;
  v_14.x = unity_WorldToObject[0].z;
  v_14.y = unity_WorldToObject[1].z;
  v_14.z = unity_WorldToObject[2].z;
  v_14.w = unity_WorldToObject[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 o_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_7 * 0.5);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_7.zw;
  vec4 ambientOrLightmapUV_19;
  ambientOrLightmapUV_19.w = 0.0;
  vec3 col_20;
  vec4 ndotl_21;
  vec4 lengthSq_22;
  vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_6.x);
  vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_6.y);
  vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_22 = (tmpvar_23 * tmpvar_23);
  lengthSq_22 = (lengthSq_22 + (tmpvar_24 * tmpvar_24));
  lengthSq_22 = (lengthSq_22 + (tmpvar_25 * tmpvar_25));
  ndotl_21 = (tmpvar_23 * tmpvar_15.x);
  ndotl_21 = (ndotl_21 + (tmpvar_24 * tmpvar_15.y));
  ndotl_21 = (ndotl_21 + (tmpvar_25 * tmpvar_15.z));
  vec4 tmpvar_26;
  tmpvar_26 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_21 * inversesqrt(lengthSq_22)));
  ndotl_21 = tmpvar_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (1.0/((1.0 + 
    (lengthSq_22 * unity_4LightAtten0)
  ))));
  col_20 = (unity_LightColor[0].xyz * tmpvar_27.x);
  col_20 = (col_20 + (unity_LightColor[1].xyz * tmpvar_27.y));
  col_20 = (col_20 + (unity_LightColor[2].xyz * tmpvar_27.z));
  col_20 = (col_20 + (unity_LightColor[3].xyz * tmpvar_27.w));
  ambientOrLightmapUV_19.xyz = col_20;
  vec3 ambient_28;
  ambient_28 = ambientOrLightmapUV_19.xyz;
  vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = tmpvar_15;
  vec3 res_30;
  vec3 x_31;
  x_31.x = dot (unity_SHAr, tmpvar_29);
  x_31.y = dot (unity_SHAg, tmpvar_29);
  x_31.z = dot (unity_SHAb, tmpvar_29);
  vec3 x1_32;
  vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x1_32.x = dot (unity_SHBr, tmpvar_33);
  x1_32.y = dot (unity_SHBg, tmpvar_33);
  x1_32.z = dot (unity_SHBb, tmpvar_33);
  res_30 = (x_31 + (x1_32 + (unity_SHC.xyz * 
    ((tmpvar_15.x * tmpvar_15.x) - (tmpvar_15.y * tmpvar_15.y))
  )));
  if ((unity_ColorSpaceLuminance.w == 0.0)) {
    res_30 = max (((1.055 * 
      pow (max (res_30, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0));
  };
  ambient_28 = (col_20 + max (vec3(0.0, 0.0, 0.0), res_30));
  ambientOrLightmapUV_19.xyz = ambient_28;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = ambientOrLightmapUV_19;
  xlv_TEXCOORD6 = o_16;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  float tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (tmpvar_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_8;
  diffColor_8 = ((tmpvar_4 * tmpvar_6) * tmpvar_2);
  float tmpvar_9;
  tmpvar_9 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  vec3 tmpvar_10;
  float tmpvar_11;
  tmpvar_11 = (1.0 - _Glossiness);
  tmpvar_10 = (xlv_TEXCOORD1 - (2.0 * (
    dot (tmpvar_7, xlv_TEXCOORD1)
   * tmpvar_7)));
  vec4 tmpvar_12;
  tmpvar_12.xyz = tmpvar_10;
  tmpvar_12.w = ((tmpvar_11 * (1.7 - 
    (0.7 * tmpvar_11)
  )) * 6.0);
  vec4 tmpvar_13;
  tmpvar_13 = textureCubeLod (unity_SpecCube0, tmpvar_10, tmpvar_12.w);
  vec3 viewDir_14;
  viewDir_14 = -(xlv_TEXCOORD1);
  vec3 color_15;
  vec2 tmpvar_16;
  tmpvar_16.x = dot ((viewDir_14 - (2.0 * 
    (dot (tmpvar_7, viewDir_14) * tmpvar_7)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_16.y = (1.0 - clamp (dot (tmpvar_7, viewDir_14), 0.0, 1.0));
  vec2 tmpvar_17;
  tmpvar_17 = ((tmpvar_16 * tmpvar_16) * (tmpvar_16 * tmpvar_16));
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = tmpvar_11;
  color_15 = ((diffColor_8 + (
    (texture2D (unity_NHxRoughness, tmpvar_18).w * 16.0)
   * tmpvar_5)) * ((_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x) * clamp (
    dot (tmpvar_7, _WorldSpaceLightPos0.xyz)
  , 0.0, 1.0)));
  color_15 = (color_15 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * diffColor_8) + (
    (((unity_SpecCube0_HDR.x * pow (tmpvar_13.w, unity_SpecCube0_HDR.y)) * tmpvar_13.xyz) * tmpvar_9)
   * 
    mix (tmpvar_5, vec3(clamp ((_Glossiness + (1.0 - tmpvar_6)), 0.0, 1.0)), tmpvar_17.yyy)
  )));
  vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = color_15;
  c_1.w = tmpvar_19.w;
  c_1.xyz = color_15;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_20;
  xlat_varoutput_20.xyz = c_1.xyz;
  xlat_varoutput_20.w = tmpvar_2;
  gl_FragData[0] = xlat_varoutput_20;
}


#endif
"
}
SubProgram "metal " {
// Stats: 71 math, 2 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 450
Matrix 208 [glstate_matrix_mvp]
Matrix 272 [unity_ObjectToWorld]
Matrix 336 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 32 [unity_4LightPosX0]
Vector 48 [unity_4LightPosY0]
Vector 64 [unity_4LightPosZ0]
VectorHalf 80 [unity_4LightAtten0] 4
VectorHalf 88 [unity_LightColor] 4 8
VectorHalf 152 [unity_SHAr] 4
VectorHalf 160 [unity_SHAg] 4
VectorHalf 168 [unity_SHAb] 4
VectorHalf 176 [unity_SHBr] 4
VectorHalf 184 [unity_SHBg] 4
VectorHalf 192 [unity_SHBb] 4
VectorHalf 200 [unity_SHC] 4
VectorHalf 400 [unity_ColorSpaceLuminance] 4
Vector 416 [_MainTex_ST]
Vector 432 [_DetailAlbedoMap_ST]
ScalarHalf 448 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4 unity_4LightPosX0;
  float4 unity_4LightPosY0;
  float4 unity_4LightPosZ0;
  half4 unity_4LightAtten0;
  half4 unity_LightColor[8];
  half4 unity_SHAr;
  half4 unity_SHAg;
  half4 unity_SHAb;
  half4 unity_SHBr;
  half4 unity_SHBg;
  half4 unity_SHBb;
  half4 unity_SHC;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  half4 unity_ColorSpaceLuminance;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float4 o_19;
  float4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  float2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _mtl_u._ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  half3 normalWorld_22;
  normalWorld_22 = half3(tmpvar_18);
  half4 ambientOrLightmapUV_23;
  ambientOrLightmapUV_23.w = half(0.0);
  float3 lightColor0_24;
  lightColor0_24 = float3(_mtl_u.unity_LightColor[0].xyz);
  float3 lightColor1_25;
  lightColor1_25 = float3(_mtl_u.unity_LightColor[1].xyz);
  float3 lightColor2_26;
  lightColor2_26 = float3(_mtl_u.unity_LightColor[2].xyz);
  float3 lightColor3_27;
  lightColor3_27 = float3(_mtl_u.unity_LightColor[3].xyz);
  float4 lightAttenSq_28;
  lightAttenSq_28 = float4(_mtl_u.unity_4LightAtten0);
  float3 normal_29;
  normal_29 = float3(normalWorld_22);
  float3 col_30;
  float4 ndotl_31;
  float4 lengthSq_32;
  float4 tmpvar_33;
  tmpvar_33 = (_mtl_u.unity_4LightPosX0 - tmpvar_7.x);
  float4 tmpvar_34;
  tmpvar_34 = (_mtl_u.unity_4LightPosY0 - tmpvar_7.y);
  float4 tmpvar_35;
  tmpvar_35 = (_mtl_u.unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_32 = (tmpvar_33 * tmpvar_33);
  lengthSq_32 = (lengthSq_32 + (tmpvar_34 * tmpvar_34));
  lengthSq_32 = (lengthSq_32 + (tmpvar_35 * tmpvar_35));
  ndotl_31 = (tmpvar_33 * normal_29.x);
  ndotl_31 = (ndotl_31 + (tmpvar_34 * normal_29.y));
  ndotl_31 = (ndotl_31 + (tmpvar_35 * normal_29.z));
  float4 tmpvar_36;
  tmpvar_36 = max (float4(0.0, 0.0, 0.0, 0.0), (ndotl_31 * rsqrt(lengthSq_32)));
  ndotl_31 = tmpvar_36;
  float4 tmpvar_37;
  tmpvar_37 = (tmpvar_36 * (1.0/((1.0 + 
    (lengthSq_32 * lightAttenSq_28)
  ))));
  col_30 = (lightColor0_24 * tmpvar_37.x);
  col_30 = (col_30 + (lightColor1_25 * tmpvar_37.y));
  col_30 = (col_30 + (lightColor2_26 * tmpvar_37.z));
  col_30 = (col_30 + (lightColor3_27 * tmpvar_37.w));
  ambientOrLightmapUV_23.xyz = half3(col_30);
  half3 ambient_38;
  ambient_38 = ambientOrLightmapUV_23.xyz;
  half4 tmpvar_39;
  tmpvar_39.w = half(1.0);
  tmpvar_39.xyz = normalWorld_22;
  half3 res_40;
  half3 x_41;
  x_41.x = dot (_mtl_u.unity_SHAr, tmpvar_39);
  x_41.y = dot (_mtl_u.unity_SHAg, tmpvar_39);
  x_41.z = dot (_mtl_u.unity_SHAb, tmpvar_39);
  half3 x1_42;
  half4 tmpvar_43;
  tmpvar_43 = (normalWorld_22.xyzz * normalWorld_22.yzzx);
  x1_42.x = dot (_mtl_u.unity_SHBr, tmpvar_43);
  x1_42.y = dot (_mtl_u.unity_SHBg, tmpvar_43);
  x1_42.z = dot (_mtl_u.unity_SHBb, tmpvar_43);
  res_40 = (x_41 + (x1_42 + (_mtl_u.unity_SHC.xyz * 
    ((normalWorld_22.x * normalWorld_22.x) - (normalWorld_22.y * normalWorld_22.y))
  )));
  bool tmpvar_44;
  tmpvar_44 = (_mtl_u.unity_ColorSpaceLuminance.w == (half)0.0);
  if (tmpvar_44) {
    res_40 = max ((((half)1.055 * 
      pow (max (res_40, (half3)float3(0.0, 0.0, 0.0)), (half3)float3(0.4166667, 0.4166667, 0.4166667))
    ) - (half)0.055), (half3)float3(0.0, 0.0, 0.0));
  };
  ambient_38 = (ambientOrLightmapUV_23.xyz + max ((half3)float3(0.0, 0.0, 0.0), res_40));
  ambientOrLightmapUV_23.xyz = ambient_38;
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = ambientOrLightmapUV_23;
  _mtl_o.xlv_TEXCOORD6 = o_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    vs_TEXCOORD1.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD4.w = 0.0;
    u_xlat2.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat2.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat2.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat3.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat3.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat3.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat3.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat3.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat3.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat22 = u_xlat2.y * u_xlat2.y;
    u_xlat22 = u_xlat2.x * u_xlat2.x + (-u_xlat22);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat22) + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat2);
    u_xlat4.y = dot(unity_SHAg, u_xlat2);
    u_xlat4.z = dot(unity_SHAb, u_xlat2);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.xyz = log2(u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat4.xyz = exp2(u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat3.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : u_xlat3.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
    u_xlat2 = u_xlat1 * u_xlat2.zzzz + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
    u_xlat4 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat3.xyz + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  sampler2D unity_NHxRoughness;
uniform  samplerCube unity_SpecCube0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
vec3 u_xlat8;
float u_xlat22;
void main()
{
    u_xlat0.xw = (-vec2(vec2(_Glossiness, _Glossiness))) + vec2(1.0, 1.0);
    u_xlat1.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * 6.0;
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat22 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat22 + u_xlat22;
    u_xlat2.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + vs_TEXCOORD1.xyz;
    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat2.xyz, u_xlat0.x);
    u_xlat16_0 = log2(u_xlat10_2.w);
    u_xlat0.x = u_xlat16_0 * unity_SpecCube0_HDR.y;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat0.xxx;
    u_xlat10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.yyy;
    u_xlat3.xyz = u_xlat10_3.yyy * vs_TEXCOORD5.xyz;
    u_xlat0.x = dot((-vs_TEXCOORD1.xyz), u_xlat1.xyz);
    u_xlat22 = u_xlat0.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.y = (-u_xlat0.x) + 1.0;
    u_xlat5.xyz = u_xlat1.xyz * (-vec3(u_xlat22)) + (-vs_TEXCOORD1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat0.yz = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat8.x = (-u_xlat1.x) + _Glossiness;
    u_xlat8.x = u_xlat8.x + 1.0;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat4 = u_xlat10_4.wxyz * _Color.wxyz;
    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat8.xyz = u_xlat8.xxx + (-u_xlat5.xyz);
    u_xlat8.xyz = u_xlat0.zzz * u_xlat8.xyz + u_xlat5.xyz;
    u_xlat10_6 = texture(unity_NHxRoughness, u_xlat0.yw);
    u_xlat16_7 = u_xlat10_6.w * 16.0;
    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat4.yzw;
    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz;
    SV_Target0.w = u_xlat4.x;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat2.xyz + u_xlat8.xyz;
    u_xlat7.xyz = vec3(u_xlat16_7) * u_xlat5.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.xyz = u_xlat10_2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat7.xyz * u_xlat2.xyz + u_xlat1.xyz;
    return;
}
#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 49 math, 4 textures
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
SetTexture 0 [unity_SpecCube0] CUBE 0
SetTexture 1 [unity_NHxRoughness] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_OcclusionMap] 2D 3
ConstBuffer "$Globals" 44
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_SpecCube0_HDR] 4
VectorHalf 16 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 24 [_LightColor0] 4
VectorHalf 32 [_Color] 4
ScalarHalf 40 [_Metallic]
ScalarHalf 42 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_SpecCube0_HDR;
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(0)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(1)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _OcclusionMap [[texture(3)]], sampler _mtlsmp__OcclusionMap [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  half3 tmpvar_5;
  tmpvar_5 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half tmpvar_6;
  tmpvar_6 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_4 = (tmpvar_3 * tmpvar_6);
  half3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_8;
  tmpvar_8 = _mtl_u._LightColor0.xyz;
  half tmpvar_9;
  half4 tmpvar_10;
  tmpvar_10 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_9 = tmpvar_10.y;
  float4 tmpvar_11;
  tmpvar_11 = float4(_mtl_u.unity_SpecCube0_HDR);
  half3 tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = ((half)1.0 - _mtl_u._Glossiness);
  tmpvar_12 = (_mtl_i.xlv_TEXCOORD1 - ((half)2.0 * (
    dot (tmpvar_7, _mtl_i.xlv_TEXCOORD1)
   * tmpvar_7)));
  half4 hdr_14;
  hdr_14 = half4(tmpvar_11);
  half4 tmpvar_15;
  tmpvar_15.xyz = tmpvar_12;
  tmpvar_15.w = ((tmpvar_13 * ((half)1.7 - 
    ((half)0.7 * tmpvar_13)
  )) * (half)6.0);
  half4 tmpvar_16;
  tmpvar_16 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(tmpvar_12), level(tmpvar_15.w));
  half4 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  half3 viewDir_18;
  viewDir_18 = -(_mtl_i.xlv_TEXCOORD1);
  half3 color_19;
  half2 tmpvar_20;
  tmpvar_20.x = dot ((viewDir_18 - ((half)2.0 * 
    (dot (tmpvar_7, viewDir_18) * tmpvar_7)
  )), _mtl_u._WorldSpaceLightPos0.xyz);
  tmpvar_20.y = ((half)1.0 - clamp (dot (tmpvar_7, viewDir_18), (half)0.0, (half)1.0));
  half2 tmpvar_21;
  tmpvar_21 = ((tmpvar_20 * tmpvar_20) * (tmpvar_20 * tmpvar_20));
  half2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = tmpvar_13;
  half4 tmpvar_23;
  tmpvar_23 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_22));
  color_19 = ((tmpvar_4 + (
    (tmpvar_23.w * (half)16.0)
   * tmpvar_5)) * (tmpvar_8 * clamp (
    dot (tmpvar_7, _mtl_u._WorldSpaceLightPos0.xyz)
  , (half)0.0, (half)1.0)));
  color_19 = (color_19 + ((
    (_mtl_i.xlv_TEXCOORD5.xyz * tmpvar_9)
   * tmpvar_4) + (
    (((hdr_14.x * pow (tmpvar_17.w, hdr_14.y)) * tmpvar_17.xyz) * tmpvar_9)
   * 
    mix (tmpvar_5, half3(clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_6)), (half)0.0, (half)1.0)), tmpvar_21.yyy)
  )));
  half4 tmpvar_24;
  tmpvar_24.w = half(1.0);
  tmpvar_24.xyz = color_19;
  c_1.w = tmpvar_24.w;
  c_1.xyz = color_19;
  c_1.xyz = c_1.xyz;
  half4 xlat_varoutput_25;
  xlat_varoutput_25.xyz = c_1.xyz;
  xlat_varoutput_25.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_25;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 50 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
SetTexture 0 [unity_SpecCube0] CUBE 0
SetTexture 1 [unity_NHxRoughness] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_OcclusionMap] 2D 3
SetTexture 4 [_ShadowMapTexture] 2D 4
ConstBuffer "$Globals" 44
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_SpecCube0_HDR] 4
VectorHalf 16 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 24 [_LightColor0] 4
VectorHalf 32 [_Color] 4
ScalarHalf 40 [_Metallic]
ScalarHalf 42 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_SpecCube0_HDR;
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(0)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(1)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _OcclusionMap [[texture(3)]], sampler _mtlsmp__OcclusionMap [[sampler(3)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(4)]], sampler _mtlsmp__ShadowMapTexture [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half atten_2;
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_4;
  tmpvar_4 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_5;
  half3 tmpvar_6;
  tmpvar_6 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, half3(_mtl_u._Metallic));
  half tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = _mtl_u._LightColor0.xyz;
  half tmpvar_10;
  tmpvar_10 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  atten_2 = tmpvar_10;
  half tmpvar_11;
  half4 tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_11 = tmpvar_12.y;
  float4 tmpvar_13;
  tmpvar_13 = float4(_mtl_u.unity_SpecCube0_HDR);
  half3 tmpvar_14;
  half tmpvar_15;
  tmpvar_15 = ((half)1.0 - _mtl_u._Glossiness);
  tmpvar_14 = (_mtl_i.xlv_TEXCOORD1 - ((half)2.0 * (
    dot (tmpvar_8, _mtl_i.xlv_TEXCOORD1)
   * tmpvar_8)));
  half4 hdr_16;
  hdr_16 = half4(tmpvar_13);
  half4 tmpvar_17;
  tmpvar_17.xyz = tmpvar_14;
  tmpvar_17.w = ((tmpvar_15 * ((half)1.7 - 
    ((half)0.7 * tmpvar_15)
  )) * (half)6.0);
  half4 tmpvar_18;
  tmpvar_18 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(tmpvar_14), level(tmpvar_17.w));
  half4 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  half3 viewDir_20;
  viewDir_20 = -(_mtl_i.xlv_TEXCOORD1);
  half3 color_21;
  half2 tmpvar_22;
  tmpvar_22.x = dot ((viewDir_20 - ((half)2.0 * 
    (dot (tmpvar_8, viewDir_20) * tmpvar_8)
  )), _mtl_u._WorldSpaceLightPos0.xyz);
  tmpvar_22.y = ((half)1.0 - clamp (dot (tmpvar_8, viewDir_20), (half)0.0, (half)1.0));
  half2 tmpvar_23;
  tmpvar_23 = ((tmpvar_22 * tmpvar_22) * (tmpvar_22 * tmpvar_22));
  half2 tmpvar_24;
  tmpvar_24.x = tmpvar_23.x;
  tmpvar_24.y = tmpvar_15;
  half4 tmpvar_25;
  tmpvar_25 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_24));
  color_21 = ((tmpvar_5 + (
    (tmpvar_25.w * (half)16.0)
   * tmpvar_6)) * ((tmpvar_9 * atten_2) * clamp (
    dot (tmpvar_8, _mtl_u._WorldSpaceLightPos0.xyz)
  , (half)0.0, (half)1.0)));
  color_21 = (color_21 + ((
    (_mtl_i.xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_5) + (
    (((hdr_16.x * pow (tmpvar_19.w, hdr_16.y)) * tmpvar_19.xyz) * tmpvar_11)
   * 
    mix (tmpvar_6, half3(clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_7)), (half)0.0, (half)1.0)), tmpvar_23.yyy)
  )));
  half4 tmpvar_26;
  tmpvar_26.w = half(1.0);
  tmpvar_26.xyz = color_21;
  c_1.w = tmpvar_26.w;
  c_1.xyz = color_21;
  c_1.xyz = c_1.xyz;
  half4 xlat_varoutput_27;
  xlat_varoutput_27.xyz = c_1.xyz;
  xlat_varoutput_27.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_27;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 51 math, 5 textures
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
SetTexture 0 [unity_SpecCube0] CUBE 0
SetTexture 1 [unity_NHxRoughness] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_OcclusionMap] 2D 3
SetTexture 4 [_EmissionMap] 2D 4
ConstBuffer "$Globals" 56
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_SpecCube0_HDR] 4
VectorHalf 16 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 24 [_LightColor0] 4
VectorHalf 32 [_Color] 4
ScalarHalf 40 [_Metallic]
ScalarHalf 42 [_Glossiness]
VectorHalf 48 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_SpecCube0_HDR;
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(0)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(1)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _OcclusionMap [[texture(3)]], sampler _mtlsmp__OcclusionMap [[sampler(3)]]
  ,   texture2d<half> _EmissionMap [[texture(4)]], sampler _mtlsmp__EmissionMap [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  half3 tmpvar_5;
  tmpvar_5 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half tmpvar_6;
  tmpvar_6 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_4 = (tmpvar_3 * tmpvar_6);
  half3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_8;
  tmpvar_8 = _mtl_u._LightColor0.xyz;
  half tmpvar_9;
  half4 tmpvar_10;
  tmpvar_10 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_9 = tmpvar_10.y;
  float4 tmpvar_11;
  tmpvar_11 = float4(_mtl_u.unity_SpecCube0_HDR);
  half3 tmpvar_12;
  half tmpvar_13;
  tmpvar_13 = ((half)1.0 - _mtl_u._Glossiness);
  tmpvar_12 = (_mtl_i.xlv_TEXCOORD1 - ((half)2.0 * (
    dot (tmpvar_7, _mtl_i.xlv_TEXCOORD1)
   * tmpvar_7)));
  half4 hdr_14;
  hdr_14 = half4(tmpvar_11);
  half4 tmpvar_15;
  tmpvar_15.xyz = tmpvar_12;
  tmpvar_15.w = ((tmpvar_13 * ((half)1.7 - 
    ((half)0.7 * tmpvar_13)
  )) * (half)6.0);
  half4 tmpvar_16;
  tmpvar_16 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(tmpvar_12), level(tmpvar_15.w));
  half4 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  half3 viewDir_18;
  viewDir_18 = -(_mtl_i.xlv_TEXCOORD1);
  half3 color_19;
  half2 tmpvar_20;
  tmpvar_20.x = dot ((viewDir_18 - ((half)2.0 * 
    (dot (tmpvar_7, viewDir_18) * tmpvar_7)
  )), _mtl_u._WorldSpaceLightPos0.xyz);
  tmpvar_20.y = ((half)1.0 - clamp (dot (tmpvar_7, viewDir_18), (half)0.0, (half)1.0));
  half2 tmpvar_21;
  tmpvar_21 = ((tmpvar_20 * tmpvar_20) * (tmpvar_20 * tmpvar_20));
  half2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = tmpvar_13;
  half4 tmpvar_23;
  tmpvar_23 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_22));
  color_19 = ((tmpvar_4 + (
    (tmpvar_23.w * (half)16.0)
   * tmpvar_5)) * (tmpvar_8 * clamp (
    dot (tmpvar_7, _mtl_u._WorldSpaceLightPos0.xyz)
  , (half)0.0, (half)1.0)));
  color_19 = (color_19 + ((
    (_mtl_i.xlv_TEXCOORD5.xyz * tmpvar_9)
   * tmpvar_4) + (
    (((hdr_14.x * pow (tmpvar_17.w, hdr_14.y)) * tmpvar_17.xyz) * tmpvar_9)
   * 
    mix (tmpvar_5, half3(clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_6)), (half)0.0, (half)1.0)), tmpvar_21.yyy)
  )));
  half4 tmpvar_24;
  tmpvar_24.w = half(1.0);
  tmpvar_24.xyz = color_19;
  c_1.w = tmpvar_24.w;
  half4 tmpvar_25;
  tmpvar_25 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  c_1.xyz = (color_19 + (tmpvar_25.xyz * _mtl_u._EmissionColor.xyz));
  half4 xlat_varoutput_26;
  xlat_varoutput_26.xyz = c_1.xyz;
  xlat_varoutput_26.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_26;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 52 math, 6 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
SetTexture 0 [unity_SpecCube0] CUBE 0
SetTexture 1 [unity_NHxRoughness] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_OcclusionMap] 2D 3
SetTexture 4 [_EmissionMap] 2D 4
SetTexture 5 [_ShadowMapTexture] 2D 5
ConstBuffer "$Globals" 56
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_SpecCube0_HDR] 4
VectorHalf 16 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 24 [_LightColor0] 4
VectorHalf 32 [_Color] 4
ScalarHalf 40 [_Metallic]
ScalarHalf 42 [_Glossiness]
VectorHalf 48 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_SpecCube0_HDR;
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(0)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(1)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _OcclusionMap [[texture(3)]], sampler _mtlsmp__OcclusionMap [[sampler(3)]]
  ,   texture2d<half> _EmissionMap [[texture(4)]], sampler _mtlsmp__EmissionMap [[sampler(4)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(5)]], sampler _mtlsmp__ShadowMapTexture [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half atten_2;
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_4;
  tmpvar_4 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_5;
  half3 tmpvar_6;
  tmpvar_6 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, half3(_mtl_u._Metallic));
  half tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = _mtl_u._LightColor0.xyz;
  half tmpvar_10;
  tmpvar_10 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  atten_2 = tmpvar_10;
  half tmpvar_11;
  half4 tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_11 = tmpvar_12.y;
  float4 tmpvar_13;
  tmpvar_13 = float4(_mtl_u.unity_SpecCube0_HDR);
  half3 tmpvar_14;
  half tmpvar_15;
  tmpvar_15 = ((half)1.0 - _mtl_u._Glossiness);
  tmpvar_14 = (_mtl_i.xlv_TEXCOORD1 - ((half)2.0 * (
    dot (tmpvar_8, _mtl_i.xlv_TEXCOORD1)
   * tmpvar_8)));
  half4 hdr_16;
  hdr_16 = half4(tmpvar_13);
  half4 tmpvar_17;
  tmpvar_17.xyz = tmpvar_14;
  tmpvar_17.w = ((tmpvar_15 * ((half)1.7 - 
    ((half)0.7 * tmpvar_15)
  )) * (half)6.0);
  half4 tmpvar_18;
  tmpvar_18 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(tmpvar_14), level(tmpvar_17.w));
  half4 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  half3 viewDir_20;
  viewDir_20 = -(_mtl_i.xlv_TEXCOORD1);
  half3 color_21;
  half2 tmpvar_22;
  tmpvar_22.x = dot ((viewDir_20 - ((half)2.0 * 
    (dot (tmpvar_8, viewDir_20) * tmpvar_8)
  )), _mtl_u._WorldSpaceLightPos0.xyz);
  tmpvar_22.y = ((half)1.0 - clamp (dot (tmpvar_8, viewDir_20), (half)0.0, (half)1.0));
  half2 tmpvar_23;
  tmpvar_23 = ((tmpvar_22 * tmpvar_22) * (tmpvar_22 * tmpvar_22));
  half2 tmpvar_24;
  tmpvar_24.x = tmpvar_23.x;
  tmpvar_24.y = tmpvar_15;
  half4 tmpvar_25;
  tmpvar_25 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_24));
  color_21 = ((tmpvar_5 + (
    (tmpvar_25.w * (half)16.0)
   * tmpvar_6)) * ((tmpvar_9 * atten_2) * clamp (
    dot (tmpvar_8, _mtl_u._WorldSpaceLightPos0.xyz)
  , (half)0.0, (half)1.0)));
  color_21 = (color_21 + ((
    (_mtl_i.xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_5) + (
    (((hdr_16.x * pow (tmpvar_19.w, hdr_16.y)) * tmpvar_19.xyz) * tmpvar_11)
   * 
    mix (tmpvar_6, half3(clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_7)), (half)0.0, (half)1.0)), tmpvar_23.yyy)
  )));
  half4 tmpvar_26;
  tmpvar_26.w = half(1.0);
  tmpvar_26.xyz = color_21;
  c_1.w = tmpvar_26.w;
  half4 tmpvar_27;
  tmpvar_27 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  c_1.xyz = (color_21 + (tmpvar_27.xyz * _mtl_u._EmissionColor.xyz));
  half4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = c_1.xyz;
  xlat_varoutput_28.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_28;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 40 math, 4 textures
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
SetTexture 3 [_EmissionMap] 2D 3
ConstBuffer "$Globals" 56
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_IndirectSpecColor] 4
VectorHalf 16 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 24 [_LightColor0] 4
VectorHalf 32 [_Color] 4
ScalarHalf 40 [_Metallic]
ScalarHalf 42 [_Glossiness]
VectorHalf 48 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_IndirectSpecColor;
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]]
  ,   texture2d<half> _EmissionMap [[texture(3)]], sampler _mtlsmp__EmissionMap [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  half3 tmpvar_5;
  tmpvar_5 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half tmpvar_6;
  tmpvar_6 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_4 = (tmpvar_3 * tmpvar_6);
  half3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_8;
  tmpvar_8 = _mtl_u._LightColor0.xyz;
  half tmpvar_9;
  half4 tmpvar_10;
  tmpvar_10 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_9 = tmpvar_10.y;
  half3 specular_11;
  specular_11 = _mtl_u.unity_IndirectSpecColor.xyz;
  half3 viewDir_12;
  viewDir_12 = -(_mtl_i.xlv_TEXCOORD1);
  half3 color_13;
  half2 tmpvar_14;
  tmpvar_14.x = dot ((viewDir_12 - ((half)2.0 * 
    (dot (tmpvar_7, viewDir_12) * tmpvar_7)
  )), _mtl_u._WorldSpaceLightPos0.xyz);
  tmpvar_14.y = ((half)1.0 - clamp (dot (tmpvar_7, viewDir_12), (half)0.0, (half)1.0));
  half2 tmpvar_15;
  tmpvar_15 = ((tmpvar_14 * tmpvar_14) * (tmpvar_14 * tmpvar_14));
  half2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_17;
  tmpvar_17 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_16));
  color_13 = ((tmpvar_4 + (
    (tmpvar_17.w * (half)16.0)
   * tmpvar_5)) * (tmpvar_8 * clamp (
    dot (tmpvar_7, _mtl_u._WorldSpaceLightPos0.xyz)
  , (half)0.0, (half)1.0)));
  color_13 = (color_13 + ((
    (_mtl_i.xlv_TEXCOORD5.xyz * tmpvar_9)
   * tmpvar_4) + (
    (specular_11 * tmpvar_9)
   * 
    mix (tmpvar_5, half3(clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_6)), (half)0.0, (half)1.0)), tmpvar_15.yyy)
  )));
  half4 tmpvar_18;
  tmpvar_18.w = half(1.0);
  tmpvar_18.xyz = color_13;
  c_1.w = tmpvar_18.w;
  half4 tmpvar_19;
  tmpvar_19 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  c_1.xyz = (color_13 + (tmpvar_19.xyz * _mtl_u._EmissionColor.xyz));
  half4 xlat_varoutput_20;
  xlat_varoutput_20.xyz = c_1.xyz;
  xlat_varoutput_20.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_20;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 41 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_OcclusionMap] 2D 2
SetTexture 3 [_EmissionMap] 2D 3
SetTexture 4 [_ShadowMapTexture] 2D 4
ConstBuffer "$Globals" 56
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_IndirectSpecColor] 4
VectorHalf 16 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 24 [_LightColor0] 4
VectorHalf 32 [_Color] 4
ScalarHalf 40 [_Metallic]
ScalarHalf 42 [_Glossiness]
VectorHalf 48 [_EmissionColor] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_IndirectSpecColor;
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half4 _EmissionColor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _OcclusionMap [[texture(2)]], sampler _mtlsmp__OcclusionMap [[sampler(2)]]
  ,   texture2d<half> _EmissionMap [[texture(3)]], sampler _mtlsmp__EmissionMap [[sampler(3)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(4)]], sampler _mtlsmp__ShadowMapTexture [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half atten_2;
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_4;
  tmpvar_4 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_5;
  half3 tmpvar_6;
  tmpvar_6 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, half3(_mtl_u._Metallic));
  half tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_9;
  tmpvar_9 = _mtl_u._LightColor0.xyz;
  half tmpvar_10;
  tmpvar_10 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  atten_2 = tmpvar_10;
  half tmpvar_11;
  half4 tmpvar_12;
  tmpvar_12 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_11 = tmpvar_12.y;
  half3 specular_13;
  specular_13 = _mtl_u.unity_IndirectSpecColor.xyz;
  half3 viewDir_14;
  viewDir_14 = -(_mtl_i.xlv_TEXCOORD1);
  half3 color_15;
  half2 tmpvar_16;
  tmpvar_16.x = dot ((viewDir_14 - ((half)2.0 * 
    (dot (tmpvar_8, viewDir_14) * tmpvar_8)
  )), _mtl_u._WorldSpaceLightPos0.xyz);
  tmpvar_16.y = ((half)1.0 - clamp (dot (tmpvar_8, viewDir_14), (half)0.0, (half)1.0));
  half2 tmpvar_17;
  tmpvar_17 = ((tmpvar_16 * tmpvar_16) * (tmpvar_16 * tmpvar_16));
  half2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_19;
  tmpvar_19 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_18));
  color_15 = ((tmpvar_5 + (
    (tmpvar_19.w * (half)16.0)
   * tmpvar_6)) * ((tmpvar_9 * atten_2) * clamp (
    dot (tmpvar_8, _mtl_u._WorldSpaceLightPos0.xyz)
  , (half)0.0, (half)1.0)));
  color_15 = (color_15 + ((
    (_mtl_i.xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_5) + (
    (specular_13 * tmpvar_11)
   * 
    mix (tmpvar_6, half3(clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_7)), (half)0.0, (half)1.0)), tmpvar_17.yyy)
  )));
  half4 tmpvar_20;
  tmpvar_20.w = half(1.0);
  tmpvar_20.xyz = color_15;
  c_1.w = tmpvar_20.w;
  half4 tmpvar_21;
  tmpvar_21 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  c_1.xyz = (color_15 + (tmpvar_21.xyz * _mtl_u._EmissionColor.xyz));
  half4 xlat_varoutput_22;
  xlat_varoutput_22.xyz = c_1.xyz;
  xlat_varoutput_22.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_22;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_EMISSION" "_GLOSSYREFLECTIONS_OFF" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 50 math, 4 textures
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_SpecCube0] CUBE 0
SetTexture 1 [unity_NHxRoughness] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_OcclusionMap] 2D 3
ConstBuffer "$Globals" 44
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_SpecCube0_HDR] 4
VectorHalf 16 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 24 [_LightColor0] 4
VectorHalf 32 [_Color] 4
ScalarHalf 40 [_Metallic]
ScalarHalf 42 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_SpecCube0_HDR;
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(0)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(1)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _OcclusionMap [[texture(3)]], sampler _mtlsmp__OcclusionMap [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half tmpvar_2;
  half4 tmpvar_3;
  tmpvar_3 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_2 = (tmpvar_3.w * _mtl_u._Color.w);
  half3 tmpvar_4;
  tmpvar_4 = (_mtl_u._Color.xyz * tmpvar_3.xyz);
  half3 tmpvar_5;
  tmpvar_5 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, half3(_mtl_u._Metallic));
  half tmpvar_6;
  tmpvar_6 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 diffColor_8;
  diffColor_8 = ((tmpvar_4 * tmpvar_6) * tmpvar_2);
  half3 tmpvar_9;
  tmpvar_9 = _mtl_u._LightColor0.xyz;
  half tmpvar_10;
  half4 tmpvar_11;
  tmpvar_11 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_10 = tmpvar_11.y;
  float4 tmpvar_12;
  tmpvar_12 = float4(_mtl_u.unity_SpecCube0_HDR);
  half3 tmpvar_13;
  half tmpvar_14;
  tmpvar_14 = ((half)1.0 - _mtl_u._Glossiness);
  tmpvar_13 = (_mtl_i.xlv_TEXCOORD1 - ((half)2.0 * (
    dot (tmpvar_7, _mtl_i.xlv_TEXCOORD1)
   * tmpvar_7)));
  half4 hdr_15;
  hdr_15 = half4(tmpvar_12);
  half4 tmpvar_16;
  tmpvar_16.xyz = tmpvar_13;
  tmpvar_16.w = ((tmpvar_14 * ((half)1.7 - 
    ((half)0.7 * tmpvar_14)
  )) * (half)6.0);
  half4 tmpvar_17;
  tmpvar_17 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(tmpvar_13), level(tmpvar_16.w));
  half4 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  half3 viewDir_19;
  viewDir_19 = -(_mtl_i.xlv_TEXCOORD1);
  half3 color_20;
  half2 tmpvar_21;
  tmpvar_21.x = dot ((viewDir_19 - ((half)2.0 * 
    (dot (tmpvar_7, viewDir_19) * tmpvar_7)
  )), _mtl_u._WorldSpaceLightPos0.xyz);
  tmpvar_21.y = ((half)1.0 - clamp (dot (tmpvar_7, viewDir_19), (half)0.0, (half)1.0));
  half2 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * tmpvar_21) * (tmpvar_21 * tmpvar_21));
  half2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = tmpvar_14;
  half4 tmpvar_24;
  tmpvar_24 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_23));
  color_20 = ((diffColor_8 + (
    (tmpvar_24.w * (half)16.0)
   * tmpvar_5)) * (tmpvar_9 * clamp (
    dot (tmpvar_7, _mtl_u._WorldSpaceLightPos0.xyz)
  , (half)0.0, (half)1.0)));
  color_20 = (color_20 + ((
    (_mtl_i.xlv_TEXCOORD5.xyz * tmpvar_10)
   * diffColor_8) + (
    (((hdr_15.x * pow (tmpvar_18.w, hdr_15.y)) * tmpvar_18.xyz) * tmpvar_10)
   * 
    mix (tmpvar_5, half3(clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_6)), (half)0.0, (half)1.0)), tmpvar_22.yyy)
  )));
  half4 tmpvar_25;
  tmpvar_25.w = half(1.0);
  tmpvar_25.xyz = color_20;
  c_1.w = tmpvar_25.w;
  c_1.xyz = color_20;
  c_1.xyz = c_1.xyz;
  half4 xlat_varoutput_26;
  xlat_varoutput_26.xyz = c_1.xyz;
  xlat_varoutput_26.w = tmpvar_2;
  _mtl_o._glesFragData_0 = xlat_varoutput_26;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 51 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_SpecCube0] CUBE 0
SetTexture 1 [unity_NHxRoughness] 2D 1
SetTexture 2 [_MainTex] 2D 2
SetTexture 3 [_OcclusionMap] 2D 3
SetTexture 4 [_ShadowMapTexture] 2D 4
ConstBuffer "$Globals" 44
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [unity_SpecCube0_HDR] 4
VectorHalf 16 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 24 [_LightColor0] 4
VectorHalf 32 [_Color] 4
ScalarHalf 40 [_Metallic]
ScalarHalf 42 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2_2;
  half4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 unity_SpecCube0_HDR;
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> unity_SpecCube0 [[texture(0)]], sampler _mtlsmp_unity_SpecCube0 [[sampler(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(1)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(1)]]
  ,   texture2d<half> _MainTex [[texture(2)]], sampler _mtlsmp__MainTex [[sampler(2)]]
  ,   texture2d<half> _OcclusionMap [[texture(3)]], sampler _mtlsmp__OcclusionMap [[sampler(3)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(4)]], sampler _mtlsmp__ShadowMapTexture [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  half atten_2;
  half tmpvar_3;
  half4 tmpvar_4;
  tmpvar_4 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_3 = (tmpvar_4.w * _mtl_u._Color.w);
  half3 tmpvar_5;
  tmpvar_5 = (_mtl_u._Color.xyz * tmpvar_4.xyz);
  half3 tmpvar_6;
  tmpvar_6 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, half3(_mtl_u._Metallic));
  half tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w));
  half3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 diffColor_9;
  diffColor_9 = ((tmpvar_5 * tmpvar_7) * tmpvar_3);
  half3 tmpvar_10;
  tmpvar_10 = _mtl_u._LightColor0.xyz;
  half tmpvar_11;
  tmpvar_11 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w)).x;
  atten_2 = tmpvar_11;
  half tmpvar_12;
  half4 tmpvar_13;
  tmpvar_13 = _OcclusionMap.sample(_mtlsmp__OcclusionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_12 = tmpvar_13.y;
  float4 tmpvar_14;
  tmpvar_14 = float4(_mtl_u.unity_SpecCube0_HDR);
  half3 tmpvar_15;
  half tmpvar_16;
  tmpvar_16 = ((half)1.0 - _mtl_u._Glossiness);
  tmpvar_15 = (_mtl_i.xlv_TEXCOORD1 - ((half)2.0 * (
    dot (tmpvar_8, _mtl_i.xlv_TEXCOORD1)
   * tmpvar_8)));
  half4 hdr_17;
  hdr_17 = half4(tmpvar_14);
  half4 tmpvar_18;
  tmpvar_18.xyz = tmpvar_15;
  tmpvar_18.w = ((tmpvar_16 * ((half)1.7 - 
    ((half)0.7 * tmpvar_16)
  )) * (half)6.0);
  half4 tmpvar_19;
  tmpvar_19 = unity_SpecCube0.sample(_mtlsmp_unity_SpecCube0, (float3)(tmpvar_15), level(tmpvar_18.w));
  half4 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  half3 viewDir_21;
  viewDir_21 = -(_mtl_i.xlv_TEXCOORD1);
  half3 color_22;
  half2 tmpvar_23;
  tmpvar_23.x = dot ((viewDir_21 - ((half)2.0 * 
    (dot (tmpvar_8, viewDir_21) * tmpvar_8)
  )), _mtl_u._WorldSpaceLightPos0.xyz);
  tmpvar_23.y = ((half)1.0 - clamp (dot (tmpvar_8, viewDir_21), (half)0.0, (half)1.0));
  half2 tmpvar_24;
  tmpvar_24 = ((tmpvar_23 * tmpvar_23) * (tmpvar_23 * tmpvar_23));
  half2 tmpvar_25;
  tmpvar_25.x = tmpvar_24.x;
  tmpvar_25.y = tmpvar_16;
  half4 tmpvar_26;
  tmpvar_26 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_25));
  color_22 = ((diffColor_9 + (
    (tmpvar_26.w * (half)16.0)
   * tmpvar_6)) * ((tmpvar_10 * atten_2) * clamp (
    dot (tmpvar_8, _mtl_u._WorldSpaceLightPos0.xyz)
  , (half)0.0, (half)1.0)));
  color_22 = (color_22 + ((
    (_mtl_i.xlv_TEXCOORD5.xyz * tmpvar_12)
   * diffColor_9) + (
    (((hdr_17.x * pow (tmpvar_20.w, hdr_17.y)) * tmpvar_20.xyz) * tmpvar_12)
   * 
    mix (tmpvar_6, half3(clamp ((_mtl_u._Glossiness + ((half)1.0 - tmpvar_7)), (half)0.0, (half)1.0)), tmpvar_24.yyy)
  )));
  half4 tmpvar_27;
  tmpvar_27.w = half(1.0);
  tmpvar_27.xyz = color_22;
  c_1.w = tmpvar_27.w;
  c_1.xyz = color_22;
  c_1.xyz = c_1.xyz;
  half4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = c_1.xyz;
  xlat_varoutput_28.w = tmpvar_3;
  _mtl_o._glesFragData_0 = xlat_varoutput_28;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
}
 }


 // Stats for Vertex shader:
 //       metal : 23 avg math (20..25), 1 branch
 //      opengl : 33 avg math (28..41), 3 avg texture (2..5), 0 avg branch (0..1)
 // Stats for Fragment shader:
 //       metal : 33 avg math (28..41), 3 avg texture (2..5), 0 avg branch (0..1)
 Pass {
  Name "FORWARD_DELTA"
  Tags { "LIGHTMODE"="ForwardAdd" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite Off
  Blend [_SrcBlend] One
  GpuProgramID 438143
Program "vp" {
SubProgram "opengl " {
// Stats: 30 math, 3 textures
Keywords { "POINT" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_4;
  viewDir_4 = -(xlv_TEXCOORD1);
  vec2 tmpvar_5;
  tmpvar_5.x = dot ((viewDir_4 - (2.0 * 
    (dot (tmpvar_2, viewDir_4) * tmpvar_2)
  )), tmpvar_3);
  tmpvar_5.y = (1.0 - clamp (dot (tmpvar_2, viewDir_4), 0.0, 1.0));
  vec2 tmpvar_6;
  tmpvar_6.x = ((tmpvar_5 * tmpvar_5) * (tmpvar_5 * tmpvar_5)).x;
  tmpvar_6.y = (1.0 - _Glossiness);
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((tmpvar_1 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) + (
    (texture2D (unity_NHxRoughness, tmpvar_6).w * 16.0)
   * 
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic))
  )) * ((_LightColor0.xyz * texture2D (_LightTexture0, vec2(
    dot (xlv_TEXCOORD5, xlv_TEXCOORD5)
  )).w) * clamp (
    dot (tmpvar_2, tmpvar_3)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_8;
  xlat_varoutput_8.xyz = tmpvar_7.xyz;
  xlat_varoutput_8.w = 1.0;
  gl_FragData[0] = xlat_varoutput_8;
}


#endif
"
}
SubProgram "metal " {
// Stats: 23 math, 1 branches
Keywords { "POINT" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 336
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 272 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_13 = half3(tmpvar_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  half3 tmpvar_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize((_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w)));
  tmpvar_20 = half3(tmpvar_21);
  lightDir_4 = float3(tmpvar_20);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex)).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.x = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat3.x * u_xlat3.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_3 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = _Color.xyz * u_xlat10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.xyz = vec3(u_xlat16_3) * u_xlat2.xyz;
    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xx);
    u_xlat1.xyz = u_xlat10_1.www * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 28 math, 2 textures
Keywords { "DIRECTIONAL" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_4;
  viewDir_4 = -(xlv_TEXCOORD1);
  vec2 tmpvar_5;
  tmpvar_5.x = dot ((viewDir_4 - (2.0 * 
    (dot (tmpvar_2, viewDir_4) * tmpvar_2)
  )), tmpvar_3);
  tmpvar_5.y = (1.0 - clamp (dot (tmpvar_2, viewDir_4), 0.0, 1.0));
  vec2 tmpvar_6;
  tmpvar_6.x = ((tmpvar_5 * tmpvar_5) * (tmpvar_5 * tmpvar_5)).x;
  tmpvar_6.y = (1.0 - _Glossiness);
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((tmpvar_1 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) + (
    (texture2D (unity_NHxRoughness, tmpvar_6).w * 16.0)
   * 
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic))
  )) * (_LightColor0.xyz * clamp (
    dot (tmpvar_2, tmpvar_3)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_8;
  xlat_varoutput_8.xyz = tmpvar_7.xyz;
  xlat_varoutput_8.w = 1.0;
  gl_FragData[0] = xlat_varoutput_8;
}


#endif
"
}
SubProgram "metal " {
// Stats: 20 math, 1 branches
Keywords { "DIRECTIONAL" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 258
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float3 tmpvar_19;
  tmpvar_19 = ((float3)_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_7.xyz * (float)_mtl_u._WorldSpaceLightPos0.w));
  tmpvar_4.w = half(tmpvar_19.x);
  tmpvar_5.w = half(tmpvar_19.y);
  tmpvar_6.w = half(tmpvar_19.z);
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
float u_xlat9;
mediump float u_xlat16_9;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat9 * u_xlat9;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_9 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = _Color.xyz * u_xlat10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat2.xyz = vec3(u_xlat16_9) * u_xlat2.xyz;
    u_xlat9 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 36 math, 4 textures
Keywords { "SPOT" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex));
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_4;
  viewDir_4 = -(xlv_TEXCOORD1);
  vec2 tmpvar_5;
  tmpvar_5.x = dot ((viewDir_4 - (2.0 * 
    (dot (tmpvar_2, viewDir_4) * tmpvar_2)
  )), tmpvar_3);
  tmpvar_5.y = (1.0 - clamp (dot (tmpvar_2, viewDir_4), 0.0, 1.0));
  vec2 tmpvar_6;
  tmpvar_6.x = ((tmpvar_5 * tmpvar_5) * (tmpvar_5 * tmpvar_5)).x;
  tmpvar_6.y = (1.0 - _Glossiness);
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((tmpvar_1 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) + (
    (texture2D (unity_NHxRoughness, tmpvar_6).w * 16.0)
   * 
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic))
  )) * ((_LightColor0.xyz * 
    ((float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w)
  ) * clamp (
    dot (tmpvar_2, tmpvar_3)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_8;
  xlat_varoutput_8.xyz = tmpvar_7.xyz;
  xlat_varoutput_8.w = 1.0;
  gl_FragData[0] = xlat_varoutput_8;
}


#endif
"
}
SubProgram "metal " {
// Stats: 23 math, 1 branches
Keywords { "SPOT" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 336
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 272 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_13 = half3(tmpvar_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  half3 tmpvar_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize((_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w)));
  tmpvar_20 = half3(tmpvar_21);
  lightDir_4 = float3(tmpvar_20);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD5 = hlslcc_mtx4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.x = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat3.x * u_xlat3.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_3 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = _Color.xyz * u_xlat10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.xyz = vec3(u_xlat16_3) * u_xlat2.xyz;
    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xy);
    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = u_xlat10_1.w * u_xlat1.x;
    u_xlat4 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_2 = texture(_LightTextureB0, vec2(u_xlat4));
    u_xlat1.x = u_xlat1.x * u_xlat10_2.w;
    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 31 math, 4 textures
Keywords { "POINT_COOKIE" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_4;
  viewDir_4 = -(xlv_TEXCOORD1);
  vec2 tmpvar_5;
  tmpvar_5.x = dot ((viewDir_4 - (2.0 * 
    (dot (tmpvar_2, viewDir_4) * tmpvar_2)
  )), tmpvar_3);
  tmpvar_5.y = (1.0 - clamp (dot (tmpvar_2, viewDir_4), 0.0, 1.0));
  vec2 tmpvar_6;
  tmpvar_6.x = ((tmpvar_5 * tmpvar_5) * (tmpvar_5 * tmpvar_5)).x;
  tmpvar_6.y = (1.0 - _Glossiness);
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((tmpvar_1 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) + (
    (texture2D (unity_NHxRoughness, tmpvar_6).w * 16.0)
   * 
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic))
  )) * ((_LightColor0.xyz * 
    (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w * textureCube (_LightTexture0, xlv_TEXCOORD5).w)
  ) * clamp (
    dot (tmpvar_2, tmpvar_3)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_8;
  xlat_varoutput_8.xyz = tmpvar_7.xyz;
  xlat_varoutput_8.w = 1.0;
  gl_FragData[0] = xlat_varoutput_8;
}


#endif
"
}
SubProgram "metal " {
// Stats: 23 math, 1 branches
Keywords { "POINT_COOKIE" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 336
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 272 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_13 = half3(tmpvar_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  half3 tmpvar_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize((_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w)));
  tmpvar_20 = half3(tmpvar_21);
  lightDir_4 = float3(tmpvar_20);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex)).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.x = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat3.x * u_xlat3.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_3 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = _Color.xyz * u_xlat10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.xyz = vec3(u_xlat16_3) * u_xlat2.xyz;
    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTextureB0, u_xlat1.xx);
    u_xlat10_2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
    u_xlat16_1 = u_xlat10_1.w * u_xlat10_2.w;
    u_xlat1.xyz = vec3(u_xlat16_1) * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 29 math, 3 textures
Keywords { "DIRECTIONAL_COOKIE" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_4;
  viewDir_4 = -(xlv_TEXCOORD1);
  vec2 tmpvar_5;
  tmpvar_5.x = dot ((viewDir_4 - (2.0 * 
    (dot (tmpvar_2, viewDir_4) * tmpvar_2)
  )), tmpvar_3);
  tmpvar_5.y = (1.0 - clamp (dot (tmpvar_2, viewDir_4), 0.0, 1.0));
  vec2 tmpvar_6;
  tmpvar_6.x = ((tmpvar_5 * tmpvar_5) * (tmpvar_5 * tmpvar_5)).x;
  tmpvar_6.y = (1.0 - _Glossiness);
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((tmpvar_1 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) + (
    (texture2D (unity_NHxRoughness, tmpvar_6).w * 16.0)
   * 
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic))
  )) * ((_LightColor0.xyz * texture2D (_LightTexture0, xlv_TEXCOORD5).w) * clamp (
    dot (tmpvar_2, tmpvar_3)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_8;
  xlat_varoutput_8.xyz = tmpvar_7.xyz;
  xlat_varoutput_8.w = 1.0;
  gl_FragData[0] = xlat_varoutput_8;
}


#endif
"
}
SubProgram "metal " {
// Stats: 22 math, 1 branches
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 336
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 272 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float2 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float3 tmpvar_19;
  tmpvar_19 = ((float3)_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_7.xyz * (float)_mtl_u._WorldSpaceLightPos0.w));
  tmpvar_4.w = half(tmpvar_19.x);
  tmpvar_5.w = half(tmpvar_19.y);
  tmpvar_6.w = half(tmpvar_19.z);
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex)).xy;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat0.xy = hlslcc_mtx4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
    vs_TEXCOORD5.xy = hlslcc_mtx4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec2 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.x = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat3.x * u_xlat3.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_3 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = _Color.xyz * u_xlat10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.xyz = vec3(u_xlat16_3) * u_xlat2.xyz;
    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
    u_xlat10_1 = texture(_LightTexture0, vs_TEXCOORD5.xy);
    u_xlat1.xyz = u_xlat10_1.www * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 40 math, 5 textures
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_WorldToShadow[4];

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15);
  xlv_TEXCOORD6 = (unity_WorldToShadow[0] * tmpvar_15);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_4;
  viewDir_4 = -(xlv_TEXCOORD1);
  vec2 tmpvar_5;
  tmpvar_5.x = dot ((viewDir_4 - (2.0 * 
    (dot (tmpvar_2, viewDir_4) * tmpvar_2)
  )), tmpvar_3);
  tmpvar_5.y = (1.0 - clamp (dot (tmpvar_2, viewDir_4), 0.0, 1.0));
  vec2 tmpvar_6;
  tmpvar_6.x = ((tmpvar_5 * tmpvar_5) * (tmpvar_5 * tmpvar_5)).x;
  tmpvar_6.y = (1.0 - _Glossiness);
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((tmpvar_1 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) + (
    (texture2D (unity_NHxRoughness, tmpvar_6).w * 16.0)
   * 
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic))
  )) * ((_LightColor0.xyz * 
    (((float(
      (xlv_TEXCOORD5.z > 0.0)
    ) * texture2D (_LightTexture0, (
      (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w)
     + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x * (1.0 - _LightShadowData.x))))
  ) * clamp (
    dot (tmpvar_2, tmpvar_3)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_8;
  xlat_varoutput_8.xyz = tmpvar_7.xyz;
  xlat_varoutput_8.w = 1.0;
  gl_FragData[0] = xlat_varoutput_8;
}


#endif
"
}
SubProgram "metal " {
// Stats: 24 math, 1 branches
Keywords { "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 592
Matrix 32 [unity_WorldToShadow] 4 4
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [unity_ObjectToWorld]
Matrix 416 [unity_WorldToObject]
Matrix 528 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 480 [_MainTex_ST]
Vector 496 [_DetailAlbedoMap_ST]
ScalarHalf 512 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 unity_WorldToShadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_13 = half3(tmpvar_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  half3 tmpvar_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize((_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w)));
  tmpvar_20 = half3(tmpvar_21);
  lightDir_4 = float3(tmpvar_20);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22);
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u.unity_WorldToShadow[0] * tmpvar_22);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD5 = hlslcc_mtx4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD6 = hlslcc_mtx4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D unity_NHxRoughness;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
vec3 u_xlat4;
lowp float u_xlat10_4;
float u_xlat7;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.x = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat3.x * u_xlat3.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_3 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = _Color.xyz * u_xlat10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.xyz = vec3(u_xlat16_3) * u_xlat2.xyz;
    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xy);
    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = u_xlat10_1.w * u_xlat1.x;
    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_2 = texture(_LightTextureB0, u_xlat4.xx);
    u_xlat1.x = u_xlat1.x * u_xlat10_2.w;
    u_xlat4.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat10_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat4.x = u_xlat10_4 * u_xlat7 + _LightShadowData.x;
    u_xlat1.x = u_xlat4.x * u_xlat1.x;
    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 29 math, 3 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec4 o_14;
  vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_7 * 0.5);
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_7.zw;
  vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_17.x;
  tmpvar_4.w = tmpvar_17.y;
  tmpvar_5.w = tmpvar_17.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = o_14;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_4;
  viewDir_4 = -(xlv_TEXCOORD1);
  vec2 tmpvar_5;
  tmpvar_5.x = dot ((viewDir_4 - (2.0 * 
    (dot (tmpvar_2, viewDir_4) * tmpvar_2)
  )), tmpvar_3);
  tmpvar_5.y = (1.0 - clamp (dot (tmpvar_2, viewDir_4), 0.0, 1.0));
  vec2 tmpvar_6;
  tmpvar_6.x = ((tmpvar_5 * tmpvar_5) * (tmpvar_5 * tmpvar_5)).x;
  tmpvar_6.y = (1.0 - _Glossiness);
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((tmpvar_1 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) + (
    (texture2D (unity_NHxRoughness, tmpvar_6).w * 16.0)
   * 
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic))
  )) * ((_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x) * clamp (
    dot (tmpvar_2, tmpvar_3)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_8;
  xlat_varoutput_8.xyz = tmpvar_7.xyz;
  xlat_varoutput_8.w = 1.0;
  gl_FragData[0] = xlat_varoutput_8;
}


#endif
"
}
SubProgram "metal " {
// Stats: 23 math, 1 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 274
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
VectorHalf 32 [_WorldSpaceLightPos0] 4
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float4 o_19;
  float4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  float2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _mtl_u._ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  float3 tmpvar_22;
  tmpvar_22 = ((float3)_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_7.xyz * (float)_mtl_u._WorldSpaceLightPos0.w));
  tmpvar_4.w = half(tmpvar_22.x);
  tmpvar_5.w = half(tmpvar_22.y);
  tmpvar_6.w = half(tmpvar_22.z);
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = o_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
float u_xlat10;
float u_xlat11;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    vs_TEXCOORD1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.x = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat3.x * u_xlat3.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_3 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = _Color.xyz * u_xlat10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.xyz = vec3(u_xlat16_3) * u_xlat2.xyz;
    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat1.xyz = u_xlat10_1.xxx * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 30 math, 4 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec4 o_14;
  vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_7 * 0.5);
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_7.zw;
  vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_17.x;
  tmpvar_4.w = tmpvar_17.y;
  tmpvar_5.w = tmpvar_17.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex)).xy;
  xlv_TEXCOORD6 = o_14;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_4;
  viewDir_4 = -(xlv_TEXCOORD1);
  vec2 tmpvar_5;
  tmpvar_5.x = dot ((viewDir_4 - (2.0 * 
    (dot (tmpvar_2, viewDir_4) * tmpvar_2)
  )), tmpvar_3);
  tmpvar_5.y = (1.0 - clamp (dot (tmpvar_2, viewDir_4), 0.0, 1.0));
  vec2 tmpvar_6;
  tmpvar_6.x = ((tmpvar_5 * tmpvar_5) * (tmpvar_5 * tmpvar_5)).x;
  tmpvar_6.y = (1.0 - _Glossiness);
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((tmpvar_1 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) + (
    (texture2D (unity_NHxRoughness, tmpvar_6).w * 16.0)
   * 
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic))
  )) * ((_LightColor0.xyz * 
    (texture2D (_LightTexture0, xlv_TEXCOORD5).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x)
  ) * clamp (
    dot (tmpvar_2, tmpvar_3)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_8;
  xlat_varoutput_8.xyz = tmpvar_7.xyz;
  xlat_varoutput_8.w = 1.0;
  gl_FragData[0] = xlat_varoutput_8;
}


#endif
"
}
SubProgram "metal " {
// Stats: 25 math, 1 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 352
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Matrix 288 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
VectorHalf 32 [_WorldSpaceLightPos0] 4
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float2 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float4 o_19;
  float4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  float2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _mtl_u._ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  float3 tmpvar_22;
  tmpvar_22 = ((float3)_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_7.xyz * (float)_mtl_u._WorldSpaceLightPos0.w));
  tmpvar_4.w = half(tmpvar_22.x);
  tmpvar_5.w = half(tmpvar_22.y);
  tmpvar_6.w = half(tmpvar_22.z);
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex)).xy;
  _mtl_o.xlv_TEXCOORD6 = o_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
float u_xlat10;
float u_xlat11;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    vs_TEXCOORD1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat2.xy;
    u_xlat1.xy = hlslcc_mtx4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat1.xy;
    vs_TEXCOORD5.xy = hlslcc_mtx4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat1.xy;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec2 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.x = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat3.x * u_xlat3.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_3 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = _Color.xyz * u_xlat10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.xyz = vec3(u_xlat16_3) * u_xlat2.xyz;
    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat10_2 = texture(_LightTexture0, vs_TEXCOORD5.xy);
    u_xlat16_1 = u_xlat10_1.x * u_xlat10_2.w;
    u_xlat1.xyz = vec3(u_xlat16_1) * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 37 math, 4 textures, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15).xyz;
  xlv_TEXCOORD6 = (tmpvar_15.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic));
  tmpvar_2 = (tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  float mydist_7;
  mydist_7 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_8;
  tmpvar_8 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_9;
  if ((tmpvar_8.x < mydist_7)) {
    tmpvar_9 = _LightShadowData.x;
  } else {
    tmpvar_9 = 1.0;
  };
  vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (tmpvar_4, viewDir_10) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_11.y = (1.0 - clamp (dot (tmpvar_4, viewDir_10), 0.0, 1.0));
  vec2 tmpvar_12;
  tmpvar_12.x = ((tmpvar_11 * tmpvar_11) * (tmpvar_11 * tmpvar_11)).x;
  tmpvar_12.y = (1.0 - _Glossiness);
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = ((tmpvar_2 + (
    (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0)
   * tmpvar_3)) * ((_LightColor0.xyz * 
    (tmpvar_6.w * tmpvar_9)
  ) * clamp (
    dot (tmpvar_4, tmpvar_5)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "metal " {
// Stats: 24 math, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 352
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Matrix 288 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_13 = half3(tmpvar_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  half3 tmpvar_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize((_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w)));
  tmpvar_20 = half3(tmpvar_21);
  lightDir_4 = float3(tmpvar_20);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22).xyz;
  _mtl_o.xlv_TEXCOORD6 = (tmpvar_22.xyz - _mtl_u._LightPositionRange.xyz);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  samplerCube _ShadowMapTexture;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.x = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat3.x * u_xlat3.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_3 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = _Color.xyz * u_xlat10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.xyz = vec3(u_xlat16_3) * u_xlat2.xyz;
    u_xlat10 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat3.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
    u_xlat1.x = u_xlat1.x * 0.970000029;
    u_xlat10_2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    u_xlatb1 = u_xlat10_2.x<u_xlat1.x;
    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
    u_xlat4 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_2 = texture(_LightTexture0, vec2(u_xlat4));
    u_xlat1.x = u_xlat1.x * u_xlat10_2.w;
    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 38 math, 5 textures, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15).xyz;
  xlv_TEXCOORD6 = (tmpvar_15.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic));
  tmpvar_2 = (tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_7;
  tmpvar_7 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  float mydist_8;
  mydist_8 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_9;
  tmpvar_9 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_10;
  if ((tmpvar_9.x < mydist_8)) {
    tmpvar_10 = _LightShadowData.x;
  } else {
    tmpvar_10 = 1.0;
  };
  vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (tmpvar_4, viewDir_11) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_12.y = (1.0 - clamp (dot (tmpvar_4, viewDir_11), 0.0, 1.0));
  vec2 tmpvar_13;
  tmpvar_13.x = ((tmpvar_12 * tmpvar_12) * (tmpvar_12 * tmpvar_12)).x;
  tmpvar_13.y = (1.0 - _Glossiness);
  vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = ((tmpvar_2 + (
    (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0)
   * tmpvar_3)) * ((_LightColor0.xyz * 
    ((tmpvar_6.w * tmpvar_7.w) * tmpvar_10)
  ) * clamp (
    dot (tmpvar_4, tmpvar_5)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = 1.0;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "metal " {
// Stats: 24 math, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 352
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Matrix 288 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_13 = half3(tmpvar_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  half3 tmpvar_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize((_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w)));
  tmpvar_20 = half3(tmpvar_21);
  lightDir_4 = float3(tmpvar_20);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22).xyz;
  _mtl_o.xlv_TEXCOORD6 = (tmpvar_22.xyz - _mtl_u._LightPositionRange.xyz);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  samplerCube _ShadowMapTexture;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump float u_xlat16_4;
float u_xlat5;
mediump float u_xlat16_5;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat12 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.x = u_xlat12 * u_xlat12;
    u_xlat1.x = u_xlat4.x * u_xlat4.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_4 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = _Color.xyz * u_xlat10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat4.xyz = vec3(u_xlat16_4) * u_xlat2.xyz;
    u_xlat13 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
    u_xlat1.x = u_xlat1.x * 0.970000029;
    u_xlat10_2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    u_xlatb1 = u_xlat10_2.x<u_xlat1.x;
    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
    u_xlat5 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_2 = texture(_LightTextureB0, vec2(u_xlat5));
    u_xlat10_3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
    u_xlat16_5 = u_xlat10_2.w * u_xlat10_3.w;
    u_xlat1.x = u_xlat1.x * u_xlat16_5;
    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat4.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 31 math, 3 textures
Keywords { "POINT" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_4, viewDir_6) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_4, viewDir_6), 0.0, 1.0));
  vec2 tmpvar_8;
  tmpvar_8.x = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7)).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   * tmpvar_1) + (
    (texture2D (unity_NHxRoughness, tmpvar_8).w * 16.0)
   * 
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic))
  )) * ((_LightColor0.xyz * texture2D (_LightTexture0, vec2(
    dot (xlv_TEXCOORD5, xlv_TEXCOORD5)
  )).w) * clamp (
    dot (tmpvar_4, tmpvar_5)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_10;
  xlat_varoutput_10.xyz = tmpvar_9.xyz;
  xlat_varoutput_10.w = tmpvar_1;
  gl_FragData[0] = xlat_varoutput_10;
}


#endif
"
}
SubProgram "metal " {
// Stats: 23 math, 1 branches
Keywords { "POINT" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 336
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 272 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_13 = half3(tmpvar_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  half3 tmpvar_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize((_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w)));
  tmpvar_20 = half3(tmpvar_21);
  lightDir_4 = float3(tmpvar_20);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex)).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_3;
vec3 u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.x = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat3.x * u_xlat3.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_3 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1 = u_xlat10_1.wxyz * _Color.wxyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.xyz = vec3(u_xlat16_3) * u_xlat2.xyz;
    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
    SV_Target0.w = u_xlat1.x;
    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xx);
    u_xlat1.xyz = u_xlat10_1.www * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 29 math, 2 textures
Keywords { "DIRECTIONAL" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_4, viewDir_6) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_4, viewDir_6), 0.0, 1.0));
  vec2 tmpvar_8;
  tmpvar_8.x = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7)).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   * tmpvar_1) + (
    (texture2D (unity_NHxRoughness, tmpvar_8).w * 16.0)
   * 
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic))
  )) * (_LightColor0.xyz * clamp (
    dot (tmpvar_4, tmpvar_5)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_10;
  xlat_varoutput_10.xyz = tmpvar_9.xyz;
  xlat_varoutput_10.w = tmpvar_1;
  gl_FragData[0] = xlat_varoutput_10;
}


#endif
"
}
SubProgram "metal " {
// Stats: 20 math, 1 branches
Keywords { "DIRECTIONAL" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 258
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float3 tmpvar_19;
  tmpvar_19 = ((float3)_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_7.xyz * (float)_mtl_u._WorldSpaceLightPos0.w));
  tmpvar_4.w = half(tmpvar_19.x);
  tmpvar_5.w = half(tmpvar_19.y);
  tmpvar_6.w = half(tmpvar_19.z);
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
vec3 u_xlat4;
float u_xlat9;
mediump float u_xlat16_9;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat9 * u_xlat9;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_9 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1 = u_xlat10_1.wxyz * _Color.wxyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat2.xyz = vec3(u_xlat16_9) * u_xlat2.xyz;
    u_xlat9 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat4.xyz = vec3(u_xlat9) * u_xlat1.yzw;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat2.xyz;
    SV_Target0.w = u_xlat1.x;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat4.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 37 math, 4 textures
Keywords { "SPOT" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex));
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_4, viewDir_6) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_4, viewDir_6), 0.0, 1.0));
  vec2 tmpvar_8;
  tmpvar_8.x = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7)).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   * tmpvar_1) + (
    (texture2D (unity_NHxRoughness, tmpvar_8).w * 16.0)
   * 
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic))
  )) * ((_LightColor0.xyz * 
    ((float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w)
  ) * clamp (
    dot (tmpvar_4, tmpvar_5)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_10;
  xlat_varoutput_10.xyz = tmpvar_9.xyz;
  xlat_varoutput_10.w = tmpvar_1;
  gl_FragData[0] = xlat_varoutput_10;
}


#endif
"
}
SubProgram "metal " {
// Stats: 23 math, 1 branches
Keywords { "SPOT" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 336
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 272 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_13 = half3(tmpvar_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  half3 tmpvar_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize((_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w)));
  tmpvar_20 = half3(tmpvar_21);
  lightDir_4 = float3(tmpvar_20);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD5 = hlslcc_mtx4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
vec3 u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.x = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat3.x * u_xlat3.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_3 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1 = u_xlat10_1.wxyz * _Color.wxyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.xyz = vec3(u_xlat16_3) * u_xlat2.xyz;
    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
    SV_Target0.w = u_xlat1.x;
    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xy);
    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = u_xlat10_1.w * u_xlat1.x;
    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_2 = texture(_LightTextureB0, u_xlat4.xx);
    u_xlat1.x = u_xlat1.x * u_xlat10_2.w;
    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 32 math, 4 textures
Keywords { "POINT_COOKIE" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_4, viewDir_6) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_4, viewDir_6), 0.0, 1.0));
  vec2 tmpvar_8;
  tmpvar_8.x = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7)).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   * tmpvar_1) + (
    (texture2D (unity_NHxRoughness, tmpvar_8).w * 16.0)
   * 
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic))
  )) * ((_LightColor0.xyz * 
    (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w * textureCube (_LightTexture0, xlv_TEXCOORD5).w)
  ) * clamp (
    dot (tmpvar_4, tmpvar_5)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_10;
  xlat_varoutput_10.xyz = tmpvar_9.xyz;
  xlat_varoutput_10.w = tmpvar_1;
  gl_FragData[0] = xlat_varoutput_10;
}


#endif
"
}
SubProgram "metal " {
// Stats: 23 math, 1 branches
Keywords { "POINT_COOKIE" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 336
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 272 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_13 = half3(tmpvar_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  half3 tmpvar_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize((_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w)));
  tmpvar_20 = half3(tmpvar_21);
  lightDir_4 = float3(tmpvar_20);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex)).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
vec3 u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.x = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat3.x * u_xlat3.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_3 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1 = u_xlat10_1.wxyz * _Color.wxyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.xyz = vec3(u_xlat16_3) * u_xlat2.xyz;
    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
    SV_Target0.w = u_xlat1.x;
    u_xlat1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_1 = texture(_LightTextureB0, u_xlat1.xx);
    u_xlat10_2 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
    u_xlat16_1 = u_xlat10_1.w * u_xlat10_2.w;
    u_xlat1.xyz = vec3(u_xlat16_1) * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 30 math, 3 textures
Keywords { "DIRECTIONAL_COOKIE" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_4, viewDir_6) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_4, viewDir_6), 0.0, 1.0));
  vec2 tmpvar_8;
  tmpvar_8.x = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7)).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   * tmpvar_1) + (
    (texture2D (unity_NHxRoughness, tmpvar_8).w * 16.0)
   * 
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic))
  )) * ((_LightColor0.xyz * texture2D (_LightTexture0, xlv_TEXCOORD5).w) * clamp (
    dot (tmpvar_4, tmpvar_5)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_10;
  xlat_varoutput_10.xyz = tmpvar_9.xyz;
  xlat_varoutput_10.w = tmpvar_1;
  gl_FragData[0] = xlat_varoutput_10;
}


#endif
"
}
SubProgram "metal " {
// Stats: 22 math, 1 branches
Keywords { "DIRECTIONAL_COOKIE" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 336
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 272 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 224 [_MainTex_ST]
Vector 240 [_DetailAlbedoMap_ST]
ScalarHalf 256 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float2 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float3 tmpvar_19;
  tmpvar_19 = ((float3)_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_7.xyz * (float)_mtl_u._WorldSpaceLightPos0.w));
  tmpvar_4.w = half(tmpvar_19.x);
  tmpvar_5.w = half(tmpvar_19.y);
  tmpvar_6.w = half(tmpvar_19.z);
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex)).xy;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat0.xy = hlslcc_mtx4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
    vs_TEXCOORD5.xy = hlslcc_mtx4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec2 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_3;
vec3 u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.x = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat3.x * u_xlat3.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_3 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1 = u_xlat10_1.wxyz * _Color.wxyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.xyz = vec3(u_xlat16_3) * u_xlat2.xyz;
    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
    SV_Target0.w = u_xlat1.x;
    u_xlat10_1 = texture(_LightTexture0, vs_TEXCOORD5.xy);
    u_xlat1.xyz = u_xlat10_1.www * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 41 math, 5 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_WorldToShadow[4];

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15);
  xlv_TEXCOORD6 = (unity_WorldToShadow[0] * tmpvar_15);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_4, viewDir_6) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_4, viewDir_6), 0.0, 1.0));
  vec2 tmpvar_8;
  tmpvar_8.x = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7)).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   * tmpvar_1) + (
    (texture2D (unity_NHxRoughness, tmpvar_8).w * 16.0)
   * 
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic))
  )) * ((_LightColor0.xyz * 
    (((float(
      (xlv_TEXCOORD5.z > 0.0)
    ) * texture2D (_LightTexture0, (
      (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w)
     + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x * (1.0 - _LightShadowData.x))))
  ) * clamp (
    dot (tmpvar_4, tmpvar_5)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_10;
  xlat_varoutput_10.xyz = tmpvar_9.xyz;
  xlat_varoutput_10.w = tmpvar_1;
  gl_FragData[0] = xlat_varoutput_10;
}


#endif
"
}
SubProgram "metal " {
// Stats: 24 math, 1 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 592
Matrix 32 [unity_WorldToShadow] 4 4
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [unity_ObjectToWorld]
Matrix 416 [unity_WorldToObject]
Matrix 528 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 480 [_MainTex_ST]
Vector 496 [_DetailAlbedoMap_ST]
ScalarHalf 512 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 unity_WorldToShadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_13 = half3(tmpvar_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  half3 tmpvar_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize((_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w)));
  tmpvar_20 = half3(tmpvar_21);
  lightDir_4 = float3(tmpvar_20);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22);
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u.unity_WorldToShadow[0] * tmpvar_22);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD5 = hlslcc_mtx4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD6 = hlslcc_mtx4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D unity_NHxRoughness;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
vec3 u_xlat4;
lowp float u_xlat10_4;
float u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.x = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat3.x * u_xlat3.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_3 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1 = u_xlat10_1.wxyz * _Color.wxyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.xyz = vec3(u_xlat16_3) * u_xlat2.xyz;
    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
    SV_Target0.w = u_xlat1.x;
    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xy);
    u_xlatb1 = 0.0<vs_TEXCOORD5.z;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = u_xlat10_1.w * u_xlat1.x;
    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_2 = texture(_LightTextureB0, u_xlat4.xx);
    u_xlat1.x = u_xlat1.x * u_xlat10_2.w;
    u_xlat4.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat10_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = (-_LightShadowData.x) + 1.0;
    u_xlat4.x = u_xlat10_4 * u_xlat7 + _LightShadowData.x;
    u_xlat1.x = u_xlat4.x * u_xlat1.x;
    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 30 math, 3 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec4 o_14;
  vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_7 * 0.5);
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_7.zw;
  vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_17.x;
  tmpvar_4.w = tmpvar_17.y;
  tmpvar_5.w = tmpvar_17.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = o_14;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_4, viewDir_6) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_4, viewDir_6), 0.0, 1.0));
  vec2 tmpvar_8;
  tmpvar_8.x = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7)).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   * tmpvar_1) + (
    (texture2D (unity_NHxRoughness, tmpvar_8).w * 16.0)
   * 
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic))
  )) * ((_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x) * clamp (
    dot (tmpvar_4, tmpvar_5)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_10;
  xlat_varoutput_10.xyz = tmpvar_9.xyz;
  xlat_varoutput_10.w = tmpvar_1;
  gl_FragData[0] = xlat_varoutput_10;
}


#endif
"
}
SubProgram "metal " {
// Stats: 23 math, 1 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 274
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
VectorHalf 32 [_WorldSpaceLightPos0] 4
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float4 o_19;
  float4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  float2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _mtl_u._ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  float3 tmpvar_22;
  tmpvar_22 = ((float3)_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_7.xyz * (float)_mtl_u._WorldSpaceLightPos0.w));
  tmpvar_4.w = half(tmpvar_22.x);
  tmpvar_5.w = half(tmpvar_22.y);
  tmpvar_6.w = half(tmpvar_22.z);
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = o_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
float u_xlat10;
float u_xlat11;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    vs_TEXCOORD1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_3;
vec3 u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.x = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat3.x * u_xlat3.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_3 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1 = u_xlat10_1.wxyz * _Color.wxyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.xyz = vec3(u_xlat16_3) * u_xlat2.xyz;
    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
    SV_Target0.w = u_xlat1.x;
    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat1.xyz = u_xlat10_1.xxx * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 31 math, 4 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec4 o_14;
  vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_7 * 0.5);
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_7.zw;
  vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_17.x;
  tmpvar_4.w = tmpvar_17.y;
  tmpvar_5.w = tmpvar_17.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_WorldToLight * (unity_ObjectToWorld * gl_Vertex)).xy;
  xlv_TEXCOORD6 = o_14;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_4, viewDir_6) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_4, viewDir_6), 0.0, 1.0));
  vec2 tmpvar_8;
  tmpvar_8.x = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7)).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   * tmpvar_1) + (
    (texture2D (unity_NHxRoughness, tmpvar_8).w * 16.0)
   * 
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic))
  )) * ((_LightColor0.xyz * 
    (texture2D (_LightTexture0, xlv_TEXCOORD5).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x)
  ) * clamp (
    dot (tmpvar_4, tmpvar_5)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_10;
  xlat_varoutput_10.xyz = tmpvar_9.xyz;
  xlat_varoutput_10.w = tmpvar_1;
  gl_FragData[0] = xlat_varoutput_10;
}


#endif
"
}
SubProgram "metal " {
// Stats: 25 math, 1 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 352
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Matrix 288 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
VectorHalf 32 [_WorldSpaceLightPos0] 4
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float2 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  half4 tmpvar_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_8;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_8 = (_mtl_u.glstate_matrix_mvp * tmpvar_9);
  float4 texcoord_10;
  texcoord_10.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_11;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_7.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_12 = half3(tmpvar_13);
  float3 norm_14;
  norm_14 = float3(tmpvar_1);
  float4 v_15;
  v_15.x = _mtl_u.unity_WorldToObject[0].x;
  v_15.y = _mtl_u.unity_WorldToObject[1].x;
  v_15.z = _mtl_u.unity_WorldToObject[2].x;
  v_15.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].y;
  v_16.y = _mtl_u.unity_WorldToObject[1].y;
  v_16.z = _mtl_u.unity_WorldToObject[2].y;
  v_16.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].z;
  v_17.y = _mtl_u.unity_WorldToObject[1].z;
  v_17.z = _mtl_u.unity_WorldToObject[2].z;
  v_17.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_4.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(tmpvar_18);
  float4 o_19;
  float4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  float2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _mtl_u._ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  float3 tmpvar_22;
  tmpvar_22 = ((float3)_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_7.xyz * (float)_mtl_u._WorldSpaceLightPos0.w));
  tmpvar_4.w = half(tmpvar_22.x);
  tmpvar_5.w = half(tmpvar_22.y);
  tmpvar_6.w = half(tmpvar_22.z);
  _mtl_o.gl_Position = tmpvar_8;
  _mtl_o.xlv_TEXCOORD0 = texcoord_10;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex)).xy;
  _mtl_o.xlv_TEXCOORD6 = o_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
float u_xlat10;
float u_xlat11;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlatb1 = _UVSec==0.0;
    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    vs_TEXCOORD1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat1.w = 0.0;
    vs_TEXCOORD2 = u_xlat1.wwwx;
    vs_TEXCOORD3 = u_xlat1.wwwy;
    vs_TEXCOORD4.w = u_xlat1.z;
    u_xlat1.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat1.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat1.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat2.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat2.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat2.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat2.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat2.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat2.xy;
    u_xlat1.xy = hlslcc_mtx4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat1.xy;
    vs_TEXCOORD5.xy = hlslcc_mtx4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat1.xy;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec2 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
vec3 u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.x = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat3.x * u_xlat3.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_3 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1 = u_xlat10_1.wxyz * _Color.wxyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.xyz = vec3(u_xlat16_3) * u_xlat2.xyz;
    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
    SV_Target0.w = u_xlat1.x;
    u_xlat1.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat10_2 = texture(_LightTexture0, vs_TEXCOORD5.xy);
    u_xlat16_1 = u_xlat10_1.x * u_xlat10_2.w;
    u_xlat1.xyz = vec3(u_xlat16_1) * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 38 math, 4 textures, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15).xyz;
  xlv_TEXCOORD6 = (tmpvar_15.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_6;
  diffColor_6 = ((tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) * tmpvar_1);
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  float mydist_9;
  mydist_9 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_10;
  tmpvar_10 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_11;
  if ((tmpvar_10.x < mydist_9)) {
    tmpvar_11 = _LightShadowData.x;
  } else {
    tmpvar_11 = 1.0;
  };
  vec3 viewDir_12;
  viewDir_12 = -(xlv_TEXCOORD1);
  vec2 tmpvar_13;
  tmpvar_13.x = dot ((viewDir_12 - (2.0 * 
    (dot (tmpvar_5, viewDir_12) * tmpvar_5)
  )), tmpvar_7);
  tmpvar_13.y = (1.0 - clamp (dot (tmpvar_5, viewDir_12), 0.0, 1.0));
  vec2 tmpvar_14;
  tmpvar_14.x = ((tmpvar_13 * tmpvar_13) * (tmpvar_13 * tmpvar_13)).x;
  tmpvar_14.y = (1.0 - _Glossiness);
  vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = ((diffColor_6 + (
    (texture2D (unity_NHxRoughness, tmpvar_14).w * 16.0)
   * tmpvar_4)) * ((_LightColor0.xyz * 
    (tmpvar_8.w * tmpvar_11)
  ) * clamp (
    dot (tmpvar_5, tmpvar_7)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_16;
  xlat_varoutput_16.xyz = tmpvar_15.xyz;
  xlat_varoutput_16.w = tmpvar_1;
  gl_FragData[0] = xlat_varoutput_16;
}


#endif
"
}
SubProgram "metal " {
// Stats: 24 math, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 352
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Matrix 288 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_13 = half3(tmpvar_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  half3 tmpvar_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize((_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w)));
  tmpvar_20 = half3(tmpvar_21);
  lightDir_4 = float3(tmpvar_20);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22).xyz;
  _mtl_o.xlv_TEXCOORD6 = (tmpvar_22.xyz - _mtl_u._LightPositionRange.xyz);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  samplerCube _ShadowMapTexture;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
vec3 u_xlat4;
float u_xlat9;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat9 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat9 = u_xlat9 + u_xlat9;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.x = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat3.x * u_xlat3.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_3 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1 = u_xlat10_1.wxyz * _Color.wxyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat3.xyz = vec3(u_xlat16_3) * u_xlat2.xyz;
    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat4.xyz = u_xlat1.yzw * u_xlat2.xxx;
    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.xxx + u_xlat3.xyz;
    SV_Target0.w = u_xlat1.x;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
    u_xlat1.x = u_xlat1.x * 0.970000029;
    u_xlat10_2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    u_xlatb1 = u_xlat10_2.x<u_xlat1.x;
    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
    u_xlat4.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_2 = texture(_LightTexture0, u_xlat4.xx);
    u_xlat1.x = u_xlat1.x * u_xlat10_2.w;
    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 39 math, 5 textures, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 unity_WorldToLight;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * gl_Vertex);
  vec4 tmpvar_7;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = gl_Vertex.xyz;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = unity_WorldToObject[0].x;
  v_11.y = unity_WorldToObject[1].x;
  v_11.z = unity_WorldToObject[2].x;
  v_11.w = unity_WorldToObject[3].x;
  vec4 v_12;
  v_12.x = unity_WorldToObject[0].y;
  v_12.y = unity_WorldToObject[1].y;
  v_12.z = unity_WorldToObject[2].y;
  v_12.w = unity_WorldToObject[3].y;
  vec4 v_13;
  v_13.x = unity_WorldToObject[0].z;
  v_13.y = unity_WorldToObject[1].z;
  v_13.z = unity_WorldToObject[2].z;
  v_13.w = unity_WorldToObject[3].z;
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_14.x;
  tmpvar_4.w = tmpvar_14.y;
  tmpvar_5.w = tmpvar_14.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * gl_Vertex);
  xlv_TEXCOORD5 = (unity_WorldToLight * tmpvar_15).xyz;
  xlv_TEXCOORD6 = (tmpvar_15.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  float tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_1 = (tmpvar_2.w * _Color.w);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 diffColor_6;
  diffColor_6 = ((tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) * tmpvar_1);
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_9;
  tmpvar_9 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  float mydist_10;
  mydist_10 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_11;
  tmpvar_11 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_12;
  if ((tmpvar_11.x < mydist_10)) {
    tmpvar_12 = _LightShadowData.x;
  } else {
    tmpvar_12 = 1.0;
  };
  vec3 viewDir_13;
  viewDir_13 = -(xlv_TEXCOORD1);
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((viewDir_13 - (2.0 * 
    (dot (tmpvar_5, viewDir_13) * tmpvar_5)
  )), tmpvar_7);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_5, viewDir_13), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15.x = ((tmpvar_14 * tmpvar_14) * (tmpvar_14 * tmpvar_14)).x;
  tmpvar_15.y = (1.0 - _Glossiness);
  vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((diffColor_6 + (
    (texture2D (unity_NHxRoughness, tmpvar_15).w * 16.0)
   * tmpvar_4)) * ((_LightColor0.xyz * 
    ((tmpvar_8.w * tmpvar_9.w) * tmpvar_12)
  ) * clamp (
    dot (tmpvar_5, tmpvar_7)
  , 0.0, 1.0)));
  vec4 xlat_varoutput_17;
  xlat_varoutput_17.xyz = tmpvar_16.xyz;
  xlat_varoutput_17.w = tmpvar_1;
  gl_FragData[0] = xlat_varoutput_17;
}


#endif
"
}
SubProgram "metal " {
// Stats: 24 math, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
Bind "texcoord1" ATTR3
ConstBuffer "$Globals" 352
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [unity_ObjectToWorld]
Matrix 176 [unity_WorldToObject]
Matrix 288 [unity_WorldToLight]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
Vector 240 [_MainTex_ST]
Vector 256 [_DetailAlbedoMap_ST]
ScalarHalf 272 [_UVSec]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
  float4 _glesMultiTexCoord1 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  float4x4 unity_WorldToLight;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half3 tmpvar_1;
  tmpvar_1 = half3(_mtl_i._glesNormal);
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_3;
  tmpvar_3 = _mtl_i._glesMultiTexCoord1.xy;
  float3 lightDir_4;
  half4 tmpvar_5;
  half4 tmpvar_6;
  half4 tmpvar_7;
  float4 tmpvar_8;
  tmpvar_8 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  float4 tmpvar_9;
  float4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _mtl_i._glesVertex.xyz;
  tmpvar_9 = (_mtl_u.glstate_matrix_mvp * tmpvar_10);
  float4 texcoord_11;
  texcoord_11.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_12;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  half3 tmpvar_13;
  float3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _mtl_u._WorldSpaceCameraPos));
  tmpvar_13 = half3(tmpvar_14);
  float3 norm_15;
  norm_15 = float3(tmpvar_1);
  float4 v_16;
  v_16.x = _mtl_u.unity_WorldToObject[0].x;
  v_16.y = _mtl_u.unity_WorldToObject[1].x;
  v_16.z = _mtl_u.unity_WorldToObject[2].x;
  v_16.w = _mtl_u.unity_WorldToObject[3].x;
  float4 v_17;
  v_17.x = _mtl_u.unity_WorldToObject[0].y;
  v_17.y = _mtl_u.unity_WorldToObject[1].y;
  v_17.z = _mtl_u.unity_WorldToObject[2].y;
  v_17.w = _mtl_u.unity_WorldToObject[3].y;
  float4 v_18;
  v_18.x = _mtl_u.unity_WorldToObject[0].z;
  v_18.y = _mtl_u.unity_WorldToObject[1].z;
  v_18.z = _mtl_u.unity_WorldToObject[2].z;
  v_18.w = _mtl_u.unity_WorldToObject[3].z;
  float3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  tmpvar_5.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_6.xyz = half3(float3(0.0, 0.0, 0.0));
  tmpvar_7.xyz = half3(tmpvar_19);
  half3 tmpvar_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize((_mtl_u._WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _mtl_u._WorldSpaceLightPos0.w)));
  tmpvar_20 = half3(tmpvar_21);
  lightDir_4 = float3(tmpvar_20);
  tmpvar_5.w = half(lightDir_4.x);
  tmpvar_6.w = half(lightDir_4.y);
  tmpvar_7.w = half(lightDir_4.z);
  _mtl_o.gl_Position = tmpvar_9;
  _mtl_o.xlv_TEXCOORD0 = texcoord_11;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_13;
  _mtl_o.xlv_TEXCOORD2 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2_1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2_2 = tmpvar_7;
  float4 tmpvar_22;
  tmpvar_22 = (_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u.unity_WorldToLight * tmpvar_22).xyz;
  _mtl_o.xlv_TEXCOORD6 = (tmpvar_22.xyz - _mtl_u._LightPositionRange.xyz);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  samplerCube _ShadowMapTexture;
uniform  sampler2D unity_NHxRoughness;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump float u_xlat16_4;
vec3 u_xlat5;
mediump float u_xlat16_5;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat12 = dot((-vs_TEXCOORD1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-vs_TEXCOORD1.xyz);
    u_xlat2.x = vs_TEXCOORD2.w;
    u_xlat2.y = vs_TEXCOORD3.w;
    u_xlat2.z = vs_TEXCOORD4.w;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.x = u_xlat12 * u_xlat12;
    u_xlat1.x = u_xlat4.x * u_xlat4.x;
    u_xlat1.y = (-_Glossiness) + 1.0;
    u_xlat10_1 = texture(unity_NHxRoughness, u_xlat1.xy);
    u_xlat16_4 = u_xlat10_1.w * 16.0;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1 = u_xlat10_1.wxyz * _Color.wxyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat4.xyz = vec3(u_xlat16_4) * u_xlat2.xyz;
    u_xlat2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat5.xyz = u_xlat1.yzw * u_xlat2.xxx;
    u_xlat4.xyz = u_xlat5.xyz * u_xlat1.xxx + u_xlat4.xyz;
    SV_Target0.w = u_xlat1.x;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
    u_xlat1.x = u_xlat1.x * 0.970000029;
    u_xlat10_2 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    u_xlatb1 = u_xlat10_2.x<u_xlat1.x;
    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
    u_xlat5.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    u_xlat10_2 = texture(_LightTextureB0, u_xlat5.xx);
    u_xlat10_3 = texture(_LightTexture0, vs_TEXCOORD5.xyz);
    u_xlat16_5 = u_xlat10_2.w * u_xlat10_3.w;
    u_xlat1.x = u_xlat1.x * u_xlat16_5;
    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat4.xyz * u_xlat1.xyz;
    return;
}
#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "POINT" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 30 math, 3 textures
Keywords { "POINT" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_LightTexture0] 2D 2
ConstBuffer "$Globals" 28
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_LightColor0] 4
VectorHalf 16 [_Color] 4
ScalarHalf 24 [_Metallic]
ScalarHalf 26 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  tmpvar_3 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_4;
  tmpvar_4.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_4.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_4.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_5;
  tmpvar_5 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_6;
  tmpvar_6 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(float2(tmpvar_5)));
  half atten_7;
  atten_7 = tmpvar_6.w;
  half3 tmpvar_8;
  tmpvar_8 = _mtl_u._LightColor0.xyz;
  tmpvar_8 = (tmpvar_8 * atten_7);
  half3 viewDir_9;
  viewDir_9 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_9 - ((half)2.0 * 
    (dot (tmpvar_3, viewDir_9) * tmpvar_3)
  )), tmpvar_4);
  tmpvar_10.y = ((half)1.0 - clamp (dot (tmpvar_3, viewDir_9), (half)0.0, (half)1.0));
  half2 tmpvar_11;
  tmpvar_11.x = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10)).x;
  tmpvar_11.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_12;
  tmpvar_12 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_11));
  half4 tmpvar_13;
  tmpvar_13.w = half(1.0);
  tmpvar_13.xyz = (((tmpvar_2 * 
    (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w))
  ) + (
    (tmpvar_12.w * (half)16.0)
   * 
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic))
  )) * (tmpvar_8 * clamp (
    dot (tmpvar_3, tmpvar_4)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_14;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 28 math, 2 textures
Keywords { "DIRECTIONAL" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
ConstBuffer "$Globals" 28
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_LightColor0] 4
VectorHalf 16 [_Color] 4
ScalarHalf 24 [_Metallic]
ScalarHalf 26 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  tmpvar_3 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_4;
  tmpvar_4.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_4.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_4.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half3 tmpvar_5;
  tmpvar_5 = _mtl_u._LightColor0.xyz;
  half3 viewDir_6;
  viewDir_6 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - ((half)2.0 * 
    (dot (tmpvar_3, viewDir_6) * tmpvar_3)
  )), tmpvar_4);
  tmpvar_7.y = ((half)1.0 - clamp (dot (tmpvar_3, viewDir_6), (half)0.0, (half)1.0));
  half2 tmpvar_8;
  tmpvar_8.x = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7)).x;
  tmpvar_8.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_9;
  tmpvar_9 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_8));
  half4 tmpvar_10;
  tmpvar_10.w = half(1.0);
  tmpvar_10.xyz = (((tmpvar_2 * 
    (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w))
  ) + (
    (tmpvar_9.w * (half)16.0)
   * 
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic))
  )) * (tmpvar_5 * clamp (
    dot (tmpvar_3, tmpvar_4)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_11;
  xlat_varoutput_11.xyz = tmpvar_10.xyz;
  xlat_varoutput_11.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_11;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "SPOT" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 36 math, 4 textures
Keywords { "SPOT" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_LightTexture0] 2D 2
SetTexture 3 [_LightTextureB0] 2D 3
ConstBuffer "$Globals" 28
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_LightColor0] 4
VectorHalf 16 [_Color] 4
ScalarHalf 24 [_Metallic]
ScalarHalf 26 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]]
  ,   texture2d<half> _LightTextureB0 [[texture(3)]], sampler _mtlsmp__LightTextureB0 [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  tmpvar_3 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_4;
  tmpvar_4.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_4.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_4.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_5;
  float2 P_6;
  P_6 = ((_mtl_i.xlv_TEXCOORD5.xy / _mtl_i.xlv_TEXCOORD5.w) + 0.5);
  tmpvar_5 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(P_6));
  float tmpvar_7;
  tmpvar_7 = dot (_mtl_i.xlv_TEXCOORD5.xyz, _mtl_i.xlv_TEXCOORD5.xyz);
  half4 tmpvar_8;
  tmpvar_8 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_7)));
  half atten_9;
  atten_9 = half(((float(
    (_mtl_i.xlv_TEXCOORD5.z > 0.0)
  ) * (float)tmpvar_5.w) * (float)tmpvar_8.w));
  half3 tmpvar_10;
  tmpvar_10 = _mtl_u._LightColor0.xyz;
  tmpvar_10 = (tmpvar_10 * atten_9);
  half3 viewDir_11;
  viewDir_11 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - ((half)2.0 * 
    (dot (tmpvar_3, viewDir_11) * tmpvar_3)
  )), tmpvar_4);
  tmpvar_12.y = ((half)1.0 - clamp (dot (tmpvar_3, viewDir_11), (half)0.0, (half)1.0));
  half2 tmpvar_13;
  tmpvar_13.x = ((tmpvar_12 * tmpvar_12) * (tmpvar_12 * tmpvar_12)).x;
  tmpvar_13.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_14;
  tmpvar_14 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_13));
  half4 tmpvar_15;
  tmpvar_15.w = half(1.0);
  tmpvar_15.xyz = (((tmpvar_2 * 
    (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w))
  ) + (
    (tmpvar_14.w * (half)16.0)
   * 
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic))
  )) * (tmpvar_10 * clamp (
    dot (tmpvar_3, tmpvar_4)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_16;
  xlat_varoutput_16.xyz = tmpvar_15.xyz;
  xlat_varoutput_16.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_16;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 31 math, 4 textures
Keywords { "POINT_COOKIE" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_LightTexture0] CUBE 2
SetTexture 3 [_LightTextureB0] 2D 3
ConstBuffer "$Globals" 28
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_LightColor0] 4
VectorHalf 16 [_Color] 4
ScalarHalf 24 [_Metallic]
ScalarHalf 26 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texturecube<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]]
  ,   texture2d<half> _LightTextureB0 [[texture(3)]], sampler _mtlsmp__LightTextureB0 [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  tmpvar_3 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_4;
  tmpvar_4.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_4.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_4.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_5;
  tmpvar_5 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_6;
  tmpvar_6 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_5)));
  half4 tmpvar_7;
  tmpvar_7 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float3)(_mtl_i.xlv_TEXCOORD5));
  half atten_8;
  atten_8 = (tmpvar_6.w * tmpvar_7.w);
  half3 tmpvar_9;
  tmpvar_9 = _mtl_u._LightColor0.xyz;
  tmpvar_9 = (tmpvar_9 * atten_8);
  half3 viewDir_10;
  viewDir_10 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - ((half)2.0 * 
    (dot (tmpvar_3, viewDir_10) * tmpvar_3)
  )), tmpvar_4);
  tmpvar_11.y = ((half)1.0 - clamp (dot (tmpvar_3, viewDir_10), (half)0.0, (half)1.0));
  half2 tmpvar_12;
  tmpvar_12.x = ((tmpvar_11 * tmpvar_11) * (tmpvar_11 * tmpvar_11)).x;
  tmpvar_12.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_13;
  tmpvar_13 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_12));
  half4 tmpvar_14;
  tmpvar_14.w = half(1.0);
  tmpvar_14.xyz = (((tmpvar_2 * 
    (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w))
  ) + (
    (tmpvar_13.w * (half)16.0)
   * 
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic))
  )) * (tmpvar_9 * clamp (
    dot (tmpvar_3, tmpvar_4)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_15;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 29 math, 3 textures
Keywords { "DIRECTIONAL_COOKIE" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_LightTexture0] 2D 2
ConstBuffer "$Globals" 28
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_LightColor0] 4
VectorHalf 16 [_Color] 4
ScalarHalf 24 [_Metallic]
ScalarHalf 26 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float2 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  tmpvar_3 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_4;
  tmpvar_4.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_4.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_4.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_5;
  tmpvar_5 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(_mtl_i.xlv_TEXCOORD5));
  half atten_6;
  atten_6 = tmpvar_5.w;
  half3 tmpvar_7;
  tmpvar_7 = _mtl_u._LightColor0.xyz;
  tmpvar_7 = (tmpvar_7 * atten_6);
  half3 viewDir_8;
  viewDir_8 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_9;
  tmpvar_9.x = dot ((viewDir_8 - ((half)2.0 * 
    (dot (tmpvar_3, viewDir_8) * tmpvar_3)
  )), tmpvar_4);
  tmpvar_9.y = ((half)1.0 - clamp (dot (tmpvar_3, viewDir_8), (half)0.0, (half)1.0));
  half2 tmpvar_10;
  tmpvar_10.x = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9)).x;
  tmpvar_10.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_11;
  tmpvar_11 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_10));
  half4 tmpvar_12;
  tmpvar_12.w = half(1.0);
  tmpvar_12.xyz = (((tmpvar_2 * 
    (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w))
  ) + (
    (tmpvar_11.w * (half)16.0)
   * 
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic))
  )) * (tmpvar_7 * clamp (
    dot (tmpvar_3, tmpvar_4)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_13;
  xlat_varoutput_13.xyz = tmpvar_12.xyz;
  xlat_varoutput_13.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_13;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 40 math, 5 textures
Keywords { "SPOT" "SHADOWS_DEPTH" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_ShadowMapTexture] 2D 2
SetTexture 3 [_LightTexture0] 2D 3
SetTexture 4 [_LightTextureB0] 2D 4
ConstBuffer "$Globals" 36
VectorHalf 0 [_LightShadowData] 4
VectorHalf 8 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 16 [_LightColor0] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::less);
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   depth2d<float> _ShadowMapTexture [[texture(2)]], sampler _mtlsmp__ShadowMapTexture [[sampler(2)]]
  ,   texture2d<half> _LightTexture0 [[texture(3)]], sampler _mtlsmp__LightTexture0 [[sampler(3)]]
  ,   texture2d<half> _LightTextureB0 [[texture(4)]], sampler _mtlsmp__LightTextureB0 [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  tmpvar_3 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_4;
  tmpvar_4.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_4.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_4.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_5;
  float2 P_6;
  P_6 = ((_mtl_i.xlv_TEXCOORD5.xy / _mtl_i.xlv_TEXCOORD5.w) + 0.5);
  tmpvar_5 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(P_6));
  float tmpvar_7;
  tmpvar_7 = dot (_mtl_i.xlv_TEXCOORD5.xyz, _mtl_i.xlv_TEXCOORD5.xyz);
  half4 tmpvar_8;
  tmpvar_8 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_7)));
  half tmpvar_9;
  half shadow_10;
  half tmpvar_11;
  tmpvar_11 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w, (float)(_mtl_i.xlv_TEXCOORD6).z / (float)(_mtl_i.xlv_TEXCOORD6).w);
  shadow_10 = (_mtl_u._LightShadowData.x + (tmpvar_11 * ((half)1.0 - _mtl_u._LightShadowData.x)));
  tmpvar_9 = shadow_10;
  half atten_12;
  atten_12 = half((((
    float((_mtl_i.xlv_TEXCOORD5.z > 0.0))
   * (float)tmpvar_5.w) * (float)tmpvar_8.w) * (float)tmpvar_9));
  half3 tmpvar_13;
  tmpvar_13 = _mtl_u._LightColor0.xyz;
  tmpvar_13 = (tmpvar_13 * atten_12);
  half3 viewDir_14;
  viewDir_14 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_15;
  tmpvar_15.x = dot ((viewDir_14 - ((half)2.0 * 
    (dot (tmpvar_3, viewDir_14) * tmpvar_3)
  )), tmpvar_4);
  tmpvar_15.y = ((half)1.0 - clamp (dot (tmpvar_3, viewDir_14), (half)0.0, (half)1.0));
  half2 tmpvar_16;
  tmpvar_16.x = ((tmpvar_15 * tmpvar_15) * (tmpvar_15 * tmpvar_15)).x;
  tmpvar_16.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_17;
  tmpvar_17 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_16));
  half4 tmpvar_18;
  tmpvar_18.w = half(1.0);
  tmpvar_18.xyz = (((tmpvar_2 * 
    (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w))
  ) + (
    (tmpvar_17.w * (half)16.0)
   * 
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic))
  )) * (tmpvar_13 * clamp (
    dot (tmpvar_3, tmpvar_4)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_19;
  xlat_varoutput_19.xyz = tmpvar_18.xyz;
  xlat_varoutput_19.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 29 math, 3 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_ShadowMapTexture] 2D 2
ConstBuffer "$Globals" 28
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_LightColor0] 4
VectorHalf 16 [_Color] 4
ScalarHalf 24 [_Metallic]
ScalarHalf 26 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(2)]], sampler _mtlsmp__ShadowMapTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  tmpvar_3 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_4;
  tmpvar_4.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_4.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_4.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half tmpvar_5;
  tmpvar_5 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD5).xy / (float)(_mtl_i.xlv_TEXCOORD5).w)).x;
  half atten_6;
  atten_6 = tmpvar_5;
  half3 tmpvar_7;
  tmpvar_7 = _mtl_u._LightColor0.xyz;
  tmpvar_7 = (tmpvar_7 * atten_6);
  half3 viewDir_8;
  viewDir_8 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_9;
  tmpvar_9.x = dot ((viewDir_8 - ((half)2.0 * 
    (dot (tmpvar_3, viewDir_8) * tmpvar_3)
  )), tmpvar_4);
  tmpvar_9.y = ((half)1.0 - clamp (dot (tmpvar_3, viewDir_8), (half)0.0, (half)1.0));
  half2 tmpvar_10;
  tmpvar_10.x = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9)).x;
  tmpvar_10.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_11;
  tmpvar_11 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_10));
  half4 tmpvar_12;
  tmpvar_12.w = half(1.0);
  tmpvar_12.xyz = (((tmpvar_2 * 
    (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w))
  ) + (
    (tmpvar_11.w * (half)16.0)
   * 
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic))
  )) * (tmpvar_7 * clamp (
    dot (tmpvar_3, tmpvar_4)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_13;
  xlat_varoutput_13.xyz = tmpvar_12.xyz;
  xlat_varoutput_13.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_13;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 30 math, 4 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_ShadowMapTexture] 2D 2
SetTexture 3 [_LightTexture0] 2D 3
ConstBuffer "$Globals" 28
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_LightColor0] 4
VectorHalf 16 [_Color] 4
ScalarHalf 24 [_Metallic]
ScalarHalf 26 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float2 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(2)]], sampler _mtlsmp__ShadowMapTexture [[sampler(2)]]
  ,   texture2d<half> _LightTexture0 [[texture(3)]], sampler _mtlsmp__LightTexture0 [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  tmpvar_3 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_4;
  tmpvar_4.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_4.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_4.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_5;
  tmpvar_5 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(_mtl_i.xlv_TEXCOORD5));
  half4 tmpvar_6;
  tmpvar_6 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w));
  half atten_7;
  atten_7 = (tmpvar_5.w * tmpvar_6.x);
  half3 tmpvar_8;
  tmpvar_8 = _mtl_u._LightColor0.xyz;
  tmpvar_8 = (tmpvar_8 * atten_7);
  half3 viewDir_9;
  viewDir_9 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_9 - ((half)2.0 * 
    (dot (tmpvar_3, viewDir_9) * tmpvar_3)
  )), tmpvar_4);
  tmpvar_10.y = ((half)1.0 - clamp (dot (tmpvar_3, viewDir_9), (half)0.0, (half)1.0));
  half2 tmpvar_11;
  tmpvar_11.x = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10)).x;
  tmpvar_11.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_12;
  tmpvar_12 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_11));
  half4 tmpvar_13;
  tmpvar_13.w = half(1.0);
  tmpvar_13.xyz = (((tmpvar_2 * 
    (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w))
  ) + (
    (tmpvar_12.w * (half)16.0)
   * 
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic))
  )) * (tmpvar_8 * clamp (
    dot (tmpvar_3, tmpvar_4)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_14;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 37 math, 4 textures, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_ShadowMapTexture] CUBE 2
SetTexture 3 [_LightTexture0] 2D 3
ConstBuffer "$Globals" 52
Vector 0 [_LightPositionRange]
VectorHalf 16 [_LightShadowData] 4
VectorHalf 24 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 32 [_LightColor0] 4
VectorHalf 40 [_Color] 4
ScalarHalf 48 [_Metallic]
ScalarHalf 50 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texturecube<float> _ShadowMapTexture [[texture(2)]], sampler _mtlsmp__ShadowMapTexture [[sampler(2)]]
  ,   texture2d<half> _LightTexture0 [[texture(3)]], sampler _mtlsmp__LightTexture0 [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic));
  tmpvar_3 = (tmpvar_2 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_6;
  tmpvar_6.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_6.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_6.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_7;
  tmpvar_7 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_8;
  tmpvar_8 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(float2(tmpvar_7)));
  float mydist_9;
  mydist_9 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  float4 tmpvar_10;
  tmpvar_10 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(_mtl_i.xlv_TEXCOORD6));
  half tmpvar_11;
  if ((tmpvar_10.x < mydist_9)) {
    tmpvar_11 = _mtl_u._LightShadowData.x;
  } else {
    tmpvar_11 = half(1.0);
  };
  half3 tmpvar_12;
  tmpvar_12 = _mtl_u._LightColor0.xyz;
  tmpvar_12 = (tmpvar_12 * (tmpvar_8.w * tmpvar_11));
  half3 viewDir_13;
  viewDir_13 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_14;
  tmpvar_14.x = dot ((viewDir_13 - ((half)2.0 * 
    (dot (tmpvar_5, viewDir_13) * tmpvar_5)
  )), tmpvar_6);
  tmpvar_14.y = ((half)1.0 - clamp (dot (tmpvar_5, viewDir_13), (half)0.0, (half)1.0));
  half2 tmpvar_15;
  tmpvar_15.x = ((tmpvar_14 * tmpvar_14) * (tmpvar_14 * tmpvar_14)).x;
  tmpvar_15.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_16;
  tmpvar_16 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_15));
  half4 tmpvar_17;
  tmpvar_17.w = half(1.0);
  tmpvar_17.xyz = ((tmpvar_3 + (
    (tmpvar_16.w * (half)16.0)
   * tmpvar_4)) * (tmpvar_12 * clamp (
    dot (tmpvar_5, tmpvar_6)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_18;
  xlat_varoutput_18.xyz = tmpvar_17.xyz;
  xlat_varoutput_18.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_18;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 38 math, 5 textures, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_ShadowMapTexture] CUBE 2
SetTexture 3 [_LightTexture0] CUBE 3
SetTexture 4 [_LightTextureB0] 2D 4
ConstBuffer "$Globals" 52
Vector 0 [_LightPositionRange]
VectorHalf 16 [_LightShadowData] 4
VectorHalf 24 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 32 [_LightColor0] 4
VectorHalf 40 [_Color] 4
ScalarHalf 48 [_Metallic]
ScalarHalf 50 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texturecube<float> _ShadowMapTexture [[texture(2)]], sampler _mtlsmp__ShadowMapTexture [[sampler(2)]]
  ,   texturecube<half> _LightTexture0 [[texture(3)]], sampler _mtlsmp__LightTexture0 [[sampler(3)]]
  ,   texture2d<half> _LightTextureB0 [[texture(4)]], sampler _mtlsmp__LightTextureB0 [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_2;
  tmpvar_2 = (_mtl_u._Color.xyz * tmpvar_1.xyz);
  half3 tmpvar_3;
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, half3(_mtl_u._Metallic));
  tmpvar_3 = (tmpvar_2 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_6;
  tmpvar_6.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_6.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_6.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_7;
  tmpvar_7 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_8;
  tmpvar_8 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_7)));
  half4 tmpvar_9;
  tmpvar_9 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float3)(_mtl_i.xlv_TEXCOORD5));
  float mydist_10;
  mydist_10 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  float4 tmpvar_11;
  tmpvar_11 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(_mtl_i.xlv_TEXCOORD6));
  half tmpvar_12;
  if ((tmpvar_11.x < mydist_10)) {
    tmpvar_12 = _mtl_u._LightShadowData.x;
  } else {
    tmpvar_12 = half(1.0);
  };
  half3 tmpvar_13;
  tmpvar_13 = _mtl_u._LightColor0.xyz;
  tmpvar_13 = (tmpvar_13 * ((tmpvar_8.w * tmpvar_9.w) * tmpvar_12));
  half3 viewDir_14;
  viewDir_14 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_15;
  tmpvar_15.x = dot ((viewDir_14 - ((half)2.0 * 
    (dot (tmpvar_5, viewDir_14) * tmpvar_5)
  )), tmpvar_6);
  tmpvar_15.y = ((half)1.0 - clamp (dot (tmpvar_5, viewDir_14), (half)0.0, (half)1.0));
  half2 tmpvar_16;
  tmpvar_16.x = ((tmpvar_15 * tmpvar_15) * (tmpvar_15 * tmpvar_15)).x;
  tmpvar_16.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_17;
  tmpvar_17 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_16));
  half4 tmpvar_18;
  tmpvar_18.w = half(1.0);
  tmpvar_18.xyz = ((tmpvar_3 + (
    (tmpvar_17.w * (half)16.0)
   * tmpvar_4)) * (tmpvar_13 * clamp (
    dot (tmpvar_5, tmpvar_6)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_19;
  xlat_varoutput_19.xyz = tmpvar_18.xyz;
  xlat_varoutput_19.w = half(1.0);
  _mtl_o._glesFragData_0 = xlat_varoutput_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 31 math, 3 textures
Keywords { "POINT" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_LightTexture0] 2D 2
ConstBuffer "$Globals" 28
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_LightColor0] 4
VectorHalf 16 [_Color] 4
ScalarHalf 24 [_Metallic]
ScalarHalf 26 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_5;
  tmpvar_5.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_5.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_5.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_6;
  tmpvar_6 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_7;
  tmpvar_7 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(float2(tmpvar_6)));
  half atten_8;
  atten_8 = tmpvar_7.w;
  half3 tmpvar_9;
  tmpvar_9 = _mtl_u._LightColor0.xyz;
  tmpvar_9 = (tmpvar_9 * atten_8);
  half3 viewDir_10;
  viewDir_10 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - ((half)2.0 * 
    (dot (tmpvar_4, viewDir_10) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_11.y = ((half)1.0 - clamp (dot (tmpvar_4, viewDir_10), (half)0.0, (half)1.0));
  half2 tmpvar_12;
  tmpvar_12.x = ((tmpvar_11 * tmpvar_11) * (tmpvar_11 * tmpvar_11)).x;
  tmpvar_12.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_13;
  tmpvar_13 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_12));
  half4 tmpvar_14;
  tmpvar_14.w = half(1.0);
  tmpvar_14.xyz = (((
    (tmpvar_3 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)))
   * tmpvar_1) + (
    (tmpvar_13.w * (half)16.0)
   * 
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic))
  )) * (tmpvar_9 * clamp (
    dot (tmpvar_4, tmpvar_5)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = tmpvar_1;
  _mtl_o._glesFragData_0 = xlat_varoutput_15;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 29 math, 2 textures
Keywords { "DIRECTIONAL" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
ConstBuffer "$Globals" 28
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_LightColor0] 4
VectorHalf 16 [_Color] 4
ScalarHalf 24 [_Metallic]
ScalarHalf 26 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_5;
  tmpvar_5.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_5.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_5.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half3 tmpvar_6;
  tmpvar_6 = _mtl_u._LightColor0.xyz;
  half3 viewDir_7;
  viewDir_7 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_8;
  tmpvar_8.x = dot ((viewDir_7 - ((half)2.0 * 
    (dot (tmpvar_4, viewDir_7) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_8.y = ((half)1.0 - clamp (dot (tmpvar_4, viewDir_7), (half)0.0, (half)1.0));
  half2 tmpvar_9;
  tmpvar_9.x = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8)).x;
  tmpvar_9.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_10;
  tmpvar_10 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_9));
  half4 tmpvar_11;
  tmpvar_11.w = half(1.0);
  tmpvar_11.xyz = (((
    (tmpvar_3 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)))
   * tmpvar_1) + (
    (tmpvar_10.w * (half)16.0)
   * 
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic))
  )) * (tmpvar_6 * clamp (
    dot (tmpvar_4, tmpvar_5)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_12;
  xlat_varoutput_12.xyz = tmpvar_11.xyz;
  xlat_varoutput_12.w = tmpvar_1;
  _mtl_o._glesFragData_0 = xlat_varoutput_12;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "SPOT" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 37 math, 4 textures
Keywords { "SPOT" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_LightTexture0] 2D 2
SetTexture 3 [_LightTextureB0] 2D 3
ConstBuffer "$Globals" 28
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_LightColor0] 4
VectorHalf 16 [_Color] 4
ScalarHalf 24 [_Metallic]
ScalarHalf 26 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]]
  ,   texture2d<half> _LightTextureB0 [[texture(3)]], sampler _mtlsmp__LightTextureB0 [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_5;
  tmpvar_5.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_5.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_5.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_6;
  float2 P_7;
  P_7 = ((_mtl_i.xlv_TEXCOORD5.xy / _mtl_i.xlv_TEXCOORD5.w) + 0.5);
  tmpvar_6 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(P_7));
  float tmpvar_8;
  tmpvar_8 = dot (_mtl_i.xlv_TEXCOORD5.xyz, _mtl_i.xlv_TEXCOORD5.xyz);
  half4 tmpvar_9;
  tmpvar_9 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_8)));
  half atten_10;
  atten_10 = half(((float(
    (_mtl_i.xlv_TEXCOORD5.z > 0.0)
  ) * (float)tmpvar_6.w) * (float)tmpvar_9.w));
  half3 tmpvar_11;
  tmpvar_11 = _mtl_u._LightColor0.xyz;
  tmpvar_11 = (tmpvar_11 * atten_10);
  half3 viewDir_12;
  viewDir_12 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_13;
  tmpvar_13.x = dot ((viewDir_12 - ((half)2.0 * 
    (dot (tmpvar_4, viewDir_12) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_13.y = ((half)1.0 - clamp (dot (tmpvar_4, viewDir_12), (half)0.0, (half)1.0));
  half2 tmpvar_14;
  tmpvar_14.x = ((tmpvar_13 * tmpvar_13) * (tmpvar_13 * tmpvar_13)).x;
  tmpvar_14.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_15;
  tmpvar_15 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_14));
  half4 tmpvar_16;
  tmpvar_16.w = half(1.0);
  tmpvar_16.xyz = (((
    (tmpvar_3 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)))
   * tmpvar_1) + (
    (tmpvar_15.w * (half)16.0)
   * 
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic))
  )) * (tmpvar_11 * clamp (
    dot (tmpvar_4, tmpvar_5)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_17;
  xlat_varoutput_17.xyz = tmpvar_16.xyz;
  xlat_varoutput_17.w = tmpvar_1;
  _mtl_o._glesFragData_0 = xlat_varoutput_17;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 32 math, 4 textures
Keywords { "POINT_COOKIE" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_LightTexture0] CUBE 2
SetTexture 3 [_LightTextureB0] 2D 3
ConstBuffer "$Globals" 28
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_LightColor0] 4
VectorHalf 16 [_Color] 4
ScalarHalf 24 [_Metallic]
ScalarHalf 26 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texturecube<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]]
  ,   texture2d<half> _LightTextureB0 [[texture(3)]], sampler _mtlsmp__LightTextureB0 [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_5;
  tmpvar_5.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_5.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_5.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_6;
  tmpvar_6 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_7;
  tmpvar_7 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_6)));
  half4 tmpvar_8;
  tmpvar_8 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float3)(_mtl_i.xlv_TEXCOORD5));
  half atten_9;
  atten_9 = (tmpvar_7.w * tmpvar_8.w);
  half3 tmpvar_10;
  tmpvar_10 = _mtl_u._LightColor0.xyz;
  tmpvar_10 = (tmpvar_10 * atten_9);
  half3 viewDir_11;
  viewDir_11 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - ((half)2.0 * 
    (dot (tmpvar_4, viewDir_11) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_12.y = ((half)1.0 - clamp (dot (tmpvar_4, viewDir_11), (half)0.0, (half)1.0));
  half2 tmpvar_13;
  tmpvar_13.x = ((tmpvar_12 * tmpvar_12) * (tmpvar_12 * tmpvar_12)).x;
  tmpvar_13.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_14;
  tmpvar_14 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_13));
  half4 tmpvar_15;
  tmpvar_15.w = half(1.0);
  tmpvar_15.xyz = (((
    (tmpvar_3 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)))
   * tmpvar_1) + (
    (tmpvar_14.w * (half)16.0)
   * 
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic))
  )) * (tmpvar_10 * clamp (
    dot (tmpvar_4, tmpvar_5)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_16;
  xlat_varoutput_16.xyz = tmpvar_15.xyz;
  xlat_varoutput_16.w = tmpvar_1;
  _mtl_o._glesFragData_0 = xlat_varoutput_16;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 30 math, 3 textures
Keywords { "DIRECTIONAL_COOKIE" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_LightTexture0] 2D 2
ConstBuffer "$Globals" 28
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_LightColor0] 4
VectorHalf 16 [_Color] 4
ScalarHalf 24 [_Metallic]
ScalarHalf 26 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float2 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _LightTexture0 [[texture(2)]], sampler _mtlsmp__LightTexture0 [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_5;
  tmpvar_5.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_5.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_5.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_6;
  tmpvar_6 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(_mtl_i.xlv_TEXCOORD5));
  half atten_7;
  atten_7 = tmpvar_6.w;
  half3 tmpvar_8;
  tmpvar_8 = _mtl_u._LightColor0.xyz;
  tmpvar_8 = (tmpvar_8 * atten_7);
  half3 viewDir_9;
  viewDir_9 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_9 - ((half)2.0 * 
    (dot (tmpvar_4, viewDir_9) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_10.y = ((half)1.0 - clamp (dot (tmpvar_4, viewDir_9), (half)0.0, (half)1.0));
  half2 tmpvar_11;
  tmpvar_11.x = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10)).x;
  tmpvar_11.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_12;
  tmpvar_12 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_11));
  half4 tmpvar_13;
  tmpvar_13.w = half(1.0);
  tmpvar_13.xyz = (((
    (tmpvar_3 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)))
   * tmpvar_1) + (
    (tmpvar_12.w * (half)16.0)
   * 
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic))
  )) * (tmpvar_8 * clamp (
    dot (tmpvar_4, tmpvar_5)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = tmpvar_1;
  _mtl_o._glesFragData_0 = xlat_varoutput_14;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 41 math, 5 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_ShadowMapTexture] 2D 2
SetTexture 3 [_LightTexture0] 2D 3
SetTexture 4 [_LightTextureB0] 2D 4
ConstBuffer "$Globals" 36
VectorHalf 0 [_LightShadowData] 4
VectorHalf 8 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 16 [_LightColor0] 4
VectorHalf 24 [_Color] 4
ScalarHalf 32 [_Metallic]
ScalarHalf 34 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::less);
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   depth2d<float> _ShadowMapTexture [[texture(2)]], sampler _mtlsmp__ShadowMapTexture [[sampler(2)]]
  ,   texture2d<half> _LightTexture0 [[texture(3)]], sampler _mtlsmp__LightTexture0 [[sampler(3)]]
  ,   texture2d<half> _LightTextureB0 [[texture(4)]], sampler _mtlsmp__LightTextureB0 [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_5;
  tmpvar_5.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_5.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_5.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_6;
  float2 P_7;
  P_7 = ((_mtl_i.xlv_TEXCOORD5.xy / _mtl_i.xlv_TEXCOORD5.w) + 0.5);
  tmpvar_6 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(P_7));
  float tmpvar_8;
  tmpvar_8 = dot (_mtl_i.xlv_TEXCOORD5.xyz, _mtl_i.xlv_TEXCOORD5.xyz);
  half4 tmpvar_9;
  tmpvar_9 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_8)));
  half tmpvar_10;
  half shadow_11;
  half tmpvar_12;
  tmpvar_12 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w, (float)(_mtl_i.xlv_TEXCOORD6).z / (float)(_mtl_i.xlv_TEXCOORD6).w);
  shadow_11 = (_mtl_u._LightShadowData.x + (tmpvar_12 * ((half)1.0 - _mtl_u._LightShadowData.x)));
  tmpvar_10 = shadow_11;
  half atten_13;
  atten_13 = half((((
    float((_mtl_i.xlv_TEXCOORD5.z > 0.0))
   * (float)tmpvar_6.w) * (float)tmpvar_9.w) * (float)tmpvar_10));
  half3 tmpvar_14;
  tmpvar_14 = _mtl_u._LightColor0.xyz;
  tmpvar_14 = (tmpvar_14 * atten_13);
  half3 viewDir_15;
  viewDir_15 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_16;
  tmpvar_16.x = dot ((viewDir_15 - ((half)2.0 * 
    (dot (tmpvar_4, viewDir_15) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_16.y = ((half)1.0 - clamp (dot (tmpvar_4, viewDir_15), (half)0.0, (half)1.0));
  half2 tmpvar_17;
  tmpvar_17.x = ((tmpvar_16 * tmpvar_16) * (tmpvar_16 * tmpvar_16)).x;
  tmpvar_17.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_18;
  tmpvar_18 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_17));
  half4 tmpvar_19;
  tmpvar_19.w = half(1.0);
  tmpvar_19.xyz = (((
    (tmpvar_3 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)))
   * tmpvar_1) + (
    (tmpvar_18.w * (half)16.0)
   * 
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic))
  )) * (tmpvar_14 * clamp (
    dot (tmpvar_4, tmpvar_5)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_20;
  xlat_varoutput_20.xyz = tmpvar_19.xyz;
  xlat_varoutput_20.w = tmpvar_1;
  _mtl_o._glesFragData_0 = xlat_varoutput_20;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 30 math, 3 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_ShadowMapTexture] 2D 2
ConstBuffer "$Globals" 28
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_LightColor0] 4
VectorHalf 16 [_Color] 4
ScalarHalf 24 [_Metallic]
ScalarHalf 26 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float4 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(2)]], sampler _mtlsmp__ShadowMapTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_5;
  tmpvar_5.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_5.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_5.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half tmpvar_6;
  tmpvar_6 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD5).xy / (float)(_mtl_i.xlv_TEXCOORD5).w)).x;
  half atten_7;
  atten_7 = tmpvar_6;
  half3 tmpvar_8;
  tmpvar_8 = _mtl_u._LightColor0.xyz;
  tmpvar_8 = (tmpvar_8 * atten_7);
  half3 viewDir_9;
  viewDir_9 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_9 - ((half)2.0 * 
    (dot (tmpvar_4, viewDir_9) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_10.y = ((half)1.0 - clamp (dot (tmpvar_4, viewDir_9), (half)0.0, (half)1.0));
  half2 tmpvar_11;
  tmpvar_11.x = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10)).x;
  tmpvar_11.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_12;
  tmpvar_12 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_11));
  half4 tmpvar_13;
  tmpvar_13.w = half(1.0);
  tmpvar_13.xyz = (((
    (tmpvar_3 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)))
   * tmpvar_1) + (
    (tmpvar_12.w * (half)16.0)
   * 
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic))
  )) * (tmpvar_8 * clamp (
    dot (tmpvar_4, tmpvar_5)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = tmpvar_1;
  _mtl_o._glesFragData_0 = xlat_varoutput_14;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 31 math, 4 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_ShadowMapTexture] 2D 2
SetTexture 3 [_LightTexture0] 2D 3
ConstBuffer "$Globals" 28
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_LightColor0] 4
VectorHalf 16 [_Color] 4
ScalarHalf 24 [_Metallic]
ScalarHalf 26 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float2 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texture2d<half> _ShadowMapTexture [[texture(2)]], sampler _mtlsmp__ShadowMapTexture [[sampler(2)]]
  ,   texture2d<half> _LightTexture0 [[texture(3)]], sampler _mtlsmp__LightTexture0 [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 tmpvar_5;
  tmpvar_5.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_5.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_5.z = _mtl_i.xlv_TEXCOORD2_2.w;
  half4 tmpvar_6;
  tmpvar_6 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(_mtl_i.xlv_TEXCOORD5));
  half4 tmpvar_7;
  tmpvar_7 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, ((float2)(_mtl_i.xlv_TEXCOORD6).xy / (float)(_mtl_i.xlv_TEXCOORD6).w));
  half atten_8;
  atten_8 = (tmpvar_6.w * tmpvar_7.x);
  half3 tmpvar_9;
  tmpvar_9 = _mtl_u._LightColor0.xyz;
  tmpvar_9 = (tmpvar_9 * atten_8);
  half3 viewDir_10;
  viewDir_10 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - ((half)2.0 * 
    (dot (tmpvar_4, viewDir_10) * tmpvar_4)
  )), tmpvar_5);
  tmpvar_11.y = ((half)1.0 - clamp (dot (tmpvar_4, viewDir_10), (half)0.0, (half)1.0));
  half2 tmpvar_12;
  tmpvar_12.x = ((tmpvar_11 * tmpvar_11) * (tmpvar_11 * tmpvar_11)).x;
  tmpvar_12.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_13;
  tmpvar_13 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_12));
  half4 tmpvar_14;
  tmpvar_14.w = half(1.0);
  tmpvar_14.xyz = (((
    (tmpvar_3 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)))
   * tmpvar_1) + (
    (tmpvar_13.w * (half)16.0)
   * 
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic))
  )) * (tmpvar_9 * clamp (
    dot (tmpvar_4, tmpvar_5)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = tmpvar_1;
  _mtl_o._glesFragData_0 = xlat_varoutput_15;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 38 math, 4 textures, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_ShadowMapTexture] CUBE 2
SetTexture 3 [_LightTexture0] 2D 3
ConstBuffer "$Globals" 52
Vector 0 [_LightPositionRange]
VectorHalf 16 [_LightShadowData] 4
VectorHalf 24 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 32 [_LightColor0] 4
VectorHalf 40 [_Color] 4
ScalarHalf 48 [_Metallic]
ScalarHalf 50 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texturecube<float> _ShadowMapTexture [[texture(2)]], sampler _mtlsmp__ShadowMapTexture [[sampler(2)]]
  ,   texture2d<half> _LightTexture0 [[texture(3)]], sampler _mtlsmp__LightTexture0 [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 diffColor_6;
  diffColor_6 = ((tmpvar_3 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - 
    (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)
  )) * tmpvar_1);
  half3 tmpvar_7;
  tmpvar_7.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_7.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_7.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_8;
  tmpvar_8 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_9;
  tmpvar_9 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(float2(tmpvar_8)));
  float mydist_10;
  mydist_10 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  float4 tmpvar_11;
  tmpvar_11 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(_mtl_i.xlv_TEXCOORD6));
  half tmpvar_12;
  if ((tmpvar_11.x < mydist_10)) {
    tmpvar_12 = _mtl_u._LightShadowData.x;
  } else {
    tmpvar_12 = half(1.0);
  };
  half3 tmpvar_13;
  tmpvar_13 = _mtl_u._LightColor0.xyz;
  tmpvar_13 = (tmpvar_13 * (tmpvar_9.w * tmpvar_12));
  half3 viewDir_14;
  viewDir_14 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_15;
  tmpvar_15.x = dot ((viewDir_14 - ((half)2.0 * 
    (dot (tmpvar_5, viewDir_14) * tmpvar_5)
  )), tmpvar_7);
  tmpvar_15.y = ((half)1.0 - clamp (dot (tmpvar_5, viewDir_14), (half)0.0, (half)1.0));
  half2 tmpvar_16;
  tmpvar_16.x = ((tmpvar_15 * tmpvar_15) * (tmpvar_15 * tmpvar_15)).x;
  tmpvar_16.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_17;
  tmpvar_17 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_16));
  half4 tmpvar_18;
  tmpvar_18.w = half(1.0);
  tmpvar_18.xyz = ((diffColor_6 + (
    (tmpvar_17.w * (half)16.0)
   * tmpvar_4)) * (tmpvar_13 * clamp (
    dot (tmpvar_5, tmpvar_7)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_19;
  xlat_varoutput_19.xyz = tmpvar_18.xyz;
  xlat_varoutput_19.w = tmpvar_1;
  _mtl_o._glesFragData_0 = xlat_varoutput_19;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 39 math, 5 textures, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [unity_NHxRoughness] 2D 0
SetTexture 1 [_MainTex] 2D 1
SetTexture 2 [_ShadowMapTexture] CUBE 2
SetTexture 3 [_LightTexture0] CUBE 3
SetTexture 4 [_LightTextureB0] 2D 4
ConstBuffer "$Globals" 52
Vector 0 [_LightPositionRange]
VectorHalf 16 [_LightShadowData] 4
VectorHalf 24 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 32 [_LightColor0] 4
VectorHalf 40 [_Color] 4
ScalarHalf 48 [_Metallic]
ScalarHalf 50 [_Glossiness]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  half3 xlv_TEXCOORD1;
  half4 xlv_TEXCOORD2;
  half4 xlv_TEXCOORD2_1;
  half4 xlv_TEXCOORD2_2;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  half4 _LightShadowData;
  half4 unity_ColorSpaceDielectricSpec;
  half4 _LightColor0;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> unity_NHxRoughness [[texture(0)]], sampler _mtlsmp_unity_NHxRoughness [[sampler(0)]]
  ,   texture2d<half> _MainTex [[texture(1)]], sampler _mtlsmp__MainTex [[sampler(1)]]
  ,   texturecube<float> _ShadowMapTexture [[texture(2)]], sampler _mtlsmp__ShadowMapTexture [[sampler(2)]]
  ,   texturecube<half> _LightTexture0 [[texture(3)]], sampler _mtlsmp__LightTexture0 [[sampler(3)]]
  ,   texture2d<half> _LightTextureB0 [[texture(4)]], sampler _mtlsmp__LightTextureB0 [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_1 = (tmpvar_2.w * _mtl_u._Color.w);
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 tmpvar_4;
  tmpvar_4 = mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic));
  half3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD2_2.xyz);
  half3 diffColor_6;
  diffColor_6 = ((tmpvar_3 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - 
    (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)
  )) * tmpvar_1);
  half3 tmpvar_7;
  tmpvar_7.x = _mtl_i.xlv_TEXCOORD2.w;
  tmpvar_7.y = _mtl_i.xlv_TEXCOORD2_1.w;
  tmpvar_7.z = _mtl_i.xlv_TEXCOORD2_2.w;
  float tmpvar_8;
  tmpvar_8 = dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD5);
  half4 tmpvar_9;
  tmpvar_9 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_8)));
  half4 tmpvar_10;
  tmpvar_10 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float3)(_mtl_i.xlv_TEXCOORD5));
  float mydist_11;
  mydist_11 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  float4 tmpvar_12;
  tmpvar_12 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(_mtl_i.xlv_TEXCOORD6));
  half tmpvar_13;
  if ((tmpvar_12.x < mydist_11)) {
    tmpvar_13 = _mtl_u._LightShadowData.x;
  } else {
    tmpvar_13 = half(1.0);
  };
  half3 tmpvar_14;
  tmpvar_14 = _mtl_u._LightColor0.xyz;
  tmpvar_14 = (tmpvar_14 * ((tmpvar_9.w * tmpvar_10.w) * tmpvar_13));
  half3 viewDir_15;
  viewDir_15 = -(_mtl_i.xlv_TEXCOORD1);
  half2 tmpvar_16;
  tmpvar_16.x = dot ((viewDir_15 - ((half)2.0 * 
    (dot (tmpvar_5, viewDir_15) * tmpvar_5)
  )), tmpvar_7);
  tmpvar_16.y = ((half)1.0 - clamp (dot (tmpvar_5, viewDir_15), (half)0.0, (half)1.0));
  half2 tmpvar_17;
  tmpvar_17.x = ((tmpvar_16 * tmpvar_16) * (tmpvar_16 * tmpvar_16)).x;
  tmpvar_17.y = ((half)1.0 - _mtl_u._Glossiness);
  half4 tmpvar_18;
  tmpvar_18 = unity_NHxRoughness.sample(_mtlsmp_unity_NHxRoughness, (float2)(tmpvar_17));
  half4 tmpvar_19;
  tmpvar_19.w = half(1.0);
  tmpvar_19.xyz = ((diffColor_6 + (
    (tmpvar_18.w * (half)16.0)
   * tmpvar_4)) * (tmpvar_14 * clamp (
    dot (tmpvar_5, tmpvar_7)
  , (half)0.0, (half)1.0)));
  half4 xlat_varoutput_20;
  xlat_varoutput_20.xyz = tmpvar_19.xyz;
  xlat_varoutput_20.w = tmpvar_1;
  _mtl_o._glesFragData_0 = xlat_varoutput_20;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
}
 }


 // Stats for Vertex shader:
 //       metal : 17 avg math (4..30), 0 avg branch (0..1)
 //      opengl : 4 avg math (1..7), 1 avg texture (0..2), 0 avg branch (0..1)
 // Stats for Fragment shader:
 //       metal : 4 avg math (1..7), 1 avg texture (0..2), 0 avg branch (0..1)
 Pass {
  Name "SHADOWCASTER"
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 515176
Program "vp" {
SubProgram "opengl " {
// Stats: 1 math
Keywords { "SHADOWS_DEPTH" }
"#version 120

#ifdef VERTEX
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_LightShadowBias;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform mat4 unity_MatrixVP;
void main ()
{
  vec3 vertex_1;
  vertex_1 = gl_Vertex.xyz;
  vec4 clipPos_2;
  if ((unity_LightShadowBias.z != 0.0)) {
    vec4 tmpvar_3;
    tmpvar_3.w = 1.0;
    tmpvar_3.xyz = vertex_1;
    vec3 tmpvar_4;
    tmpvar_4 = (unity_ObjectToWorld * tmpvar_3).xyz;
    vec4 v_5;
    v_5.x = unity_WorldToObject[0].x;
    v_5.y = unity_WorldToObject[1].x;
    v_5.z = unity_WorldToObject[2].x;
    v_5.w = unity_WorldToObject[3].x;
    vec4 v_6;
    v_6.x = unity_WorldToObject[0].y;
    v_6.y = unity_WorldToObject[1].y;
    v_6.z = unity_WorldToObject[2].y;
    v_6.w = unity_WorldToObject[3].y;
    vec4 v_7;
    v_7.x = unity_WorldToObject[0].z;
    v_7.y = unity_WorldToObject[1].z;
    v_7.z = unity_WorldToObject[2].z;
    v_7.w = unity_WorldToObject[3].z;
    vec3 tmpvar_8;
    tmpvar_8 = normalize(((
      (v_5.xyz * gl_Normal.x)
     + 
      (v_6.xyz * gl_Normal.y)
    ) + (v_7.xyz * gl_Normal.z)));
    float tmpvar_9;
    tmpvar_9 = dot (tmpvar_8, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_4 * _WorldSpaceLightPos0.w)
    )));
    vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = (tmpvar_4 - (tmpvar_8 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_9 * tmpvar_9)))
    )));
    clipPos_2 = (unity_MatrixVP * tmpvar_10);
  } else {
    vec4 tmpvar_11;
    tmpvar_11.w = 1.0;
    tmpvar_11.xyz = vertex_1;
    clipPos_2 = (gl_ModelViewProjectionMatrix * tmpvar_11);
  };
  vec4 clipPos_12;
  clipPos_12.xyw = clipPos_2.xyw;
  clipPos_12.z = (clipPos_2.z + clamp ((unity_LightShadowBias.x / clipPos_2.w), 0.0, 1.0));
  clipPos_12.z = mix (clipPos_12.z, max (clipPos_12.z, -(clipPos_2.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_12;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "metal " {
// Stats: 28 math, 1 branches
Keywords { "SHADOWS_DEPTH" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
ConstBuffer "$Globals" 288
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 224 [unity_MatrixVP]
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [unity_LightShadowBias]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  float4 unity_LightShadowBias;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4x4 unity_MatrixVP;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 vertex_1;
  vertex_1 = _mtl_i._glesVertex.xyz;
  float4 clipPos_2;
  if ((_mtl_u.unity_LightShadowBias.z != 0.0)) {
    float4 tmpvar_3;
    tmpvar_3.w = 1.0;
    tmpvar_3.xyz = vertex_1;
    float3 tmpvar_4;
    tmpvar_4 = (_mtl_u.unity_ObjectToWorld * tmpvar_3).xyz;
    float4 v_5;
    v_5.x = _mtl_u.unity_WorldToObject[0].x;
    v_5.y = _mtl_u.unity_WorldToObject[1].x;
    v_5.z = _mtl_u.unity_WorldToObject[2].x;
    v_5.w = _mtl_u.unity_WorldToObject[3].x;
    float4 v_6;
    v_6.x = _mtl_u.unity_WorldToObject[0].y;
    v_6.y = _mtl_u.unity_WorldToObject[1].y;
    v_6.z = _mtl_u.unity_WorldToObject[2].y;
    v_6.w = _mtl_u.unity_WorldToObject[3].y;
    float4 v_7;
    v_7.x = _mtl_u.unity_WorldToObject[0].z;
    v_7.y = _mtl_u.unity_WorldToObject[1].z;
    v_7.z = _mtl_u.unity_WorldToObject[2].z;
    v_7.w = _mtl_u.unity_WorldToObject[3].z;
    float3 tmpvar_8;
    tmpvar_8 = normalize(((
      (v_5.xyz * _mtl_i._glesNormal.x)
     + 
      (v_6.xyz * _mtl_i._glesNormal.y)
    ) + (v_7.xyz * _mtl_i._glesNormal.z)));
    float tmpvar_9;
    tmpvar_9 = dot (tmpvar_8, normalize((_mtl_u._WorldSpaceLightPos0.xyz - 
      (tmpvar_4 * _mtl_u._WorldSpaceLightPos0.w)
    )));
    float4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = (tmpvar_4 - (tmpvar_8 * (_mtl_u.unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_9 * tmpvar_9)))
    )));
    clipPos_2 = (_mtl_u.unity_MatrixVP * tmpvar_10);
  } else {
    float4 tmpvar_11;
    tmpvar_11.w = 1.0;
    tmpvar_11.xyz = vertex_1;
    clipPos_2 = (_mtl_u.glstate_matrix_mvp * tmpvar_11);
  };
  float4 clipPos_12;
  clipPos_12.xyw = clipPos_2.xyw;
  clipPos_12.z = (clipPos_2.z + clamp ((_mtl_u.unity_LightShadowBias.x / clipPos_2.w), 0.0, 1.0));
  clipPos_12.z = mix (clipPos_12.z, max (clipPos_12.z, 0.0), _mtl_u.unity_LightShadowBias.y);
  _mtl_o.gl_Position = clipPos_12;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
bool u_xlatb2;
float u_xlat6;
float u_xlat9;
void main()
{
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4unity_ObjectToWorld[3].xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4unity_MatrixVP[3];
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat1 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb2 = unity_LightShadowBias.z!=0.0;
    u_xlat0 = (bool(u_xlatb2)) ? u_xlat0 : u_xlat1;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
layout(location = 0) out vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 4 math
Keywords { "SHADOWS_CUBE" }
"#version 120

#ifdef VERTEX
uniform vec4 _LightPositionRange;

uniform mat4 unity_ObjectToWorld;
varying vec3 xlv_TEXCOORD0;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = gl_Vertex.xyz;
  xlv_TEXCOORD0 = ((unity_ObjectToWorld * gl_Vertex).xyz - _LightPositionRange.xyz);
  gl_Position = (gl_ModelViewProjectionMatrix * tmpvar_1);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 unity_LightShadowBias;
varying vec3 xlv_TEXCOORD0;
void main ()
{
  gl_FragData[0] = vec4(((sqrt(
    dot (xlv_TEXCOORD0, xlv_TEXCOORD0)
  ) + unity_LightShadowBias.x) * _LightPositionRange.w));
}


#endif
"
}
SubProgram "metal " {
// Stats: 4 math
Keywords { "SHADOWS_CUBE" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 144
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Vector 0 [_LightPositionRange]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _mtl_i._glesVertex.xyz;
  _mtl_o.xlv_TEXCOORD0 = ((_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex).xyz - _mtl_u._LightPositionRange.xyz);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * tmpvar_1);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
in  vec4 in_POSITION0;
out vec3 vs_TEXCOORD0;
vec4 u_xlat0;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_LightShadowBias;
in  vec3 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
void main()
{
    u_xlat0 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0 = sqrt(u_xlat0);
    u_xlat0 = u_xlat0 + unity_LightShadowBias.x;
    SV_Target0 = vec4(u_xlat0) * _LightPositionRange.wwww;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 4 math, 2 textures, 1 branches
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_LightShadowBias;

uniform mat4 unity_ObjectToWorld;
uniform mat4 unity_WorldToObject;
uniform mat4 unity_MatrixVP;
uniform vec4 _MainTex_ST;
varying vec2 xlv_TEXCOORD1;
void main ()
{
  vec3 vertex_1;
  vertex_1 = gl_Vertex.xyz;
  vec4 clipPos_2;
  if ((unity_LightShadowBias.z != 0.0)) {
    vec4 tmpvar_3;
    tmpvar_3.w = 1.0;
    tmpvar_3.xyz = vertex_1;
    vec3 tmpvar_4;
    tmpvar_4 = (unity_ObjectToWorld * tmpvar_3).xyz;
    vec4 v_5;
    v_5.x = unity_WorldToObject[0].x;
    v_5.y = unity_WorldToObject[1].x;
    v_5.z = unity_WorldToObject[2].x;
    v_5.w = unity_WorldToObject[3].x;
    vec4 v_6;
    v_6.x = unity_WorldToObject[0].y;
    v_6.y = unity_WorldToObject[1].y;
    v_6.z = unity_WorldToObject[2].y;
    v_6.w = unity_WorldToObject[3].y;
    vec4 v_7;
    v_7.x = unity_WorldToObject[0].z;
    v_7.y = unity_WorldToObject[1].z;
    v_7.z = unity_WorldToObject[2].z;
    v_7.w = unity_WorldToObject[3].z;
    vec3 tmpvar_8;
    tmpvar_8 = normalize(((
      (v_5.xyz * gl_Normal.x)
     + 
      (v_6.xyz * gl_Normal.y)
    ) + (v_7.xyz * gl_Normal.z)));
    float tmpvar_9;
    tmpvar_9 = dot (tmpvar_8, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_4 * _WorldSpaceLightPos0.w)
    )));
    vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = (tmpvar_4 - (tmpvar_8 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_9 * tmpvar_9)))
    )));
    clipPos_2 = (unity_MatrixVP * tmpvar_10);
  } else {
    vec4 tmpvar_11;
    tmpvar_11.w = 1.0;
    tmpvar_11.xyz = vertex_1;
    clipPos_2 = (gl_ModelViewProjectionMatrix * tmpvar_11);
  };
  vec4 clipPos_12;
  clipPos_12.xyw = clipPos_2.xyw;
  clipPos_12.z = (clipPos_2.z + clamp ((unity_LightShadowBias.x / clipPos_2.w), 0.0, 1.0));
  clipPos_12.z = mix (clipPos_12.z, max (clipPos_12.z, -(clipPos_2.w)), unity_LightShadowBias.y);
  xlv_TEXCOORD1 = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  gl_Position = clipPos_12;
}


#endif
#ifdef FRAGMENT
uniform vec4 _Color;
uniform float _Cutoff;
uniform sampler2D _MainTex;
varying vec2 xlv_TEXCOORD1;
void main ()
{
  float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "metal " {
// Stats: 30 math, 1 branches
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "texcoord" ATTR2
ConstBuffer "$Globals" 304
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [unity_ObjectToWorld]
Matrix 160 [unity_WorldToObject]
Matrix 224 [unity_MatrixVP]
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [unity_LightShadowBias]
Vector 288 [_MainTex_ST]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesMultiTexCoord0 [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float2 xlv_TEXCOORD1;
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  float4 unity_LightShadowBias;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4x4 unity_WorldToObject;
  float4x4 unity_MatrixVP;
  float4 _MainTex_ST;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 vertex_1;
  vertex_1 = _mtl_i._glesVertex.xyz;
  float4 clipPos_2;
  if ((_mtl_u.unity_LightShadowBias.z != 0.0)) {
    float4 tmpvar_3;
    tmpvar_3.w = 1.0;
    tmpvar_3.xyz = vertex_1;
    float3 tmpvar_4;
    tmpvar_4 = (_mtl_u.unity_ObjectToWorld * tmpvar_3).xyz;
    float4 v_5;
    v_5.x = _mtl_u.unity_WorldToObject[0].x;
    v_5.y = _mtl_u.unity_WorldToObject[1].x;
    v_5.z = _mtl_u.unity_WorldToObject[2].x;
    v_5.w = _mtl_u.unity_WorldToObject[3].x;
    float4 v_6;
    v_6.x = _mtl_u.unity_WorldToObject[0].y;
    v_6.y = _mtl_u.unity_WorldToObject[1].y;
    v_6.z = _mtl_u.unity_WorldToObject[2].y;
    v_6.w = _mtl_u.unity_WorldToObject[3].y;
    float4 v_7;
    v_7.x = _mtl_u.unity_WorldToObject[0].z;
    v_7.y = _mtl_u.unity_WorldToObject[1].z;
    v_7.z = _mtl_u.unity_WorldToObject[2].z;
    v_7.w = _mtl_u.unity_WorldToObject[3].z;
    float3 tmpvar_8;
    tmpvar_8 = normalize(((
      (v_5.xyz * _mtl_i._glesNormal.x)
     + 
      (v_6.xyz * _mtl_i._glesNormal.y)
    ) + (v_7.xyz * _mtl_i._glesNormal.z)));
    float tmpvar_9;
    tmpvar_9 = dot (tmpvar_8, normalize((_mtl_u._WorldSpaceLightPos0.xyz - 
      (tmpvar_4 * _mtl_u._WorldSpaceLightPos0.w)
    )));
    float4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = (tmpvar_4 - (tmpvar_8 * (_mtl_u.unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_9 * tmpvar_9)))
    )));
    clipPos_2 = (_mtl_u.unity_MatrixVP * tmpvar_10);
  } else {
    float4 tmpvar_11;
    tmpvar_11.w = 1.0;
    tmpvar_11.xyz = vertex_1;
    clipPos_2 = (_mtl_u.glstate_matrix_mvp * tmpvar_11);
  };
  float4 clipPos_12;
  clipPos_12.xyw = clipPos_2.xyw;
  clipPos_12.z = (clipPos_2.z + clamp ((_mtl_u.unity_LightShadowBias.x / clipPos_2.w), 0.0, 1.0));
  clipPos_12.z = mix (clipPos_12.z, max (clipPos_12.z, 0.0), _mtl_u.unity_LightShadowBias.y);
  _mtl_o.xlv_TEXCOORD1 = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  _mtl_o.gl_Position = clipPos_12;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
bool u_xlatb2;
float u_xlat6;
float u_xlat9;
void main()
{
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4unity_ObjectToWorld[3].xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4unity_MatrixVP[3];
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat1 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb2 = unity_LightShadowBias.z!=0.0;
    u_xlat0 = (bool(u_xlatb2)) ? u_xlat0 : u_xlat1;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlatb0 = u_xlat0<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 7 math, 2 textures, 1 branches
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"#version 120

#ifdef VERTEX
uniform vec4 _LightPositionRange;

uniform mat4 unity_ObjectToWorld;
uniform vec4 _MainTex_ST;
varying vec3 xlv_TEXCOORD0;
varying vec2 xlv_TEXCOORD1;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = gl_Vertex.xyz;
  xlv_TEXCOORD0 = ((unity_ObjectToWorld * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD1 = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  gl_Position = (gl_ModelViewProjectionMatrix * tmpvar_1);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 unity_LightShadowBias;
uniform vec4 _Color;
uniform float _Cutoff;
uniform sampler2D _MainTex;
varying vec3 xlv_TEXCOORD0;
varying vec2 xlv_TEXCOORD1;
void main ()
{
  float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(((sqrt(
    dot (xlv_TEXCOORD0, xlv_TEXCOORD0)
  ) + unity_LightShadowBias.x) * _LightPositionRange.w));
}


#endif
"
}
SubProgram "metal " {
// Stats: 6 math
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
Bind "vertex" ATTR0
Bind "texcoord" ATTR1
ConstBuffer "$Globals" 160
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [unity_ObjectToWorld]
Vector 0 [_LightPositionRange]
Vector 144 [_MainTex_ST]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesMultiTexCoord0 [[attribute(1)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float2 xlv_TEXCOORD1;
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 unity_ObjectToWorld;
  float4 _MainTex_ST;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _mtl_i._glesVertex.xyz;
  _mtl_o.xlv_TEXCOORD0 = ((_mtl_u.unity_ObjectToWorld * _mtl_i._glesVertex).xyz - _mtl_u._LightPositionRange.xyz);
  _mtl_o.xlv_TEXCOORD1 = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * tmpvar_1);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec3 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec4 u_xlat0;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
in  vec3 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0 = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlatb0 = u_xlat0<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0 = sqrt(u_xlat0);
    u_xlat0 = u_xlat0 + unity_LightShadowBias.x;
    SV_Target0 = vec4(u_xlat0) * _LightPositionRange.wwww;
    return;
}
#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "SHADOWS_DEPTH" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 1 math
Keywords { "SHADOWS_DEPTH" }
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  _mtl_o._glesFragData_0 = half4(float4(0.0, 0.0, 0.0, 0.0));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "SHADOWS_CUBE" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 4 math
Keywords { "SHADOWS_CUBE" }
ConstBuffer "$Globals" 32
Vector 0 [_LightPositionRange]
Vector 16 [unity_LightShadowBias]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  float4 unity_LightShadowBias;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = float4(((sqrt(
    dot (_mtl_i.xlv_TEXCOORD0, _mtl_i.xlv_TEXCOORD0)
  ) + _mtl_u.unity_LightShadowBias.x) * _mtl_u._LightPositionRange.w));
  tmpvar_1 = half4(tmpvar_2);
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SHADOWS_CUBE" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 4 math, 2 textures, 1 branches
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
ConstBuffer "$Globals" 10
VectorHalf 0 [_Color] 4
ScalarHalf 8 [_Cutoff]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float2 xlv_TEXCOORD1;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _Color;
  half _Cutoff;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD1));
  half x_2;
  x_2 = ((tmpvar_1.w * _mtl_u._Color.w) - _mtl_u._Cutoff);
  if ((x_2 < (half)0.0)) {
    discard_fragment();
  };
  _mtl_o._glesFragData_0 = half4(float4(0.0, 0.0, 0.0, 0.0));
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 7 math, 2 textures, 1 branches
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
SetTexture 0 [_MainTex] 2D 0
ConstBuffer "$Globals" 42
Vector 0 [_LightPositionRange]
Vector 16 [unity_LightShadowBias]
VectorHalf 32 [_Color] 4
ScalarHalf 40 [_Cutoff]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float2 xlv_TEXCOORD1;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _LightPositionRange;
  float4 unity_LightShadowBias;
  half4 _Color;
  half _Cutoff;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD1));
  half x_3;
  x_3 = ((tmpvar_2.w * _mtl_u._Color.w) - _mtl_u._Cutoff);
  if ((x_3 < (half)0.0)) {
    discard_fragment();
  };
  float4 tmpvar_4;
  tmpvar_4 = float4(((sqrt(
    dot (_mtl_i.xlv_TEXCOORD0, _mtl_i.xlv_TEXCOORD0)
  ) + _mtl_u.unity_LightShadowBias.x) * _mtl_u._LightPositionRange.w));
  tmpvar_1 = half4(tmpvar_4);
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"// shader disassembly not supported on glcore"
}
}
 }


 // Stats for Vertex shader:
 //       metal : 17 math, 5 branch
 //      opengl : 30 avg math (28..32), 1 avg texture (1..2), 3 branch
 // Stats for Fragment shader:
 //       metal : 30 avg math (28..32), 1 avg texture (1..2), 3 branch
 Pass {
  Name "META"
  Tags { "LIGHTMODE"="Meta" "RenderType"="Opaque" "PerformanceChecks"="False" }
  Cull Off
  GpuProgramID 528604
Program "vp" {
SubProgram "opengl " {
// Stats: 28 math, 1 textures, 3 branches
"#version 120

#ifdef VERTEX

uniform vec4 unity_LightmapST;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform bvec4 unity_MetaVertexControl;
varying vec4 xlv_TEXCOORD0;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 vertex_3;
  vertex_3 = gl_Vertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((gl_MultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    float tmpvar_4;
    if ((gl_Vertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (gl_ModelViewProjectionMatrix * tmpvar_7);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  xlv_TEXCOORD0 = texcoord_8;
  gl_Position = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform bvec4 unity_MetaFragmentControl;
uniform float unity_OneOverOutputBoost;
uniform float unity_MaxOutputValue;
uniform float unity_UseLinearSpace;
varying vec4 xlv_TEXCOORD0;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 res_2;
  float tmpvar_3;
  tmpvar_3 = (1.0 - _Glossiness);
  res_2 = ((tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) + ((
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic))
   * tmpvar_3) * (tmpvar_3 * 0.5)));
  vec4 res_4;
  res_4 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    vec4 tmpvar_5;
    tmpvar_5.w = 1.0;
    tmpvar_5.xyz = res_2;
    res_4.w = tmpvar_5.w;
    res_4.xyz = clamp (pow (res_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
  };
  if (unity_MetaFragmentControl.y) {
    vec3 emission_6;
    if (bool(unity_UseLinearSpace)) {
      emission_6 = vec3(0.0, 0.0, 0.0);
    } else {
      emission_6 = vec3(0.0, 0.0, 0.0);
    };
    vec4 rgbm_7;
    vec4 tmpvar_8;
    tmpvar_8.w = 1.0;
    tmpvar_8.xyz = (emission_6 * 0.01030928);
    rgbm_7.xyz = tmpvar_8.xyz;
    rgbm_7.w = max (max (tmpvar_8.x, tmpvar_8.y), max (tmpvar_8.z, 0.02));
    rgbm_7.w = (ceil((rgbm_7.w * 255.0)) / 255.0);
    rgbm_7.w = max (rgbm_7.w, 0.02);
    rgbm_7.xyz = (tmpvar_8.xyz / rgbm_7.w);
    res_4 = rgbm_7;
  };
  gl_FragData[0] = res_4;
}


#endif
"
}
SubProgram "metal " {
// Stats: 17 math, 5 branches
Bind "vertex" ATTR0
Bind "texcoord" ATTR1
Bind "texcoord1" ATTR2
Bind "texcoord2" ATTR3
ConstBuffer "$Globals" 136
Matrix 0 [glstate_matrix_mvp]
Vector 64 [unity_LightmapST]
Vector 80 [unity_DynamicLightmapST]
Vector 96 [_MainTex_ST]
Vector 112 [_DetailAlbedoMap_ST]
ScalarHalf 128 [_UVSec]
VectorBool 132 [unity_MetaVertexControl] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesMultiTexCoord0 [[attribute(1)]];
  float4 _glesMultiTexCoord1 [[attribute(2)]];
  float4 _glesMultiTexCoord2 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4 unity_LightmapST;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  bool4 unity_MetaVertexControl;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float2 tmpvar_1;
  tmpvar_1 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord1.xy;
  float4 vertex_3;
  vertex_3 = _mtl_i._glesVertex;
  if (_mtl_u.unity_MetaVertexControl.x) {
    vertex_3.xy = ((_mtl_i._glesMultiTexCoord1.xy * _mtl_u.unity_LightmapST.xy) + _mtl_u.unity_LightmapST.zw);
    float tmpvar_4;
    if ((_mtl_i._glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (_mtl_u.unity_MetaVertexControl.y) {
    vertex_3.xy = ((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw);
    float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  float4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (_mtl_u.glstate_matrix_mvp * tmpvar_7);
  float4 texcoord_8;
  texcoord_8.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_9;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  _mtl_o.xlv_TEXCOORD0 = texcoord_8;
  _mtl_o.gl_Position = tmpvar_6;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	bvec4 unity_MetaVertexControl;
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
out vec4 vs_TEXCOORD0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat1 = hlslcc_mtx4glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform  sampler2D _MainTex;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = (-_Glossiness) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = _Color.xyz * u_xlat10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat6 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat6 = unity_OneOverOutputBoost;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 0.0235294122) : u_xlat0;
    return;
}
#endif
"
}
SubProgram "opengl " {
// Stats: 32 math, 2 textures, 3 branches
Keywords { "_EMISSION" }
"#version 120

#ifdef VERTEX

uniform vec4 unity_LightmapST;
uniform vec4 unity_DynamicLightmapST;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform bvec4 unity_MetaVertexControl;
varying vec4 xlv_TEXCOORD0;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 vertex_3;
  vertex_3 = gl_Vertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((gl_MultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    float tmpvar_4;
    if ((gl_Vertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((gl_MultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (gl_ModelViewProjectionMatrix * tmpvar_7);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  xlv_TEXCOORD0 = texcoord_8;
  gl_Position = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform bvec4 unity_MetaFragmentControl;
uniform float unity_OneOverOutputBoost;
uniform float unity_MaxOutputValue;
uniform float unity_UseLinearSpace;
varying vec4 xlv_TEXCOORD0;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 res_2;
  float tmpvar_3;
  tmpvar_3 = (1.0 - _Glossiness);
  res_2 = ((tmpvar_1 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) + ((
    mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_1, vec3(_Metallic))
   * tmpvar_3) * (tmpvar_3 * 0.5)));
  vec3 tmpvar_4;
  tmpvar_4 = (texture2D (_EmissionMap, xlv_TEXCOORD0.xy).xyz * _EmissionColor.xyz);
  vec4 res_5;
  res_5 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    vec4 tmpvar_6;
    tmpvar_6.w = 1.0;
    tmpvar_6.xyz = res_2;
    res_5.w = tmpvar_6.w;
    res_5.xyz = clamp (pow (res_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
  };
  if (unity_MetaFragmentControl.y) {
    vec3 emission_7;
    if (bool(unity_UseLinearSpace)) {
      emission_7 = tmpvar_4;
    } else {
      emission_7 = (tmpvar_4 * ((tmpvar_4 * 
        ((tmpvar_4 * 0.305306) + 0.6821711)
      ) + 0.01252288));
    };
    vec4 rgbm_8;
    vec4 tmpvar_9;
    tmpvar_9.w = 1.0;
    tmpvar_9.xyz = (emission_7 * 0.01030928);
    rgbm_8.xyz = tmpvar_9.xyz;
    rgbm_8.w = max (max (tmpvar_9.x, tmpvar_9.y), max (tmpvar_9.z, 0.02));
    rgbm_8.w = (ceil((rgbm_8.w * 255.0)) / 255.0);
    rgbm_8.w = max (rgbm_8.w, 0.02);
    rgbm_8.xyz = (tmpvar_9.xyz / rgbm_8.w);
    res_5 = rgbm_8;
  };
  gl_FragData[0] = res_5;
}


#endif
"
}
SubProgram "metal " {
// Stats: 17 math, 5 branches
Keywords { "_EMISSION" }
Bind "vertex" ATTR0
Bind "texcoord" ATTR1
Bind "texcoord1" ATTR2
Bind "texcoord2" ATTR3
ConstBuffer "$Globals" 136
Matrix 0 [glstate_matrix_mvp]
Vector 64 [unity_LightmapST]
Vector 80 [unity_DynamicLightmapST]
Vector 96 [_MainTex_ST]
Vector 112 [_DetailAlbedoMap_ST]
ScalarHalf 128 [_UVSec]
VectorBool 132 [unity_MetaVertexControl] 4
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesMultiTexCoord0 [[attribute(1)]];
  float4 _glesMultiTexCoord1 [[attribute(2)]];
  float4 _glesMultiTexCoord2 [[attribute(3)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4 unity_LightmapST;
  float4 unity_DynamicLightmapST;
  float4 _MainTex_ST;
  float4 _DetailAlbedoMap_ST;
  half _UVSec;
  bool4 unity_MetaVertexControl;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float2 tmpvar_1;
  tmpvar_1 = _mtl_i._glesMultiTexCoord0.xy;
  float2 tmpvar_2;
  tmpvar_2 = _mtl_i._glesMultiTexCoord1.xy;
  float4 vertex_3;
  vertex_3 = _mtl_i._glesVertex;
  if (_mtl_u.unity_MetaVertexControl.x) {
    vertex_3.xy = ((_mtl_i._glesMultiTexCoord1.xy * _mtl_u.unity_LightmapST.xy) + _mtl_u.unity_LightmapST.zw);
    float tmpvar_4;
    if ((_mtl_i._glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (_mtl_u.unity_MetaVertexControl.y) {
    vertex_3.xy = ((_mtl_i._glesMultiTexCoord2.xy * _mtl_u.unity_DynamicLightmapST.xy) + _mtl_u.unity_DynamicLightmapST.zw);
    float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  float4 tmpvar_6;
  float4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (_mtl_u.glstate_matrix_mvp * tmpvar_7);
  float4 texcoord_8;
  texcoord_8.xy = ((_mtl_i._glesMultiTexCoord0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  float2 tmpvar_9;
  if ((_mtl_u._UVSec == (half)0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _mtl_u._DetailAlbedoMap_ST.xy) + _mtl_u._DetailAlbedoMap_ST.zw);
  _mtl_o.xlv_TEXCOORD0 = texcoord_8;
  _mtl_o.gl_Position = tmpvar_6;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "_EMISSION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
uniform 	bvec4 unity_MetaVertexControl;
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
in  vec2 in_TEXCOORD2;
out vec4 vs_TEXCOORD0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat1 = hlslcc_mtx4glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    return;
}
#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	vec4 _EmissionColor;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float unity_UseLinearSpace;
uniform  sampler2D _MainTex;
uniform  sampler2D _EmissionMap;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
float u_xlat10;
bool u_xlatb10;
void main()
{
    u_xlat0.x = (-_Glossiness) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xyz = _Color.xyz * u_xlat10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat9 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat9 = unity_OneOverOutputBoost;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat10_1 = texture(_EmissionMap, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.010309278, 0.010309278, 0.010309278);
    u_xlat10 = max(u_xlat1.y, u_xlat1.x);
    u_xlat2.x = max(u_xlat1.z, 0.0199999996);
    u_xlat10 = max(u_xlat10, u_xlat2.x);
    u_xlat10 = u_xlat10 * 255.0;
    u_xlat10 = ceil(u_xlat10);
    u_xlat2.w = u_xlat10 * 0.00392156886;
    u_xlat2.xyz = u_xlat1.xyz / u_xlat2.www;
    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat2 : u_xlat0;
    return;
}
#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 28 math, 1 textures, 3 branches
SetTexture 0 [_MainTex] 2D 0
ConstBuffer "$Globals" 36
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_Color] 4
ScalarHalf 16 [_Metallic]
ScalarHalf 18 [_Glossiness]
VectorBool 20 [unity_MetaFragmentControl] 4
Float 24 [unity_OneOverOutputBoost]
Float 28 [unity_MaxOutputValue]
Float 32 [unity_UseLinearSpace]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  bool4 unity_MetaFragmentControl;
  float unity_OneOverOutputBoost;
  float unity_MaxOutputValue;
  float unity_UseLinearSpace;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 res_4;
  half tmpvar_5;
  tmpvar_5 = ((half)1.0 - _mtl_u._Glossiness);
  res_4 = ((tmpvar_3 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - 
    (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)
  )) + ((
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic))
   * tmpvar_5) * (tmpvar_5 * (half)0.5)));
  half4 res_6;
  res_6 = half4(float4(0.0, 0.0, 0.0, 0.0));
  if (_mtl_u.unity_MetaFragmentControl.x) {
    half4 tmpvar_7;
    tmpvar_7.w = half(1.0);
    tmpvar_7.xyz = res_4;
    res_6.w = tmpvar_7.w;
    float3 tmpvar_8;
    tmpvar_8 = clamp (pow ((float3)res_4, float3(clamp (_mtl_u.unity_OneOverOutputBoost, 0.0, 1.0))), float3(0.0, 0.0, 0.0), float3(_mtl_u.unity_MaxOutputValue));
    res_6.xyz = half3(tmpvar_8);
  };
  if (_mtl_u.unity_MetaFragmentControl.y) {
    half3 emission_9;
    if (bool(_mtl_u.unity_UseLinearSpace)) {
      emission_9 = half3(float3(0.0, 0.0, 0.0));
    } else {
      emission_9 = half3(float3(0.0, 0.0, 0.0));
    };
    half4 tmpvar_10;
    float4 rgbm_11;
    float4 tmpvar_12;
    tmpvar_12.w = 1.0;
    tmpvar_12.xyz = ((float3)(emission_9 * (half)0.01030928));
    rgbm_11.xyz = tmpvar_12.xyz;
    rgbm_11.w = max (max (tmpvar_12.x, tmpvar_12.y), max (tmpvar_12.z, 0.02));
    rgbm_11.w = (ceil((rgbm_11.w * 255.0)) / 255.0);
    rgbm_11.w = max (rgbm_11.w, 0.02);
    rgbm_11.xyz = (tmpvar_12.xyz / rgbm_11.w);
    tmpvar_10 = half4(rgbm_11);
    res_6 = tmpvar_10;
  };
  tmpvar_1 = float4(res_6);
  _mtl_o._glesFragData_0 = half4(tmpvar_1);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
"// shader disassembly not supported on glcore"
}
SubProgram "opengl " {
Keywords { "_EMISSION" }
"// shader disassembly not supported on opengl"
}
SubProgram "metal " {
// Stats: 32 math, 2 textures, 3 branches
Keywords { "_EMISSION" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_EmissionMap] 2D 1
ConstBuffer "$Globals" 48
VectorHalf 0 [unity_ColorSpaceDielectricSpec] 4
VectorHalf 8 [_Color] 4
ScalarHalf 16 [_Metallic]
ScalarHalf 18 [_Glossiness]
VectorHalf 24 [_EmissionColor] 4
VectorBool 32 [unity_MetaFragmentControl] 4
Float 36 [unity_OneOverOutputBoost]
Float 40 [unity_MaxOutputValue]
Float 44 [unity_UseLinearSpace]
"#include <metal_stdlib>
#pragma clang diagnostic ignored "-Wparentheses-equality"
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 unity_ColorSpaceDielectricSpec;
  half4 _Color;
  half _Metallic;
  half _Glossiness;
  half4 _EmissionColor;
  bool4 unity_MetaFragmentControl;
  float unity_OneOverOutputBoost;
  float unity_MaxOutputValue;
  float unity_UseLinearSpace;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _EmissionMap [[texture(1)]], sampler _mtlsmp__EmissionMap [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  half4 tmpvar_2;
  tmpvar_2 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  half3 tmpvar_3;
  tmpvar_3 = (_mtl_u._Color.xyz * tmpvar_2.xyz);
  half3 res_4;
  half tmpvar_5;
  tmpvar_5 = ((half)1.0 - _mtl_u._Glossiness);
  res_4 = ((tmpvar_3 * (_mtl_u.unity_ColorSpaceDielectricSpec.w - 
    (_mtl_u._Metallic * _mtl_u.unity_ColorSpaceDielectricSpec.w)
  )) + ((
    mix (_mtl_u.unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, half3(_mtl_u._Metallic))
   * tmpvar_5) * (tmpvar_5 * (half)0.5)));
  half3 tmpvar_6;
  half4 tmpvar_7;
  tmpvar_7 = _EmissionMap.sample(_mtlsmp__EmissionMap, (float2)(_mtl_i.xlv_TEXCOORD0.xy));
  tmpvar_6 = (tmpvar_7.xyz * _mtl_u._EmissionColor.xyz);
  half4 res_8;
  res_8 = half4(float4(0.0, 0.0, 0.0, 0.0));
  if (_mtl_u.unity_MetaFragmentControl.x) {
    half4 tmpvar_9;
    tmpvar_9.w = half(1.0);
    tmpvar_9.xyz = res_4;
    res_8.w = tmpvar_9.w;
    float3 tmpvar_10;
    tmpvar_10 = clamp (pow ((float3)res_4, float3(clamp (_mtl_u.unity_OneOverOutputBoost, 0.0, 1.0))), float3(0.0, 0.0, 0.0), float3(_mtl_u.unity_MaxOutputValue));
    res_8.xyz = half3(tmpvar_10);
  };
  if (_mtl_u.unity_MetaFragmentControl.y) {
    half3 emission_11;
    if (bool(_mtl_u.unity_UseLinearSpace)) {
      emission_11 = tmpvar_6;
    } else {
      emission_11 = (tmpvar_6 * ((tmpvar_6 * 
        ((tmpvar_6 * (half)0.305306) + (half)0.6821711)
      ) + (half)0.01252288));
    };
    half4 tmpvar_12;
    float4 rgbm_13;
    float4 tmpvar_14;
    tmpvar_14.w = 1.0;
    tmpvar_14.xyz = ((float3)(emission_11 * (half)0.01030928));
    rgbm_13.xyz = tmpvar_14.xyz;
    rgbm_13.w = max (max (tmpvar_14.x, tmpvar_14.y), max (tmpvar_14.z, 0.02));
    rgbm_13.w = (ceil((rgbm_13.w * 255.0)) / 255.0);
    rgbm_13.w = max (rgbm_13.w, 0.02);
    rgbm_13.xyz = (tmpvar_14.xyz / rgbm_13.w);
    tmpvar_12 = half4(rgbm_13);
    res_8 = tmpvar_12;
  };
  tmpvar_1 = float4(res_8);
  _mtl_o._glesFragData_0 = half4(tmpvar_1);
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "_EMISSION" }
"// shader disassembly not supported on glcore"
}
}
 }
}
CustomEditor "StandardShaderGUI"
Fallback "VertexLit"
}